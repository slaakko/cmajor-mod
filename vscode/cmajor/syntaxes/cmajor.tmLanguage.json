{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cmajor",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#classes"
		},
		{
			"include": "#class-delegates"
		},
		{
			"include": "#namespaces"
		},
		{
			"include": "#enum-types"
		},
		{
			"include": "#enum-block"
		},
		{
			"include": "#concepts"
		},
		{
			"include": "#new-expr"
		},
		{
			"include": "#function-name"
		},
		{
			"include": "#function-template-name"
		},
		{
			"include": "#class-template-name"
		},
		{
			"include": "#template-param-list"
		},
		{
			"include": "#typedefs"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include" : "#numbers"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#common-types"
		},
		{
			"include": "#const-type-expr"
		},
		{
			"include": "#ref-or-ptr-type-expr"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.cmajor",
					"match": "\\b(auto|bool|sbyte|byte|short|ushort|int|uint|long|ulong|float|double|char|wchar|uchar|void|true|false|cast|interface|namespace|using|static|extern|as|is|explicit|delegate|inline|cdecl|nothrow|public|protected|private|internal|virtual|abstract|override|suppress|winapi|operator|typedef|typename|typeid|const|constexpr|null|this|base|construct|destroy|new|delete|sizeof|try|catch|throw|concept|where|axiom|and|or|unit_test)\\b"
				},
				{
					"name": "keyword.control.cmajor",
					"match": "\\b(return|if|else|switch|case|default|while|do|for|break|continue|goto)\\b"
				}
			]
		},
		"concepts": {
			"patterns": [
				{
					"name": "entity.name.class.cmajor",
					"match": "(?<=concept)\\s+[_[:alpha:]][_[:alnum:]]*"
				}
			]
		},
		"namespaces": {
			"patterns": [
				{
					"name": "entity.name.class.cmajor",
					"match": "(?<=(using|namespace))\\s+[_[:alpha:]][_[:alnum:]]*(\\.[_[:alpha:]][_[:alnum:]]*)*"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#type-builtin"
				},
				{
					"include": "#type-name"
				}
			]
		},
		"type-builtin": {
			"patterns": [
				{
					"name": "keyword.other.type.cmajor",
					"match": "\\b(auto|bool|sbyte|byte|short|ushort|int|uint|long|ulong|float|double|char|wchar|uchar|void)\\b"
				}
			]
		},
		"type-name": {
			"patterns": [
				{
					"match": "[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.cmajor"
				}
			]
		},
		"enum-types": {
			"patterns": [
				{
					"name": "entity.name.type.cmajor",
					"match": "(?<=enum)\\s+[_[:alpha:]][_[:alnum:]]*"
				}
			]
		},
		"classes" : {
			"begin": "\\b(class)\\b\\s+(?!delegate)([_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.cmajor"
				},
				"2": {
					"name": "entity.name.type.cmajor"
				}
			},
			"end": "\\{",
			"patterns": [
				{
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "punctuation.separator.colon.cmajor"
						}
					},
					"end": "(?=\\{)",
					"patterns": [
						{
							"name": "entity.name.type.cmajor",
							"match": "[_[:alpha:]][_[:alnum:]]*"
						}
					]
				}
			]
		},
		"class-delegates" : {
			"patterns": [
				{
					"name": "keyword.other.cmajor",
					"match": "\\b(class)\\b\\s+\\b(delegate)\\b"
				}
			]
		},
		"enum-block": {
			"begin": "\\b(enum)\\b\\s+([_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.cmajor"
				},
				"2": {
					"name": "entity.name.type.cmajor"
				}
			},
			"end": "\\}",
			"patterns": [
				{
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "punctuation.separator.colon.cmajor"
						}
					},
					"end": "(?=\\{)",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "entity.name.variable.enum-member.cmajor",
					"match": "[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#numbers"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.cmajor",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.cmajor",
					"match": "\\\\."
				}
			]
		},
		"chars": {
			"name": "string.quoted.single.cmajor",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.cmajor",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.cmajor",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"name": "comment.line.double-slash.cmajor",
					"begin": "//",
					"end": "$"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.cmajor",
					"match": "[0-9]+(\\.[0-9]+(\\+|-)?[0-9]+)?(u|f)?"
				}
			]
		},
		"new-expr": {
			"patterns": [
				{
					"name": "entity.name.type.cmajor",
					"match": "(?<=\\bnew\\b\\s+)[_[:alpha:]][_[:alnum:]]*"
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"name": "entity.name.function.cmajor",
					"match": "[_[:alpha:]][_[:alnum:]]*(?=\\()"
				}
			]
		},
		"function-template-name": {
			"patterns": [
				{
					"name": "entity.name.function.cmajor",
					"match": "[_[:alpha:]][_[:alnum:]]*(?=<.*>\\()"
				}
			]
		},
		"class-template-name": {
			"patterns": [
				{
					"name": "entity.name.type.cmajor",
					"match": "[_[:alpha:]][_[:alnum:]]*(?=<)"
				}
			]
		},
		"template-param-list": {
			"patterns": [
				{
					"match": "(<)\\b(auto|bool|sbyte|byte|short|ushort|int|uint|long|ulong|float|double|char|wchar|uchar|void)\\b|([_[:alpha:]][_[:alnum:]]*)(>)",
					"captures": {
						"1": {
							"name": "keyword.control.less.cmajor"
						},
						"2": {
							"name": "keyword.other.cmajor"
						},
						"3": {
							"name": "entity.name.type.cmajor"
						},
						"4": {
							"name": "keyword.control.greater.cmajor"
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.cmajor",
					"match": "(?:==|!=|<<|>>|=|<|>|!|&&|\\|\\||&|\\|)"
				}
			]
		},
		"common-types": {
			"patterns": [
				{
					"name": "entity.name.type.cmajor",
					"match": "\\b(string|wstring|ustring)\\b"
				}
			]
		},
		"const-type-expr": {
			"patterns": [
				{
					"match": "(?<=\\b(const)\\b\\s+)([_[:alpha:]][_[:alnum:]]*)",
					"name": "entity.name.type.cmajor"
				}
			]
		},
		"ref-or-ptr-type-expr": {
			"patterns": [
				{
					"name": "entity.name.type.cmajor",
					"match": "[_[:alpha:]][_[:alnum:]]*(?=(&|&&|\\*))"
				}
			]
		},
		"typedefs": {
			"patterns": [
				{
					"match": "(?<=\\btypedef\\b)\\s+([_[:alpha:]][_[:alnum:]]*)\\s+([_[:alpha:]][_[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "entity.name.type.cmajor"
						},
						"2": {
							"name": "entity.name.type.cmajor"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.cmajor"
}