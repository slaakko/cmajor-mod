using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Set<int> MakeSet(const List<int>& x)
{
    Set<int> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(x[i]);
    }
    return s;
}

public void PrintList(const List<int>& x)
{
    for (int i = 0; i < x.Count(); ++i)
    {
        if (i > 0)
        {
            Console.Write(", ");
        }
        Console.Write(x[i]);
    }
    Console.WriteLine();
}

public void PrintSet(const Set<int>& s)
{
    Console.WriteLine("count=" + ToString(s.Count()));
    bool first = true;
    for (const auto& x : s)
    {
        if (first)
        {
            first = false;
        }
        else
        {
            Console.Write(", ");
        }
        Console.Write(x);
    }
    Console.WriteLine();
}

public Set<int> Return(const Set<int>& x)
{
    return x;
}

void main()
{
    for (int i = 0; i < 8; ++i)
    {
        List<int> p = MakeList(i);
        do
        {
            PrintList(p);
            Set<int> x0 = MakeSet(p);
            PrintSet(x0);
            if (i == 0)
            {
                #assert(x0.IsEmpty());
                #assert(x0.Count() == 0);
            }
            else
            {
                #assert(!x0.IsEmpty());
                #assert(x0.Count() == i);
            }
            #assert(x0 == x0);
            Set<int> x1(x0);
            #assert(x1.IsEmpty() == x0.IsEmpty());
            #assert(x1.Count() == x0.Count());
            #assert(x1 == x0);
            Set<int> x2;
            x2 = x0;
            #assert(x2.IsEmpty() == x0.IsEmpty());
            #assert(x2.Count() == x0.Count());
            #assert(x2 == x0);
            Set<int> xcopy0(x0);
            Set<int> x3(Rvalue(xcopy0));
            #assert(x3.IsEmpty() == x0.IsEmpty());
            #assert(x3.Count() == x0.Count());
            #assert(x3 == x0);
            Set<int> xcopy1(x0);
            Set<int> x4;
            x4 = Rvalue(xcopy1);
            #assert(x4.IsEmpty() == x0.IsEmpty());
            #assert(x4.Count() == x0.Count());
            #assert(x4 == x0);
            Set<int> x5 = Return(x0);
            #assert(x5.IsEmpty() == x0.IsEmpty());
            #assert(x5.Count() == x0.Count());
            #assert(x5 == x0);
        }
        while (NextPermutation(p.Begin(), p.End()));
    }
}
