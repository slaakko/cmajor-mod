using System;
using System.IO;

void memory_streawm_test()
{
    MemoryStream memoryStream;
    StreamWriter writer(&memoryStream);
    string value1 = "alpha";
    auto result1 = writer.WriteLine(value1);
    #assert(!result1.Error());
    wstring value2 = w"alpha";
    auto result2 = writer.WriteLine(value2);
    #assert(!result2.Error());
    ustring value3 = u"alpha";
    auto result3 = writer.WriteLine(value3);
    #assert(!result3.Error());
    bool value4 = true;
    auto result4 = writer.WriteLine(value4);
    #assert(!result4.Error());
    char value5 = 'X';
    auto result5 = writer.WriteLine(value5);
    #assert(!result5.Error());
    wchar value6 = 'X';
    auto result6 = writer.WriteLine(value6);
    #assert(!result6.Error());
    uchar value7 = 'X';
    auto result7 = writer.WriteLine(value7);
    #assert(!result7.Error());
    sbyte value8 = 1;
    auto result8 = writer.WriteLine(value8);
    #assert(!result8.Error());
    byte value9 = 1u;
    auto result9 = writer.WriteLine(value9);
    #assert(!result9.Error());
    short value10 = 1;
    auto result10 = writer.WriteLine(value10);
    #assert(!result10.Error());
    ushort value11 = 1u;
    auto result11 = writer.WriteLine(value11);
    #assert(!result11.Error());
    int value12 = 1;
    auto result12 = writer.WriteLine(value12);
    #assert(!result12.Error());
    uint value13 = 1u;
    auto result13 = writer.WriteLine(value13);
    #assert(!result13.Error());
    long value14 = 1;
    auto result14 = writer.WriteLine(value14);
    #assert(!result14.Error());
    ulong value15 = 1u;
    auto result15 = writer.WriteLine(value15);
    #assert(!result15.Error());
    float value16 = 1.0f;
    auto result16 = writer.WriteLine(value16);
    #assert(!result16.Error());
    double value17 = 1.0;
    auto result17 = writer.WriteLine(value17);
    #assert(!result17.Error());
    Date value18(2024, Month.april, 10);
    auto result18 = writer.WriteLine(value18);
    #assert(!result18.Error());
    DateTime value19(Date(2024, Month.april, 10), 0);
    auto result19 = writer.WriteLine(value19);
    #assert(!result19.Error());
    StreamReader reader(&memoryStream);
    auto result21 = reader.ReadLine();
    #assert(!result21.Error() && result21.Value() == "alpha");
    auto result22 = reader.ReadLine();
    #assert(!result22.Error() && result22.Value() == "alpha");
    auto result23 = reader.ReadLine();
    #assert(!result23.Error() && result23.Value() == "alpha");
    auto result24 = reader.ReadLine();
    #assert(!result24.Error());
    auto result25 = ParseBool(result24.Value());
    #assert(!result25.Error() && result25.Value() == true);
    auto result26 = reader.ReadLine();
    #assert(!result26.Error());
    string result27 = result26.Value();
    #assert(result27 == "X");
    auto result28 = reader.ReadLine();
    #assert(!result28.Error());
    string result29 = result28.Value();
    #assert(result29 == "X");
    auto result30 = reader.ReadLine();
    #assert(!result30.Error());
    string result31 = result30.Value();
    #assert(result31 == "X");
    auto result32 = reader.ReadLine();
    #assert(!result32.Error());
    auto result33 = ParseSByte(result32.Value());
    #assert(!result33.Error() && result33.Value() == 1);
    auto result34 = reader.ReadLine();
    #assert(!result34.Error());
    auto result35 = ParseByte(result34.Value());
    #assert(!result35.Error() && result35.Value() == 1u);
    auto result36 = reader.ReadLine();
    #assert(!result36.Error());
    auto result37 = ParseShort(result36.Value());
    #assert(!result37.Error() && result37.Value() == 1);
    auto result38 = reader.ReadLine();
    #assert(!result38.Error());
    auto result39 = ParseUShort(result38.Value());
    #assert(!result39.Error() && result39.Value() == 1u);
    auto result40 = reader.ReadLine();
    #assert(!result40.Error());
    auto result41 = ParseInt(result40.Value());
    #assert(!result41.Error() && result41.Value() == 1);
    auto result42 = reader.ReadLine();
    #assert(!result42.Error());
    auto result43 = ParseUInt(result42.Value());
    #assert(!result43.Error() && result43.Value() == 1u);
    auto result44 = reader.ReadLine();
    #assert(!result44.Error());
    auto result45 = ParseLong(result44.Value());
    #assert(!result45.Error() && result45.Value() == 1);
    auto result46 = reader.ReadLine();
    #assert(!result46.Error());
    auto result47 = ParseULong(result46.Value());
    #assert(!result47.Error() && result47.Value() == 1u);
    auto result48 = reader.ReadLine();
    #assert(!result48.Error());
    auto result49 = ParseFloat(result48.Value());
    #assert(!result49.Error());
    auto result50 = reader.ReadLine();
    #assert(!result50.Error());
    auto result51 = ParseDouble(result50.Value());
    #assert(!result51.Error() && result51.Value() == 1.0);
    auto result52 = reader.ReadLine();
    #assert(!result52.Error());
    auto result53 = ParseDate(result52.Value());
    #assert(!result53.Error() && result53.Value() == Date(2024, Month.april, 10));
    auto result54 = reader.ReadLine();
    #assert(!result54.Error());
    auto result55 = ParseDateTime(result54.Value());
    #assert(!result55.Error() && result55.Value() == DateTime(Date(2024, Month.april, 10), 0));
}

void main()
{
    memory_streawm_test();
}
