using System;

unit_test void string_replace_char_test()
{
    string empty;
    empty.Replace('a', 'x');
    #assert (empty.IsEmpty());
    #assert (empty.Length() == 0);
    string one('a');
    one.Replace('a', 'x');
    #assert (!one.IsEmpty());
    #assert (one.Length() == 1);
    #assert (one == "x");
    string oneNot('a');
    oneNot.Replace('b', 'x');
    #assert (!oneNot.IsEmpty());
    #assert (oneNot.Length() == 1);
    #assert (oneNot == "a");
    string two("ab");
    two.Replace('a', 'x');
    #assert (!two.IsEmpty());
    #assert (two.Length() == 2);
    #assert (two == "xb");
    string twoNot("ab");
    twoNot.Replace('c', 'x');
    #assert (!twoNot.IsEmpty());
    #assert (twoNot.Length() == 2);
    #assert (twoNot == "ab");
    string eight("12345678");
    eight.Replace('4', 'x');
    #assert (!eight.IsEmpty());
    #assert (eight.Length() == 8);
    #assert (eight == "123x5678");
    string eightNot("12345678");
    eightNot.Replace('y', 'x');
    #assert (!eightNot.IsEmpty());
    #assert (eightNot.Length() == 8);
    #assert (eightNot == "12345678");
    string kilo;
    for (int i = 0; i < 1024; ++i)
    {
        kilo.Append(cast<char>(cast<int>('0') + (i % 10)));
    }
    kilo.Replace('4', 'x');
    for (int i = 0; i < 1024; ++i)
    {
        if ((i % 10) == 4)
        {
            #assert (kilo[i] == 'x');
        }
        else
        {
            #assert (kilo[i] == cast<char>(cast<int>('0') + (i % 10)));
        }
    }
}
