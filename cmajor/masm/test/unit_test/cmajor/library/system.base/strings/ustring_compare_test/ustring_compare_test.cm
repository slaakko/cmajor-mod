using System;

unit_test void ustring_compare_test()
{
    ustring empty;
    #assert (!(empty < empty));
    #assert (!(empty > empty));
    #assert (empty <= empty);
    #assert (empty >= empty);
    ustring one('a');
    #assert (empty < one);
    #assert (!(empty > one));
    #assert (empty <= one);
    #assert (!(empty >= one));
    #assert (!(one < empty));
    #assert (one > empty);
    #assert (!(one <= empty));
    #assert (one >= empty);
    ustring two(u"ab");
    #assert (!(two < two));
    #assert (!(two > two));
    #assert (two <= two);
    #assert (two >= two);
    #assert (empty < two);
    #assert (!(empty > two));
    #assert (empty <= two);
    #assert (!(empty >= two));
    #assert (!(two < empty));
    #assert (two > empty);
    #assert (!(two <= empty));
    #assert (two >= empty);
    #assert (one < two);
    #assert (!(one > two));
    #assert (one <= two);
    #assert (!(one >= two));
    #assert (two > one);
    #assert (!(two < one));
    #assert (two >= one);
    #assert (!(two <= one));
    ustring eight(u"12345678");
    #assert (!(eight < eight));
    #assert (!(eight > eight));
    #assert (eight <= eight);
    #assert (eight >= eight);
    #assert (!(eight < empty));
    #assert (eight > empty);
    #assert (!(eight <= empty));
    #assert (eight >= empty);
    #assert (empty < eight);
    #assert (!(empty > eight));
    #assert (empty <= eight);
    #assert (!(empty >= eight));
    #assert (eight < one);
    #assert (!(eight > one));
    #assert (eight <= one);
    #assert (!(eight >= one));
    #assert (!(one < eight));
    #assert (one > eight);
    #assert (!(one <= eight));
    #assert (one >= eight);
    #assert (eight < two);
    #assert (!(eight > two));
    #assert (eight <= two);
    #assert (!(eight >= two));
    #assert (!(two < eight));
    #assert (two > eight);
    #assert (!(two <= eight));
    #assert (two >= eight);
    ustring kilo;
    for (int i = 0; i < 1024; ++i)
    {
        kilo.Append(cast<char>(cast<int>('0') + (i % 10)));
    }
    #assert (!(kilo < kilo));
    #assert (!(kilo > kilo));
    #assert (kilo <= kilo);
    #assert (kilo >= kilo);
    #assert (!(kilo < empty));
    #assert (kilo > empty);
    #assert (!(kilo <= empty));
    #assert (kilo >= empty);
    #assert (empty < kilo);
    #assert (!(empty > kilo));
    #assert (empty <= kilo);
    #assert (!(empty >= kilo));
    #assert (kilo < one);
    #assert (!(kilo > one));
    #assert (kilo <= one);
    #assert (!(kilo >= one));
    #assert (!(one < kilo));
    #assert (one > kilo);
    #assert (!(one <= kilo));
    #assert (one >= kilo);
    #assert (kilo < two);
    #assert (!(kilo > two));
    #assert (kilo <= two);
    #assert (!(kilo >= two));
    #assert (!(two < kilo));
    #assert (two > kilo);
    #assert (!(two <= kilo));
    #assert (two >= kilo);
    #assert (kilo < eight);
    #assert (!(kilo > eight));
    #assert (kilo <= eight);
    #assert (!(kilo >= eight));
    #assert (!(eight < kilo));
    #assert (eight > kilo);
    #assert (!(eight <= kilo));
    #assert (eight >= kilo);
}
