using System;
using System.Collections;

public List<int> MakeTwo()
{
    List<int> two;
    two.Add(1);
    two.Add(2);
    return two;
}

public List<int> MakeEight()
{
    List<int> eight;
    for (int i = 0; i < 8; ++i)
    {
        eight.Add(i);
    }
    return eight;
}

public List<int> MakeKilo()
{
    List<int> kilo;
    for (int i = 0; i < 1024; ++i)
    {
        kilo.Add(i % 10);
    }
    return kilo;
}

public List<int> Return(const List<int>& x)
{
    return x;
}

unit_test void int_list_value_test()
{
    List<int> empty;
    #assert(empty.IsEmpty());
    #assert(empty.Count() == 0);
    List<int> x0(empty);
    #assert(x0.IsEmpty());
    #assert(x0.Count() == 0);
    #assert(x0 == empty);
    List<int> x1;
    x1 = empty;
    #assert(x1.IsEmpty());
    #assert(x1.Count() == 0);
    #assert(x1 == empty);
    List<int> e2(empty);
    List<int> x2(Rvalue(e2));
    #assert(x2.IsEmpty());
    #assert(x2.Count() == 0);
    #assert(x2 == empty);
    List<int> x3;
    List<int> e3(empty);
    x3 = Rvalue(e3);
    #assert(x3.IsEmpty());
    #assert(x3.Count() == 0);
    #assert(x3 == empty);
    List<int> x4 = Return(empty);
    #assert(x4.IsEmpty());
    #assert(x4.Count() == 0);
    #assert(x4 == empty);

    List<int> one(1, 1);
    #assert(!one.IsEmpty());
    #assert(one.Count() == 1);
    List<int> x5(one);
    #assert(!x5.IsEmpty());
    #assert(x5.Count() == 1);
    #assert(x5 == one);
    List<int> x6;
    x6 = one;
    #assert(!x6.IsEmpty());
    #assert(x6.Count() == 1);
    #assert(x6 == one);
    List<int> one2(one);
    List<int> x7(Rvalue(one2));
    #assert(!x7.IsEmpty());
    #assert(x7.Count() == 1);
    #assert(x7 == one);
    List<int> one3(one);
    List<int> x8;
    x8 = Rvalue(one3);
    #assert(!x8.IsEmpty());
    #assert(x8.Count() == 1);
    #assert(x8 == one);
    List<int> x9 = Return(one);
    #assert(!x9.IsEmpty());
    #assert(x9.Count() == 1);
    #assert(x9 == one);

    List<int> two = MakeTwo();
    #assert(!two.IsEmpty());
    #assert(two.Count() == 2);
    List<int> x10(two);
    #assert(!x10.IsEmpty());
    #assert(x10.Count() == 2);
    #assert(x10 == two);
    List<int> x11;
    x11 = two;
    #assert(!x11.IsEmpty());
    #assert(x11.Count() == 2);
    #assert(x11 == two);
    List<int> two2(two);
    List<int> x12(Rvalue(two2));
    #assert(!x12.IsEmpty());
    #assert(x12.Count() == 2);
    #assert(x12 == two);
    List<int> two3(two);
    List<int> x13;
    x13 = Rvalue(two3);
    #assert(!x13.IsEmpty());
    #assert(x13.Count() == 2);
    #assert(x13 == two);
    List<int> x14 = Return(two);
    #assert(!x14.IsEmpty());
    #assert(x14.Count() == 2);
    #assert(x14 == two);

    List<int> eight = MakeEight();
    #assert(!eight.IsEmpty());
    #assert(eight.Count() == 8);
    List<int> x15(eight);
    #assert(!x15.IsEmpty());
    #assert(x15.Count() == 8);
    #assert(x15 == eight);
    List<int> x16;
    x16 = eight;
    #assert(!x16.IsEmpty());
    #assert(x16.Count() == 8);
    #assert(x16 == eight);
    List<int> eight2(eight);
    List<int> x17(Rvalue(eight2));
    #assert(!x17.IsEmpty());
    #assert(x17.Count() == 8);
    #assert(x17 == eight);
    List<int> eight3(eight);
    List<int> x18;
    x18 = Rvalue(eight3);
    #assert(!x18.IsEmpty());
    #assert(x18.Count() == 8);
    #assert(x18 == eight);
    List<int> x19 = Return(eight);
    #assert(!x19.IsEmpty());
    #assert(x19.Count() == 8);
    #assert(x19 == eight);

    List<int> kilo = MakeKilo();
    #assert(!kilo.IsEmpty());
    #assert(kilo.Count() == 1024);
    List<int> x20(kilo);
    #assert(!x20.IsEmpty());
    #assert(x20.Count() == 1024);
    #assert(x20 == kilo);
    List<int> x21;
    x21 = kilo;
    #assert(!x21.IsEmpty());
    #assert(x21.Count() == 1024);
    #assert(x21 == kilo);
    List<int> kilo2(kilo);
    List<int> x22(Rvalue(kilo2));
    #assert(!x22.IsEmpty());
    #assert(x22.Count() == 1024);
    #assert(x22 == kilo);
    List<int> kilo3(kilo);
    List<int> x23;
    x23 = Rvalue(kilo3);
    #assert(!x23.IsEmpty());
    #assert(x23.Count() == 1024);
    #assert(x23 == kilo);
    List<int> x24 = Return(kilo);
    #assert(!x24.IsEmpty());
    #assert(x24.Count() == 1024);
    #assert(x24 == kilo);
}
