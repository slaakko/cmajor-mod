using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Map<string, int> MakeMap(const List<int>& x)
{
    Map<string, int> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(ToString(x[i]), x[i]));
    }
    return m;
}

public Map<string, int> MakeOne()
{
    Map<string, int> m;
    Pair<string, int> p("0", 0);
    m.Insert(p);
    return m;
}

public Map<string, int> MakeTwo()
{
    Map<string, int> m;
    Pair<string, int> p0("0", 0);
    m.Insert(p0);
    Pair<string, int> p1("1", 1);
    m.Insert(p1);
    return m;
}

public Map<string, int> MakeEight()
{
    Map<string, int> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<string, int> p(ToString(i), i);
        m.Insert(p);
    }
    return m;
}

public Map<string, int> Return(const Map<string, int>& x)
{
    return x;
}

unit_test void string_int_map_value_test()
{
    for (int i = 0; i < 8; ++i)
    {
        List<int> p = MakeList(i);
        do
        {
            Map<string, int> x0 = MakeMap(p);
            if (i == 0)
            {
                #assert (x0.IsEmpty());
                #assert (x0.Count() == 0);
            }
            else
            {
                #assert (!x0.IsEmpty());
                #assert (x0.Count() == i);
            }
            #assert (x0 == x0);
            Map<string, int> x1(x0);
            #assert (x1.IsEmpty() == x0.IsEmpty());
            #assert (x1.Count() == x0.Count());
            #assert (x1 == x0);
            Map<string, int> x2;
            x2 = x0;
            #assert (x2.IsEmpty() == x0.IsEmpty());
            #assert (x2.Count() == x0.Count());
            #assert (x2 == x0);
            Map<string, int> xcopy0(x0);
            Map<string, int> x3(Rvalue(xcopy0));
            #assert (x3.IsEmpty() == x0.IsEmpty());
            #assert (x3.Count() == x0.Count());
            #assert (x3 == x0);
            Map<string, int> xcopy1(x0);
            Map<string, int> x4;
            x4 = Rvalue(xcopy1);
            #assert (x4.IsEmpty() == x0.IsEmpty());
            #assert (x4.Count() == x0.Count());
            #assert (x4 == x0);
            Map<string, int> x5 = Return(x0);
            #assert (x5.IsEmpty() == x0.IsEmpty());
            #assert (x5.Count() == x0.Count());
            #assert (x5 == x0);
        }
        while (NextPermutation(p.Begin(), p.End()));
    }
}
