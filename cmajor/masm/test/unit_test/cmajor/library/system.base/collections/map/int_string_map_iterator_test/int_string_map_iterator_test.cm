using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Map<int, string> MakeMap(const List<int>& x)
{
    Map<int, string> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(x[i], ToString(x[i])));
    }
    return m;
}

public Map<int, string> MakeOne()
{
    Map<int, string> m;
    Pair<int, string> p(0, "0");
    m.Insert(p);
    return m;
}

public Map<int, string> MakeTwo()
{
    Map<int, string> m;
    Pair<int, string> p0(0, "0");
    m.Insert(p0);
    Pair<int, string> p1(1, "1");
    m.Insert(p1);
    return m;
}

public Map<int, string> MakeEight()
{
    Map<int, string> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<int, string> p(i, ToString(i));
        m.Insert(p);
    }
    return m;
}

public Map<int, string> Return(const Map<int, string>& x)
{
    return x;
}

unit_test void int_string_map_iterator_test()
{
    Map<int, string> s0;
    #assert (s0.Count() == 0);
    #assert (s0.Begin() == s0.End());
    #assert (s0.CBegin() == s0.CEnd());
    Map<int, string> s1 = MakeOne();
    #assert (s1.Count() == 1);
    #assert (s1.Begin() != s1.End());
    int value = 0;
    for (auto it = s1.Begin(); it != s1.End(); ++it)
    {
        #assert (it->first == value);
        #assert (it->second == ToString(value));
        ++value;
    }
    Map<int, string> s2 = MakeTwo();
    #assert (s2.Count() == 2);
    #assert (s2.Begin() != s2.End());
    #assert (s2.CBegin() != s2.CEnd());
    value = 0;
    for (auto it = s2.Begin(); it != s2.End(); ++it)
    {
        #assert (it->first == value);
        #assert (it->second == ToString(value));
        ++value;
    }
    Map<int, string> s3 = MakeEight();
    #assert (s3.Count() == 8);
    #assert (s3.Begin() != s3.End());
    #assert (s3.CBegin() != s3.CEnd());
    value = 0;
    for (auto it = s3.Begin(); it != s3.End(); ++it)
    {
        #assert (it->first == value);
        #assert (it->second == ToString(value));
        ++value;
    }
}
