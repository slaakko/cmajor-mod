using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public HashMap<string, int> MakeMap(const List<int>& x)
{
    HashMap<string, int> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(ToString(x[i]), x[i]));
    }
    return m;
}

public HashMap<string, int> MakeOne()
{
    HashMap<string, int> m;
    Pair<string, int> p("0", 0);
    m.Insert(p);
    return m;
}

public HashMap<string, int> MakeTwo()
{
    HashMap<string, int> m;
    Pair<string, int> p0("0", 0);
    m.Insert(p0);
    Pair<string, int> p1("1", 1);
    m.Insert(p1);
    return m;
}

public HashMap<string, int> MakeEight()
{
    HashMap<string, int> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<string, int> p(ToString(i), i);
        m.Insert(p);
    }
    return m;
}

public HashMap<string, int> Return(const HashMap<string, int>& x)
{
    return x;
}

unit_test void string_int_hashmap_equal_test()
{
    HashMap<string, int> s0;
    #assert (s0 == s0);
    HashMap<string, int> s1 = MakeOne();
    #assert (s1 == s1);
    #assert (s1 != s0);
    #assert (s0 != s1);
    HashMap<string, int> s2 = MakeTwo();
    #assert (s2 == s2);
    #assert (s2 != s1);
    #assert (s1 != s2);
    #assert (s2 != s0);
    #assert (s0 != s2);
    HashMap<string, int> s3 = MakeEight();
    #assert (s3 == s3);
    #assert (s3 != s2);
    #assert (s2 != s3);
    #assert (s3 != s1);
    #assert (s1 != s3);
    #assert (s3 != s0);
    #assert (s0 != s3);
}
