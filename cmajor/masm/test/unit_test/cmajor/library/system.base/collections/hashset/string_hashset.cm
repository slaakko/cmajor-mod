using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

string AlignedValue(int i)
{
    string s;
    s.Append(ToString((i / 1000) % 10));
    s.Append(ToString((i / 100) % 10));
    s.Append(ToString((i / 10) % 10));
    s.Append(ToString(i % 10));
    return s;
}

public HashSet<string> MakeSet(const List<int>& x)
{
    HashSet<string> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(ToString(x[i]));
    }
    return s;
}

public HashSet<string> MakeOne()
{
    HashSet<string> s;
    s.Insert("0");
    return s;
}

public HashSet<string> MakeTwo()
{
    HashSet<string> s;
    s.Insert("0");
    s.Insert("1");
    return s;
}

public HashSet<string> MakeEight()
{
    HashSet<string> s;
    for (int i = 0; i < 8; ++i)
    {
        s.Insert(ToString(i));
    }
    return s;
}

public HashSet<string> MakeKilo()
{
    HashSet<string> s;
    for (int i = 0; i < 1024; ++i)
    {
        s.Insert(AlignedValue(i));
    }
    return s;
}

public HashSet<string> Return(const HashSet<string>& x)
{
    return x;
}

unit_test void string_hashset_value_test()
{
    for (int i = 0; i < 8; ++i)
    {
        List<int> p = MakeList(i);
        do
        {
            HashSet<string> x0 = MakeSet(p);
            if (i == 0)
            {
                #assert(x0.IsEmpty());
                #assert(x0.Count() == 0);
            }
            else
            {
                #assert(!x0.IsEmpty());
                #assert(x0.Count() == i);
            }
            #assert(x0 == x0);
            HashSet<string> x1(x0);
            #assert(x1.IsEmpty() == x0.IsEmpty());
            #assert(x1.Count() == x0.Count());
            #assert(x1 == x0);
            HashSet<string> x2;
            x2 = x0;
            #assert(x2.IsEmpty() == x0.IsEmpty());
            #assert(x2.Count() == x0.Count());
            #assert(x2 == x0);
            HashSet<string> xcopy0(x0);
            HashSet<string> x3(Rvalue(xcopy0));
            #assert(x3.IsEmpty() == x0.IsEmpty());
            #assert(x3.Count() == x0.Count());
            #assert(x3 == x0);
            HashSet<string> xcopy1(x0);
            HashSet<string> x4;
            x4 = Rvalue(xcopy1);
            #assert(x4.IsEmpty() == x0.IsEmpty());
            #assert(x4.Count() == x0.Count());
            #assert(x4 == x0);
            HashSet<string> x5 = Return(x0);
            #assert(x5.IsEmpty() == x0.IsEmpty());
            #assert(x5.Count() == x0.Count());
            #assert(x5 == x0);
        }
        while (NextPermutation(p.Begin(), p.End()));
    }
}

unit_test void string_hashset_find_test()
{
    HashSet<string> s0;
    auto it0 = s0.Find("0");
    #assert(it0 == s0.End());
    auto it1 = s0.CFind("0");
    #assert(it1 == s0.CEnd());
    HashSet<string> s1 = MakeOne();
    auto it2 = s1.Find("0");
    #assert(it2 != s1.End());
    #assert(*it2 == "0");
    auto it3 = s1.CFind("0");
    #assert(it3 != s1.CEnd());
    #assert(*it3 == "0");
    auto it4 = s1.Find("-1");
    #assert(it4 == s1.End());
    HashSet<string> s2 = MakeTwo();
    auto it5 = s2.Find("0");
    #assert(it5 != s2.End());
    #assert(*it5 == "0");
    auto it6 = s2.CFind("0");
    #assert(it6 != s2.CEnd());
    #assert(*it6 == "0");
    auto it7 = s2.Find("1");
    #assert(it7 != s2.End());
    #assert(*it7 == "1");
    auto it8 = s2.CFind("1");
    #assert(it8 != s2.CEnd());
    #assert(*it8 == "1");
    auto it9 = s2.Find("-1");
    #assert(it9 == s2.End());
    HashSet<string> s3 = MakeEight();
    for (int i = 0; i < 8; ++i)
    {
        auto it1 = s3.Find(ToString(i));
        #assert(it1 != s3.End());
        #assert(*it1 == ToString(i));
        auto it2 = s3.CFind(ToString(i));
        #assert(it2 != s3.CEnd());
        #assert(*it2 == ToString(i));
    }
    auto it10 = s3.Find("-1");
    #assert(it10 == s3.End());
    HashSet<string> s4 = MakeKilo();
    for (int i = 0; i < 1024; ++i)
    {
        auto it1 = s4.Find(AlignedValue(i));
        #assert(it1 != s4.End());
        #assert(*it1 == AlignedValue(i));
        auto it2 = s4.CFind(AlignedValue(i));
        #assert(it2 != s4.CEnd());
        #assert(*it2 == AlignedValue(i));
    }
    auto it11 = s4.Find("-1");
    #assert(it11 == s4.End());
}

unit_test void string_hashset_remove_value_test()
{
    HashSet<string> s0;
    s0.Remove("0");
    #assert(s0.IsEmpty());
    #assert(s0.Count() == 0);
    HashSet<string> s1 = MakeOne();
    s1.Remove("0");
    #assert(s1.IsEmpty());
    #assert(s1.Count() == 0);
    HashSet<string> s2 = MakeOne();
    s2.Remove(string());
    #assert(!s2.IsEmpty());
    #assert(s2.Count() == 1);
    HashSet<string> s3 = MakeTwo();
    s3.Remove("0");
    s3.Remove("1");
    #assert(s3.IsEmpty());
    #assert(s3.Count() == 0);
    HashSet<string> s4 = MakeTwo();
    s4.Remove("1");
    s4.Remove("0");
    #assert(s4.IsEmpty());
    #assert(s4.Count() == 0);
    HashSet<string> s5 = MakeTwo();
    s5.Remove(string());
    #assert(!s5.IsEmpty());
    #assert(s5.Count() == 2);
    List<int> p = MakeList(8);
    do
    {
        HashSet<string> s6 = MakeEight();
        for (int i = 0; i < 8; ++i)
        {
            s6.Remove(ToString(p[i]));
        }
        #assert(s6.IsEmpty());
        #assert(s6.Count() == 0);
    }
    while (NextPermutation(p.Begin(), p.End()));
}

unit_test void string_hashset_remove_iterator_test()
{
    HashSet<string> s1 = MakeOne();
    s1.Remove(s1.Begin());
    #assert(s1.Count() == 0);
    HashSet<string> s2 = MakeTwo();
    s2.Remove(s2.Begin());
    #assert(s2.Count() == 1);
    s2.Remove(s2.Begin());
    #assert(s2.Count() == 0);
    HashSet<string> s3 = MakeEight();
    auto it3 = s3.Begin();
    int n = 8;
    for (int i = 0; i < 8; ++i)
    {
        s3.Remove(it3);
        --n;
        #assert(s3.Count() == n);
        it3 = s3.Begin();
    }
}

unit_test void string_hashset_equal_test()
{
    HashSet<string> s0;
    #assert(s0 == s0);
    HashSet<string> s1 = MakeOne();
    #assert(s1 == s1);
    #assert(s1 != s0);
    #assert(s0 != s1);
    HashSet<string> s2 = MakeTwo();
    #assert(s2 == s2);
    #assert(s2 != s1);
    #assert(s1 != s2);
    #assert(s2 != s0);
    #assert(s0 != s2);
    HashSet<string> s3 = MakeEight();
    #assert(s3 == s3);
    #assert(s3 != s2);
    #assert(s2 != s3);
    #assert(s3 != s1);
    #assert(s1 != s3);
    #assert(s3 != s0);
    #assert(s0 != s3);
}
