using System;
using System.Collections;

public ForwardList<int> MakeOne()
{
    ForwardList<int> one;
    auto it = one.Begin();
    it = one.InsertAfter(it, 1);
    return one;
}

public ForwardList<int> MakeTwo()
{
    ForwardList<int> two;
    auto it = two.Begin();
    it = two.InsertAfter(it, 1);
    it = two.InsertAfter(it, 2);
    return two;
}

public ForwardList<int> MakeEight()
{
    ForwardList<int> eight;
    auto it = eight.Begin();
    for (int i = 0; i < 8; ++i)
    {
        it = eight.InsertAfter(it, i);
    }
    return eight;
}

public ForwardList<int> MakeKilo()
{
    ForwardList<int> kilo;
    auto it = kilo.Begin();
    for (int i = 0; i < 1024; ++i)
    {
        it = kilo.InsertAfter(it, i % 10);
    }
    return kilo;
}

public ForwardList<int> Return(const ForwardList<int>& x)
{
    return x;
}

unit_test void int_forward_list_iterator_test()
{
    ForwardList<int> empty;
    #assert (empty.Begin() == empty.End());
    #assert (empty.CBegin() == empty.CEnd());
    ForwardList<int> one = MakeOne();
    #assert (one.Begin() != one.End());
    #assert (*one.Begin() == 1);
    #assert (one.CBegin() != one.CEnd());
    #assert (*one.CBegin() == 1);
    ForwardList<int> two = MakeTwo();
    #assert (two.Begin() != two.End());
    auto it0 = two.Begin();
    #assert (*it0 == 1);
    ++it0;
    #assert (*it0 == 2);
    #assert (two.CBegin() != two.CEnd());
    auto it1 = two.CBegin();
    #assert (*it1 == 1);
    ++it1;
    #assert (*it1 == 2);
    ForwardList<int> eight = MakeEight();
    #assert (eight.Begin() != eight.End());
    int value = 0;
    for (auto it = eight.Begin(); it != eight.End(); ++it)
    {
        #assert (*it == value);
        ++value;
    }
    #assert (eight.CBegin() != eight.CEnd());
    value = 0;
    for (auto it = eight.CBegin(); it != eight.CEnd(); ++it)
    {
        #assert (*it == value);
        ++value;
    }
    ForwardList<int> kilo = MakeKilo();
    #assert (kilo.Begin() != kilo.End());
    value = 0;
    for (auto it = kilo.Begin(); it != kilo.End(); ++it)
    {
        #assert (*it == value % 10);
        ++value;
    }
    #assert (kilo.CBegin() != kilo.CEnd());
    value = 0;
    for (auto it = kilo.CBegin(); it != kilo.CEnd(); ++it)
    {
        #assert (*it == value % 10);
        ++value;
    }
}
