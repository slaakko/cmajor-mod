using System;
using System.Collections;

public LinkedList<int> MakeOne()
{
    LinkedList<int> one;
    one.Add(1);
    return one;
}

public LinkedList<int> MakeTwo()
{
    LinkedList<int> two;
    two.Add(1);
    two.Add(2);
    return two;
}

public LinkedList<int> MakeEight()
{
    LinkedList<int> eight;
    for (int i = 0; i < 8; ++i)
    {
        eight.Add(i);
    }
    return eight;
}

public LinkedList<int> MakeKilo()
{
    LinkedList<int> kilo;
    for (int i = 0; i < 1024; ++i)
    {
        kilo.Add(i % 10);
    }
    return kilo;
}

public LinkedList<int> Return(const LinkedList<int>& x)
{
    return x;
}

unit_test void int_linked_list_remove_iterator_test()
{
    LinkedList<int> s1 = MakeOne();
    s1.Remove(s1.Begin());
    #assert (s1.Count() == 0);
    LinkedList<int> s2 = MakeTwo();
    s2.Remove(s2.Begin());
    #assert (s2.Count() == 1);
    s2.Remove(s2.Begin());
    #assert (s2.Count() == 0);
    LinkedList<int> s3 = MakeEight();
    auto it3 = s3.Begin();
    int n = 8;
    for (int i = 0; i < 8; ++i)
    {
        s3.Remove(it3);
        --n;
        #assert (s3.Count() == n);
        it3 = s3.Begin();
    }
}
