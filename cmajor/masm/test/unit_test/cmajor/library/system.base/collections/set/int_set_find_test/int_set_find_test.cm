using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Set<int> MakeSet(const List<int>& x)
{
    Set<int> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(x[i]);
    }
    return s;
}

public Set<int> MakeOne()
{
    Set<int> s;
    s.Insert(0);
    return s;
}

public Set<int> MakeTwo()
{
    Set<int> s;
    s.Insert(0);
    s.Insert(1);
    return s;
}

public Set<int> MakeEight()
{
    Set<int> s;
    for (int i = 0; i < 8; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public Set<int> MakeKilo()
{
    Set<int> s;
    for (int i = 0; i < 1024; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public Set<int> Return(const Set<int>& x)
{
    return x;
}

unit_test void int_set_find_test()
{
    Set<int> s0;
    auto it0 = s0.Find(0);
    #assert (it0 == s0.End());
    auto it1 = s0.CFind(0);
    #assert (it1 == s0.CEnd());
    Set<int> s1 = MakeOne();
    auto it2 = s1.Find(0);
    #assert (it2 != s1.End());
    #assert (*it2 == 0);
    auto it3 = s1.CFind(0);
    #assert (it3 != s1.CEnd());
    #assert (*it3 == 0);
    auto it4 = s1.Find(-1);
    #assert (it4 == s1.End());
    Set<int> s2 = MakeTwo();
    auto it5 = s2.Find(0);
    #assert (it5 != s2.End());
    #assert (*it5 == 0);
    auto it6 = s2.CFind(0);
    #assert (it6 != s2.CEnd());
    #assert (*it6 == 0);
    auto it7 = s2.Find(1);
    #assert (it7 != s2.End());
    #assert (*it7 == 1);
    auto it8 = s2.CFind(1);
    #assert (it8 != s2.CEnd());
    #assert (*it8 == 1);
    auto it9 = s2.Find(-1);
    #assert (it9 == s2.End());
    Set<int> s3 = MakeEight();
    for (int i = 0; i < 8; ++i)
    {
        auto it1 = s3.Find(i);
        #assert (it1 != s3.End());
        #assert (*it1 == i);
        auto it2 = s3.CFind(i);
        #assert (it2 != s3.CEnd());
        #assert (*it2 == i);
    }
    auto it10 = s3.Find(-1);
    #assert (it10 == s3.End());
    Set<int> s4 = MakeKilo();
    for (int i = 0; i < 1024; ++i)
    {
        auto it1 = s4.Find(i);
        #assert (it1 != s4.End());
        #assert (*it1 == i);
        auto it2 = s4.CFind(i);
        #assert (it2 != s4.CEnd());
        #assert (*it2 == i);
    }
    auto it11 = s4.Find(-1);
    #assert (it11 == s4.End());
}
