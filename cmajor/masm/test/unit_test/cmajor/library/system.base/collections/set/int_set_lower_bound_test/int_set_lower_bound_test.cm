using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Set<int> MakeSet(const List<int>& x)
{
    Set<int> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(x[i]);
    }
    return s;
}

public Set<int> MakeOne()
{
    Set<int> s;
    s.Insert(0);
    return s;
}

public Set<int> MakeTwo()
{
    Set<int> s;
    s.Insert(0);
    s.Insert(1);
    return s;
}

public Set<int> MakeEight()
{
    Set<int> s;
    for (int i = 0; i < 8; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public Set<int> MakeKilo()
{
    Set<int> s;
    for (int i = 0; i < 1024; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public Set<int> Return(const Set<int>& x)
{
    return x;
}

unit_test void int_set_lower_bound_test()
{
    Set<int> s0;
    auto it0 = s0.LowerBound(0);
    #assert (it0 == s0.End());
    auto it1 = s0.CLowerBound(0);
    #assert (it1 == s0.CEnd());
    Set<int> s1 = MakeOne();
    auto it2 = s1.LowerBound(0);
    #assert (it2 != s1.End());
    #assert (*it2 == 0);
    auto it3 = s1.CLowerBound(0);
    #assert (it3 != s1.CEnd());
    #assert (*it3 == 0);
    auto it4 = s1.LowerBound(-1);
    #assert (it4 != s1.End());
    #assert (*it4 == 0);
    auto it5 = s1.CLowerBound(-1);
    #assert (it5 != s1.CEnd());
    #assert (*it5 == 0);
    auto it6 = s1.LowerBound(2);
    #assert (it6 == s1.End());
    auto it7 = s1.CLowerBound(2);
    #assert (it7 == s1.CEnd());
    Set<int> s2 = MakeTwo();
    auto it8 = s2.LowerBound(0);
    #assert (it8 != s2.End());
    #assert (*it8 == 0);
    auto it9 = s2.CLowerBound(0);
    #assert (it9 != s2.CEnd());
    #assert (*it9 == 0);
    auto it10 = s2.LowerBound(-1);
    #assert (it10 != s2.End());
    #assert (*it10 == 0);
    auto it11 = s2.CLowerBound(-1);
    #assert (it11 != s2.CEnd());
    #assert (*it11 == 0);
    auto it12 = s2.LowerBound(1);
    #assert (it12 != s2.End());
    #assert (*it12 == 1);
    auto it13 = s2.CLowerBound(1);
    #assert (it13 != s2.CEnd());
    #assert (*it13 == 1);
    auto it14 = s2.LowerBound(2);
    #assert (it14 == s2.End());
    auto it15 = s2.CLowerBound(2);
    #assert (it15 == s2.CEnd());
    Set<int> s3 = MakeEight();
    auto it16 = s3.LowerBound(0);
    #assert (it16 != s3.End());
    #assert (*it16 == 0);
    auto it17 = s3.CLowerBound(0);
    #assert (it17 != s3.CEnd());
    #assert (*it17 == 0);
    auto it18 = s3.LowerBound(-1);
    #assert (it18 != s3.End());
    #assert (*it18 == 0);
    auto it19 = s3.CLowerBound(-1);
    #assert (it19 != s3.CEnd());
    #assert (*it19 == 0);
    auto it20 = s3.LowerBound(5);
    #assert (it20 != s3.End());
    #assert (*it20 == 5);
    auto it21 = s3.CLowerBound(5);
    #assert (it21 != s3.CEnd());
    #assert (*it21 == 5);
    auto it22 = s3.LowerBound(10);
    #assert (it22 == s3.End());
    auto it23 = s3.CLowerBound(10);
    #assert (it23 == s3.CEnd());
}
