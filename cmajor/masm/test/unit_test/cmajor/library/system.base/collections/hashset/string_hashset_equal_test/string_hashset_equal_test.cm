using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

string AlignedValue(int i)
{
    string s;
    s.Append(ToString((i / 1000) % 10));
    s.Append(ToString((i / 100) % 10));
    s.Append(ToString((i / 10) % 10));
    s.Append(ToString(i % 10));
    return s;
}

public HashSet<string> MakeSet(const List<int>& x)
{
    HashSet<string> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(ToString(x[i]));
    }
    return s;
}

public HashSet<string> MakeOne()
{
    HashSet<string> s;
    s.Insert("0");
    return s;
}

public HashSet<string> MakeTwo()
{
    HashSet<string> s;
    s.Insert("0");
    s.Insert("1");
    return s;
}

public HashSet<string> MakeEight()
{
    HashSet<string> s;
    for (int i = 0; i < 8; ++i)
    {
        s.Insert(ToString(i));
    }
    return s;
}

public HashSet<string> MakeKilo()
{
    HashSet<string> s;
    for (int i = 0; i < 1024; ++i)
    {
        s.Insert(AlignedValue(i));
    }
    return s;
}

public HashSet<string> Return(const HashSet<string>& x)
{
    return x;
}

unit_test void string_hashset_equal_test()
{
    HashSet<string> s0;
    #assert (s0 == s0);
    HashSet<string> s1 = MakeOne();
    #assert (s1 == s1);
    #assert (s1 != s0);
    #assert (s0 != s1);
    HashSet<string> s2 = MakeTwo();
    #assert (s2 == s2);
    #assert (s2 != s1);
    #assert (s1 != s2);
    #assert (s2 != s0);
    #assert (s0 != s2);
    HashSet<string> s3 = MakeEight();
    #assert (s3 == s3);
    #assert (s3 != s2);
    #assert (s2 != s3);
    #assert (s3 != s1);
    #assert (s1 != s3);
    #assert (s3 != s0);
    #assert (s0 != s3);
}
