using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Map<string, int> MakeMap(const List<int>& x)
{
    Map<string, int> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(ToString(x[i]), x[i]));
    }
    return m;
}

public Map<string, int> MakeOne()
{
    Map<string, int> m;
    Pair<string, int> p("0", 0);
    m.Insert(p);
    return m;
}

public Map<string, int> MakeTwo()
{
    Map<string, int> m;
    Pair<string, int> p0("0", 0);
    m.Insert(p0);
    Pair<string, int> p1("1", 1);
    m.Insert(p1);
    return m;
}

public Map<string, int> MakeEight()
{
    Map<string, int> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<string, int> p(ToString(i), i);
        m.Insert(p);
    }
    return m;
}

public Map<string, int> Return(const Map<string, int>& x)
{
    return x;
}

unit_test void string_int_map_value_test()
{
    for (int i = 0; i < 8; ++i)
    {
        List<int> p = MakeList(i);
        do
        {
            Map<string, int> x0 = MakeMap(p);
            if (i == 0)
            {
                #assert(x0.IsEmpty());
                #assert(x0.Count() == 0);
            }
            else
            {
                #assert(!x0.IsEmpty());
                #assert(x0.Count() == i);
            }
            #assert(x0 == x0);
            Map<string, int> x1(x0);
            #assert(x1.IsEmpty() == x0.IsEmpty());
            #assert(x1.Count() == x0.Count());
            #assert(x1 == x0);
            Map<string, int> x2;
            x2 = x0;
            #assert(x2.IsEmpty() == x0.IsEmpty());
            #assert(x2.Count() == x0.Count());
            #assert(x2 == x0);
            Map<string, int> xcopy0(x0);
            Map<string, int> x3(Rvalue(xcopy0));
            #assert(x3.IsEmpty() == x0.IsEmpty());
            #assert(x3.Count() == x0.Count());
            #assert(x3 == x0);
            Map<string, int> xcopy1(x0);
            Map<string, int> x4;
            x4 = Rvalue(xcopy1);
            #assert(x4.IsEmpty() == x0.IsEmpty());
            #assert(x4.Count() == x0.Count());
            #assert(x4 == x0);
            Map<string, int> x5 = Return(x0);
            #assert(x5.IsEmpty() == x0.IsEmpty());
            #assert(x5.Count() == x0.Count());
            #assert(x5 == x0);
        }
        while (NextPermutation(p.Begin(), p.End()));
    }
}

unit_test void string_int_map_iterator_test()
{
    Map<string, int> s0;
    #assert(s0.Count() == 0);
    #assert(s0.Begin() == s0.End());
    #assert(s0.CBegin() == s0.CEnd());
    Map<string, int> s1 = MakeOne();
    #assert(s1.Count() == 1);
    #assert(s1.Begin() != s1.End());
    int value = 0;
    for (auto it = s1.Begin(); it != s1.End(); ++it)
    {
        #assert(it->first == ToString(value));
        #assert(it->second == value);
        ++value;
    }
    Map<string, int> s2 = MakeTwo();
    #assert(s2.Count() == 2);
    #assert(s2.Begin() != s2.End());
    #assert(s2.CBegin() != s2.CEnd());
    value = 0;
    for (auto it = s2.Begin(); it != s2.End(); ++it)
    {
        #assert(it->first == ToString(value));
        #assert(it->second == value);
        ++value;
    }
    Map<string, int> s3 = MakeEight();
    #assert(s3.Count() == 8);
    #assert(s3.Begin() != s3.End());
    #assert(s3.CBegin() != s3.CEnd());
    value = 0;
    for (auto it = s3.Begin(); it != s3.End(); ++it)
    {
        #assert(it->first == ToString(value));
        #assert(it->second == value);
        ++value;
    }
}

unit_test void string_int_map_find_test()
{
    Map<string, int> s0;
    auto it0 = s0.Find("0");
    #assert(it0 == s0.End());
    auto it1 = s0.CFind("0");
    #assert(it1 == s0.CEnd());
    Map<string, int> s1 = MakeOne();
    auto it2 = s1.Find("0");
    #assert(it2 != s1.End());
    #assert(it2->first == "0");
    #assert(it2->second == 0);
    auto it3 = s1.CFind("0");
    #assert(it3 != s1.CEnd());
    #assert(it3->first == "0");
    #assert(it3->second == 0);
    auto it4 = s1.Find(string());
    #assert(it4 == s1.End());
    Map<string, int> s2 = MakeTwo();
    auto it5 = s2.Find("0");
    #assert(it5 != s2.End());
    #assert(it5->first == "0");
    #assert(it5->second == 0);
    auto it6 = s2.CFind("0");
    #assert(it6 != s2.CEnd());
    #assert(it6->first == "0");
    #assert(it6->second == 0);
    auto it7 = s2.Find("1");
    #assert(it7 != s2.End());
    #assert(it7->first == "1");
    #assert(it7->second == 1);
    auto it8 = s2.CFind("1");
    #assert(it8 != s2.CEnd());
    #assert(it8->first == "1");
    #assert(it8->second == 1);
    auto it9 = s2.Find(string());
    #assert(it9 == s2.End());
    Map<string, int> s3 = MakeEight();
    for (int i = 0; i < 8; ++i)
    {
        auto it1 = s3.Find(ToString(i));
        #assert(it1 != s3.End());
        #assert(it1->first == ToString(i));
        #assert(it1->second == i);
        auto it2 = s3.CFind(ToString(i));
        #assert(it2 != s3.CEnd());
        #assert(it2->first == ToString(i));
        #assert(it2->second == i);
    }
    auto it10 = s3.Find(string());
    #assert(it10 == s3.End());
}

unit_test void string_int_map_lower_bound_test()
{
    Map<string, int> s0;
    auto it0 = s0.LowerBound("0");
    #assert(it0 == s0.End());
    auto it1 = s0.CLowerBound("0");
    #assert(it1 == s0.CEnd());

    Map<string, int> s1 = MakeOne();
    auto it2 = s1.LowerBound("0");
    #assert(it2 != s1.End());
    #assert(it2->first == "0");
    #assert(it2->second == 0);
    auto it3 = s1.CLowerBound("0");
    #assert(it3 != s1.CEnd());
    #assert(it3->first == "0");
    #assert(it3->second == 0);
    auto it4 = s1.LowerBound(string());
    #assert(it4 != s1.End());
    #assert(it4->first == "0");
    #assert(it4->second == 0);
    auto it5 = s1.CLowerBound(string());
    #assert(it5 != s1.CEnd());
    #assert(it5->first == "0");
    #assert(it5->second == 0);
    auto it6 = s1.LowerBound("2");
    #assert(it6 == s1.End());
    auto it7 = s1.CLowerBound("2");
    #assert(it7 == s1.CEnd());
    Map<string, int> s2 = MakeTwo();
    auto it8 = s2.LowerBound("0");
    #assert(it8 != s2.End());
    #assert(it8->first == "0");
    #assert(it8->second == 0);
    auto it9 = s2.CLowerBound("0");
    #assert(it9 != s2.CEnd());
    #assert(it9->first == "0");
    #assert(it9->second == 0);
    auto it10 = s2.LowerBound(string());
    #assert(it10 != s2.End());
    #assert(it10->first == "0");
    #assert(it10->second == 0);
    auto it11 = s2.CLowerBound(string());
    #assert(it11 != s2.CEnd());
    #assert(it11->first == "0");
    #assert(it11->second == 0);
    auto it12 = s2.LowerBound("1");
    #assert(it12 != s2.End());
    #assert(it12->first == "1");
    #assert(it12->second == 1);
    auto it13 = s2.CLowerBound("1");
    #assert(it13 != s2.CEnd());
    #assert(it13->first == "1");
    #assert(it13->second == 1);
    auto it14 = s2.LowerBound("2");
    #assert(it14 == s2.End());
    auto it15 = s2.CLowerBound("2");
    #assert(it15 == s2.CEnd());
    Map<string, int> s3 = MakeEight();
    auto it16 = s3.LowerBound("0");
    #assert(it16 != s3.End());
    #assert(it16->first == "0");
    #assert(it16->second == 0);
    auto it17 = s3.CLowerBound("0");
    #assert(it17 != s3.CEnd());
    #assert(it17->first == "0");
    #assert(it17->second == 0);
    auto it18 = s3.LowerBound(string());
    #assert(it18 != s3.End());
    #assert(it18->first == "0");
    #assert(it18->second == 0);
    auto it19 = s3.CLowerBound(string());
    #assert(it19 != s3.CEnd());
    #assert(it19->first == "0");
    #assert(it19->second == 0);
    auto it20 = s3.LowerBound("5");
    #assert(it20 != s3.End());
    #assert(it20->first == "5");
    #assert(it20->second == 5);
    auto it21 = s3.CLowerBound("5");
    #assert(it21 != s3.CEnd());
    #assert(it21->first == "5");
    #assert(it21->second == 5);
    auto it22 = s3.LowerBound("x");
    #assert(it22 == s3.End());
    auto it23 = s3.CLowerBound("x");
    #assert(it23 == s3.CEnd());
}

unit_test void string_int_map_op_subscript_test()
{
    Map<string, int> m0;
    m0["0"] = 0;
    auto it0 = m0.Find("0");
    #assert(it0 != m0.End());
    #assert(it0->first == "0");
    #assert(it0->second == 0);
    Map<string, int> m1 = MakeOne();
    m1["0"] = 10;
    auto it1 = m1.Find("0");
    #assert(it1 != m1.End());
    #assert(it1->first == "0");
    #assert(it1->second == 10);

    Map<string, int> m2 = MakeTwo();
    m2["0"] = 10;
    auto it2 = m2.Find("0");
    #assert(it2 != m2.End());
    #assert(it2->first == "0");
    #assert(it2->second == 10);

    m2["1"] = 20;
    auto it3 = m2.Find("1");
    #assert(it3 != m2.End());
    #assert(it3->first == "1");
    #assert(it3->second == 20);

    Map<string, int> m3 = MakeEight();
    m3["0"] = 10;
    auto it4 = m3.Find("0");
    #assert(it4 != m3.End());
    #assert(it4->first == "0");
    #assert(it4->second == 10);

    m3["5"] = 30;
    auto it5 = m3.Find("5");
    #assert(it5!= m3.End());
    #assert(it5->first == "5");
    #assert(it5->second == 30);

    m3["7"] = 40;
    auto it6 = m3.Find("7");
    #assert(it6 != m3.End());
    #assert(it6->first == "7");
    #assert(it6->second == 40);

    m3["8"] = 50;
    auto it7 = m3.Find("8");
    #assert(it7 != m3.End());
    #assert(it7->first == "8");
    #assert(it7->second == 50);
}

unit_test void string_int_map_remove_value_test()
{
    Map<string, int> s0;
    #assert(!s0.Remove("0"));
    Map<string, int> s1 = MakeOne();
    #assert(s1.Remove("0"));
    Map<string, int> s2 = MakeOne();
    #assert(!s2.Remove(string()));
    Map<string, int> s3 = MakeTwo();
    #assert(s3.Remove("0"));
    #assert(s3.Remove("1"));
    Map<string, int> s4 = MakeTwo();
    #assert(s4.Remove("1"));
    #assert(s4.Remove("0"));
    Map<string, int> s5 = MakeTwo();
    #assert(!s5.Remove(string()));
    List<int> p = MakeList(8);
    do
    {
        Map<string, int> s6 = MakeEight();
        for (int i = 0; i < 8; ++i)
        {
            #assert(s6.Remove(ToString(p[i])));
        }
    }
    while (NextPermutation(p.Begin(), p.End()));
}

unit_test void string_int_map_remove_iterator_test()
{
    Map<string, int> s1 = MakeOne();
    s1.Remove(s1.Begin());
    #assert(s1.Count() == 0);
    Map<string, int> s2 = MakeTwo();
    s2.Remove(s2.Begin());
    #assert(s2.Count() == 1);
    s2.Remove(s2.Begin());
    #assert(s2.Count() == 0);
    Map<string, int> s3 = MakeEight();
    auto it3 = s3.Begin();
    int n = 8;
    for (int i = 0; i < 8; ++i)
    {
        s3.Remove(it3);
        --n;
        #assert(s3.Count() == n);
        it3 = s3.Begin();
    }
}

unit_test void string_int_map_equal_test()
{
    Map<string, int> s0;
    #assert(s0 == s0);
    Map<string, int> s1 = MakeOne();
    #assert(s1 == s1);
    #assert(s1 != s0);
    #assert(s0 != s1);
    Map<string, int> s2 = MakeTwo();
    #assert(s2 == s2);
    #assert(s2 != s1);
    #assert(s1 != s2);
    #assert(s2 != s0);
    #assert(s0 != s2);
    Map<string, int> s3 = MakeEight();
    #assert(s3 == s3);
    #assert(s3 != s2);
    #assert(s2 != s3);
    #assert(s3 != s1);
    #assert(s1 != s3);
    #assert(s3 != s0);
    #assert(s0 != s3);
}

unit_test void sting_int_map_compare_test()
{
    Map<string, int> s0;
    #assert(!(s0 < s0));
    #assert(!(s0 > s0));
    #assert(s0 <= s0);
    #assert(s0 >= s0);
    Map<string, int> s1 = MakeOne();
    #assert(!(s1 < s1));
    #assert(!(s1 > s1));
    #assert(s1 <= s1);
    #assert(s1 >= s1);
    #assert(!(s1 < s0));
    #assert(s1 > s0);
    #assert(!(s1 <= s0));
    #assert(s1 >= s0);
    #assert(s0 < s1);
    #assert(!(s0 > s1));
    #assert(s0 <= s1);
    #assert(!(s0 >= s1));
    Map<string, int> s2 = MakeTwo();
    #assert(!(s2 < s2));
    #assert(!(s2 > s2));
    #assert(s2 <= s2);
    #assert(s2 >= s2);
    #assert(!(s2 < s1));
    #assert(s2 > s1);
    #assert(!(s2 <= s1));
    #assert(s2 >= s1);
    #assert(s1 < s2);
    #assert(!(s1 > s2));
    #assert(s1 <= s2);
    #assert(!(s1 >= s2));
    #assert(!(s2 < s0));
    #assert(s2 > s0);
    #assert(!(s2 <= s0));
    #assert(s2 >= s0);
    #assert(s0 < s2);
    #assert(!(s0 > s2));
    #assert(s0 <= s2);
    #assert(!(s0 >= s2));
}
