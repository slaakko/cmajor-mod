using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

string AlignedValue(int i)
{
    string s;
    s.Append(ToString((i / 1000) % 10));
    s.Append(ToString((i / 100) % 10));
    s.Append(ToString((i / 10) % 10));
    s.Append(ToString(i % 10));
    return s;
}

public HashSet<string> MakeSet(const List<int>& x)
{
    HashSet<string> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(ToString(x[i]));
    }
    return s;
}

public HashSet<string> MakeOne()
{
    HashSet<string> s;
    s.Insert("0");
    return s;
}

public HashSet<string> MakeTwo()
{
    HashSet<string> s;
    s.Insert("0");
    s.Insert("1");
    return s;
}

public HashSet<string> MakeEight()
{
    HashSet<string> s;
    for (int i = 0; i < 8; ++i)
    {
        s.Insert(ToString(i));
    }
    return s;
}

public HashSet<string> MakeKilo()
{
    HashSet<string> s;
    for (int i = 0; i < 1024; ++i)
    {
        s.Insert(AlignedValue(i));
    }
    return s;
}

public HashSet<string> Return(const HashSet<string>& x)
{
    return x;
}

unit_test void string_hashset_remove_value_test()
{
    HashSet<string> s0;
    s0.Remove("0");
    #assert (s0.IsEmpty());
    #assert (s0.Count() == 0);
    HashSet<string> s1 = MakeOne();
    s1.Remove("0");
    #assert (s1.IsEmpty());
    #assert (s1.Count() == 0);
    HashSet<string> s2 = MakeOne();
    s2.Remove(string());
    #assert (!s2.IsEmpty());
    #assert (s2.Count() == 1);
    HashSet<string> s3 = MakeTwo();
    s3.Remove("0");
    s3.Remove("1");
    #assert (s3.IsEmpty());
    #assert (s3.Count() == 0);
    HashSet<string> s4 = MakeTwo();
    s4.Remove("1");
    s4.Remove("0");
    #assert (s4.IsEmpty());
    #assert (s4.Count() == 0);
    HashSet<string> s5 = MakeTwo();
    s5.Remove(string());
    #assert (!s5.IsEmpty());
    #assert (s5.Count() == 2);
    List<int> p = MakeList(8);
    do
    {
        HashSet<string> s6 = MakeEight();
        for (int i = 0; i < 8; ++i)
        {
            s6.Remove(ToString(p[i]));
        }
        #assert (s6.IsEmpty());
        #assert (s6.Count() == 0);
    }
    while (NextPermutation(p.Begin(), p.End()));
}
