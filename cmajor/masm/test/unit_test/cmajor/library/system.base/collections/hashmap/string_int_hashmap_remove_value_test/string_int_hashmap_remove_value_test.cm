using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public HashMap<string, int> MakeMap(const List<int>& x)
{
    HashMap<string, int> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(ToString(x[i]), x[i]));
    }
    return m;
}

public HashMap<string, int> MakeOne()
{
    HashMap<string, int> m;
    Pair<string, int> p("0", 0);
    m.Insert(p);
    return m;
}

public HashMap<string, int> MakeTwo()
{
    HashMap<string, int> m;
    Pair<string, int> p0("0", 0);
    m.Insert(p0);
    Pair<string, int> p1("1", 1);
    m.Insert(p1);
    return m;
}

public HashMap<string, int> MakeEight()
{
    HashMap<string, int> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<string, int> p(ToString(i), i);
        m.Insert(p);
    }
    return m;
}

public HashMap<string, int> Return(const HashMap<string, int>& x)
{
    return x;
}

unit_test void string_int_hashmap_remove_value_test()
{
    HashMap<string, int> s0;
    s0.Remove("0");
    #assert (s0.IsEmpty());
    #assert (s0.Count() == 0);
    HashMap<string, int> s1 = MakeOne();
    s1.Remove("0");
    #assert (s1.IsEmpty());
    #assert (s1.Count() == 0);
    HashMap<string, int> s2 = MakeOne();
    s2.Remove(string());
    #assert (!s2.IsEmpty());
    #assert (s2.Count() == 1);
    HashMap<string, int> s3 = MakeTwo();
    s3.Remove("0");
    s3.Remove("1");
    #assert (s3.IsEmpty());
    #assert (s3.Count() == 0);
    HashMap<string, int> s4 = MakeTwo();
    s4.Remove("1");
    s4.Remove("0");
    #assert (s4.IsEmpty());
    #assert (s4.Count() == 0);
    HashMap<string, int> s5 = MakeTwo();
    s5.Remove(string());
    #assert (!s5.IsEmpty());
    #assert (s5.Count() == 2);
    List<int> p = MakeList(8);
    do
    {
        HashMap<string, int> s6 = MakeEight();
        for (int i = 0; i < 8; ++i)
        {
            s6.Remove(ToString(p[i]));
        }
        #assert (s6.IsEmpty());
        #assert (s6.Count() == 0);
    }
    while (NextPermutation(p.Begin(), p.End()));
}
