using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Map<int, string> MakeMap(const List<int>& x)
{
    Map<int, string> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(x[i], ToString(x[i])));
    }
    return m;
}

public Map<int, string> MakeOne()
{
    Map<int, string> m;
    Pair<int, string> p(0, "0");
    m.Insert(p);
    return m;
}

public Map<int, string> MakeTwo()
{
    Map<int, string> m;
    Pair<int, string> p0(0, "0");
    m.Insert(p0);
    Pair<int, string> p1(1, "1");
    m.Insert(p1);
    return m;
}

public Map<int, string> MakeEight()
{
    Map<int, string> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<int, string> p(i, ToString(i));
        m.Insert(p);
    }
    return m;
}

public Map<int, string> Return(const Map<int, string>& x)
{
    return x;
}

unit_test void int_string_map_lower_bound_test()
{
    Map<int, string> s0;
    auto it0 = s0.LowerBound(0);
    #assert (it0 == s0.End());
    auto it1 = s0.CLowerBound(0);
    #assert (it1 == s0.CEnd());
    Map<int, string> s1 = MakeOne();
    auto it2 = s1.LowerBound(0);
    #assert (it2 != s1.End());
    #assert (it2->first == 0);
    #assert (it2->second == "0");
    auto it3 = s1.CLowerBound(0);
    #assert (it3 != s1.CEnd());
    #assert (it3->first == 0);
    #assert (it3->second == "0");
    auto it4 = s1.LowerBound(-1);
    #assert (it4 != s1.End());
    #assert (it4->first == 0);
    #assert (it4->second == "0");
    auto it5 = s1.CLowerBound(-1);
    #assert (it5 != s1.CEnd());
    #assert (it5->first == 0);
    #assert (it5->second == "0");
    auto it6 = s1.LowerBound(2);
    #assert (it6 == s1.End());
    auto it7 = s1.CLowerBound(2);
    #assert (it7 == s1.CEnd());
    Map<int, string> s2 = MakeTwo();
    auto it8 = s2.LowerBound(0);
    #assert (it8 != s2.End());
    #assert (it8->first == 0);
    #assert (it8->second == "0");
    auto it9 = s2.CLowerBound(0);
    #assert (it9 != s2.CEnd());
    #assert (it9->first == 0);
    #assert (it9->second == "0");
    auto it10 = s2.LowerBound(-1);
    #assert (it10 != s2.End());
    #assert (it10->first == 0);
    #assert (it10->second == "0");
    auto it11 = s2.CLowerBound(-1);
    #assert (it11 != s2.CEnd());
    #assert (it11->first == 0);
    #assert (it11->second == "0");
    auto it12 = s2.LowerBound(1);
    #assert (it12 != s2.End());
    #assert (it12->first == 1);
    #assert (it12->second == "1");
    auto it13 = s2.CLowerBound(1);
    #assert (it13 != s2.CEnd());
    #assert (it13->first == 1);
    #assert (it13->second == "1");
    auto it14 = s2.LowerBound(2);
    #assert (it14 == s2.End());
    auto it15 = s2.CLowerBound(2);
    #assert (it15 == s2.CEnd());
    Map<int, string> s3 = MakeEight();
    auto it16 = s3.LowerBound(0);
    #assert (it16 != s3.End());
    #assert (it16->first == 0);
    #assert (it16->second == "0");
    auto it17 = s3.CLowerBound(0);
    #assert (it17 != s3.CEnd());
    #assert (it17->first == 0);
    #assert (it17->second == "0");
    auto it18 = s3.LowerBound(-1);
    #assert (it18 != s3.End());
    #assert (it18->first == 0);
    #assert (it18->second == "0");
    auto it19 = s3.CLowerBound(-1);
    #assert (it19 != s3.CEnd());
    #assert (it19->first == 0);
    #assert (it19->second == "0");
    auto it20 = s3.LowerBound(5);
    #assert (it20 != s3.End());
    #assert (it20->first == 5);
    #assert (it20->second == "5");
    auto it21 = s3.CLowerBound(5);
    #assert (it21 != s3.CEnd());
    #assert (it21->first == 5);
    #assert (it21->second == "5");
    auto it22 = s3.LowerBound(10);
    #assert (it22 == s3.End());
    auto it23 = s3.CLowerBound(10);
    #assert (it23 == s3.CEnd());
}
