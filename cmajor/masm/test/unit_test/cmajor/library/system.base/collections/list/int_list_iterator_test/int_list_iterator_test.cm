using System;
using System.Collections;

public List<int> MakeTwo()
{
    List<int> two;
    two.Add(1);
    two.Add(2);
    return two;
}

public List<int> MakeEight()
{
    List<int> eight;
    for (int i = 0; i < 8; ++i)
    {
        eight.Add(i);
    }
    return eight;
}

public List<int> MakeKilo()
{
    List<int> kilo;
    for (int i = 0; i < 1024; ++i)
    {
        kilo.Add(i % 10);
    }
    return kilo;
}

public List<int> Return(const List<int>& x)
{
    return x;
}

unit_test void int_list_iterator_test()
{
    List<int> empty;
    #assert (empty.Begin() == empty.End());
    #assert (empty.CBegin() == empty.CEnd());
    List<int> one(1, 1);
    #assert (one.Begin() != one.End());
    #assert (one.Begin() + 1 == one.End());
    #assert (*one.Begin() == 1);
    #assert (one.CBegin() != one.CEnd());
    #assert (one.CBegin() + 1 == one.CEnd());
    #assert (*one.CBegin() == 1);
    List<int> two = MakeTwo();
    #assert (two.Begin() != two.End());
    #assert (two.Begin() + 2 == two.End());
    #assert (*two.Begin() == 1);
    #assert (*(two.Begin() + 1) == 2);
    #assert (two.CBegin() != two.CEnd());
    #assert (two.CBegin() + 2 == two.CEnd());
    #assert (*two.CBegin() == 1);
    #assert (*(two.CBegin() + 1) == 2);
    List<int> eight = MakeEight();
    #assert (eight.Begin() != eight.End());
    #assert (eight.Begin() + 8 == eight.End());
    for (auto it = eight.Begin(); it != eight.End(); ++it)
    {
        #assert (*it == it - eight.Begin());
    }
    #assert (eight.CBegin() != eight.CEnd());
    #assert (eight.CBegin() + 8 == eight.CEnd());
    for (auto it = eight.CBegin(); it != eight.CEnd(); ++it)
    {
        #assert (*it == it - eight.CBegin());
    }
    List<int> kilo = MakeKilo();
    #assert (kilo.Begin() != kilo.End());
    #assert (kilo.Begin() + 1024 == kilo.End());
    for (auto it = kilo.Begin(); it != kilo.End(); ++it)
    {
        #assert (*it == (it - kilo.Begin()) % 10);
    }
    #assert (kilo.CBegin() != kilo.CEnd());
    #assert (kilo.CBegin() + 1024 == kilo.CEnd());
    for (auto it = kilo.CBegin(); it != kilo.CEnd(); ++it)
    {
        #assert (*it == (it - kilo.CBegin()) % 10);
    }
}
