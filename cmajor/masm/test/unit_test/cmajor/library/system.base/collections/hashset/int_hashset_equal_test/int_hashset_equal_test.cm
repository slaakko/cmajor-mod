using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public HashSet<int> MakeSet(const List<int>& x)
{
    HashSet<int> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(x[i]);
    }
    return s;
}

public HashSet<int> MakeOne()
{
    HashSet<int> s;
    s.Insert(0);
    return s;
}

public HashSet<int> MakeTwo()
{
    HashSet<int> s;
    s.Insert(0);
    s.Insert(1);
    return s;
}

public HashSet<int> MakeEight()
{
    HashSet<int> s;
    for (int i = 0; i < 8; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public HashSet<int> MakeKilo()
{
    HashSet<int> s;
    for (int i = 0; i < 1024; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public HashSet<int> Return(const HashSet<int>& x)
{
    return x;
}

unit_test void int_hashset_equal_test()
{
    HashSet<int> s0;
    #assert (s0 == s0);
    HashSet<int> s1 = MakeOne();
    #assert (s1 == s1);
    #assert (s1 != s0);
    #assert (s0 != s1);
    HashSet<int> s2 = MakeTwo();
    #assert (s2 == s2);
    #assert (s2 != s1);
    #assert (s1 != s2);
    #assert (s2 != s0);
    #assert (s0 != s2);
    HashSet<int> s3 = MakeEight();
    #assert (s3 == s3);
    #assert (s3 != s2);
    #assert (s2 != s3);
    #assert (s3 != s1);
    #assert (s1 != s3);
    #assert (s3 != s0);
    #assert (s0 != s3);
}
