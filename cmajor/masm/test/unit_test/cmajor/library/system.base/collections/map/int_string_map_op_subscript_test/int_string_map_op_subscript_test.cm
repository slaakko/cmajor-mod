using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Map<int, string> MakeMap(const List<int>& x)
{
    Map<int, string> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(x[i], ToString(x[i])));
    }
    return m;
}

public Map<int, string> MakeOne()
{
    Map<int, string> m;
    Pair<int, string> p(0, "0");
    m.Insert(p);
    return m;
}

public Map<int, string> MakeTwo()
{
    Map<int, string> m;
    Pair<int, string> p0(0, "0");
    m.Insert(p0);
    Pair<int, string> p1(1, "1");
    m.Insert(p1);
    return m;
}

public Map<int, string> MakeEight()
{
    Map<int, string> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<int, string> p(i, ToString(i));
        m.Insert(p);
    }
    return m;
}

public Map<int, string> Return(const Map<int, string>& x)
{
    return x;
}

unit_test void int_string_map_op_subscript_test()
{
    Map<int, string> m0;
    m0[0] = "0";
    auto it0 = m0.Find(0);
    #assert (it0 != m0.End());
    #assert (it0->first == 0);
    #assert (it0->second == "0");
    Map<int, string> m1 = MakeOne();
    m1[0] = "x";
    auto it1 = m1.Find(0);
    #assert (it1 != m1.End());
    #assert (it1->first == 0);
    #assert (it1->second == "x");
    Map<int, string> m2 = MakeTwo();
    m2[0] = "x";
    auto it2 = m2.Find(0);
    #assert (it2 != m2.End());
    #assert (it2->first == 0);
    #assert (it2->second == "x");
    m2[1] = "y";
    auto it3 = m2.Find(1);
    #assert (it3 != m2.End());
    #assert (it3->first == 1);
    #assert (it3->second == "y");
    Map<int, string> m3 = MakeEight();
    m3[0] = "x";
    auto it4 = m3.Find(0);
    #assert (it4 != m3.End());
    #assert (it4->first == 0);
    #assert (it4->second == "x");
    m3[5] = "P";
    auto it5 = m3.Find(5);
    #assert (it5 != m3.End());
    #assert (it5->first == 5);
    #assert (it5->second == "P");
    m3[7] = "R";
    auto it6 = m3.Find(7);
    #assert (it6 != m3.End());
    #assert (it6->first == 7);
    #assert (it6->second == "R");
    m3[8] = "N";
    auto it7 = m3.Find(8);
    #assert (it7 != m3.End());
    #assert (it7->first == 8);
    #assert (it7->second == "N");
}
