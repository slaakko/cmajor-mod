using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Map<string, int> MakeMap(const List<int>& x)
{
    Map<string, int> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(ToString(x[i]), x[i]));
    }
    return m;
}

public Map<string, int> MakeOne()
{
    Map<string, int> m;
    Pair<string, int> p("0", 0);
    m.Insert(p);
    return m;
}

public Map<string, int> MakeTwo()
{
    Map<string, int> m;
    Pair<string, int> p0("0", 0);
    m.Insert(p0);
    Pair<string, int> p1("1", 1);
    m.Insert(p1);
    return m;
}

public Map<string, int> MakeEight()
{
    Map<string, int> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<string, int> p(ToString(i), i);
        m.Insert(p);
    }
    return m;
}

public Map<string, int> Return(const Map<string, int>& x)
{
    return x;
}

unit_test void string_int_map_find_test()
{
    Map<string, int> s0;
    auto it0 = s0.Find("0");
    #assert (it0 == s0.End());
    auto it1 = s0.CFind("0");
    #assert (it1 == s0.CEnd());
    Map<string, int> s1 = MakeOne();
    auto it2 = s1.Find("0");
    #assert (it2 != s1.End());
    #assert (it2->first == "0");
    #assert (it2->second == 0);
    auto it3 = s1.CFind("0");
    #assert (it3 != s1.CEnd());
    #assert (it3->first == "0");
    #assert (it3->second == 0);
    auto it4 = s1.Find(string());
    #assert (it4 == s1.End());
    Map<string, int> s2 = MakeTwo();
    auto it5 = s2.Find("0");
    #assert (it5 != s2.End());
    #assert (it5->first == "0");
    #assert (it5->second == 0);
    auto it6 = s2.CFind("0");
    #assert (it6 != s2.CEnd());
    #assert (it6->first == "0");
    #assert (it6->second == 0);
    auto it7 = s2.Find("1");
    #assert (it7 != s2.End());
    #assert (it7->first == "1");
    #assert (it7->second == 1);
    auto it8 = s2.CFind("1");
    #assert (it8 != s2.CEnd());
    #assert (it8->first == "1");
    #assert (it8->second == 1);
    auto it9 = s2.Find(string());
    #assert (it9 == s2.End());
    Map<string, int> s3 = MakeEight();
    for (int i = 0; i < 8; ++i)
    {
        auto it1 = s3.Find(ToString(i));
        #assert (it1 != s3.End());
        #assert (it1->first == ToString(i));
        #assert (it1->second == i);
        auto it2 = s3.CFind(ToString(i));
        #assert (it2 != s3.CEnd());
        #assert (it2->first == ToString(i));
        #assert (it2->second == i);
    }
    auto it10 = s3.Find(string());
    #assert (it10 == s3.End());
}
