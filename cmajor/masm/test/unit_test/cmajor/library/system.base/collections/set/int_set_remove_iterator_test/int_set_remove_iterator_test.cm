using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Set<int> MakeSet(const List<int>& x)
{
    Set<int> s;
    for (int i = 0; i < x.Count(); ++i)
    {
        s.Insert(x[i]);
    }
    return s;
}

public Set<int> MakeOne()
{
    Set<int> s;
    s.Insert(0);
    return s;
}

public Set<int> MakeTwo()
{
    Set<int> s;
    s.Insert(0);
    s.Insert(1);
    return s;
}

public Set<int> MakeEight()
{
    Set<int> s;
    for (int i = 0; i < 8; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public Set<int> MakeKilo()
{
    Set<int> s;
    for (int i = 0; i < 1024; ++i)
    {
        s.Insert(i);
    }
    return s;
}

public Set<int> Return(const Set<int>& x)
{
    return x;
}

unit_test void int_set_remove_iterator_test()
{
    Set<int> s1 = MakeOne();
    s1.Remove(s1.Begin());
    #assert (s1.Count() == 0);
    Set<int> s2 = MakeTwo();
    s2.Remove(s2.Begin());
    #assert (s2.Count() == 1);
    s2.Remove(s2.Begin());
    #assert (s2.Count() == 0);
    Set<int> s3 = MakeEight();
    auto it3 = s3.Begin();
    int n = 8;
    for (int i = 0; i < 8; ++i)
    {
        s3.Remove(it3);
        --n;
        #assert (s3.Count() == n);
        it3 = s3.Begin();
    }
}
