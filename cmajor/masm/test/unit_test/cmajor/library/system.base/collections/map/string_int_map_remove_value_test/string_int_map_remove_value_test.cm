using System;
using System.Collections;

public List<int> MakeList(int n)
{
    List<int> x;
    for (int i = 0; i < n; ++i)
    {
        x.Add(i);
    }
    return x;
}

public Map<string, int> MakeMap(const List<int>& x)
{
    Map<string, int> m;
    for (int i = 0; i < x.Count(); ++i)
    {
        m.Insert(MakePair(ToString(x[i]), x[i]));
    }
    return m;
}

public Map<string, int> MakeOne()
{
    Map<string, int> m;
    Pair<string, int> p("0", 0);
    m.Insert(p);
    return m;
}

public Map<string, int> MakeTwo()
{
    Map<string, int> m;
    Pair<string, int> p0("0", 0);
    m.Insert(p0);
    Pair<string, int> p1("1", 1);
    m.Insert(p1);
    return m;
}

public Map<string, int> MakeEight()
{
    Map<string, int> m;
    for (int i = 0; i < 8; ++i)
    {
        Pair<string, int> p(ToString(i), i);
        m.Insert(p);
    }
    return m;
}

public Map<string, int> Return(const Map<string, int>& x)
{
    return x;
}

unit_test void string_int_map_remove_value_test()
{
    Map<string, int> s0;
    #assert (!s0.Remove("0"));
    Map<string, int> s1 = MakeOne();
    #assert (s1.Remove("0"));
    Map<string, int> s2 = MakeOne();
    #assert (!s2.Remove(string()));
    Map<string, int> s3 = MakeTwo();
    #assert (s3.Remove("0"));
    #assert (s3.Remove("1"));
    Map<string, int> s4 = MakeTwo();
    #assert (s4.Remove("1"));
    #assert (s4.Remove("0"));
    Map<string, int> s5 = MakeTwo();
    #assert (!s5.Remove(string()));
    List<int> p = MakeList(8);
    do
    {
        Map<string, int> s6 = MakeEight();
        for (int i = 0; i < 8; ++i)
        {
            #assert (s6.Remove(ToString(p[i])));
        }
    }
    while (NextPermutation(p.Begin(), p.End()));
}
