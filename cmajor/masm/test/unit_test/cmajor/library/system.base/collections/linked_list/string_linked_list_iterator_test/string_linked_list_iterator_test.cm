using System;
using System.Collections;

public LinkedList<string> MakeOne()
{
    LinkedList<string> one;
    one.Add(ToString(1));
    return one;
}

public LinkedList<string> MakeTwo()
{
    LinkedList<string> two;
    two.Add(ToString(1));
    two.Add(ToString(2));
    return two;
}

public LinkedList<string> MakeEight()
{
    LinkedList<string> eight;
    for (int i = 0; i < 8; ++i)
    {
        eight.Add(ToString(i));
    }
    return eight;
}

public LinkedList<string> MakeKilo()
{
    LinkedList<string> kilo;
    for (int i = 0; i < 1024; ++i)
    {
        kilo.Add(ToString(i % 10));
    }
    return kilo;
}

public LinkedList<string> Return(const LinkedList<string>& x)
{
    return x;
}

unit_test void string_linked_list_iterator_test()
{
    LinkedList<string> empty;
    #assert (empty.Begin() == empty.End());
    #assert (empty.CBegin() == empty.CEnd());
    LinkedList<string> one = MakeOne();
    #assert (one.Begin() != one.End());
    #assert (*one.Begin() == "1");
    #assert (one.CBegin() != one.CEnd());
    #assert (*one.CBegin() == "1");
    LinkedList<string> two = MakeTwo();
    #assert (two.Begin() != two.End());
    auto it0 = two.Begin();
    #assert (*it0 == "1");
    ++it0;
    #assert (*it0 == "2");
    #assert (two.CBegin() != two.CEnd());
    auto it1 = two.CBegin();
    #assert (*it1 == "1");
    ++it1;
    #assert (*it1 == "2");
    LinkedList<string> eight = MakeEight();
    #assert (eight.Begin() != eight.End());
    int value = 0;
    for (auto it = eight.Begin(); it != eight.End(); ++it)
    {
        #assert (*it == ToString(value));
        ++value;
    }
    #assert (eight.CBegin() != eight.CEnd());
    value = 0;
    for (auto it = eight.CBegin(); it != eight.CEnd(); ++it)
    {
        #assert (*it == ToString(value));
        ++value;
    }
    LinkedList<string> kilo = MakeKilo();
    #assert (kilo.Begin() != kilo.End());
    value = 0;
    for (auto it = kilo.Begin(); it != kilo.End(); ++it)
    {
        #assert (*it == ToString(value % 10));
        ++value;
    }
    #assert (kilo.CBegin() != kilo.CEnd());
    value = 0;
    for (auto it = kilo.CBegin(); it != kilo.CEnd(); ++it)
    {
        #assert (*it == ToString(value % 10));
        ++value;
    }
}
