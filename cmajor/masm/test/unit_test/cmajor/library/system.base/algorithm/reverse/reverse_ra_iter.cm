using System;
using System.Collections;

class X
{
    public X(int id_) : id(id_) {}
    public int id;
}

unit_test void reverse_ra_iter_test()
{
    List<int> x0;
    Reverse(x0.Begin(), x0.End());
    #assert(x0.IsEmpty());
    #assert(x0.Count() == 0);

    List<int> x1;
    x1.Add(0);
    Reverse(x1.Begin(), x1.End());
    #assert(!x1.IsEmpty());
    #assert(x1.Count() == 1);
    #assert(x1[0] == 0);

    List<int> x2;
    x2.Add(0);
    x2.Add(1);
    Reverse(x2.Begin(), x2.End());
    #assert(!x2.IsEmpty());
    #assert(x2.Count() == 2);
    #assert(x2[0] == 1);
    #assert(x2[1] == 0);

    List<int> x3;
    x3.Add(0);
    x3.Add(1);
    x3.Add(2);
    Reverse(x3.Begin(), x3.End());
    #assert(!x3.IsEmpty());
    #assert(x3.Count() == 3);
    #assert(x3[0] == 2);
    #assert(x3[1] == 1);
    #assert(x3[2] == 0);

    List<int> x4;
    for (int i = 0; i < 8; ++i)
    {
        x4.Add(i);
    }
    Reverse(x4.Begin(), x4.End());
    for (int i = 0; i < 8; ++i)
    {
        #assert(x4[i] == 7 - i);
    }

    List<UniquePtr<X>> x5;
    for (int i = 0; i < 8; ++i)
    {
        x5.Add(UniquePtr<X>(new X(i)));
    }
    Reverse(x5.Begin(), x5.End());
    for (int i = 0; i < 8; ++i)
    {
        #assert(x5[i]->id == 7 - i);
    }
}
