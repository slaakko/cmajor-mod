using System;
using System.Collections;

class X
{
    public X(int id_) : id(id_) {}
    public int id;
}

unit_test void reverse_bi_iter_test()
{
    LinkedList<int> x0;
    Reverse(x0.Begin(), x0.End());
    #assert(x0.IsEmpty());
    #assert(x0.Count() == 0);

    LinkedList<int> x1;
    x1.Add(0);
    Reverse(x1.Begin(), x1.End());
    #assert(!x1.IsEmpty());
    #assert(x1.Count() == 1);
    #assert(*x1.Begin() == 0);

    LinkedList<int> x2;
    x2.Add(0);
    x2.Add(1);
    Reverse(x2.Begin(), x2.End());
    #assert(!x2.IsEmpty());
    #assert(x2.Count() == 2);
    auto it0 = x2.Begin();
    #assert(*it0 == 1);
    ++it0;
    #assert(*it0 == 0);

    LinkedList<int> x3;
    x3.Add(0);
    x3.Add(1);
    x3.Add(2);
    Reverse(x3.Begin(), x3.End());
    #assert(!x3.IsEmpty());
    #assert(x3.Count() == 3);
    auto it1 = x3.Begin();
    #assert(*it1 == 2);
    ++it1;
    #assert(*it1 == 1);
    ++it1;
    #assert(*it1 ==0);

    LinkedList<int> x4;
    for (int i = 0; i < 8; ++i)
    {
        x4.Add(i);
    }
    Reverse(x4.Begin(), x4.End());
    auto it4 = x4.Begin();
    for (int i = 0; i < 8; ++i)
    {
        #assert(*it4 == 7 - i);
        ++it4;
    }

    LinkedList<UniquePtr<X>> x5;
    for (int i = 0; i < 8; ++i)
    {
        x5.Add(UniquePtr<X>(new X(i)));
    }
    Reverse(x5.Begin(), x5.End());
    auto it5 = x5.Begin();
    for (int i = 0; i < 8; ++i)
    {
        X* x = it5->Get();
        #assert(x->id == 7 - i);
        ++it5;
    }
}
