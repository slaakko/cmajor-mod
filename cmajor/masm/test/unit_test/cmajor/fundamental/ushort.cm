using System;

enum UnaryOp
{
    plus, neg, cpl
}

enum BinOp
{
    add, sub, mul, div, mod, and_, or_, xor_, shl, shr
}

enum Type
{
    sbyte_, byte_, short_, ushort_, int_, uint_, long_, ulong_
}

ushort ret(ushort x)
{
    return x;
}

ushort eval_unaryop(ushort operand, UnaryOp op)
{
    switch (op)
    {
        case UnaryOp.plus: return cast<ushort>(+operand);
        case UnaryOp.neg: return cast<ushort>(-operand);
        case UnaryOp.cpl: return cast<ushort>(~operand);
    }
    return 0u;
}

ushort rtm_eval_unaryop(ushort operand, UnaryOp op)
{
    return cast<ushort>(RtmEvaluateUnaryOp(cast<long>(operand), cast<int>(Type.ushort_), cast<int>(op)));
}

ushort eval_binop(ushort left, ushort right, BinOp op)
{
    switch (op)
    {
        case BinOp.add: return cast<ushort>(left + right);
        case BinOp.sub: return cast<ushort>(left - right);
        case BinOp.mul: return cast<ushort>(left * right);
        case BinOp.div: return cast<ushort>(left / right);
        case BinOp.mod: return cast<ushort>(left % right);
        case BinOp.and_: return cast<ushort>(left & right);
        case BinOp.or_: return cast<ushort>(left | right);
        case BinOp.xor_: return cast<ushort>(left ^ right);
        case BinOp.shl: return cast<ushort>(left << right);
        case BinOp.shr: return cast<ushort>(left >> right);
    }
    return 0u;
}

ushort rtm_eval_binop(ushort left, ushort right, BinOp op)
{
    return cast<ushort>(RtmEvaluateBinOp(cast<long>(left), cast<long>(right), cast<int>(Type.ushort_), cast<int>(op)));
}

unit_test void ushort_value_test()
{
    ushort x;
    #assert(x == 0u);
    ushort y = x;
    #assert(y == x);
    ushort z;
    z = x;
    #assert(z == x);
    ushort a = System.Rvalue(x);
    #assert(a == x);
    ushort b;
    b = System.Rvalue(x);
    #assert(b == x);
    #assert(ret(x) == x);
    ushort c = 1u;
    #assert(c == 1u);
    ushort d = c;
    #assert(d == c);
    ushort e;
    e = c;
    #assert(e == c);
    ushort f = System.Rvalue(c);
    #assert(f == c);
    ushort g;
    g = System.Rvalue(c);
    #assert(g == c);
    #assert(ret(c) == c);
}

unit_test void ushort_unaryop_test()
{
    ushort operand1 = 0u;
    #assert(eval_unaryop(operand1, UnaryOp.plus) == rtm_eval_unaryop(operand1, UnaryOp.plus));
    #assert(eval_unaryop(operand1, UnaryOp.neg) == rtm_eval_unaryop(operand1, UnaryOp.neg));
    #assert(eval_unaryop(operand1, UnaryOp.cpl) == rtm_eval_unaryop(operand1, UnaryOp.cpl));

    ushort operand2 = 1u;
    #assert(eval_unaryop(operand2, UnaryOp.plus) == rtm_eval_unaryop(operand2, UnaryOp.plus));
    #assert(eval_unaryop(operand2, UnaryOp.neg) == rtm_eval_unaryop(operand2, UnaryOp.neg));
    #assert(eval_unaryop(operand2, UnaryOp.cpl) == rtm_eval_unaryop(operand2, UnaryOp.cpl));

    ushort operand3 = 2u;
    #assert(eval_unaryop(operand3, UnaryOp.plus) == rtm_eval_unaryop(operand3, UnaryOp.plus));
    #assert(eval_unaryop(operand3, UnaryOp.neg) == rtm_eval_unaryop(operand3, UnaryOp.neg));
    #assert(eval_unaryop(operand3, UnaryOp.cpl) == rtm_eval_unaryop(operand3, UnaryOp.cpl));

    ushort operand4 = 127u;
    #assert(eval_unaryop(operand4, UnaryOp.plus) == rtm_eval_unaryop(operand4, UnaryOp.plus));
    #assert(eval_unaryop(operand4, UnaryOp.neg) == rtm_eval_unaryop(operand4, UnaryOp.neg));
    #assert(eval_unaryop(operand4, UnaryOp.cpl) == rtm_eval_unaryop(operand4, UnaryOp.cpl));

    ushort operand5 = 128u;
    #assert(eval_unaryop(operand5, UnaryOp.plus) == rtm_eval_unaryop(operand5, UnaryOp.plus));
    #assert(eval_unaryop(operand5, UnaryOp.neg) == rtm_eval_unaryop(operand5, UnaryOp.neg));
    #assert(eval_unaryop(operand5, UnaryOp.cpl) == rtm_eval_unaryop(operand5, UnaryOp.cpl));

    ushort operand6 = 255u;
    #assert(eval_unaryop(operand6, UnaryOp.plus) == rtm_eval_unaryop(operand6, UnaryOp.plus));
    #assert(eval_unaryop(operand6, UnaryOp.neg) == rtm_eval_unaryop(operand6, UnaryOp.neg));
    #assert(eval_unaryop(operand6, UnaryOp.cpl) == rtm_eval_unaryop(operand6, UnaryOp.cpl));

}

unit_test void ushort_binop_test()
{
    ushort left1 = 0u;
    ushort right1 = 0u;
    #assert(eval_binop(left1, right1, BinOp.add) == rtm_eval_binop(left1, right1, BinOp.add));
    #assert(eval_binop(left1, right1, BinOp.sub) == rtm_eval_binop(left1, right1, BinOp.sub));
    #assert(eval_binop(left1, right1, BinOp.mul) == rtm_eval_binop(left1, right1, BinOp.mul));
    #assert(eval_binop(left1, right1, BinOp.and_) == rtm_eval_binop(left1, right1, BinOp.and_));
    #assert(eval_binop(left1, right1, BinOp.or_) == rtm_eval_binop(left1, right1, BinOp.or_));
    #assert(eval_binop(left1, right1, BinOp.xor_) == rtm_eval_binop(left1, right1, BinOp.xor_));
    #assert(eval_binop(left1, right1, BinOp.shl) == rtm_eval_binop(left1, right1, BinOp.shl));
    #assert(eval_binop(left1, right1, BinOp.shr) == rtm_eval_binop(left1, right1, BinOp.shr));

    ushort left2 = 0u;
    ushort right2 = 1u;
    #assert(eval_binop(left2, right2, BinOp.add) == rtm_eval_binop(left2, right2, BinOp.add));
    #assert(eval_binop(left2, right2, BinOp.sub) == rtm_eval_binop(left2, right2, BinOp.sub));
    #assert(eval_binop(left2, right2, BinOp.mul) == rtm_eval_binop(left2, right2, BinOp.mul));
    #assert(eval_binop(left2, right2, BinOp.div) == rtm_eval_binop(left2, right2, BinOp.div));
    #assert(eval_binop(left2, right2, BinOp.mod) == rtm_eval_binop(left2, right2, BinOp.mod));
    #assert(eval_binop(left2, right2, BinOp.and_) == rtm_eval_binop(left2, right2, BinOp.and_));
    #assert(eval_binop(left2, right2, BinOp.or_) == rtm_eval_binop(left2, right2, BinOp.or_));
    #assert(eval_binop(left2, right2, BinOp.xor_) == rtm_eval_binop(left2, right2, BinOp.xor_));
    #assert(eval_binop(left2, right2, BinOp.shl) == rtm_eval_binop(left2, right2, BinOp.shl));
    #assert(eval_binop(left2, right2, BinOp.shr) == rtm_eval_binop(left2, right2, BinOp.shr));

    ushort left3 = 1u;
    ushort right3 = 0u;
    #assert(eval_binop(left3, right3, BinOp.add) == rtm_eval_binop(left3, right3, BinOp.add));
    #assert(eval_binop(left3, right3, BinOp.sub) == rtm_eval_binop(left3, right3, BinOp.sub));
    #assert(eval_binop(left3, right3, BinOp.mul) == rtm_eval_binop(left3, right3, BinOp.mul));
    #assert(eval_binop(left3, right3, BinOp.and_) == rtm_eval_binop(left3, right3, BinOp.and_));
    #assert(eval_binop(left3, right3, BinOp.or_) == rtm_eval_binop(left3, right3, BinOp.or_));
    #assert(eval_binop(left3, right3, BinOp.xor_) == rtm_eval_binop(left3, right3, BinOp.xor_));
    #assert(eval_binop(left3, right3, BinOp.shl) == rtm_eval_binop(left3, right3, BinOp.shl));
    #assert(eval_binop(left3, right3, BinOp.shr) == rtm_eval_binop(left3, right3, BinOp.shr));

    ushort left4 = 1u;
    ushort right4 = 1u;
    #assert(eval_binop(left4, right4, BinOp.add) == rtm_eval_binop(left4, right4, BinOp.add));
    #assert(eval_binop(left4, right4, BinOp.sub) == rtm_eval_binop(left4, right4, BinOp.sub));
    #assert(eval_binop(left4, right4, BinOp.mul) == rtm_eval_binop(left4, right4, BinOp.mul));
    #assert(eval_binop(left4, right4, BinOp.div) == rtm_eval_binop(left4, right4, BinOp.div));
    #assert(eval_binop(left4, right4, BinOp.mod) == rtm_eval_binop(left4, right4, BinOp.mod));
    #assert(eval_binop(left4, right4, BinOp.and_) == rtm_eval_binop(left4, right4, BinOp.and_));
    #assert(eval_binop(left4, right4, BinOp.or_) == rtm_eval_binop(left4, right4, BinOp.or_));
    #assert(eval_binop(left4, right4, BinOp.xor_) == rtm_eval_binop(left4, right4, BinOp.xor_));
    #assert(eval_binop(left4, right4, BinOp.shl) == rtm_eval_binop(left4, right4, BinOp.shl));
    #assert(eval_binop(left4, right4, BinOp.shr) == rtm_eval_binop(left4, right4, BinOp.shr));

    ushort left5 = 1u;
    ushort right5 = 2u;
    #assert(eval_binop(left5, right5, BinOp.add) == rtm_eval_binop(left5, right5, BinOp.add));
    #assert(eval_binop(left5, right5, BinOp.sub) == rtm_eval_binop(left5, right5, BinOp.sub));
    #assert(eval_binop(left5, right5, BinOp.mul) == rtm_eval_binop(left5, right5, BinOp.mul));
    #assert(eval_binop(left5, right5, BinOp.div) == rtm_eval_binop(left5, right5, BinOp.div));
    #assert(eval_binop(left5, right5, BinOp.mod) == rtm_eval_binop(left5, right5, BinOp.mod)); 
    #assert(eval_binop(left5, right5, BinOp.and_) == rtm_eval_binop(left5, right5, BinOp.and_));
    #assert(eval_binop(left5, right5, BinOp.or_) == rtm_eval_binop(left5, right5, BinOp.or_));
    #assert(eval_binop(left5, right5, BinOp.xor_) == rtm_eval_binop(left5, right5, BinOp.xor_));
    #assert(eval_binop(left5, right5, BinOp.shl) == rtm_eval_binop(left5, right5, BinOp.shl));
    #assert(eval_binop(left5, right5, BinOp.shr) == rtm_eval_binop(left5, right5, BinOp.shr));

    ushort left6 = 2u;
    ushort right6 = 1u;
    #assert(eval_binop(left6, right6, BinOp.add) == rtm_eval_binop(left6, right6, BinOp.add));
    #assert(eval_binop(left6, right6, BinOp.sub) == rtm_eval_binop(left6, right6, BinOp.sub));
    #assert(eval_binop(left6, right6, BinOp.mul) == rtm_eval_binop(left6, right6, BinOp.mul));
    #assert(eval_binop(left6, right6, BinOp.div) == rtm_eval_binop(left6, right6, BinOp.div));
    #assert(eval_binop(left6, right6, BinOp.mod) == rtm_eval_binop(left6, right6, BinOp.mod));
    #assert(eval_binop(left6, right6, BinOp.and_) == rtm_eval_binop(left6, right6, BinOp.and_));
    #assert(eval_binop(left6, right6, BinOp.or_) == rtm_eval_binop(left6, right6, BinOp.or_));
    #assert(eval_binop(left6, right6, BinOp.xor_) == rtm_eval_binop(left6, right6, BinOp.xor_));
    #assert(eval_binop(left6, right6, BinOp.shl) == rtm_eval_binop(left6, right6, BinOp.shl));
    #assert(eval_binop(left6, right6, BinOp.shr) == rtm_eval_binop(left6, right6, BinOp.shr));

    ushort left7 = 2u;
    ushort right7 = 2u;
    #assert(eval_binop(left7, right7, BinOp.add) == rtm_eval_binop(left7, right7, BinOp.add));
    #assert(eval_binop(left7, right7, BinOp.sub) == rtm_eval_binop(left7, right7, BinOp.sub));
    #assert(eval_binop(left7, right7, BinOp.mul) == rtm_eval_binop(left7, right7, BinOp.mul));
    #assert(eval_binop(left7, right7, BinOp.div) == rtm_eval_binop(left7, right7, BinOp.div));
    #assert(eval_binop(left7, right7, BinOp.mod) == rtm_eval_binop(left7, right7, BinOp.mod));
    #assert(eval_binop(left7, right7, BinOp.and_) == rtm_eval_binop(left7, right7, BinOp.and_));
    #assert(eval_binop(left7, right7, BinOp.or_) == rtm_eval_binop(left7, right7, BinOp.or_));
    #assert(eval_binop(left7, right7, BinOp.xor_) == rtm_eval_binop(left7, right7, BinOp.xor_));
    #assert(eval_binop(left7, right7, BinOp.shl) == rtm_eval_binop(left7, right7, BinOp.shl));
    #assert(eval_binop(left7, right7, BinOp.shr) == rtm_eval_binop(left7, right7, BinOp.shr));

    ushort left8 = 32767u;
    ushort right8 = 0u;
    #assert(eval_binop(left8, right8, BinOp.add) == rtm_eval_binop(left8, right8, BinOp.add));
    #assert(eval_binop(left8, right8, BinOp.sub) == rtm_eval_binop(left8, right8, BinOp.sub));
    #assert(eval_binop(left8, right8, BinOp.mul) == rtm_eval_binop(left8, right8, BinOp.mul));
    #assert(eval_binop(left8, right8, BinOp.and_) == rtm_eval_binop(left8, right8, BinOp.and_));
    #assert(eval_binop(left8, right8, BinOp.or_) == rtm_eval_binop(left8, right8, BinOp.or_));
    #assert(eval_binop(left8, right8, BinOp.xor_) == rtm_eval_binop(left8, right8, BinOp.xor_));
    #assert(eval_binop(left8, right8, BinOp.shl) == rtm_eval_binop(left8, right8, BinOp.shl));
    #assert(eval_binop(left8, right8, BinOp.shr) == rtm_eval_binop(left8, right8, BinOp.shr));

    ushort left9 = 32767u;
    ushort right9 = 1u;
    #assert(eval_binop(left9, right9, BinOp.add) == rtm_eval_binop(left9, right9, BinOp.add));
    #assert(eval_binop(left9, right9, BinOp.sub) == rtm_eval_binop(left9, right9, BinOp.sub));
    #assert(eval_binop(left9, right9, BinOp.mul) == rtm_eval_binop(left9, right9, BinOp.mul));
    #assert(eval_binop(left9, right9, BinOp.div) == rtm_eval_binop(left9, right9, BinOp.div)); 
    #assert(eval_binop(left9, right9, BinOp.mod) == rtm_eval_binop(left9, right9, BinOp.mod)); 
    #assert(eval_binop(left9, right9, BinOp.and_) == rtm_eval_binop(left9, right9, BinOp.and_));
    #assert(eval_binop(left9, right9, BinOp.or_) == rtm_eval_binop(left9, right9, BinOp.or_));
    #assert(eval_binop(left9, right9, BinOp.xor_) == rtm_eval_binop(left9, right9, BinOp.xor_));
    #assert(eval_binop(left9, right9, BinOp.shl) == rtm_eval_binop(left9, right9, BinOp.shl));
    #assert(eval_binop(left9, right9, BinOp.shr) == rtm_eval_binop(left9, right9, BinOp.shr));

    ushort left10 = 32767u;
    ushort right10 = 2u;
    #assert(eval_binop(left10, right10, BinOp.add) == rtm_eval_binop(left10, right10, BinOp.add));
    #assert(eval_binop(left10, right10, BinOp.sub) == rtm_eval_binop(left10, right10, BinOp.sub));
    #assert(eval_binop(left10, right10, BinOp.mul) == rtm_eval_binop(left10, right10, BinOp.mul));
    #assert(eval_binop(left10, right10, BinOp.div) == rtm_eval_binop(left10, right10, BinOp.div)); 
    #assert(eval_binop(left10, right10, BinOp.mod) == rtm_eval_binop(left10, right10, BinOp.mod)); 
    #assert(eval_binop(left10, right10, BinOp.and_) == rtm_eval_binop(left10, right10, BinOp.and_));
    #assert(eval_binop(left10, right10, BinOp.or_) == rtm_eval_binop(left10, right10, BinOp.or_));
    #assert(eval_binop(left10, right10, BinOp.xor_) == rtm_eval_binop(left10, right10, BinOp.xor_));
    #assert(eval_binop(left10, right10, BinOp.shl) == rtm_eval_binop(left10, right10, BinOp.shl));
    #assert(eval_binop(left10, right10, BinOp.shr) == rtm_eval_binop(left10, right10, BinOp.shr));

    ushort left11 = 2u;
    ushort right11 = 0u;
    #assert(eval_binop(left11, right11, BinOp.add) == rtm_eval_binop(left11, right11, BinOp.add));
    #assert(eval_binop(left11, right11, BinOp.sub) == rtm_eval_binop(left11, right11, BinOp.sub));
    #assert(eval_binop(left11, right11, BinOp.mul) == rtm_eval_binop(left11, right11, BinOp.mul));
    #assert(eval_binop(left11, right11, BinOp.and_) == rtm_eval_binop(left11, right11, BinOp.and_));
    #assert(eval_binop(left11, right11, BinOp.or_) == rtm_eval_binop(left11, right11, BinOp.or_));
    #assert(eval_binop(left11, right11, BinOp.xor_) == rtm_eval_binop(left11, right11, BinOp.xor_));
    #assert(eval_binop(left11, right11, BinOp.shl) == rtm_eval_binop(left11, right11, BinOp.shl));
    #assert(eval_binop(left11, right11, BinOp.shr) == rtm_eval_binop(left11, right11, BinOp.shr));

    ushort left12 = 32768u;
    ushort right12 = 1u;
    #assert(eval_binop(left12, right12, BinOp.add) == rtm_eval_binop(left12, right12, BinOp.add));
    #assert(eval_binop(left12, right12, BinOp.sub) == rtm_eval_binop(left12, right12, BinOp.sub));
    #assert(eval_binop(left12, right12, BinOp.mul) == rtm_eval_binop(left12, right12, BinOp.mul));
    #assert(eval_binop(left12, right12, BinOp.div) == rtm_eval_binop(left12, right12, BinOp.div)); 
    #assert(eval_binop(left12, right12, BinOp.mod) == rtm_eval_binop(left12, right12, BinOp.mod)); 
    #assert(eval_binop(left12, right12, BinOp.and_) == rtm_eval_binop(left12, right12, BinOp.and_));
    #assert(eval_binop(left12, right12, BinOp.or_) == rtm_eval_binop(left12, right12, BinOp.or_));
    #assert(eval_binop(left12, right12, BinOp.xor_) == rtm_eval_binop(left12, right12, BinOp.xor_));
    #assert(eval_binop(left12, right12, BinOp.shl) == rtm_eval_binop(left12, right12, BinOp.shl));
    #assert(eval_binop(left12, right12, BinOp.shr) == rtm_eval_binop(left12, right12, BinOp.shr));

    ushort left13 = 32768u;
    ushort right13 = 0u;
    #assert(eval_binop(left13, right13, BinOp.add) == rtm_eval_binop(left13, right13, BinOp.add));
    #assert(eval_binop(left13, right13, BinOp.sub) == rtm_eval_binop(left13, right13, BinOp.sub));
    #assert(eval_binop(left13, right13, BinOp.mul) == rtm_eval_binop(left13, right13, BinOp.mul));
    #assert(eval_binop(left13, right13, BinOp.and_) == rtm_eval_binop(left13, right13, BinOp.and_));
    #assert(eval_binop(left13, right13, BinOp.or_) == rtm_eval_binop(left13, right13, BinOp.or_));
    #assert(eval_binop(left13, right13, BinOp.xor_) == rtm_eval_binop(left13, right13, BinOp.xor_));
    #assert(eval_binop(left13, right13, BinOp.shl) == rtm_eval_binop(left13, right13, BinOp.shl));
    #assert(eval_binop(left13, right13, BinOp.shr) == rtm_eval_binop(left13, right13, BinOp.shr));

    ushort left14 = 32768u;
    ushort right14 = 2u;
    #assert(eval_binop(left14, right14, BinOp.add) == rtm_eval_binop(left14, right14, BinOp.add));
    #assert(eval_binop(left14, right14, BinOp.sub) == rtm_eval_binop(left14, right14, BinOp.sub));
    #assert(eval_binop(left14, right14, BinOp.mul) == rtm_eval_binop(left14, right14, BinOp.mul));
    #assert(eval_binop(left14, right14, BinOp.div) == rtm_eval_binop(left14, right14, BinOp.div)); 
    #assert(eval_binop(left14, right14, BinOp.mod) == rtm_eval_binop(left14, right14, BinOp.mod)); 
    #assert(eval_binop(left14, right14, BinOp.and_) == rtm_eval_binop(left14, right14, BinOp.and_));
    #assert(eval_binop(left14, right14, BinOp.or_) == rtm_eval_binop(left14, right14, BinOp.or_));
    #assert(eval_binop(left14, right14, BinOp.xor_) == rtm_eval_binop(left14, right14, BinOp.xor_));
    #assert(eval_binop(left14, right14, BinOp.shl) == rtm_eval_binop(left14, right14, BinOp.shl));
    #assert(eval_binop(left14, right14, BinOp.shr) == rtm_eval_binop(left14, right14, BinOp.shr));

    ushort left15 = 32767u;
    ushort right15 = 32767u;
    #assert(eval_binop(left15, right15, BinOp.add) == rtm_eval_binop(left15, right15, BinOp.add));
    #assert(eval_binop(left15, right15, BinOp.sub) == rtm_eval_binop(left15, right15, BinOp.sub));
    #assert(eval_binop(left15, right15, BinOp.mul) == rtm_eval_binop(left15, right15, BinOp.mul));
    #assert(eval_binop(left15, right15, BinOp.div) == rtm_eval_binop(left15, right15, BinOp.div)); 
    #assert(eval_binop(left15, right15, BinOp.mod) == rtm_eval_binop(left15, right15, BinOp.mod)); 
    #assert(eval_binop(left15, right15, BinOp.and_) == rtm_eval_binop(left15, right15, BinOp.and_));
    #assert(eval_binop(left15, right15, BinOp.or_) == rtm_eval_binop(left15, right15, BinOp.or_));
    #assert(eval_binop(left15, right15, BinOp.xor_) == rtm_eval_binop(left15, right15, BinOp.xor_));

    ushort left16 = 65535u;
    ushort right16 = 0u;
    #assert(eval_binop(left16, right16, BinOp.add) == rtm_eval_binop(left16, right16, BinOp.add));
    #assert(eval_binop(left16, right16, BinOp.sub) == rtm_eval_binop(left16, right16, BinOp.sub));
    #assert(eval_binop(left16, right16, BinOp.mul) == rtm_eval_binop(left16, right16, BinOp.mul));
    #assert(eval_binop(left16, right16, BinOp.and_) == rtm_eval_binop(left16, right16, BinOp.and_));
    #assert(eval_binop(left16, right16, BinOp.or_) == rtm_eval_binop(left16, right16, BinOp.or_));
    #assert(eval_binop(left16, right16, BinOp.xor_) == rtm_eval_binop(left16, right16, BinOp.xor_));
    #assert(eval_binop(left16, right16, BinOp.shl) == rtm_eval_binop(left16, right16, BinOp.shl));
    #assert(eval_binop(left16, right16, BinOp.shr) == rtm_eval_binop(left16, right16, BinOp.shr));

    ushort left17 = 65535u;
    ushort right17 = 1u;
    #assert(eval_binop(left17, right17, BinOp.add) == rtm_eval_binop(left17, right17, BinOp.add));
    #assert(eval_binop(left17, right17, BinOp.sub) == rtm_eval_binop(left17, right17, BinOp.sub));
    #assert(eval_binop(left17, right17, BinOp.mul) == rtm_eval_binop(left17, right17, BinOp.mul));
    #assert(eval_binop(left17, right17, BinOp.div) == rtm_eval_binop(left17, right17, BinOp.div)); 
    #assert(eval_binop(left17, right17, BinOp.mod) == rtm_eval_binop(left17, right17, BinOp.mod)); 
    #assert(eval_binop(left17, right17, BinOp.and_) == rtm_eval_binop(left17, right17, BinOp.and_));
    #assert(eval_binop(left17, right17, BinOp.or_) == rtm_eval_binop(left17, right17, BinOp.or_));
    #assert(eval_binop(left17, right17, BinOp.xor_) == rtm_eval_binop(left17, right17, BinOp.xor_));
    #assert(eval_binop(left17, right17, BinOp.shl) == rtm_eval_binop(left17, right17, BinOp.shl));
    #assert(eval_binop(left17, right17, BinOp.shr) == rtm_eval_binop(left17, right17, BinOp.shr));

    ushort left18 = 65535u;
    ushort right18 = 2u;
    #assert(eval_binop(left18, right18, BinOp.add) == rtm_eval_binop(left18, right18, BinOp.add));
    #assert(eval_binop(left18, right18, BinOp.sub) == rtm_eval_binop(left18, right18, BinOp.sub));
    #assert(eval_binop(left18, right18, BinOp.mul) == rtm_eval_binop(left18, right18, BinOp.mul));
    #assert(eval_binop(left18, right18, BinOp.div) == rtm_eval_binop(left18, right18, BinOp.div)); 
    #assert(eval_binop(left18, right18, BinOp.mod) == rtm_eval_binop(left18, right18, BinOp.mod)); 
    #assert(eval_binop(left18, right18, BinOp.and_) == rtm_eval_binop(left18, right18, BinOp.and_));
    #assert(eval_binop(left18, right18, BinOp.or_) == rtm_eval_binop(left18, right18, BinOp.or_));
    #assert(eval_binop(left18, right18, BinOp.xor_) == rtm_eval_binop(left18, right18, BinOp.xor_));
    #assert(eval_binop(left18, right18, BinOp.shl) == rtm_eval_binop(left18, right18, BinOp.shl));
    #assert(eval_binop(left18, right18, BinOp.shr) == rtm_eval_binop(left18, right18, BinOp.shr));

    ushort left19 = 65535u;
    ushort right19 = 32767u;
    #assert(eval_binop(left19, right19, BinOp.add) == rtm_eval_binop(left19, right19, BinOp.add));
    #assert(eval_binop(left19, right19, BinOp.sub) == rtm_eval_binop(left19, right19, BinOp.sub));
    #assert(eval_binop(left19, right19, BinOp.mul) == rtm_eval_binop(left19, right19, BinOp.mul));
    #assert(eval_binop(left19, right19, BinOp.div) == rtm_eval_binop(left19, right19, BinOp.div)); 
    #assert(eval_binop(left19, right19, BinOp.mod) == rtm_eval_binop(left19, right19, BinOp.mod)); 
    #assert(eval_binop(left19, right19, BinOp.and_) == rtm_eval_binop(left19, right19, BinOp.and_));
    #assert(eval_binop(left19, right19, BinOp.or_) == rtm_eval_binop(left19, right19, BinOp.or_));
    #assert(eval_binop(left19, right19, BinOp.xor_) == rtm_eval_binop(left19, right19, BinOp.xor_));

    ushort left20 = 65535u;
    ushort right20 = 65535u;
    #assert(eval_binop(left20, right20, BinOp.add) == rtm_eval_binop(left20, right20, BinOp.add));
    #assert(eval_binop(left20, right20, BinOp.sub) == rtm_eval_binop(left20, right20, BinOp.sub));
    #assert(eval_binop(left20, right20, BinOp.mul) == rtm_eval_binop(left20, right20, BinOp.mul));
    #assert(eval_binop(left20, right20, BinOp.div) == rtm_eval_binop(left20, right20, BinOp.div)); 
    #assert(eval_binop(left20, right20, BinOp.mod) == rtm_eval_binop(left20, right20, BinOp.mod)); 
    #assert(eval_binop(left20, right20, BinOp.and_) == rtm_eval_binop(left20, right20, BinOp.and_));
    #assert(eval_binop(left20, right20, BinOp.or_) == rtm_eval_binop(left20, right20, BinOp.or_));
    #assert(eval_binop(left20, right20, BinOp.xor_) == rtm_eval_binop(left20, right20, BinOp.xor_));
}
