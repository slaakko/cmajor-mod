using System;

enum UnaryOp
{
    plus, neg, cpl
}

enum BinOp
{
    add, sub, mul, div, mod, and_, or_, xor_, shl, shr
}

enum Type
{
    sbyte_, byte_, short_, ushort_, int_, uint_, long_, ulong_
}

double ret(double x)
{
    return x;
}

double eval_unaryop(double operand, UnaryOp op)
{
    switch (op)
    {
        case UnaryOp.plus: return cast<double>(+operand);
        case UnaryOp.neg: return cast<double>(-operand);
    }
    return 0.0;
}

double rtm_eval_unaryop(double operand, UnaryOp op)
{
    return cast<double>(RtmEvaluateDoubleUnaryOp(cast<double>(operand), cast<int>(op)));
}

double eval_binop(double left, double right, BinOp op)
{
    switch (op)
    {
        case BinOp.add: return cast<double>(left + right);
        case BinOp.sub: return cast<double>(left - right);
        case BinOp.mul: return cast<double>(left * right);
        case BinOp.div: return cast<double>(left / right);
    }
    return 0.0;
}

double rtm_eval_binop(double left, double right, BinOp op)
{
    return cast<double>(RtmEvaluateDoubleBinaryOp(cast<double>(left), cast<double>(right), cast<int>(op)));
}

unit_test void double_value_test()
{
    double x;
    #assert(x == 0.0);
    double y = x;
    #assert(y == x);
    double z;
    z = x;
    #assert(z == x);
    double a = System.Rvalue(x);
    #assert(a == x);
    double b;
    b = System.Rvalue(x);
    #assert(b == x);
    #assert(ret(x) == x);
    double c = 1.0;
    #assert(c == 1.0);
    double d = c;
    #assert(d == c);
    double e;
    e = c;
    #assert(e == c);
    double f = System.Rvalue(c);
    #assert(f == c);
    double g;
    g = System.Rvalue(c);
    #assert(g == c);
    #assert(ret(c) == c);
}

unit_test void double_unaryop_test()
{
    double operand1 = 0.0;
    #assert(eval_unaryop(operand1, UnaryOp.plus) == rtm_eval_unaryop(operand1, UnaryOp.plus));
    #assert(eval_unaryop(operand1, UnaryOp.neg) == rtm_eval_unaryop(operand1, UnaryOp.neg));

    double operand2 = 1.0;
    #assert(eval_unaryop(operand2, UnaryOp.plus) == rtm_eval_unaryop(operand2, UnaryOp.plus));
    #assert(eval_unaryop(operand2, UnaryOp.neg) == rtm_eval_unaryop(operand2, UnaryOp.neg));

    double operand3 = 2.0;
    #assert(eval_unaryop(operand3, UnaryOp.plus) == rtm_eval_unaryop(operand3, UnaryOp.plus));
    #assert(eval_unaryop(operand3, UnaryOp.neg) == rtm_eval_unaryop(operand3, UnaryOp.neg));

    double operand4 = 2147483647.0;
    #assert(eval_unaryop(operand4, UnaryOp.plus) == rtm_eval_unaryop(operand4, UnaryOp.plus));
    #assert(eval_unaryop(operand4, UnaryOp.neg) == rtm_eval_unaryop(operand4, UnaryOp.neg));

    double operand5 = -1.0;
    #assert(eval_unaryop(operand5, UnaryOp.plus) == rtm_eval_unaryop(operand5, UnaryOp.plus));
    #assert(eval_unaryop(operand5, UnaryOp.neg) == rtm_eval_unaryop(operand5, UnaryOp.neg));

    double operand6 = -2.0;
    #assert(eval_unaryop(operand6, UnaryOp.plus) == rtm_eval_unaryop(operand6, UnaryOp.plus));
    #assert(eval_unaryop(operand6, UnaryOp.neg) == rtm_eval_unaryop(operand6, UnaryOp.neg));

    double operand7 = -2147483647.0;
    #assert(eval_unaryop(operand7, UnaryOp.plus) == rtm_eval_unaryop(operand7, UnaryOp.plus));
    #assert(eval_unaryop(operand7, UnaryOp.neg) == rtm_eval_unaryop(operand7, UnaryOp.neg));
    
    double operand8 = 9223372036854775807.0;
    #assert(eval_unaryop(operand8, UnaryOp.plus) == rtm_eval_unaryop(operand8, UnaryOp.plus));
    #assert(eval_unaryop(operand8, UnaryOp.neg) == rtm_eval_unaryop(operand8, UnaryOp.neg));

    double operand9 = -9223372036854775807.0;
    #assert(eval_unaryop(operand9, UnaryOp.plus) == rtm_eval_unaryop(operand9, UnaryOp.plus));
    #assert(eval_unaryop(operand9, UnaryOp.neg) == rtm_eval_unaryop(operand9, UnaryOp.neg));
}

unit_test void double_binop_test()
{
    double left1 = 0.0;
    double right1 = 0.0;
    #assert(eval_binop(left1, right1, BinOp.add) == rtm_eval_binop(left1, right1, BinOp.add));
    #assert(eval_binop(left1, right1, BinOp.sub) == rtm_eval_binop(left1, right1, BinOp.sub));
    #assert(eval_binop(left1, right1, BinOp.mul) == rtm_eval_binop(left1, right1, BinOp.mul));
    
    double left2 = 0.0;
    double right2 = 1.0;
    #assert(eval_binop(left2, right2, BinOp.add) == rtm_eval_binop(left2, right2, BinOp.add));
    #assert(eval_binop(left2, right2, BinOp.sub) == rtm_eval_binop(left2, right2, BinOp.sub));
    #assert(eval_binop(left2, right2, BinOp.mul) == rtm_eval_binop(left2, right2, BinOp.mul));
    #assert(eval_binop(left2, right2, BinOp.div) == rtm_eval_binop(left2, right2, BinOp.div));

    double left3 = 1.0;
    double right3 = 0.0;
    #assert(eval_binop(left3, right3, BinOp.add) == rtm_eval_binop(left3, right3, BinOp.add));
    #assert(eval_binop(left3, right3, BinOp.sub) == rtm_eval_binop(left3, right3, BinOp.sub));
    #assert(eval_binop(left3, right3, BinOp.mul) == rtm_eval_binop(left3, right3, BinOp.mul));

    double left4 = 1.0;
    double right4 = 1.0;
    #assert(eval_binop(left4, right4, BinOp.add) == rtm_eval_binop(left4, right4, BinOp.add));
    #assert(eval_binop(left4, right4, BinOp.sub) == rtm_eval_binop(left4, right4, BinOp.sub));
    #assert(eval_binop(left4, right4, BinOp.mul) == rtm_eval_binop(left4, right4, BinOp.mul));
    #assert(eval_binop(left4, right4, BinOp.div) == rtm_eval_binop(left4, right4, BinOp.div));

    double left5 = 1.0;
    double right5 = 2.0;
    #assert(eval_binop(left5, right5, BinOp.add) == rtm_eval_binop(left5, right5, BinOp.add));
    #assert(eval_binop(left5, right5, BinOp.sub) == rtm_eval_binop(left5, right5, BinOp.sub));
    #assert(eval_binop(left5, right5, BinOp.mul) == rtm_eval_binop(left5, right5, BinOp.mul));
    #assert(eval_binop(left5, right5, BinOp.div) == rtm_eval_binop(left5, right5, BinOp.div));

    double left6 = 2.0;
    double right6 = 1.0;
    #assert(eval_binop(left6, right6, BinOp.add) == rtm_eval_binop(left6, right6, BinOp.add));
    #assert(eval_binop(left6, right6, BinOp.sub) == rtm_eval_binop(left6, right6, BinOp.sub));
    #assert(eval_binop(left6, right6, BinOp.mul) == rtm_eval_binop(left6, right6, BinOp.mul));
    #assert(eval_binop(left6, right6, BinOp.div) == rtm_eval_binop(left6, right6, BinOp.div));

    double left7 = 2.0;
    double right7 = 2.0;
    #assert(eval_binop(left7, right7, BinOp.add) == rtm_eval_binop(left7, right7, BinOp.add));
    #assert(eval_binop(left7, right7, BinOp.sub) == rtm_eval_binop(left7, right7, BinOp.sub));
    #assert(eval_binop(left7, right7, BinOp.mul) == rtm_eval_binop(left7, right7, BinOp.mul));
    #assert(eval_binop(left7, right7, BinOp.div) == rtm_eval_binop(left7, right7, BinOp.div));

    double left8 = -1.0;
    double right8 = 0.0;
    #assert(eval_binop(left8, right8, BinOp.add) == rtm_eval_binop(left8, right8, BinOp.add));
    #assert(eval_binop(left8, right8, BinOp.sub) == rtm_eval_binop(left8, right8, BinOp.sub));
    #assert(eval_binop(left8, right8, BinOp.mul) == rtm_eval_binop(left8, right8, BinOp.mul));

    double left9 = -1.0;
    double right9 = -1.0;
    #assert(eval_binop(left9, right9, BinOp.add) == rtm_eval_binop(left9, right9, BinOp.add));
    #assert(eval_binop(left9, right9, BinOp.sub) == rtm_eval_binop(left9, right9, BinOp.sub));
    #assert(eval_binop(left9, right9, BinOp.mul) == rtm_eval_binop(left9, right9, BinOp.mul));
    #assert(eval_binop(left9, right9, BinOp.div) == rtm_eval_binop(left9, right9, BinOp.div)); 

    double left10 = -1.0;
    double right10 = 2.0;
    #assert(eval_binop(left10, right10, BinOp.add) == rtm_eval_binop(left10, right10, BinOp.add));
    #assert(eval_binop(left10, right10, BinOp.sub) == rtm_eval_binop(left10, right10, BinOp.sub));
    #assert(eval_binop(left10, right10, BinOp.mul) == rtm_eval_binop(left10, right10, BinOp.mul));
    #assert(eval_binop(left10, right10, BinOp.div) == rtm_eval_binop(left10, right10, BinOp.div)); 

    double left11 = 2.0;
    double right11 = -1.0;
    #assert(eval_binop(left11, right11, BinOp.add) == rtm_eval_binop(left11, right11, BinOp.add));
    #assert(eval_binop(left11, right11, BinOp.sub) == rtm_eval_binop(left11, right11, BinOp.sub));
    #assert(eval_binop(left11, right11, BinOp.mul) == rtm_eval_binop(left11, right11, BinOp.mul));
    #assert(eval_binop(left11, right11, BinOp.div) == rtm_eval_binop(left11, right11, BinOp.div)); 

    double left12 = 2147483647.0;
    double right12 = 1.0;
    #assert(eval_binop(left12, right12, BinOp.add) == rtm_eval_binop(left12, right12, BinOp.add));
    #assert(eval_binop(left12, right12, BinOp.sub) == rtm_eval_binop(left12, right12, BinOp.sub));
    #assert(eval_binop(left12, right12, BinOp.mul) == rtm_eval_binop(left12, right12, BinOp.mul));
    #assert(eval_binop(left12, right12, BinOp.div) == rtm_eval_binop(left12, right12, BinOp.div)); 

    double left13 = 2147483647.0;
    double right13 = -1.0;
    #assert(eval_binop(left13, right13, BinOp.add) == rtm_eval_binop(left13, right13, BinOp.add));
    #assert(eval_binop(left13, right13, BinOp.sub) == rtm_eval_binop(left13, right13, BinOp.sub));
    #assert(eval_binop(left13, right13, BinOp.mul) == rtm_eval_binop(left13, right13, BinOp.mul));
    #assert(eval_binop(left13, right13, BinOp.div) == rtm_eval_binop(left13, right13, BinOp.div)); 

    double left14 = 2147483647.0;
    double right14 = 2.0;
    #assert(eval_binop(left14, right14, BinOp.add) == rtm_eval_binop(left14, right14, BinOp.add));
    #assert(eval_binop(left14, right14, BinOp.sub) == rtm_eval_binop(left14, right14, BinOp.sub));
    #assert(eval_binop(left14, right14, BinOp.mul) == rtm_eval_binop(left14, right14, BinOp.mul));
    #assert(eval_binop(left14, right14, BinOp.div) == rtm_eval_binop(left14, right14, BinOp.div)); 

    double left15 = 2147483647.0;
    double right15 = 2147483647.0;
    #assert(eval_binop(left15, right15, BinOp.add) == rtm_eval_binop(left15, right15, BinOp.add));
    #assert(eval_binop(left15, right15, BinOp.sub) == rtm_eval_binop(left15, right15, BinOp.sub));
    #assert(eval_binop(left15, right15, BinOp.mul) == rtm_eval_binop(left15, right15, BinOp.mul));
    #assert(eval_binop(left15, right15, BinOp.div) == rtm_eval_binop(left15, right15, BinOp.div)); 

    double left16 = -2147483647.0;
    double right16 = 0.0;
    #assert(eval_binop(left16, right16, BinOp.add) == rtm_eval_binop(left16, right16, BinOp.add));
    #assert(eval_binop(left16, right16, BinOp.sub) == rtm_eval_binop(left16, right16, BinOp.sub));
    #assert(eval_binop(left16, right16, BinOp.mul) == rtm_eval_binop(left16, right16, BinOp.mul));

    double left17 = -2147483647.0;
    double right17 = 1.0;
    #assert(eval_binop(left17, right17, BinOp.add) == rtm_eval_binop(left17, right17, BinOp.add));
    #assert(eval_binop(left17, right17, BinOp.sub) == rtm_eval_binop(left17, right17, BinOp.sub));
    #assert(eval_binop(left17, right17, BinOp.mul) == rtm_eval_binop(left17, right17, BinOp.mul));
    #assert(eval_binop(left17, right17, BinOp.div) == rtm_eval_binop(left17, right17, BinOp.div)); 

    double left18 = -2147483647.0;
    double right18 = -1.0;
    #assert(eval_binop(left18, right18, BinOp.add) == rtm_eval_binop(left18, right18, BinOp.add));
    #assert(eval_binop(left18, right18, BinOp.sub) == rtm_eval_binop(left18, right18, BinOp.sub));
    #assert(eval_binop(left18, right18, BinOp.mul) == rtm_eval_binop(left18, right18, BinOp.mul));
    #assert(eval_binop(left18, right18, BinOp.div) == rtm_eval_binop(left18, right18, BinOp.div)); 

    double left19 = -2147483647.0;
    double right19 = 2.0;
    #assert(eval_binop(left19, right19, BinOp.add) == rtm_eval_binop(left19, right19, BinOp.add));
    #assert(eval_binop(left19, right19, BinOp.sub) == rtm_eval_binop(left19, right19, BinOp.sub));
    #assert(eval_binop(left19, right19, BinOp.mul) == rtm_eval_binop(left19, right19, BinOp.mul));
    #assert(eval_binop(left19, right19, BinOp.div) == rtm_eval_binop(left19, right19, BinOp.div)); 

    double left20 = -2147483647.0;
    double right20 = -2147483647.0;
    #assert(eval_binop(left20, right20, BinOp.add) == rtm_eval_binop(left20, right20, BinOp.add));
    #assert(eval_binop(left20, right20, BinOp.sub) == rtm_eval_binop(left20, right20, BinOp.sub));
    #assert(eval_binop(left20, right20, BinOp.mul) == rtm_eval_binop(left20, right20, BinOp.mul));
    #assert(eval_binop(left20, right20, BinOp.div) == rtm_eval_binop(left20, right20, BinOp.div)); 

    double left21 = 9223372036854775807.0;
    double right21 = 0.0;
    #assert(eval_binop(left21, right21, BinOp.add) == rtm_eval_binop(left21, right21, BinOp.add));
    #assert(eval_binop(left21, right21, BinOp.sub) == rtm_eval_binop(left21, right21, BinOp.sub));
    #assert(eval_binop(left21, right21, BinOp.mul) == rtm_eval_binop(left21, right21, BinOp.mul));

    double left22 = 9223372036854775807.0;
    double right22 = 1.0;
    #assert(eval_binop(left22, right22, BinOp.add) == rtm_eval_binop(left22, right22, BinOp.add));
    #assert(eval_binop(left22, right22, BinOp.sub) == rtm_eval_binop(left22, right22, BinOp.sub));
    #assert(eval_binop(left22, right22, BinOp.mul) == rtm_eval_binop(left22, right22, BinOp.mul));
    #assert(eval_binop(left22, right22, BinOp.div) == rtm_eval_binop(left22, right22, BinOp.div)); 

    double left23 = 9223372036854775807.0;
    double right23 = 2.0;
    #assert(eval_binop(left23, right23, BinOp.add) == rtm_eval_binop(left23, right23, BinOp.add));
    #assert(eval_binop(left23, right23, BinOp.sub) == rtm_eval_binop(left23, right23, BinOp.sub));
    #assert(eval_binop(left23, right23, BinOp.mul) == rtm_eval_binop(left23, right23, BinOp.mul));
    #assert(eval_binop(left23, right23, BinOp.div) == rtm_eval_binop(left23, right23, BinOp.div)); 

    double left24 = 9223372036854775807.0;
    double right24 = -1.0;
    #assert(eval_binop(left24, right24, BinOp.add) == rtm_eval_binop(left24, right24, BinOp.add));
    #assert(eval_binop(left24, right24, BinOp.sub) == rtm_eval_binop(left24, right24, BinOp.sub));
    #assert(eval_binop(left24, right24, BinOp.mul) == rtm_eval_binop(left24, right24, BinOp.mul));
    #assert(eval_binop(left24, right24, BinOp.div) == rtm_eval_binop(left24, right24, BinOp.div)); 

    double left25 = 9223372036854775807.0;
    double right25 = 9223372036854775807.0;
    #assert(eval_binop(left25, right25, BinOp.add) == rtm_eval_binop(left25, right25, BinOp.add));
    #assert(eval_binop(left25, right25, BinOp.sub) == rtm_eval_binop(left25, right25, BinOp.sub));
    #assert(eval_binop(left25, right25, BinOp.mul) == rtm_eval_binop(left25, right25, BinOp.mul));
    #assert(eval_binop(left25, right25, BinOp.div) == rtm_eval_binop(left25, right25, BinOp.div)); 

    double left26 = -9223372036854775807.0;
    double right26 = 0.0;
    #assert(eval_binop(left26, right26, BinOp.add) == rtm_eval_binop(left26, right26, BinOp.add));
    #assert(eval_binop(left26, right26, BinOp.sub) == rtm_eval_binop(left26, right26, BinOp.sub));
    #assert(eval_binop(left26, right26, BinOp.mul) == rtm_eval_binop(left26, right26, BinOp.mul));

    double left27 = -9223372036854775807.0;
    double right27 = 1.0;
    #assert(eval_binop(left27, right27, BinOp.add) == rtm_eval_binop(left27, right27, BinOp.add));
    #assert(eval_binop(left27, right27, BinOp.sub) == rtm_eval_binop(left27, right27, BinOp.sub));
    #assert(eval_binop(left27, right27, BinOp.mul) == rtm_eval_binop(left27, right27, BinOp.mul));
    #assert(eval_binop(left27, right27, BinOp.div) == rtm_eval_binop(left27, right27, BinOp.div)); 

    double left28 = -9223372036854775807.0;
    double right28 = -1.0;
    #assert(eval_binop(left28, right28, BinOp.add) == rtm_eval_binop(left28, right28, BinOp.add));
    #assert(eval_binop(left28, right28, BinOp.sub) == rtm_eval_binop(left28, right28, BinOp.sub));
    #assert(eval_binop(left28, right28, BinOp.mul) == rtm_eval_binop(left28, right28, BinOp.mul));
    #assert(eval_binop(left28, right28, BinOp.div) == rtm_eval_binop(left28, right28, BinOp.div)); 

    double left29 = -9223372036854775807.0;
    double right29 = 2.0;
    #assert(eval_binop(left29, right29, BinOp.add) == rtm_eval_binop(left29, right29, BinOp.add));
    #assert(eval_binop(left29, right29, BinOp.sub) == rtm_eval_binop(left29, right29, BinOp.sub));
    #assert(eval_binop(left29, right29, BinOp.mul) == rtm_eval_binop(left29, right29, BinOp.mul));
    #assert(eval_binop(left29, right29, BinOp.div) == rtm_eval_binop(left29, right29, BinOp.div)); 
    
    double left30 = -9223372036854775807.0;
    double right30 = -9223372036854775807.0;
    #assert(eval_binop(left30, right30, BinOp.add) == rtm_eval_binop(left30, right30, BinOp.add));
    #assert(eval_binop(left30, right30, BinOp.sub) == rtm_eval_binop(left30, right30, BinOp.sub));
    #assert(eval_binop(left30, right30, BinOp.mul) == rtm_eval_binop(left30, right30, BinOp.mul));
    #assert(eval_binop(left30, right30, BinOp.div) == rtm_eval_binop(left30, right30, BinOp.div)); 
}
