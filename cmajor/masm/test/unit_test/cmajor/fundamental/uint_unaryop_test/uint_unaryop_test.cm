using System;

enum UnaryOp
{
    plus, neg, cpl
}

enum BinOp
{
    add, sub, mul, div, mod, and_, or_, xor_, shl, shr
}

enum Type
{
    sbyte_, byte_, short_, ushort_, int_, uint_, long_, ulong_
}

uint ret(uint x)
{
    return x;
}

uint eval_unaryop(uint operand, UnaryOp op)
{
    switch (op)
    {
        case UnaryOp.plus: return cast<uint>(+operand);
        case UnaryOp.neg: return cast<uint>(-operand);
        case UnaryOp.cpl: return cast<uint>(~operand);
    }
    return 0u;
}

uint rtm_eval_unaryop(uint operand, UnaryOp op)
{
    return cast<uint>(RtmEvaluateUnaryOp(cast<long>(operand), cast<int>(Type.uint_), cast<int>(op)));
}

uint eval_binop(uint left, uint right, BinOp op)
{
    switch (op)
    {
        case BinOp.add: return cast<uint>(left + right);
        case BinOp.sub: return cast<uint>(left - right);
        case BinOp.mul: return cast<uint>(left * right);
        case BinOp.div: return cast<uint>(left / right);
        case BinOp.mod: return cast<uint>(left % right);
        case BinOp.and_: return cast<uint>(left & right);
        case BinOp.or_: return cast<uint>(left | right);
        case BinOp.xor_: return cast<uint>(left ^ right);
        case BinOp.shl: return cast<uint>(left << right);
        case BinOp.shr: return cast<uint>(left >> right);
    }
    return 0u;
}

uint rtm_eval_binop(uint left, uint right, BinOp op)
{
    return cast<uint>(RtmEvaluateBinOp(cast<long>(left), cast<long>(right), cast<int>(Type.uint_), cast<int>(op)));
}

unit_test void uint_unaryop_test()
{
    uint operand1 = 0u;
    #assert (eval_unaryop(operand1, UnaryOp.plus) == rtm_eval_unaryop(operand1, UnaryOp.plus));
    #assert (eval_unaryop(operand1, UnaryOp.neg) == rtm_eval_unaryop(operand1, UnaryOp.neg));
    #assert (eval_unaryop(operand1, UnaryOp.cpl) == rtm_eval_unaryop(operand1, UnaryOp.cpl));
    uint operand2 = 1u;
    #assert (eval_unaryop(operand2, UnaryOp.plus) == rtm_eval_unaryop(operand2, UnaryOp.plus));
    #assert (eval_unaryop(operand2, UnaryOp.neg) == rtm_eval_unaryop(operand2, UnaryOp.neg));
    #assert (eval_unaryop(operand2, UnaryOp.cpl) == rtm_eval_unaryop(operand2, UnaryOp.cpl));
    uint operand3 = 2u;
    #assert (eval_unaryop(operand3, UnaryOp.plus) == rtm_eval_unaryop(operand3, UnaryOp.plus));
    #assert (eval_unaryop(operand3, UnaryOp.neg) == rtm_eval_unaryop(operand3, UnaryOp.neg));
    #assert (eval_unaryop(operand3, UnaryOp.cpl) == rtm_eval_unaryop(operand3, UnaryOp.cpl));
    uint operand4 = 127u;
    #assert (eval_unaryop(operand4, UnaryOp.plus) == rtm_eval_unaryop(operand4, UnaryOp.plus));
    #assert (eval_unaryop(operand4, UnaryOp.neg) == rtm_eval_unaryop(operand4, UnaryOp.neg));
    #assert (eval_unaryop(operand4, UnaryOp.cpl) == rtm_eval_unaryop(operand4, UnaryOp.cpl));
    uint operand5 = 128u;
    #assert (eval_unaryop(operand5, UnaryOp.plus) == rtm_eval_unaryop(operand5, UnaryOp.plus));
    #assert (eval_unaryop(operand5, UnaryOp.neg) == rtm_eval_unaryop(operand5, UnaryOp.neg));
    #assert (eval_unaryop(operand5, UnaryOp.cpl) == rtm_eval_unaryop(operand5, UnaryOp.cpl));
    uint operand6 = 255u;
    #assert (eval_unaryop(operand6, UnaryOp.plus) == rtm_eval_unaryop(operand6, UnaryOp.plus));
    #assert (eval_unaryop(operand6, UnaryOp.neg) == rtm_eval_unaryop(operand6, UnaryOp.neg));
    #assert (eval_unaryop(operand6, UnaryOp.cpl) == rtm_eval_unaryop(operand6, UnaryOp.cpl));
    uint operand7 = 65535u;
    #assert (eval_unaryop(operand7, UnaryOp.plus) == rtm_eval_unaryop(operand7, UnaryOp.plus));
    #assert (eval_unaryop(operand7, UnaryOp.neg) == rtm_eval_unaryop(operand7, UnaryOp.neg));
    #assert (eval_unaryop(operand7, UnaryOp.cpl) == rtm_eval_unaryop(operand7, UnaryOp.cpl));
    uint operand8 = 4294967295u;
    #assert (eval_unaryop(operand8, UnaryOp.plus) == rtm_eval_unaryop(operand8, UnaryOp.plus));
    #assert (eval_unaryop(operand8, UnaryOp.neg) == rtm_eval_unaryop(operand8, UnaryOp.neg));
    #assert (eval_unaryop(operand8, UnaryOp.cpl) == rtm_eval_unaryop(operand8, UnaryOp.cpl));
}
