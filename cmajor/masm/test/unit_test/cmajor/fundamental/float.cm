using System;

enum UnaryOp
{
    plus, neg, cpl
}

enum BinOp
{
    add, sub, mul, div, mod, and_, or_, xor_, shl, shr
}

enum Type
{
    sbyte_, byte_, short_, ushort_, int_, uint_, long_, ulong_
}

float ret(float x)
{
    return x;
}

float eval_unaryop(float operand, UnaryOp op)
{
    switch (op)
    {
        case UnaryOp.plus: return cast<float>(+operand);
        case UnaryOp.neg: return cast<float>(-operand);
    }
    return 0.0f;
}

float rtm_eval_unaryop(float operand, UnaryOp op)
{
    return cast<float>(RtmEvaluateFloatUnaryOp(cast<float>(operand), cast<int>(op)));
}

float eval_binop(float left, float right, BinOp op)
{
    switch (op)
    {
        case BinOp.add: return cast<float>(left + right);
        case BinOp.sub: return cast<float>(left - right);
        case BinOp.mul: return cast<float>(left * right);
        case BinOp.div: return cast<float>(left / right);
    }
    return 0.0f;
}

float rtm_eval_binop(float left, float right, BinOp op)
{
    return cast<float>(RtmEvaluateFloatBinaryOp(cast<float>(left), cast<float>(right), cast<int>(op)));
}

unit_test void float_value_test()
{
    float x;
    #assert(x == 0.0f);
    float y = x;
    #assert(y == x);
    float z;
    z = x;
    #assert(z == x);
    float a = System.Rvalue(x);
    #assert(a == x);
    float b;
    b = System.Rvalue(x);
    #assert(b == x);
    #assert(ret(x) == x);
    float c = 1.0f;
    #assert(c == 1.0f);
    float d = c;
    #assert(d == c);
    float e;
    e = c;
    #assert(e == c);
    float f = System.Rvalue(c);
    #assert(f == c);
    float g;
    g = System.Rvalue(c);
    #assert(g == c);
    #assert(ret(c) == c);
}

unit_test void float_unaryop_test()
{
    float operand1 = 0.0f;
    #assert(eval_unaryop(operand1, UnaryOp.plus) == rtm_eval_unaryop(operand1, UnaryOp.plus));
    #assert(eval_unaryop(operand1, UnaryOp.neg) == rtm_eval_unaryop(operand1, UnaryOp.neg));

    float operand2 = 1.0f;
    #assert(eval_unaryop(operand2, UnaryOp.plus) == rtm_eval_unaryop(operand2, UnaryOp.plus));
    #assert(eval_unaryop(operand2, UnaryOp.neg) == rtm_eval_unaryop(operand2, UnaryOp.neg));

    float operand3 = 2.0f;
    #assert(eval_unaryop(operand3, UnaryOp.plus) == rtm_eval_unaryop(operand3, UnaryOp.plus));
    #assert(eval_unaryop(operand3, UnaryOp.neg) == rtm_eval_unaryop(operand3, UnaryOp.neg));

    float operand4 = 2147483647.0f;
    #assert(eval_unaryop(operand4, UnaryOp.plus) == rtm_eval_unaryop(operand4, UnaryOp.plus));
    #assert(eval_unaryop(operand4, UnaryOp.neg) == rtm_eval_unaryop(operand4, UnaryOp.neg));

    float operand5 = -1.0f;
    #assert(eval_unaryop(operand5, UnaryOp.plus) == rtm_eval_unaryop(operand5, UnaryOp.plus));
    #assert(eval_unaryop(operand5, UnaryOp.neg) == rtm_eval_unaryop(operand5, UnaryOp.neg));

    float operand6 = -2.0f;
    #assert(eval_unaryop(operand6, UnaryOp.plus) == rtm_eval_unaryop(operand6, UnaryOp.plus));
    #assert(eval_unaryop(operand6, UnaryOp.neg) == rtm_eval_unaryop(operand6, UnaryOp.neg));

    float operand7 = -2147483647.0f;
    #assert(eval_unaryop(operand7, UnaryOp.plus) == rtm_eval_unaryop(operand7, UnaryOp.plus));
    #assert(eval_unaryop(operand7, UnaryOp.neg) == rtm_eval_unaryop(operand7, UnaryOp.neg));
    
    float operand8 = 9223372036854775807.0f;
    #assert(eval_unaryop(operand8, UnaryOp.plus) == rtm_eval_unaryop(operand8, UnaryOp.plus));
    #assert(eval_unaryop(operand8, UnaryOp.neg) == rtm_eval_unaryop(operand8, UnaryOp.neg));

    float operand9 = -9223372036854775807.0f;
    #assert(eval_unaryop(operand9, UnaryOp.plus) == rtm_eval_unaryop(operand9, UnaryOp.plus));
    #assert(eval_unaryop(operand9, UnaryOp.neg) == rtm_eval_unaryop(operand9, UnaryOp.neg));
}

unit_test void float_binop_test()
{
    float left1 = 0.0f;
    float right1 = 0.0f;
    #assert(eval_binop(left1, right1, BinOp.add) == rtm_eval_binop(left1, right1, BinOp.add));
    #assert(eval_binop(left1, right1, BinOp.sub) == rtm_eval_binop(left1, right1, BinOp.sub));
    #assert(eval_binop(left1, right1, BinOp.mul) == rtm_eval_binop(left1, right1, BinOp.mul));
    
    float left2 = 0.0f;
    float right2 = 1.0f;
    #assert(eval_binop(left2, right2, BinOp.add) == rtm_eval_binop(left2, right2, BinOp.add));
    #assert(eval_binop(left2, right2, BinOp.sub) == rtm_eval_binop(left2, right2, BinOp.sub));
    #assert(eval_binop(left2, right2, BinOp.mul) == rtm_eval_binop(left2, right2, BinOp.mul));
    #assert(eval_binop(left2, right2, BinOp.div) == rtm_eval_binop(left2, right2, BinOp.div));

    float left3 = 1.0f;
    float right3 = 0.0f;
    #assert(eval_binop(left3, right3, BinOp.add) == rtm_eval_binop(left3, right3, BinOp.add));
    #assert(eval_binop(left3, right3, BinOp.sub) == rtm_eval_binop(left3, right3, BinOp.sub));
    #assert(eval_binop(left3, right3, BinOp.mul) == rtm_eval_binop(left3, right3, BinOp.mul));

    float left4 = 1.0f;
    float right4 = 1.0f;
    #assert(eval_binop(left4, right4, BinOp.add) == rtm_eval_binop(left4, right4, BinOp.add));
    #assert(eval_binop(left4, right4, BinOp.sub) == rtm_eval_binop(left4, right4, BinOp.sub));
    #assert(eval_binop(left4, right4, BinOp.mul) == rtm_eval_binop(left4, right4, BinOp.mul));
    #assert(eval_binop(left4, right4, BinOp.div) == rtm_eval_binop(left4, right4, BinOp.div));

    float left5 = 1.0f;
    float right5 = 2.0f;
    #assert(eval_binop(left5, right5, BinOp.add) == rtm_eval_binop(left5, right5, BinOp.add));
    #assert(eval_binop(left5, right5, BinOp.sub) == rtm_eval_binop(left5, right5, BinOp.sub));
    #assert(eval_binop(left5, right5, BinOp.mul) == rtm_eval_binop(left5, right5, BinOp.mul));
    #assert(eval_binop(left5, right5, BinOp.div) == rtm_eval_binop(left5, right5, BinOp.div));

    float left6 = 2.0f;
    float right6 = 1.0f;
    #assert(eval_binop(left6, right6, BinOp.add) == rtm_eval_binop(left6, right6, BinOp.add));
    #assert(eval_binop(left6, right6, BinOp.sub) == rtm_eval_binop(left6, right6, BinOp.sub));
    #assert(eval_binop(left6, right6, BinOp.mul) == rtm_eval_binop(left6, right6, BinOp.mul));
    #assert(eval_binop(left6, right6, BinOp.div) == rtm_eval_binop(left6, right6, BinOp.div));

    float left7 = 2.0f;
    float right7 = 2.0f;
    #assert(eval_binop(left7, right7, BinOp.add) == rtm_eval_binop(left7, right7, BinOp.add));
    #assert(eval_binop(left7, right7, BinOp.sub) == rtm_eval_binop(left7, right7, BinOp.sub));
    #assert(eval_binop(left7, right7, BinOp.mul) == rtm_eval_binop(left7, right7, BinOp.mul));
    #assert(eval_binop(left7, right7, BinOp.div) == rtm_eval_binop(left7, right7, BinOp.div));

    float left8 = -1.0f;
    float right8 = 0.0f;
    #assert(eval_binop(left8, right8, BinOp.add) == rtm_eval_binop(left8, right8, BinOp.add));
    #assert(eval_binop(left8, right8, BinOp.sub) == rtm_eval_binop(left8, right8, BinOp.sub));
    #assert(eval_binop(left8, right8, BinOp.mul) == rtm_eval_binop(left8, right8, BinOp.mul));

    float left9 = -1.0f;
    float right9 = -1.0f;
    #assert(eval_binop(left9, right9, BinOp.add) == rtm_eval_binop(left9, right9, BinOp.add));
    #assert(eval_binop(left9, right9, BinOp.sub) == rtm_eval_binop(left9, right9, BinOp.sub));
    #assert(eval_binop(left9, right9, BinOp.mul) == rtm_eval_binop(left9, right9, BinOp.mul));
    #assert(eval_binop(left9, right9, BinOp.div) == rtm_eval_binop(left9, right9, BinOp.div)); 

    float left10 = -1.0f;
    float right10 = 2.0f;
    #assert(eval_binop(left10, right10, BinOp.add) == rtm_eval_binop(left10, right10, BinOp.add));
    #assert(eval_binop(left10, right10, BinOp.sub) == rtm_eval_binop(left10, right10, BinOp.sub));
    #assert(eval_binop(left10, right10, BinOp.mul) == rtm_eval_binop(left10, right10, BinOp.mul));
    #assert(eval_binop(left10, right10, BinOp.div) == rtm_eval_binop(left10, right10, BinOp.div)); 

    float left11 = 2.0f;
    float right11 = -1.0f;
    #assert(eval_binop(left11, right11, BinOp.add) == rtm_eval_binop(left11, right11, BinOp.add));
    #assert(eval_binop(left11, right11, BinOp.sub) == rtm_eval_binop(left11, right11, BinOp.sub));
    #assert(eval_binop(left11, right11, BinOp.mul) == rtm_eval_binop(left11, right11, BinOp.mul));
    #assert(eval_binop(left11, right11, BinOp.div) == rtm_eval_binop(left11, right11, BinOp.div)); 

    float left12 = 2147483647.0f;
    float right12 = 1.0f;
    #assert(eval_binop(left12, right12, BinOp.add) == rtm_eval_binop(left12, right12, BinOp.add));
    #assert(eval_binop(left12, right12, BinOp.sub) == rtm_eval_binop(left12, right12, BinOp.sub));
    #assert(eval_binop(left12, right12, BinOp.mul) == rtm_eval_binop(left12, right12, BinOp.mul));
    #assert(eval_binop(left12, right12, BinOp.div) == rtm_eval_binop(left12, right12, BinOp.div)); 

    float left13 = 2147483647.0f;
    float right13 = -1.0f;
    #assert(eval_binop(left13, right13, BinOp.add) == rtm_eval_binop(left13, right13, BinOp.add));
    #assert(eval_binop(left13, right13, BinOp.sub) == rtm_eval_binop(left13, right13, BinOp.sub));
    #assert(eval_binop(left13, right13, BinOp.mul) == rtm_eval_binop(left13, right13, BinOp.mul));
    #assert(eval_binop(left13, right13, BinOp.div) == rtm_eval_binop(left13, right13, BinOp.div)); 

    float left14 = 2147483647.0f;
    float right14 = 2.0f;
    #assert(eval_binop(left14, right14, BinOp.add) == rtm_eval_binop(left14, right14, BinOp.add));
    #assert(eval_binop(left14, right14, BinOp.sub) == rtm_eval_binop(left14, right14, BinOp.sub));
    #assert(eval_binop(left14, right14, BinOp.mul) == rtm_eval_binop(left14, right14, BinOp.mul));
    #assert(eval_binop(left14, right14, BinOp.div) == rtm_eval_binop(left14, right14, BinOp.div)); 

    float left15 = 2147483647.0f;
    float right15 = 2147483647.0f;
    #assert(eval_binop(left15, right15, BinOp.add) == rtm_eval_binop(left15, right15, BinOp.add));
    #assert(eval_binop(left15, right15, BinOp.sub) == rtm_eval_binop(left15, right15, BinOp.sub));
    #assert(eval_binop(left15, right15, BinOp.mul) == rtm_eval_binop(left15, right15, BinOp.mul));
    #assert(eval_binop(left15, right15, BinOp.div) == rtm_eval_binop(left15, right15, BinOp.div)); 

    float left16 = -2147483647.0f;
    float right16 = 0.0f;
    #assert(eval_binop(left16, right16, BinOp.add) == rtm_eval_binop(left16, right16, BinOp.add));
    #assert(eval_binop(left16, right16, BinOp.sub) == rtm_eval_binop(left16, right16, BinOp.sub));
    #assert(eval_binop(left16, right16, BinOp.mul) == rtm_eval_binop(left16, right16, BinOp.mul));

    float left17 = -2147483647.0f;
    float right17 = 1.0f;
    #assert(eval_binop(left17, right17, BinOp.add) == rtm_eval_binop(left17, right17, BinOp.add));
    #assert(eval_binop(left17, right17, BinOp.sub) == rtm_eval_binop(left17, right17, BinOp.sub));
    #assert(eval_binop(left17, right17, BinOp.mul) == rtm_eval_binop(left17, right17, BinOp.mul));
    #assert(eval_binop(left17, right17, BinOp.div) == rtm_eval_binop(left17, right17, BinOp.div)); 

    float left18 = -2147483647.0f;
    float right18 = -1.0f;
    #assert(eval_binop(left18, right18, BinOp.add) == rtm_eval_binop(left18, right18, BinOp.add));
    #assert(eval_binop(left18, right18, BinOp.sub) == rtm_eval_binop(left18, right18, BinOp.sub));
    #assert(eval_binop(left18, right18, BinOp.mul) == rtm_eval_binop(left18, right18, BinOp.mul));
    #assert(eval_binop(left18, right18, BinOp.div) == rtm_eval_binop(left18, right18, BinOp.div)); 

    float left19 = -2147483647.0f;
    float right19 = 2.0f;
    #assert(eval_binop(left19, right19, BinOp.add) == rtm_eval_binop(left19, right19, BinOp.add));
    #assert(eval_binop(left19, right19, BinOp.sub) == rtm_eval_binop(left19, right19, BinOp.sub));
    #assert(eval_binop(left19, right19, BinOp.mul) == rtm_eval_binop(left19, right19, BinOp.mul));
    #assert(eval_binop(left19, right19, BinOp.div) == rtm_eval_binop(left19, right19, BinOp.div)); 

    float left20 = -2147483647.0f;
    float right20 = -2147483647.0f;
    #assert(eval_binop(left20, right20, BinOp.add) == rtm_eval_binop(left20, right20, BinOp.add));
    #assert(eval_binop(left20, right20, BinOp.sub) == rtm_eval_binop(left20, right20, BinOp.sub));
    #assert(eval_binop(left20, right20, BinOp.mul) == rtm_eval_binop(left20, right20, BinOp.mul));
    #assert(eval_binop(left20, right20, BinOp.div) == rtm_eval_binop(left20, right20, BinOp.div)); 

    float left21 = 9223372036854775807.0f;
    float right21 = 0.0f;
    #assert(eval_binop(left21, right21, BinOp.add) == rtm_eval_binop(left21, right21, BinOp.add));
    #assert(eval_binop(left21, right21, BinOp.sub) == rtm_eval_binop(left21, right21, BinOp.sub));
    #assert(eval_binop(left21, right21, BinOp.mul) == rtm_eval_binop(left21, right21, BinOp.mul));

    float left22 = 9223372036854775807.0f;
    float right22 = 1.0f;
    #assert(eval_binop(left22, right22, BinOp.add) == rtm_eval_binop(left22, right22, BinOp.add));
    #assert(eval_binop(left22, right22, BinOp.sub) == rtm_eval_binop(left22, right22, BinOp.sub));
    #assert(eval_binop(left22, right22, BinOp.mul) == rtm_eval_binop(left22, right22, BinOp.mul));
    #assert(eval_binop(left22, right22, BinOp.div) == rtm_eval_binop(left22, right22, BinOp.div)); 

    float left23 = 9223372036854775807.0f;
    float right23 = 2.0f;
    #assert(eval_binop(left23, right23, BinOp.add) == rtm_eval_binop(left23, right23, BinOp.add));
    #assert(eval_binop(left23, right23, BinOp.sub) == rtm_eval_binop(left23, right23, BinOp.sub));
    #assert(eval_binop(left23, right23, BinOp.mul) == rtm_eval_binop(left23, right23, BinOp.mul));
    #assert(eval_binop(left23, right23, BinOp.div) == rtm_eval_binop(left23, right23, BinOp.div)); 

    float left24 = 9223372036854775807.0f;
    float right24 = -1.0f;
    #assert(eval_binop(left24, right24, BinOp.add) == rtm_eval_binop(left24, right24, BinOp.add));
    #assert(eval_binop(left24, right24, BinOp.sub) == rtm_eval_binop(left24, right24, BinOp.sub));
    #assert(eval_binop(left24, right24, BinOp.mul) == rtm_eval_binop(left24, right24, BinOp.mul));
    #assert(eval_binop(left24, right24, BinOp.div) == rtm_eval_binop(left24, right24, BinOp.div)); 

    float left25 = 9223372036854775807.0f;
    float right25 = 9223372036854775807.0f;
    #assert(eval_binop(left25, right25, BinOp.add) == rtm_eval_binop(left25, right25, BinOp.add));
    #assert(eval_binop(left25, right25, BinOp.sub) == rtm_eval_binop(left25, right25, BinOp.sub));
    #assert(eval_binop(left25, right25, BinOp.mul) == rtm_eval_binop(left25, right25, BinOp.mul));
    #assert(eval_binop(left25, right25, BinOp.div) == rtm_eval_binop(left25, right25, BinOp.div)); 

    float left26 = -9223372036854775807.0f;
    float right26 = 0.0f;
    #assert(eval_binop(left26, right26, BinOp.add) == rtm_eval_binop(left26, right26, BinOp.add));
    #assert(eval_binop(left26, right26, BinOp.sub) == rtm_eval_binop(left26, right26, BinOp.sub));
    #assert(eval_binop(left26, right26, BinOp.mul) == rtm_eval_binop(left26, right26, BinOp.mul));

    float left27 = -9223372036854775807.0f;
    float right27 = 1.0f;
    #assert(eval_binop(left27, right27, BinOp.add) == rtm_eval_binop(left27, right27, BinOp.add));
    #assert(eval_binop(left27, right27, BinOp.sub) == rtm_eval_binop(left27, right27, BinOp.sub));
    #assert(eval_binop(left27, right27, BinOp.mul) == rtm_eval_binop(left27, right27, BinOp.mul));
    #assert(eval_binop(left27, right27, BinOp.div) == rtm_eval_binop(left27, right27, BinOp.div)); 

    float left28 = -9223372036854775807.0f;
    float right28 = -1.0f;
    #assert(eval_binop(left28, right28, BinOp.add) == rtm_eval_binop(left28, right28, BinOp.add));
    #assert(eval_binop(left28, right28, BinOp.sub) == rtm_eval_binop(left28, right28, BinOp.sub));
    #assert(eval_binop(left28, right28, BinOp.mul) == rtm_eval_binop(left28, right28, BinOp.mul));
    #assert(eval_binop(left28, right28, BinOp.div) == rtm_eval_binop(left28, right28, BinOp.div)); 

    float left29 = -9223372036854775807.0f;
    float right29 = 2.0f;
    #assert(eval_binop(left29, right29, BinOp.add) == rtm_eval_binop(left29, right29, BinOp.add));
    #assert(eval_binop(left29, right29, BinOp.sub) == rtm_eval_binop(left29, right29, BinOp.sub));
    #assert(eval_binop(left29, right29, BinOp.mul) == rtm_eval_binop(left29, right29, BinOp.mul));
    #assert(eval_binop(left29, right29, BinOp.div) == rtm_eval_binop(left29, right29, BinOp.div)); 
    
    float left30 = -9223372036854775807.0f;
    float right30 = -9223372036854775807.0f;
    #assert(eval_binop(left30, right30, BinOp.add) == rtm_eval_binop(left30, right30, BinOp.add));
    #assert(eval_binop(left30, right30, BinOp.sub) == rtm_eval_binop(left30, right30, BinOp.sub));
    #assert(eval_binop(left30, right30, BinOp.mul) == rtm_eval_binop(left30, right30, BinOp.mul));
    #assert(eval_binop(left30, right30, BinOp.div) == rtm_eval_binop(left30, right30, BinOp.div)); 
}
