// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public class MemoryReader : IOBase
    {
        public MemoryReader(byte* ptr_, long count_) : base(), ptr(ptr_), pos(ptr), count(count_)
        {
        }
        public Result<bool> ReadBool()
        {
            if (Error())
            {
                return Result<bool>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadByte();
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(cast<bool>(result.Value()));
        }
        public Result<byte> ReadByte()
        {
            if (Error())
            {
                return Result<byte>(ErrorId(GetLatestErrorId()));
            }
            if (pos - ptr >= count)
            {
                int errorId = AllocateError("memory reader: unexpected end of data");
                SetLatestErrorId(errorId);
                return Result<byte>(ErrorId(errorId));
            }
            return Result<byte>(*pos++);
        }
        public Result<sbyte> ReadSByte()
        {
            if (Error())
            {
                return Result<sbyte>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadByte();
            if (result.Error())
            {
                return Result<sbyte>(ErrorId(result.GetErrorId()));
            }
            return cast<sbyte>(result.Value());
        }
        public Result<ushort> ReadUShort()
        {
            if (Error())
            {
                return Result<ushort>(ErrorId(GetLatestErrorId()));
            }
            auto b0 = ReadByte();
            if (b0.Error())
            {
                return Result<ushort>(ErrorId(b0.GetErrorId()));
            }
            auto b1 = ReadByte();
            if (b1.Error())
            {
                return Result<ushort>(ErrorId(b1.GetErrorId()));
            }
            return Result<ushort>((cast<ushort>(b0.Value()) << 8u) | cast<ushort>(b1.Value()));
        }
        public Result<short> ReadShort()
        {
            if (Error())
            {
                return Result<short>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadUShort();
            if (result.Error())
            {
                return Result<short>(ErrorId(result.GetErrorId()));
            }
            return Result<short>(cast<short>(result.Value()));
        }
        public Result<uint> ReadUInt()
        {
            if (Error())
            {
                return Result<uint>(ErrorId(GetLatestErrorId()));
            }
            auto b0 = ReadByte();
            if (b0.Error())
            {
                return Result<uint>(ErrorId(b0.GetErrorId()));
            }
            auto b1 = ReadByte();
            if (b1.Error())
            {
                return Result<uint>(ErrorId(b1.GetErrorId()));
            }
            auto b2 = ReadByte();
            if (b2.Error())
            {
                return Result<uint>(ErrorId(b2.GetErrorId()));
            }
            auto b3 = ReadByte();
            if (b3.Error())
            {
                return Result<uint>(ErrorId(b3.GetErrorId()));
            }
            return Result<uint>((cast<uint>(b0.Value()) << 24u) | (cast<uint>(b1.Value()) << 16u) | (cast<uint>(b2.Value()) << 8u) | cast<uint>(b3.Value()));
        }
        public Result<int> ReadInt()
        {
            if (Error())
            {
                return Result<int>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadUInt();
            if (result.Error())
            {
                return Result<int>(ErrorId(result.GetErrorId()));
            }
            return Result<int>(cast<int>(result.Value()));
        }
        public Result<ulong> ReadULong()
        {
            if (Error())
            {
                return Result<ulong>(ErrorId(GetLatestErrorId()));
            }
            auto b0 = ReadByte();
            if (b0.Error())
            {
                return Result<ulong>(ErrorId(b0.GetErrorId()));
            }
            auto b1 = ReadByte();
            if (b1.Error())
            {
                return Result<ulong>(ErrorId(b1.GetErrorId()));
            }
            auto b2 = ReadByte();
            if (b2.Error())
            {
                return Result<ulong>(ErrorId(b2.GetErrorId()));
            }
            auto b3 = ReadByte();
            if (b3.Error())
            {
                return Result<ulong>(ErrorId(b3.GetErrorId()));
            }
            auto b4 = ReadByte();
            if (b4.Error())
            {
                return Result<ulong>(ErrorId(b4.GetErrorId()));
            }
            auto b5 = ReadByte();
            if (b5.Error())
            {
                return Result<ulong>(ErrorId(b5.GetErrorId()));
            }
            auto b6 = ReadByte();
            if (b6.Error())
            {
                return Result<ulong>(ErrorId(b6.GetErrorId()));
            }
            auto b7 = ReadByte();
            if (b7.Error())
            {
                return Result<ulong>(ErrorId(b7.GetErrorId()));
            }
            return Result<ulong>((cast<ulong>(b0.Value()) << 56u) | (cast<ulong>(b1.Value()) << 48u) | (cast<ulong>(b2.Value()) << 40u) | (cast<ulong>(b3.Value()) << 32u) |
                (cast<ulong>(b4.Value()) << 24u) | (cast<ulong>(b5.Value()) << 16u) | (cast<ulong>(b6.Value()) << 8u) | cast<ulong>(b7.Value()));
        }
        public Result<long> ReadLong()
        {
            if (Error())
            {
                return Result<long>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadULong();
            if (result.Error())
            {
                return Result<long>(ErrorId(result.GetErrorId()));
            }
            return Result<long>(cast<long>(result.Value()));
        }
        public Result<float> ReadFloat()
        {
            if (Error())
            {
                return Result<float>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadUInt();
            if (result.Error())
            {
                return Result<float>(ErrorId(result.GetErrorId()));
            }
            uint x = result.Value();
            return Result<float>(*cast<float*>(cast<void*>(&x)));
        }
        public Result<double> ReadDouble()
        {
            if (Error())
            {
                return Result<double>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadULong();
            if (result.Error())
            {
                return Result<double>(ErrorId(result.GetErrorId()));
            }
            ulong x = result.Value();
            return Result<double>(*cast<double*>(cast<void*>(&x)));
        }
        public Result<char> ReadChar()
        {
            if (Error())
            {
                return Result<char>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadByte();
            if (result.Error())
            {
                return Result<char>(ErrorId(result.GetErrorId()));
            }
            return Result<char>(cast<char>(result.Value()));
        }
        public Result<wchar> ReadWChar()
        {
            if (Error())
            {
                return Result<wchar>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadUShort();
            if (result.Error())
            {
                return Result<wchar>(ErrorId(result.GetErrorId()));
            }
            return Result<wchar>(cast<wchar>(result.Value()));
        }
        public Result<uchar> ReadUChar()
        {
            if (Error())
            {
                return Result<uchar>(ErrorId(GetLatestErrorId()));
            }
            auto result = ReadUInt();
            if (result.Error())
            {
                return Result<uchar>(ErrorId(result.GetErrorId()));
            }
            return Result<uchar>(cast<uchar>(result.Value()));
        }
        public Result<Date> ReadDate()
        {
            if (Error())
            {
                return Result<Date>(ErrorId(GetLatestErrorId()));
            }
            auto year = ReadShort();
            if (year.Error())
            {
                return Result<Date>(ErrorId(year.GetErrorId()));
            }
            auto m = ReadSByte();
            if (m.Error())
            {
                return Result<Date>(ErrorId(m.GetErrorId()));
            }
            Month month = cast<Month>(m.Value());
            auto day = ReadSByte();
            if (day.Error())
            {
                return Result<Date>(ErrorId(day.GetErrorId()));
            }
            Date date(year.Value(), month, day.Value());
            return Result<Date>(date);
        }
        public Result<DateTime> ReadDateTime()
        {
            if (Error())
            {
                return Result<DateTime>(ErrorId(GetLatestErrorId()));
            }
            auto date = ReadDate();
            if (date.Error())
            {
                return Result<DateTime>(ErrorId(date.GetErrorId()));
            }
            auto secs = ReadInt();
            if (secs.Error())
            {
                return Result<DateTime>(ErrorId(secs.GetErrorId()));
            }
            DateTime dt(date.Value(), secs.Value());
            return Result<DateTime>(dt);
        }
        public Result<string> ReadString()
        {
            if (Error())
            {
                return Result<string>(ErrorId(GetLatestErrorId()));
            }
            string result;
            auto b = ReadByte();
            if (b.Error())
            {
                return Result<string>(ErrorId(b.GetErrorId()));
            }
            while (b.Value() != 0u)
            {
                result.Append(cast<char>(b.Value()));
                b = ReadByte();
                if (b.Error())
                {
                    return Result<string>(ErrorId(b.GetErrorId()));
                }
            }
            return Result<string>(result);
        }
        public Result<Uuid> ReadUuid()
        {
            if (Error())
            {
                return Result<Uuid>(ErrorId(GetLatestErrorId()));
            }
            Uuid x;
            for (byte& b : x)
            {
                auto result = ReadByte();
                if (result.Error())
                {
                    return Result<Uuid>(ErrorId(result.GetErrorId()));
                }
                b = result.Value();
            }
            return Result<Uuid>(x);
        }
        private byte* ptr;
        private byte* pos;
        private long count;
    }
}
