// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.IO;
using System.Collections;
using System.Unicode;

namespace System
{
    public Result<ustring> ToUtf32(const string& utf8Str)
    {
        ustring result;
        const char* p = utf8Str.Chars();
        long bytesRemaining = utf8Str.Length();
        while (bytesRemaining > 0)
        {
            char c = *p;
            byte x = cast<byte>(c);
            if ((x & 0x80u) == 0u)
            {
                result.Append(cast<uchar>(cast<uint>(x)));
                --bytesRemaining;
                ++p;
            }
            else if ((x & 0xE0u) == 0xC0u)
            {
                if (bytesRemaining < 2)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                uchar u = cast<uchar>(cast<uint>(0u));
                byte b1 = cast<byte>(p[1]);
                if ((b1 & 0xC0u) != 0x80u)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                byte shift = 0u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    byte bit = b1 & 1u;
                    b1 = b1 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                byte b0 = x;
                for (byte i = 0u; i < 5u; ++i)
                {
                    byte bit = b0 & 1u;
                    b0 = b0 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                result.Append(u);
                bytesRemaining = bytesRemaining - 2;
                p = p + 2;
            }
            else if ((x & 0xF0u) == 0xE0u)
            {
                if (bytesRemaining < 3)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                uchar u = cast<uchar>(cast<uint>(0u));
                byte b2 = cast<byte>(p[2]);
                if ((b2 & 0xC0u) != 0x80u)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                byte shift = 0u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    byte bit = b2 & 1u;
                    b2 = b2 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                byte b1 = cast<byte>(p[1]);
                if ((b1 & 0xC0u) != 0x80u)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                for (byte i = 0u; i < 6u; ++i)
                {
                    byte bit = b1 & 1u;
                    b1 = b1 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                byte b0 = x;
                for (byte i = 0u; i < 4u; ++i)
                {
                    byte bit = b0 & 1u;
                    b0 = b0 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                result.Append(u);
                bytesRemaining = bytesRemaining - 3;
                p = p + 3;
            }
            else if ((x & 0xF8u) == 0xF0u)
            {
                if (bytesRemaining < 4)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                uchar u = cast<uchar>(cast<uint>(0u));
                byte b3 = cast<byte>(p[3]);
                if ((b3 & 0xC0u) != 0x80u)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                byte shift = 0u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    byte bit = b3 & 1u;
                    b3 = b3 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                byte b2 = cast<byte>(p[2]);
                if ((b2 & 0xC0u) != 0x80u)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                for (byte i = 0u; i < 6u; ++i)
                {
                    byte bit = b2 & 1u;
                    b2 = b2 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                byte b1 = cast<byte>(p[1]);
                if ((b1 & 0xC0u) != 0x80u)
                {
                    int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                for (byte i = 0u; i < 6u; ++i)
                {
                    byte bit = b1 & 1u;
                    b1 = b1 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                byte b0 = x;
                for (byte i = 0u; i < 3u; ++i)
                {
                    byte bit = b0 & 1u;
                    b0 = b0 >> 1u;
                    u = cast<uchar>(cast<uint>(u) | (cast<uint>(bit) << shift));
                    ++shift;
                }
                result.Append(u);
                bytesRemaining = bytesRemaining - 4;
                p = p + 4;
            }
            else
            {
                int errorId = AllocateError("invalid UTF-8 sequence: index=" + ToString(p - utf8Str.Chars()));
                return Result<ustring>(ErrorId(errorId));
            }
        }
        return Result<ustring>(result);
    }
    
    public Result<ustring> ToUtf32(const wstring& utf16Str)
    {
        ustring result;
        const wchar* w = utf16Str.Chars();
        long remaining = utf16Str.Length();
        while (remaining > 0)
        {
            wchar w1 = *w++;
            --remaining;
            if (cast<ushort>(w1) < 0xD800u || cast<ushort>(w1) > 0xDFFFu)
            {
                result.Append(w1);
            }
            else
            {
                if (cast<ushort>(w1) < 0xD800u || cast<ushort>(w1) > 0xDBFFu)
                {
                    int errorId = AllocateError("invalid UTF-16 sequence: index=" + ToString(w - utf16Str.Chars()));
                    return Result<ustring>(ErrorId(errorId));
                }
                if (remaining > 0)
                {
                    wchar w2 = *w++;
                    --remaining;
                    if (cast<ushort>(w2) < 0xDC00u || cast<ushort>(w2) > 0xDFFFu)
                    {
                        int errorId = AllocateError("invalid UTF-16 sequence: index=" + ToString(w - utf16Str.Chars()));
                        return Result<ustring>(ErrorId(errorId));
                    }
                    else
                    {
                        uchar uprime = cast<uchar>(((0x03FFu & cast<uint>(w1)) << 10u) | (0x03FFu & cast<uint>(w2)));
                        uchar u = cast<uchar>(cast<uint>(uprime) + 0x10000u);
                        result.Append(u);
                    }
                }
                else
                {
                    int errorId = RtmAllocateError("invalid UTF-16 sequence");
                    return Result<ustring>(ErrorId(errorId));
                }
            } 
        }
        return Result<ustring>(result);
    }

    public Result<wstring> ToUtf16(const ustring& utf32Str)
    {
        wstring result;
        int index = 0;
        for (uchar u : utf32Str)
        {
            if (cast<uint>(u) > 0x10FFFFu)
            {
                int errorId = AllocateError("invalid UTF-32 code point: index=" + ToString(index));
                return Result<wstring>(ErrorId(errorId));
            }
            if (cast<uint>(u) < 0x10000u)
            {
                if (cast<uint>(u) >= 0xD800 && cast<uint>(u) <= 0xDFFF)
                {
                    int errorId = AllocateError("invalid UTF-32 code point (reserved for UTF-16): index=" + ToString(index));
                    return Result<wstring>(ErrorId(errorId));
                }
                wchar x = cast<wchar>(u);
                result.Append(x);
            }
            else
            {
                uchar uprime = cast<uchar>(cast<uint>(u) - 0x10000u);
                wchar w1 = cast<wchar>(0xD800u);
                wchar w2 = cast<wchar>(0xDC00u);
                for (ushort i = 0u; i < 10u; ++i)
                {
                    ushort bit = cast<ushort>(cast<uint>(uprime) & (cast<uint>(0x1u) << i));
                    w2 = cast<wchar>(cast<ushort>(w2) | bit);
                }
                for (ushort i = 10u; i < 20u; ++i)
                {
                    ushort bit = cast<ushort>((cast<uint>(uprime) & (cast<uint>(0x1u) << i)) >> 10u);
                    w1 = cast<wchar>(cast<ushort>(w1) | bit);
                }
                result.Append(w1);
                result.Append(w2);
            }
            ++index;
        }
        return Result<wstring>(result);
    }

    public Result<wstring> ToUtf16(const string& utf8Str)
    {
        auto result = ToUtf32(utf8Str);
        if (result.Error())
        {  
            return Result<wstring>(ErrorId(result.GetErrorId()));
        }
        return ToUtf16(result.Value());
    }

    public Result<string> ToUtf8(const ustring& utf32Str)
    {
        string result;
        int index = 0;
        for (uchar c : utf32Str)
        {
            uint x = cast<uint>(c);
            if (x < 0x80u)
            {
                result.Append(cast<char>(x & 0x7Fu));
            }
            else if (x < 0x800u)
            {
                byte b1 = 0x80u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    b1 = b1 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                byte b0 = 0xC0u;
                for (byte i = 0u; i < 5u; ++i)
                {
                    b0 = b0 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                result.Append(cast<char>(b0));
                result.Append(cast<char>(b1));
            }
            else if (x < 0x10000u)
            {
                byte b2 = 0x80u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    b2 = b2 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                byte b1 = 0x80u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    b1 = b1 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                byte b0 = 0xE0u;
                for (byte i = 0u; i < 4u; ++i)
                {
                    b0 = b0 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                result.Append(cast<char>(b0));
                result.Append(cast<char>(b1));
                result.Append(cast<char>(b2));
            }
            else if (x < 0x110000u)
            {
                byte b3 = 0x80u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    b3 = b3 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                byte b2 = 0x80u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    b2 = b2 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                byte b1 = 0x80u;
                for (byte i = 0u; i < 6u; ++i)
                {
                    b1 = b1 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                byte b0 = 0xF0u;
                for (byte i = 0u; i < 3u; ++i)
                {
                    b0 = b0 | (cast<byte>(x & 1u) << i);
                    x = x >> 1u;
                }
                result.Append(cast<char>(b0));
                result.Append(cast<char>(b1));
                result.Append(cast<char>(b2));
                result.Append(cast<char>(b3));
            }
            else
            {
                int errorId = AllocateError("invalid UTF-32 code point: index=" + ToString(index));
                return Result<string>(ErrorId(errorId));
            }
            ++index;
        }
        return Result<string>(result);
    }

    public Result<string> ToUtf8(const wstring& utf16Str)
    {
        auto result = ToUtf32(utf16Str);
        if (result.Error())
        {
            return Result<string>(ErrorId(result.GetErrorId()));
        }
        return ToUtf8(result.Value());
    }

    public Result<bool> IsUpperLetter(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Lu);
    }

    public Result<bool> IsLowerLetter(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Ll);
    }
    
    public Result<bool> IsTitleLetter(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Lt);
    }
    
    public Result<bool> IsModifierLetter(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Lm);
    }

    public Result<bool> IsOtherLetter(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Lo);
    }
    
    public Result<bool> IsCasedLetter(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.LC);
    }

    public Result<bool> IsLetter(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.L);
    }
                                                
    public Result<bool> IsNonspacingMark(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Mn);
    }
    
    public Result<bool> IsSpacingMark(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Mc);
    }

    public Result<bool> IsEnclosingMark(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Me);
    }
        
    public Result<bool> IsMark(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.M);
    }

    public Result<bool> IsDecimalNumber(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Nd);
    }
    
    public Result<bool> IsLetterNumber(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Nl);
    }

    public Result<bool> IsOtherNumber(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.No);
    }

    public Result<bool> IsNumber(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.N);
    }

    public Result<bool> IsConnectorPunctuation(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Pc);
    }

    public Result<bool> IsDashPunctuation(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Pd);
    }

    public Result<bool> IsOpenPunctuation(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Ps);
    }

    public Result<bool> IsClosePunctuation(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Pe);
    }

    public Result<bool> IsInitialPunctuation(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Pi);
    }

    public Result<bool> IsFinalPunctuation(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Pf);
    }

    public Result<bool> IsOtherPunctuation(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Po);
    }

    public Result<bool> IsPunctuation(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.P);
    }

    public Result<bool> IsMathSymbol(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Sm);
    }

    public Result<bool> IsCurrencySymbol(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Sc);
    }

    public Result<bool> IsModifierSymbol(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Sk);
    }

    public Result<bool> IsOtherSymbol(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.So);
    }

    public Result<bool> IsSymbol(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.S);
    }

    public Result<bool> IsSpaceSeparator(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Zs);
    }

    public Result<bool> IsLineSeparator(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Zl);
    }

    public Result<bool> IsParagraphSeparator(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Zp);
    }
    
    public Result<bool> IsSeparator(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.Z);
    }
    
    public Result<bool> IsControl(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Cc);
    }
    
    public Result<bool> IsFormat(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Cf);
    }

    public Result<bool> IsSurrogate(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Cs);
    }

    public Result<bool> IsPrivateUse(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Co);
    }

    public Result<bool> IsUnassigned(uchar c)
    {
        auto result = GetGeneralCategory(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        return Result<bool>(result.Value() == GeneralCategoryId.Cn);
    }

    public Result<bool> IsOther(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.C);
    }

    public Result<bool> IsGraphic(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.G);
    }

    public Result<bool> IsBaseChar(uchar c)
    {
        return HasGeneralCategory(c, GeneralCategoryId.B);
    }

    public Result<bool> IsCombining(uchar c)
    {
        return IsMark(c);
    }

    public Result<uchar> ToUpper(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<uchar>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<uchar>(characterInfo->Upper());
    }

    public Result<uchar> ToLower(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<uchar>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<uchar>(characterInfo->Lower());
    }

    public Result<uchar> ToTitle(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<uchar>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<uchar>(characterInfo->Title());
    }
    
    public Result<uchar> ToFolding(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<uchar>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<uchar>(characterInfo->Folding());
    }
    
    public Result<ustring> FullUpper(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<ustring>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<ustring>(extendedCharacterInfo->FullUpper());
    }

    public Result<ustring> FullLower(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<ustring>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<ustring>(extendedCharacterInfo->FullLower());
    }

    public Result<ustring> FullTitle(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<ustring>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<ustring>(extendedCharacterInfo->FullTitle());
    }

    public Result<ustring> FullFolding(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<ustring>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<ustring>(extendedCharacterInfo->FullFolding());
    }

    public Result<bool> IsWhiteSpace(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.whiteSpace));
    }

    public Result<bool> IsAlphabetic(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.alphabetic));
    }

    public Result<bool> IsAsciiHexDigit(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.asciiHexDigit));
    }

    public bool IsAsciiDigit(uchar c)
    {
        return cast<uint>(c) < 256u && IsDigit(cast<char>(c));
    }

    public Result<bool> IsUppercase(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.uppercase));
    }

    public Result<bool> IsLowercase(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.lowercase));
    }

    public Result<bool> IsIdStart(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.idStart));
    }

    public Result<bool> IsIdCont(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.idContinue));
    }

    public Result<bool> IsGraphemeBase(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.graphemeBase));
    }

    public Result<bool> IsGraphemeExtender(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.graphemeExtend));
    }

    public Result<bool> IsOtherLower(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.otherLowercase));
    }

    public Result<bool> IsOtherUpper(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.otherUppercase));
    }

    public Result<string> GetCharacterName(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<string>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<string>(extendedCharacterInfo->CharacterName());
    }

    public Result<string> GetUnicode1Name(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<string>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<string>(extendedCharacterInfo->Unicode1Name());
    }

    public Result<NumericTypeId> GetNumericType(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<NumericTypeId>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<NumericTypeId>(extendedCharacterInfo->NumericTypeValue());
    }

    public Result<ustring> GetNumericValue(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<ustring>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<ustring>(extendedCharacterInfo->NumericValue());
    }

    public Result<bool> IsBidiMirrored(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.bidiMirrored));
    }

    public Result<bool> IsBidiControl(uchar c)
    {
        auto result = GetCharacterInfo(c);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        const CharacterInfo* characterInfo = result.Value();
        return Result<bool>(characterInfo->GetBinaryProperty(BinaryPropertyId.bidiControl));
    }

    public Result<uchar> GetBidiMirroringGlyph(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<uchar>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<uchar>(extendedCharacterInfo->BidiMirroringGlyph());
    }

    public Result<BidiPairedBracketTypeId> GetBidiPairedBracketType(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<BidiPairedBracketTypeId>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<BidiPairedBracketTypeId>(extendedCharacterInfo->BidiPairedBracketTypeValue());
    }

    public Result<uchar> GetBidiPairedBracket(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<uchar>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<uchar>(extendedCharacterInfo->BidiPairedBracket());
    }

    public Result<List<Alias>> Aliases(uchar c)
    {
        auto result = GetExtendedCharacterInfo(c);
        if (result.Error())
        {
            return Result<List<Alias>>(ErrorId(result.GetErrorId()));
        }
        const ExtendedCharacterInfo* extendedCharacterInfo = result.Value();
        return Result<List<Alias>>(extendedCharacterInfo->Aliases());
    }
}
