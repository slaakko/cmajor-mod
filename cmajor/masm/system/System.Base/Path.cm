// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.IO
{
    public Result<string> GetCurrentWorkingDirectory()
    {
        int errorId = 0;
        int handle = RtmGetCurrentWorkingDirectoryHandle(errorId);
        if (errorId > 0)
        {
            return Result<string>(ErrorId(errorId));
        }
        string currentWorkingDirectory = Path.MakeCanonical(RtmGetCurrentWorkingDirectory(handle));
        RtmFreeCurrentWorkingDirectoryHandle(handle);
        return Result<string>(currentWorkingDirectory);
    }
    
    public Result<string> GetFullPath(const string& path)
    {
        string p = Path.MakeCanonical(path);
        if (Path.IsRelative(p))
        {
            auto result = GetCurrentWorkingDirectory();
            if (result.Error())
            {
                return Result<string>(ErrorId(result.GetErrorId()));
            }
            p = result.Value();
            p.Append('/');
            p.Append(Path.MakeCanonical(path));
        }
        List<string> components = p.Split('/');
        long w = 0;
        long n = components.Count();
        for (long i = 0; i < n; ++i)
        {
            string c = components[i];
            if (i == 0 || (!c.IsEmpty() && c != "."))
            {
                if (c == "..")
                {
                    --w;
                    if (w < 0)
                    {
                        string errorMessage = "path '" + path + "' is invalid";
                        int errorId = RtmAllocateError(errorMessage.Chars());
                        return Result<string>(ErrorId(errorId));
                    }
                }                
                else
                {
                    if (w != i)
                    {
                        components[w] = components[i];
                    }
                    ++w;
                }
            }
        }
        if (w == 0)
        {
            return Result<string>("/");
        }
        else if (w == 1)
        {
            string p = components[0];
            if (p.Length() == 2 && IsAlpha(p[0]) && p[1] == ':')
            {
                return Result<string>(p + "/");
            }
        }
        string result;
        for (long i = 0; i < w; ++i)
        {
            if (i != 0)
            {
                result.Append('/');
            }
            result.Append(components[i]);
        }
        if (result.IsEmpty())
        {
            return Result<string>("/");
        }
        else
        {
            return Result<string>(result);
        }            
    }

    public Result<string> MakeRelativeDirPath(const string& dirPath, const string& referenceDirPath)
    {
        auto dp = GetFullPath(dirPath);
        if (dp.Error())
        {
            return Result<string>(ErrorId(dp.GetErrorId()));
        }
        string p = dp.Value();
        auto rd = GetFullPath(referenceDirPath);
        if (rd.Error())
        {
            return Result<string>(ErrorId(rd.GetErrorId()));
        }
        string r = rd.Value();
        if (p == r)
        {
            return Result<string>(string());
        }
        if (Path.GetDrive(p) != Path.GetDrive(r))
        {
            return Result<string>(p);
        }
        List<string> pc = p.Split('/');
        List<string> rc = r.Split('/');
        int n = cast<int>(Min(pc.Count(), rc.Count()));
        int m = 0;
        for (; m < n; ++m)
        {
            if (pc[m] != rc[m])
            {
                break;
            }
        }
        string result;
        int rn = cast<int>(rc.Count());
        for (int i = m; i < rn; ++i)
        {
            result = Path.Combine(result, "..");
        }
        int pn = cast<int>(pc.Count());
        for (int i = m; i < pn; ++i)
        {
            result = Path.Combine(result, pc[i]);
        }
        return Result<string>(result);
    }

    public static class Path
    {
        public static string MakeCanonical(const string& path)
        {
            bool startsWithDriveLetter = false;
            if (path.Length() >= 2 && IsAlpha(path[0]) && path[1] == ':')
            {
                startsWithDriveLetter = true;
            }
            string result;
            char prev = ' ';
            bool first = true;
            for (char c : path)
            {
                if (first)
                {
                    first = false;
                    if (startsWithDriveLetter)
                    {
                        c = AsciiToUpper(c);
                    }
                }
                if (c == '\\')
                {
                    c = '/';
                }
                if (c == '/')
                {
                    if (prev != '/')
                    {
                        result.Append(c);
                    }
                }
                else
                {
                    result.Append(c);
                }
                prev = c;
            }
            if (result.Length() == 3 && IsAlpha(result[0]) && result[1] == ':' && result[2] == '/')
            {
                return result;
            }
            if (result == "/")
            {
                return result;
            }
            if (!result.IsEmpty())
            {
                if (result[result.Length() - 1] == '/')
                {
                    return result.Substring(0, result.Length() - 1);
                }
            }
            return result;
        }
        public static string ChangeExtension(const string& path, const string& extension)
        {
            long lastDotPos = path.RFind('.');
            long lastSlashPos = path.RFind('/');
            if (lastSlashPos != -1 && lastDotPos < lastSlashPos)
            {
                lastDotPos = -1;
            }
            if (extension.IsEmpty())
            {
                if (lastDotPos != -1)
                {
                    return path.Substring(0, lastDotPos);
                }
                else
                {
                    return path;
                }
            }
            else
            {
                if (lastDotPos == -1)
                {
                    if (extension[0] == '.')
                    {
                        return path + extension;
                    }
                    else
                    {
                        return path + "." + extension;
                    }
                }
                else
                {
                    if (extension[0] == '.')
                    {
                        return path.Substring(0, lastDotPos) + extension;
                    }
                    else
                    {
                        return path.Substring(0,  lastDotPos + 1) + extension;
                    }
                }
            }
        }
        public static bool HasExtension(const string& path)
        {
            string p = MakeCanonical(path);
            long lastDotPos = p.RFind('.');
            if (lastDotPos != -1)
            {
                long lastColon = p.Find(':', lastDotPos + 1);
                long lastDirSep = p.Find('/', lastDotPos + 1);
                if (lastColon > lastDotPos || lastDirSep > lastDotPos)
                {
                    return false;
                }
                else if (lastDotPos < p.Length() - 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        public static string GetExtension(const string& path)
        {
            string p = MakeCanonical(path);
            long lastDotPos = p.RFind('.');
            if (lastDotPos != -1)
            {
                if (p.Find('/', lastDotPos + 1) != -1)
                {
                    return string();
                }
                else
                {
                    return p.Substring(lastDotPos);
                }
            }
            else
            {
                return string();
            }
        }
        public static string GetDrive(const string& path)
        {
            if (path.Length() >= 2 && IsAlpha(path[0]) && path[1] == ':')
            {
                char c = AsciiToUpper(path[0]);
                string s(c);
                s.Append(':');
                return s;
            }
            return string();
        }

        public static string GetFileName(const string& path)
        {
            if (path.IsEmpty())
            {
                return string();
            }
            else
            {
                string p = MakeCanonical(path);
                char lastChar = p[p.Length() - 1];
                if (lastChar == '/' || lastChar == ':')
                {
                    return string();
                }
                else
                {
                    long lastDirSepPos = p.RFind('/');
                    if (lastDirSepPos != -1)
                    {
                        return p.Substring(lastDirSepPos + 1);
                    }
                    else
                    {
                        return p;
                    }
                }
            }
        }
        public static string GetFileNameWithoutExtension(const string& path)
        {
            string fileName = GetFileName(path);
            long lastDotPos = fileName.RFind('.');
            if (lastDotPos != -1)
            {
                return fileName.Substring(0, lastDotPos);
            }
            else
            {
                return fileName;
            }
        }
        public static string GetDirectoryName(const string& path)
        {
            string p = MakeCanonical(path);
            if (p.IsEmpty())
            {
                return string();
            }
            else if (p.Length() == 3 && IsAlpha(p[0]) && p[1] == ':' && p[2] == '/')
            {
                return string();
            }
            else 
            {
                long lastDirSepPos = p.RFind('/');
                if (lastDirSepPos != -1)
                {
                    return p.Substring(0, lastDirSepPos);
                }
                else
                {
                    return string();
                }
            }
        }
        public static string Combine(const string& path1, const string& path2)
        {
            string p1 = MakeCanonical(path1);
            string p2 = MakeCanonical(path2);
            if (p1.IsEmpty())
            {
                return p2;
            }
            else if (p2.IsEmpty())
            {
                return p1;
            }
            else
            {
                if (IsAbsolute(p2))
                {
                    return p2;
                }
                else 
                {
                    string result = p1;
                    if (p1[p1.Length() - 1] != '/')
                    {
                        result.Append('/');
                    }
                    result.Append(p2);
                    return result;
                }
            }
        }
        public static bool IsAbsolute(const string& path)
        {
            if (path.IsEmpty())
            {
                return false;
            }
            else
            {
                string p = MakeCanonical(path);
                if (p[0] == '/')
                {
                    return true;
                }
                else if (p.Length() > 2 && IsAlpha(p[0]) && p[1] == ':' && p[2] == '/')
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        public static bool IsRelative(const string& path)
        {
            return !IsAbsolute(path);
        }
        public static Result<string> GetParent(const string& path)
        {
            auto fp = GetFullPath(path);
            if (fp.Error())
            {
                return Result<string>(ErrorId(fp.GetErrorId()));
            }
            string fullPath = fp.Value();
            long lastSlashPos = fullPath.RFind('/');
            if (lastSlashPos == -1)
            {
                return Result<string>(string());
            }
            else
            {
                return Result<string>(fullPath.Substring(0, lastSlashPos));
            }
        }
    }
}
