// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

namespace System
{
    public string Trim(const string& s)
    {
        long b = 0;
        while (b < s.Length() && IsSpace(s[b]))
        {
            ++b;
        }
        long e = s.Length() - 1;
        while (e >= b && IsSpace(s[e]))
        {
            --e;
        }
        return s.Substring(b, e - b + 1);
    }

    public Result<wstring> Trim(const wstring& s)
    {
        auto result = ToUtf32(s);
        if (result.Error())
        {
            return Result<wstring>(ErrorId(result.GetErrorId()));
        }
        auto trimResult = Trim(result.Value());
        if (trimResult.Error())
        {
            return Result<wstring>(ErrorId(trimResult.GetErrorId()));
        }
        return ToUtf16(trimResult.Value());
    }

    public Result<ustring> Trim(const ustring& s)
    {
        long b = 0;
        bool stop = false;
        while (b < s.Length() && !stop)
        {
            auto wsResult = IsWhiteSpace(s[b]);
            if (wsResult.Error())
            {
                return Result<ustring>(ErrorId(wsResult.GetErrorId()));
            }
            stop = !wsResult.Value();
            if (!stop)
            {
                ++b;
            }
        }
        long e = s.Length() - 1;
        stop = false;
        while (e >= b && !stop)
        {
            auto wsResult = IsWhiteSpace(s[e]);
            if (wsResult.Error())
            {
                return Result<ustring>(ErrorId(wsResult.GetErrorId()));
            }
            stop = !wsResult.Value();
            if (!stop)
            {
                --e;
            }
        }
        return Result<ustring>(s.Substring(b, e - b + 1));
    }

    public string TrimAll(const string& s)
    {
        string result;
        result.Reserve(s.Length());
        int state = 0 ;
        for (char c : s)
        {
            switch (state)
            {
                case 0:
                {
                    if (!IsSpace(c))
                    {
                        result.Append(c);
                        state = 1;
                    }
                    break;
                }
                case 1:
                {
                    if (IsSpace(c))
                    {
                        state = 2;
                    }
                    else
                    {
                        result.Append(c);
                    }
                    break;
                }
                case 2:
                {
                    if (!IsSpace(c))
                    {
                        result.Append(' ');
                        result.Append(c);
                        state = 1;
                    }
                    break;
                }
            }
        }
        return result;
    }

    public Result<wstring> TrimAll(const wstring& s)
    {
        auto result = ToUtf32(s);
        if (result.Error())
        {
            return Result<wstring>(ErrorId(result.GetErrorId()));
        }
        auto trimResult = TrimAll(result.Value());
        if (trimResult.Error())
        {
            return Result<wstring>(ErrorId(trimResult.GetErrorId()));
        }
        return ToUtf16(trimResult.Value());
    }

    public Result<ustring> TrimAll(const ustring& s)
    {
        ustring result;
        result.Reserve(s.Length());
        int state = 0;
        for (uchar c : s)
        {
            switch (state)
            {
                case 0:
                {
                    auto wsResult = IsWhiteSpace(c);
                    if (wsResult.Error())
                    {
                        return Result<ustring>(ErrorId(wsResult.GetErrorId()));
                    }
                    if (!wsResult.Value())
                    {
                        result.Append(c);
                        state = 1;
                    }
                    break;
                }
                case 1:
                {
                    auto wsResult = IsWhiteSpace(c);
                    if (wsResult.Error())
                    {
                        return Result<ustring>(ErrorId(wsResult.GetErrorId()));
                    }
                    if (wsResult.Value())
                    {
                        state = 2;
                    }
                    else
                    {
                        result.Append(c);
                    }
                    break;
                }
                case 2:
                {
                    auto wsResult = IsWhiteSpace(c);
                    if (wsResult.Error())
                    {
                        return Result<ustring>(ErrorId(wsResult.GetErrorId()));
                    }
                    if (!wsResult.Value())
                    {
                        result.Append(u' ');
                        result.Append(c);
                        state = 1;
                    }
                    break;
                }
            }
        }
        return Result<ustring>(result);
    }

    public Result<string> HexEscape(char c)
    {
        auto result = ToHexString(cast<byte>(c));
        if (result.Error())
        {
            return result;
        }
        return "\\x" + result.Value();
    }

    public Result<string> HexEscape(wchar c)
    {
        auto result = ToHexString(cast<ushort>(c));
        if (result.Error())
        {
            return result;
        }
        return "\\x" + result.Value();
    }

    public Result<string> HexEscape(uchar c)
    {
        auto result = ToHexString(cast<uint>(c));
        if (result.Error())
        {
            return result;
        }
        return "\\x" + result.Value();
    }

    public Result<string> CharStr(char c)
    {
        switch (c)
        {
            case '\\': return Result<string>("\\\\");
            case '"':  return Result<string>("\\\"");
            case '\'': return Result<string>("\\'");
            case '\a': return Result<string>("\\a");
            case '\b': return Result<string>("\\b");
            case '\f': return Result<string>("\\f");
            case '\n': return Result<string>("\\n");
            case '\r': return Result<string>("\\r");
            case '\t': return Result<string>("\\t");
            case '\v': return Result<string>("\\v");
            case '\0': return Result<string>("\\0");
            default:
            {
                if (IsPrintable(c))
                {
                    return Result<string>(string(c));
                }
                else
                {
                    return HexEscape(c);
                }
            }
        }
        return Result<string>(string());
    }

    public Result<string> MakeCharLiteral(char c)
    {
        if (c == '"')
        {
            return Result<string>(string("'\"'"));
        }
        auto charStrResult = CharStr(c);
        if (charStrResult.Error())
        {
            return Result<string>(ErrorId(charStrResult.GetErrorId()));
        }
        return Result<string>("'" + charStrResult.Value() + "'");
    }


    public Result<wstring> CharStr(wchar c)
    {
        Result<string> hexEscapeResult;
        switch (c)
        {
            case w'\\': return Result<wstring>(w"\\\\");
            case w'"':  return Result<wstring>(w"\\\"");
            case w'\'': return Result<wstring>(w"\\'");
            case w'\a': return Result<wstring>(w"\\a");
            case w'\b': return Result<wstring>(w"\\b");
            case w'\f': return Result<wstring>(w"\\f");
            case w'\n': return Result<wstring>(w"\\n");
            case w'\r': return Result<wstring>(w"\\r");
            case w'\t': return Result<wstring>(w"\\t");
            case w'\v': return Result<wstring>(w"\\v");
            case w'\0': return Result<wstring>(w"\\0");
            default:
            {
                if (cast<ushort>(c) < 256u && IsPrintable(cast<char>(c)))
                {
                    return Result<wstring>(wstring(c));
                }
                else
                {
                    hexEscapeResult = HexEscape(c);
                    if (hexEscapeResult.Error())
                    {
                        return Result<wstring>(ErrorId(hexEscapeResult.GetErrorId()));
                    }
                    return ToUtf16(hexEscapeResult.Value());
                }
            }
        }
        return Result<wstring>(wstring());
    }

    public Result<ustring> CharStr(uchar c)
    {
        Result<string> hexEscapeResult;
        switch (c)
        {
            case u'\\': return Result<ustring>(u"\\\\");
            case u'"':  return Result<ustring>(u"\\\"");
            case u'\'': return Result<ustring>(u"\\'");
            case u'\a': return Result<ustring>(u"\\a");
            case u'\b': return Result<ustring>(u"\\b");
            case u'\f': return Result<ustring>(u"\\f");
            case u'\n': return Result<ustring>(u"\\n");
            case u'\r': return Result<ustring>(u"\\r");
            case u'\t': return Result<ustring>(u"\\t");
            case u'\v': return Result<ustring>(u"\\v");
            case u'\0': return Result<ustring>(u"\\0");
            default:
            {
                if (cast<uint>(c) < 256u && IsPrintable(cast<char>(c)))
                {
                    return Result<ustring>(ustring(c));
                }
                else
                {
                    hexEscapeResult = HexEscape(c);
                    if (hexEscapeResult.Error())
                    {
                        return Result<ustring>(ErrorId(hexEscapeResult.GetErrorId()));
                    }
                    return ToUtf32(hexEscapeResult.Value());
                }
            }
        }
        return Result<ustring>(ustring());
    }

    public Result<string> StringStr(const string& s)
    {
        string result;
        for (char c : s)
        {
            if (c == '\'')
            {
                result.Append(c);
            }
            else
            {
                auto charStrResult = CharStr(c);
                if (charStrResult.Error())
                {
                    return Result<string>(ErrorId(charStrResult.GetErrorId()));
                }
                result.Append(charStrResult.Value());
            }
        }
        return Result<string>(result);
    }

    public Result<ustring> StringStr(const ustring& s)
    {
        ustring result;
        for (uchar c : s)
        {
            if (c == u'\'')
            {
                result.Append(c);
            }
            else
            {
                auto charStrResult = CharStr(c);
                if (charStrResult.Error())
                {
                    return Result<ustring>(ErrorId(charStrResult.GetErrorId()));
                }
                result.Append(charStrResult.Value());
            }
        }
        return Result<ustring>(result);
    }

    public Result<string> MakeStringLiteral(const string& s)
    {
        string result = "\"";
        auto stringStrResult = StringStr(s);
        if (stringStrResult.Error())
        {
            return Result<string>(ErrorId(stringStrResult.GetErrorId()));
        }
        result.Append(stringStrResult.Value());
        result.Append('"');
        return Result<string>(result);
    }

    public Result<ustring> MakeStringLiteral(const ustring& s)
    {
        ustring result = u"\"";
        auto stringStrResult = StringStr(s);
        if (stringStrResult.Error())
        {
            return Result<ustring>(ErrorId(stringStrResult.GetErrorId()));
        }
        result.Append(stringStrResult.Value());
        result.Append(u'"');
        return Result<ustring>(result);
    }

    public string Unescape(const string& stringStr)
    {
        string result;
        int state = 0;
        for (char c : stringStr)
        {
            switch (state)
            {
                case 0:
                {
                    if (c == '\\')
                    {
                        state = 1;
                    }
                    else
                    {
                        result.Append(c);
                    }
                    break;
                }
                case 1:
                {
                    switch (c)
                    {
                        case '\\':
                        case '"':
                        case '\'':
                        {
                            result.Append(c);
                            break;
                        }
                        case 'n':
                        {
                            result.Append("\n");
                            break;
                        }
                        default:
                        {
                            result.Append('\\').Append(c);
                            break;
                        }
                    }
                    state = 0;
                    break;
                }
            }
        }
        return result;
    }

    public ustring Unescape(const ustring& stringStr)
    {
        ustring result;
        int state = 0;
        for (uchar c : stringStr)
        {
            switch (state)
            {
                case 0:
                {
                    if (c == '\\')
                    {
                        state = 1;
                    }
                    else
                    {
                        result.Append(c);
                    }
                    break;
                }
                case 1:
                {
                    switch (c)
                    {
                        case '\\':
                        case '"':
                        case '\'':
                        {
                            result.Append(c);
                            break;
                        }
                        case 'n':
                        {
                            result.Append('\n');
                            break;
                        }
                        default:
                        {
                            result.Append('\\').Append(c);
                            break;
                        }
                    }
                    state = 0;
                    break;
                }
            }
        }
        return result;
    }

    public enum FormatWidth
    {
        exact, min
    }

    public enum FormatJustify
    {
        left, right
    }

    public string Format(const string& s, int width)
    {
        return Format(s, width, FormatWidth.exact, FormatJustify.left);
    }

    public string Format(const string& s, int width, FormatJustify justify)
    {
        return Format(s, width, FormatWidth.exact, justify);
    }

    public string Format(const string& s, int width, FormatWidth fw)
    {
        return Format(s, width, fw, FormatJustify.left);
    }

    public string Format(const string& s, int width, FormatWidth fw, FormatJustify justify)
    {
        return Format(s, width, fw, justify, ' ');
    }

    public string Format(const string& s, int width, FormatWidth fw, FormatJustify justify, char fillChar)
    {
        string result;
        int m = cast<int>(s.Length());
        if (fw == FormatWidth.min)
        {
            width = Max(width, m);
        }
        else if (fw == FormatWidth.exact)
        {
            m = Min(m, width);
        }
        int n = Max(0, width - m);
        if (justify == FormatJustify.right)
        {
            for (int i = 0; i < n; ++i)
            {
                result.Append(fillChar);
            }
        }
        for (int i = 0; i < m; ++i)
        {
            result.Append(s[i]);
        }
        if (justify == FormatJustify.left)
        {
            for (int i = 0; i < n; ++i)
            {
                result.Append(fillChar);
            }
        }
        return result;
    }

    public ustring Format(const ustring& s, int width)
    {
        return Format(s, width, FormatWidth.exact, FormatJustify.left);
    }

    public ustring Format(const ustring& s, int width, FormatJustify justify)
    {
        return Format(s, width, FormatWidth.exact, justify);
    }

    public ustring Format(const ustring& s, int width, FormatWidth fw, FormatJustify justify)
    {
        return Format(s, width, fw, justify, ' ');
    }

    public ustring Format(const ustring& s, int width, FormatWidth fw, FormatJustify justify, char fillChar)
    {
        ustring result;
        int m = cast<int>(s.Length());
        if (fw == FormatWidth.min)
        {
            width = Max(width, m);
        }
        else if (fw == FormatWidth.exact)
        {
            m = Min(m, width);
        }
        int n = Max(0, width - m);
        if (justify == FormatJustify.right)
        {
            for (int i = 0; i < n; ++i)
            {
                result.Append(fillChar);
            }
        }
        for (int i = 0; i < m; ++i)
        {
            result.Append(s[i]);
        }
        if (justify == FormatJustify.left)
        {
            for (int i = 0; i < n; ++i)
            {
                result.Append(fillChar);
            }
        }
        return result;
    }
}
