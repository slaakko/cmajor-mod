// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.IO;

namespace System
{
    public class Uuid
    {
        public const long size = 16;

        public typedef byte[size].Iterator Iterator;
        public typedef byte[size].ConstIterator ConstIterator;

        public inline Iterator Begin()
        {
            return data.Begin();
        }
        public inline ConstIterator Begin() const
        {
            return data.CBegin();
        }
        public inline ConstIterator CBegin() const
        {
            return data.CBegin();
        }
        public inline Iterator End()
        {
            return data.End();
        }
        public inline ConstIterator End() const
        {
            return data.CEnd();
        }
        public inline ConstIterator CEnd() const
        {
            return data.CEnd();
        }

        public Uuid() : data()
        {
        }
        public Uuid(ulong leftHalf, ulong rightHalf) : data()
        {
            data[0] = cast<byte>(leftHalf >> 56u);
            data[1] = cast<byte>(leftHalf >> 48u);
            data[2] = cast<byte>(leftHalf >> 40u);
            data[3] = cast<byte>(leftHalf >> 32u);
            data[4] = cast<byte>(leftHalf >> 24u);
            data[5] = cast<byte>(leftHalf >> 16u);
            data[6] = cast<byte>(leftHalf >> 8u);
            data[7] = cast<byte>(leftHalf);
            data[8] = cast<byte>(rightHalf >> 56u);
            data[9] = cast<byte>(rightHalf >> 48u);
            data[10] = cast<byte>(rightHalf >> 40u);
            data[11] = cast<byte>(rightHalf >> 32u);
            data[12] = cast<byte>(rightHalf >> 24u);
            data[13] = cast<byte>(rightHalf >> 16u);
            data[14] = cast<byte>(rightHalf >> 8u);
            data[15] = cast<byte>(rightHalf);
        }
        public ulong LeftHalf() const
        {
            ulong leftHalf;
            leftHalf = data[0];
            leftHalf = (leftHalf << 8u) | data[1];
            leftHalf = (leftHalf << 8u) | data[2];
            leftHalf = (leftHalf << 8u) | data[3];
            leftHalf = (leftHalf << 8u) | data[4];
            leftHalf = (leftHalf << 8u) | data[5];
            leftHalf = (leftHalf << 8u) | data[6];
            leftHalf = (leftHalf << 8u) | data[7];
            return leftHalf;
        }
        public ulong RightHalf() const
        {
            ulong rightHalf;
            rightHalf = data[8];
            rightHalf = (rightHalf << 8u) | data[9];
            rightHalf = (rightHalf << 8u) | data[10];
            rightHalf = (rightHalf << 8u) | data[11];
            rightHalf = (rightHalf << 8u) | data[12];
            rightHalf = (rightHalf << 8u) | data[13];
            rightHalf = (rightHalf << 8u) | data[14];
            rightHalf = (rightHalf << 8u) | data[15];
            return rightHalf;
        }
        public static Uuid Random()
        {
            return Uuid(Random64(), Random64());
        }
        public byte[size] data;
    }

    public inline bool operator==(const Uuid& left, const Uuid& right)
    {
        for (long i = 0; i < Uuid.size; ++i)
        {
            if (left.data[i] != right.data[i]) return false;
        }
        return true;
    }

    public string ToString(const Uuid& uuid)
    {
        string s;
/*  TODO
        int index = 0;
        for (byte x : uuid)
        {
            s.Append(ToLower(ToHexString(x)));
            if (index == 3 || index == 5 || index == 7 || index == 9)
            {
                s.Append('-');
            }
            ++index;
        }
*/
        return s;
    }

    public Result<Uuid> ParseUuid(const string& uuidHexString)
    {
        if (uuidHexString.Length() != 2 * Uuid.size + 4)
        {
            string errorMessage = "wrong number of hex bytes in uuid string '" + uuidHexString + "'." + ToString(Uuid.size) + " hex bytes + 4 hyphens expected.";
            int errorId = RtmAllocateError(errorMessage.Chars());
            return Result<Uuid>(ErrorId(errorId));
        }
        Uuid uuid;
        int index = 0;
        for (long i = 0; i < Uuid.size; ++i)
        {
            string hexByteStr = uuidHexString.Substring(index, 2);
            auto hexByte = ParseHexByte(hexByteStr);
            if (hexByte.Error())
            {
                return Result<Uuid>(ErrorId(hexByte.GetErrorId()));
            }
            uuid.data[i] = hexByte.Value();
            ++index;
            ++index;
            if (i == 3 || i == 5 || i == 7 || i == 9)
            {
                ++index;
            }
        }
        return Result<Uuid>(uuid);
    }
	
	public TextWriter& operator<<(TextWriter& writer, const Uuid& uuid)
    {
        return writer << ToString(uuid);
    }
}
