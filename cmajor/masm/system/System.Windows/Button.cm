// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public enum ButtonStyle : long
    {
        BS_PUSHBUTTON = 0x0,
        BS_DEFPUSHBUTTON = 0x1,
        BS_3STATE = 0x5,
        BS_AUTO3STATE = 0x6,
        BS_AUTOCHECKBOX = 0x3,
        BS_AUTORADIOBUTTON = 0x9,
        BS_BITMAP = 0x80,
        BS_BOTTOM = 0x800,
        BS_CENTER = 0x300,
        BS_CHECKBOX = 0x2,
        BS_GROUPBOX = 0x7,
        BS_ICON = 0x40,
        BS_FLAT = 0x8000,
        BS_LEFT = 0x100,
        BS_LEFTTEXT = 0x20,
        BS_MULTILINE = 0x2000,
        BS_NOTIFY = 0x4000,
        BS_OWNERDRAW = 0x0B,
        BS_PUSHLIKE = 0x1000,
        BS_RADIOBUTTON = 0x4,
        BS_RIGHT = 0x200,
        BS_TOP = 0x400,
        BS_TYPEMASK = 0xF,
        BS_VCENTER = 0xC00
    }

    public abstract class ButtonBase : Control
    {
        public ButtonBase(const string& windowClassName, WindowClassStyle windowClassStyle, WindowStyle style, ExtendedWindowStyle exStyle,
            const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base(windowClassName, windowClassStyle, style, exStyle, backgroundColor, text, location, size, dock, anchors)
        {
        }
        public ButtonBase(ControlCreateParams& controlCreateParams) : base(controlCreateParams)
        {
        }
        [nodiscard]
        internal Result<bool> OnClickInternal()
        {
            ClickEventArgs args;
            auto result = OnClick(args);
            if (result.Error()) return result;
            if (args.errorId != 0)
            {
                return Result<bool>(ErrorId(args.errorId));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DoClick()
        {
            ClickEventArgs args;
            auto result = OnClick(args);
            if (result.Error()) return result;
            if (args.errorId != 0)
            {
                return Result<bool>(ErrorId(args.errorId));
            }
            return Result<bool>(true);
        }
    }

    public ControlCreateParams& ButtonControlCreateParams(ControlCreateParams& controlCreateParams, ButtonStyle buttonStyle)
    {
        controlCreateParams.SetWindowClassName("BUTTON");
        controlCreateParams.SetWindowStyle(cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | buttonStyle));
        controlCreateParams.SetWindowClassBackgroundColor(SystemColor.COLOR_BTNFACE);
        controlCreateParams.SetBackgroundColor(GetSystemColor(SystemColor.COLOR_BTNFACE));
        return controlCreateParams;
    }

    public ControlCreateParams& ButtonControlCreateParams(ControlCreateParams& controlCreateParams, bool setDefault)
    {
        ButtonStyle buttonStyle = ButtonStyle();
        if (setDefault)
        {
            buttonStyle = cast<ButtonStyle>(buttonStyle | ButtonStyle.BS_DEFPUSHBUTTON | ButtonStyle.BS_NOTIFY);
        }
        else
        {
            buttonStyle = cast<ButtonStyle>(buttonStyle | ButtonStyle.BS_PUSHBUTTON | ButtonStyle.BS_NOTIFY);
        }
        return ButtonControlCreateParams(controlCreateParams, buttonStyle);
    }

    public ControlCreateParams& ButtonControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return ButtonControlCreateParams(controlCreateParams, false);
    }

    public class ButtonCreateParams
    {
        public ButtonCreateParams(ControlCreateParams& controlCreateParams_) : controlCreateParams(controlCreateParams_)
        {
        }
        public ButtonCreateParams& Defaults()
        {
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
    }

    public class Button : ButtonBase
    {
        private enum Flags : sbyte
        {
            none = 0, defaultButton = 1 << 0
        }
        public Button(ButtonStyle buttonStyle, const Color& backgroundColor, const string& text, const Point& location, const Size& size,
            Dock dock, Anchors anchors) :
            base("BUTTON", DefaultWindowClassStyle(), cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | buttonStyle),
            DefaultExtendedWindowStyle(),
            backgroundColor, text, location, size, dock, anchors), flags(Flags.none), dialogResult(DialogResult.none)
        {
            SetFlagsFromButtonStyle(buttonStyle);
        }
        public Button(const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(cast<ButtonStyle>(ButtonStyle.BS_PUSHBUTTON | ButtonStyle.BS_NOTIFY), GetSystemColor(SystemColor.COLOR_BTNFACE), text, location, size, dock, anchors)
        {
        }
        public Button(ButtonStyle buttonStyle, const string& text, const Point& location, const Size& size) :
            this(buttonStyle, GetSystemColor(SystemColor.COLOR_BTNFACE), text, location, size, Dock.none, cast<Anchors>(Anchors.top | Anchors.left))
        {
        }
        public Button(const string& text, const Point& location, const Size& size) :
            this(cast<ButtonStyle>(ButtonStyle.BS_PUSHBUTTON | ButtonStyle.BS_NOTIFY), text, location, size)
        {
        }
        public Button(ButtonCreateParams& createParams) :
            base(createParams.controlCreateParams), flags(Flags.none), dialogResult(DialogResult.none)
        {
            SetFlagsFromButtonStyle(cast<ButtonStyle>(cast<long>(createParams.controlCreateParams.windowStyle)));
        }
        protected override Result<bool> OnCreated()
        {
            auto result = base->OnCreated();
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            auto graphicsResult = Graphics.FromWindowHandle(Handle());
            if (graphicsResult.Error())
            {
                return Result<bool>(ErrorId(graphicsResult.GetErrorId()));
            }
            else
            {
                Graphics& graphics = graphicsResult.Value();
                Result<FontHandle*> fontHandleResult = GetFontHandle(graphics);
                if (fontHandleResult.Error())
                {
                    return Result<bool>(ErrorId(fontHandleResult.GetErrorId()));
                }
                else
                {
                    FontHandle* fontHandle = fontHandleResult.Value();
                    if (!fontHandle->IsNull())
                    {
                        SendSetFontMessage(*fontHandle);
                    }
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnGotFocus()
        {
            auto result = base->OnGotFocus();
            if (result.Error()) return result;
            if (!IsDefault())
            {
                Window* window = GetWindow();
                if (window != null)
                {
                    Button* defaultButton = window->DefaultButton();
                    if (defaultButton != null)
                    {
                        defaultButton->ResetDefaultButtonStyle();
                    }
                }
                SetDefaultButtonStyle();
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnLostFocus()
        {
            auto result = base->OnLostFocus();
            if (result.Error()) return result;
            if (!IsDefault())
            {
                ResetDefaultButtonStyle();
                Window* window = GetWindow();
                if (window != null)
                {
                    Button* defaultButton = window->DefaultButton();
                    if (defaultButton != null)
                    {
                        defaultButton->SetDefaultButtonStyle();
                    }
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnClick(ClickEventArgs& args)
        {
            auto result = base->OnClick(args);
            if (result.Error()) return result;
            if (dialogResult != DialogResult.none)
            {
                Window* window = GetWindow();
                if (window != null)
                {
                    window->SetDialogResult(dialogResult);
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnKeyDown(KeyEventArgs& args)
        {
            auto result = base->OnKeyDown(args);
            if (result.Error()) return result;
            if (!args.handled)
            {
                switch (args.key)
                {
                    case Keys.enter:
                    {
                        ClickEventArgs clickEventArgs;
                        result = OnClick(clickEventArgs);
                        if (result.Error()) return result;
                        if (clickEventArgs.errorId != 0)
                        {
                            return Result<bool>(ErrorId(clickEventArgs.errorId));
                        }
                        break;
                    }
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                auto handleResult = ToHexString(cast<ulong>(Handle()));
                if (handleResult.Error())
                {
                    return Result<bool>(ErrorId(handleResult.GetErrorId()));
                }
                const string& handleStr = handleResult.Value();
                auto parentTextResult = ParentText();
                if (parentTextResult.Error())
                {
                    return Result<bool>(ErrorId(parentTextResult.GetErrorId()));
                }
                const string& parentText = parentTextResult.Value();
                auto result = log->WriteLine(string(' ', level) + "Button." + Text() + ".handle=" + handleStr + " " + parentText +
                    "[" + Rect(Point(), GetSize()).ToString() + "]");
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public inline DialogResult GetDialogResult() const
        {
            return dialogResult;
        }
        public inline void SetDialogResult(DialogResult dialogResult_)
        {
            dialogResult = dialogResult_;
        }
        private void SetFlagsFromButtonStyle(ButtonStyle buttonStyle)
        {
            if ((buttonStyle & ButtonStyle.BS_DEFPUSHBUTTON) != 0)
            {
                flags = cast<Flags>(flags | Flags.defaultButton);
            }
        }
        public inline bool IsDefault() const
        {
            return (flags & Flags.defaultButton) != Flags.none;
        }
        public void SetDefault()
        {
            flags = cast<Flags>(flags | Flags.defaultButton);
            SetDefaultButtonStyle();
        }
        public void ResetDefault()
        {
            flags = cast<Flags>(flags & ~Flags.defaultButton);
            ResetDefaultButtonStyle();
        }
        private void SetDefaultButtonStyle()
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), BM_SETSTYLE, cast<uint>(GetWindowStyle() | ButtonStyle.BS_DEFPUSHBUTTON), cast<long>(true));
            }
        }
        private void ResetDefaultButtonStyle()
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), BM_SETSTYLE, cast<uint>(GetWindowStyle() & ~ButtonStyle.BS_DEFPUSHBUTTON), cast<long>(true));
            }
        }
        private Flags flags;
        private DialogResult dialogResult;
    }
}
