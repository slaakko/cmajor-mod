// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public abstract class EditCommand
    {
        public default virtual ~EditCommand();
        [nodiscard]
        public abstract Result<bool> Undo(TextView* textView);
        [nodiscard]
        public abstract Result<bool> Redo(TextView* textView);
    }

    public class EditCommandList
    {
        public EditCommandList(TextView* textView_) : textView(textView_), currentIndex(0), inGroup(false)
        {
        }
        [nodiscard]
        public Result<bool> SetMenuItems(MenuItem* undoMenuItem_, MenuItem* redoMenuItem_)
        {
            undoMenuItem = undoMenuItem_;
            redoMenuItem = redoMenuItem_;
            return UpdateMenuItems();
        }
        public bool CanUndo() const
        {
            return currentIndex > 0;
        }
        public bool CanRedo() const
        {
            return currentIndex < commands.Count();
        }
        [nodiscard]
        public Result<bool> UpdateMenuItems()
        {
            if (CanUndo())
            {
                auto result = undoMenuItem->Enable();
                if (result.Error()) return result;
            }
            else
            {
                auto result = undoMenuItem->Disable();
                if (result.Error()) return result;
            }
            if (CanRedo())
            {
                auto result = redoMenuItem->Enable();
                if (result.Error()) return result;
            }
            else
            {
                auto result = redoMenuItem->Disable();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> AddCommand(EditCommand* command)
        {
            if (inGroup)
            {
                groupCommand->AddCommand(command);
            }
            else
            {
                if (currentIndex >= commands.Count())
                {
                    commands.Add(UniquePtr<EditCommand>(command));
                    currentIndex = cast<int>(commands.Count());
                }
                else
                {
                    commands[currentIndex].Reset(command);
                    ++currentIndex;
                }
                commands.Resize(currentIndex);
                auto result = UpdateMenuItems();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Undo()
        {
            if (CanUndo())
            {
                --currentIndex;
                EditCommand* command = commands[currentIndex].Get();
                auto result = command->Undo(textView);
                if (result.Error()) return result;
            }
            auto result = UpdateMenuItems();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Redo()
        {
            if (CanRedo())
            {
                EditCommand* command = commands[currentIndex].Get();
                auto result = command->Redo(textView);
                if (result.Error()) return result;
                ++currentIndex;
            }
            auto result = UpdateMenuItems();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public void BeginGroup()
        {
            groupCommand.Reset(new GroupCommand());
            inGroup = true;
        }
        [nodiscard]
        public Result<bool> EndGroup()
        {
            inGroup = false;
            return AddCommand(groupCommand.Release());
        }
        private TextView* textView;
        private int currentIndex;
        private List<UniquePtr<EditCommand>> commands;
        private MenuItem* undoMenuItem;
        private MenuItem* redoMenuItem;
        private UniquePtr<GroupCommand> groupCommand;
        private bool inGroup;
    }

    public class InsertCharCommand : EditCommand
    {
        public InsertCharCommand(int lineIndex_, int columnIndex_, uchar c_, bool removeIndent_) : lineIndex(lineIndex_), columnIndex(columnIndex_), c(c_), removeIndent(removeIndent_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->DeleteChar(lineIndex, columnIndex, 0, 0, removeIndent);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->InsertChar(lineIndex, columnIndex, c);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private int lineIndex;
        private int columnIndex;
        private uchar c;
        private bool removeIndent;
    }

    public class DeleteCharCommand : EditCommand
    {
        public DeleteCharCommand(int lineIndex_, int columnIndex_, uchar c_) : lineIndex(lineIndex_), columnIndex(columnIndex_), c(c_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            if (c != '\0')
            {
                auto result = textView->InsertChar(lineIndex, columnIndex, c);
                if (result.Error()) return result;
            }
            else
            {
                auto result = textView->NewLine(lineIndex, columnIndex);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->DeleteChar(lineIndex, columnIndex, 0, 0, false);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private int lineIndex;
        private int columnIndex;
        private uchar c;
    }

    public class NewLineCommand : EditCommand
    {
        public NewLineCommand(int lineIndex_, int columnIndex_, int indent_, int numSpaces_) :
            lineIndex(lineIndex_), columnIndex(columnIndex_), indent(indent_), numSpaces(numSpaces_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->DeleteChar(lineIndex, columnIndex, indent, numSpaces, false);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->NewLine(lineIndex, columnIndex);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private int lineIndex;
        private int columnIndex;
        private int indent;
        private int numSpaces;
    }

    public class InsertIntoLineCommand : EditCommand
    {
        public InsertIntoLineCommand(int lineIndex_, int columnIndex_, const ustring& text_) :
            lineIndex(lineIndex_), columnIndex(columnIndex_), text(text_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->RemoveFromLine(lineIndex, columnIndex, text.Length());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->InsertIntoLine(lineIndex, columnIndex, text);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private int lineIndex;
        private int columnIndex;
        private ustring text;
    }

    public class InsertLinesCommand : EditCommand
    {
        public InsertLinesCommand(int lineIndex_, int columnIndex_, const List<ustring>& lines_) :
            lineIndex(lineIndex_), columnIndex(columnIndex_), lines(lines_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->DeleteLines(lineIndex, columnIndex, lines);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->InsertLines(lineIndex, columnIndex, lines);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private int lineIndex;
        private int columnIndex;
        private List<ustring> lines;
    }

    public class RemoveSelectionCommand : EditCommand
    {
        public RemoveSelectionCommand(const Selection& selection_, const SelectionData& selectionData_, bool wholeLine_) :
            selection(selection_), selectionData(selectionData_), wholeLine(wholeLine_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->InsertSelection(selection, selectionData, wholeLine);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->SetSelection(selection);
            if (result.Error()) return result;
            result = textView->RemoveSelection();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private Selection selection;
        private SelectionData selectionData;
        private bool wholeLine;
    }

    public class TabCommand : EditCommand
    {
        public TabCommand(int lineIndex_, int columnIndex_) : lineIndex(lineIndex_), columnIndex(columnIndex_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->Backtab(lineIndex, columnIndex + textView->IndentSize());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->Tab(lineIndex, columnIndex);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private int lineIndex;
        private int columnIndex;
    }

    public class BacktabCommand : EditCommand
    {
        public BacktabCommand(int lineIndex_, int columnIndex_, int numSpaces_) : lineIndex(lineIndex_), columnIndex(columnIndex_), numSpaces(numSpaces_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->AddSpaces(lineIndex, columnIndex, numSpaces);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->RemoveSpaces(lineIndex, columnIndex, numSpaces);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private int lineIndex;
        private int columnIndex;
        private int numSpaces;
    }

    public class IndentSelectionCommand : EditCommand
    {
        public IndentSelectionCommand(const Selection& selection_) : selection(selection_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->SetSelection(selection);
            if (result.Error()) return result;
            result = textView->UnindentSelection();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->SetSelection(selection);
            if (result.Error()) return result;
            result = textView->IndentSelection();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private Selection selection;
    }

    public class UnindentSelectionCommand : EditCommand
    {
        public UnindentSelectionCommand(const Selection& selection_) : selection(selection_)
        {
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            auto result = textView->SetSelection(selection);
            if (result.Error()) return result;
            result = textView->IndentSelection();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            auto result = textView->SetSelection(selection);
            if (result.Error()) return result;
            result = textView->UnindentSelection();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private Selection selection;
    }

    public class GroupCommand : EditCommand
    {
        public GroupCommand()
        {
        }
        public void AddCommand(EditCommand* command)
        {
            commands.Add(UniquePtr<EditCommand>(command));
        }
        [nodiscard]
        public override Result<bool> Undo(TextView* textView)
        {
            long n = commands.Count();
            for (long i = n - 1; i >= 0; --i)
            {
                EditCommand* command = commands[i].Get();
                auto result = command->Undo(textView);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Redo(TextView* textView)
        {
            long n = commands.Count();
            for (long i = 0; i < n; ++i)
            {
                EditCommand* command = commands[i].Get();
                auto result = command->Redo(textView);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        private List<UniquePtr<EditCommand>> commands;
    }
}
