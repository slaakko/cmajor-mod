// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Windows
{
    public enum SystemMetricsId : int
    {
        SM_ARRANGE = 56,
        SM_CLEANBOOT = 67,
        SM_CMONITORS = 80,
        SM_CMOUSEBUTTONS = 43,
        SM_CONVERTIBLESLATEMODE = 0x2003,
        SM_CXBORDER = 5,
        SM_CXCURSOR = 13,
        SM_CXDLGFRAME = 7,
        SM_CXDOUBLECLK = 36,
        SM_CXDRAG = 68,
        SM_CXEDGE = 45,
        SM_CXFIXEDFRAME = 7,
        SM_CXFOCUSBORDER = 83,
        SM_CXFRAME = 32,
        SM_CXFULLSCREEN = 16,
        SM_CXHSCROLL = 21,
        SM_CXHTHUMB = 10,
        SM_CXICON = 11,
        SM_CXICONSPACING = 38,
        SM_CXMAXIMIZED = 61,
        SM_CXMAXTRACK = 59,
        SM_CXMENUCHECK = 71,
        SM_CXMENUSIZE = 54,
        SM_CXMIN = 28,
        SM_CXMINIMIZED = 57,
        SM_CXMINSPACING = 47,
        SM_CXMINTRACK = 34,
        SM_CXPADDEDBORDER = 92,
        SM_CXSCREEN = 0,
        SM_CXSIZE = 30,
        SM_CXSIZEFRAME = 32,
        SM_CXSMICON = 49,
        SM_CXSMSIZE = 52,
        SM_CXVIRTUALSCREEN = 78,
        SM_CXVSCROLL = 2,
        SM_CYBORDER = 6,
        SM_CYCAPTION = 4,
        SM_CYCURSOR = 14,
        SM_CYDLGFRAME = 8,
        SM_CYDOUBLECLK = 37,
        SM_CYDRAG = 69,
        SM_CYEDGE = 46,
        SM_CYFIXEDFRAME = 8,
        SM_CYFOCUSBORDER = 84,
        SM_CYFRAME = 33,
        SM_CYFULLSCREEN = 17,
        SM_CYHSCROLL = 3,
        SM_CYICON = 12,
        SM_CYICONSPACING = 39,
        SM_CYKANJIWINDOW = 18,
        SM_CYMAXIMIZED = 62,
        SM_CYMAXTRACK = 60,
        SM_CYMENU = 15,
        SM_CYMENUCHECK = 72,
        SM_CYMENUSIZE = 55,
        SM_CYMIN = 29,
        SM_CYMINIMIZED = 58,
        SM_CYMINSPACING = 48,
        SM_CYMINTRACK = 35,
        SM_CYSCREEN = 1,
        SM_CYSIZE = 31,
        SM_CYSIZEFRAME = 33,
        SM_CYSMCAPTION = 51,
        SM_CYSMICON = 50,
        SM_CYSMSIZE = 53,
        SM_CYVIRTUALSCREEN = 79,
        SM_CYVSCROLL = 20,
        SM_CYVTHUMB = 9,
        SM_DBCSENABLED = 42,
        SM_DEBUG = 22,
        SM_DIGITIZER = 94,
        SM_IMMENABLED = 82,
        SM_MAXIMUMTOUCHES = 95,
        SM_MEDIACENTER = 87,
        SM_MENUDROPALIGNMENT = 40,
        SM_MIDEASTENABLED = 74,
        SM_MOUSEPRESENT = 19,
        SM_MOUSEHORIZONTALWHEELPRESENT = 91,
        SM_MOUSEWHEELPRESENT = 75,
        SM_NETWORK = 63,
        SM_PENWINDOWS = 41,
        SM_REMOTECONTROL = 0x2001,
        SM_REMOTESESSION = 0x1000,
        SM_SAMEDISPLAYFORMAT = 81,
        SM_SERVERR2 = 89,
        SM_SHOWSOUNDS = 70,
        SM_SHUTTINGDOWN = 0x2000,
        SM_SLOWMACHINE = 73,
        SM_STARTER = 88,
        SM_SWAPBUTTON = 23,
        SM_SYSTEMDOCKED = 0x2004,
        SM_TABLETPC = 86,
        SM_XVIRTUALSCREEN = 76,
        SM_YVIRTUALSCREEN = 77
    }

    int GetSystemMetrics(SystemMetricsId id)
    {
        return WinGetSystemMetrics(cast<int>(id));
    }

    public const float inchMM = 25.4f;
    public const float pointMM = 0.351450f;

    public inline float InchToMM(float inches)
    {
        return inches * inchMM;
    }

    public inline float MMToInch(float mm)
    {
        return mm / inchMM;
    }

    public inline float PointToMM(float points)
    {
        return points * pointMM;
    }

    public inline float MMToPoint(float mm)
    {
        return mm / pointMM;
    }

    public inline int MMToPixels(float mm, float dpi)
    {
        return cast<int>(mm * dpi / inchMM);
    }

    public inline float PixelsToMM(int pixels, float dpi)
    {
        return pixels * inchMM / dpi;
    }

    public inline double GoldenRatio()
    {
        return 1 + Sqrt(5) / 2;
    }

    public string GetDefaultMetricsFilePath()
    {
        string metricsFilePath;
        string cmajorRootDir = RtmGetEnvironmentVariable("CMAJOR_ROOT");
        if (!cmajorRootDir.IsEmpty())
        {
            metricsFilePath = Path.Combine(Path.Combine(cmajorRootDir, "config"), "metrics.xml");
        }
        return metricsFilePath;
    }

    public class SizeElement
    {
        public SizeElement(const string& name_) : name(name_)
        {
        }
        public inline const SizeF& Get() const
        {
            return size;
        }
        public void Set(const SizeF& size_)
        {
            size = size_;
        }
        [nodiscard]
        public Result<bool> Read(System.Xml.Element* parentElement)
        {
            Result<UniquePtr<System.XPath.NodeSet>> nodeSetResult = System.XPath.EvaluateToNodeSet(name, parentElement);
            if (nodeSetResult.Error())
            {
                return Result<bool>(ErrorId(nodeSetResult.GetErrorId()));
            }
            System.XPath.NodeSet* nodeSet = nodeSetResult.Value().Get();
            int n = nodeSet->Count();
            if (n == 1)
            {
                System.Xml.Node* node = nodeSet->GetNode(0);
                if (node->IsElementNode())
                {
                    System.Xml.Element* sizeElement = cast<System.Xml.Element*>(node);
                    auto wresult = ParseFloat(sizeElement->GetAttribute("width"));
                    if (wresult.Error())
                    {
                        return Result<bool>(ErrorId(wresult.GetErrorId()));
                    }
                    size.w = wresult.Value();
                    auto hresult = ParseFloat(sizeElement->GetAttribute("height"));
                    if (hresult.Error())
                    {
                        return Result<bool>(ErrorId(hresult.GetErrorId()));
                    }
                    size.h = hresult.Value();
                }
            }
            else
            {
                return Result<bool>(false);
            }
            return Result<bool>(true);
        }
        public void Write(System.Xml.Element* parentElement)
        {
            System.Xml.Element* sizeElement(System.Xml.MakeElement(name));
            sizeElement->SetAttribute("width", ToString(size.w));
            sizeElement->SetAttribute("height", ToString(size.h));
            parentElement->AppendChild(sizeElement);
        }
        private string name;
        private SizeF size;
    }

    public class Metrics
    {
        public Metrics() :
            useDefaults(false), dpiX(96), dpiY(96),
            defaultButtonSize(86, 25), defaultButtonSizeElement("button"),
            defaultLabelSize(71, 19), defaultLabelSizeElement("label"),
            defaultTextBoxSize(94, 14), defaultTextBoxSizeElement("textBox"),
            defaultListBoxSize(120, 95), defaultListBoxSizeElement("listBox"),
            defaultCheckBoxSize(80, 17), defaultCheckBoxSizeElement("checkBox"),
            defaultControlSpacing(10, 10), defaultControlSpacingElement("controlSpacing")
        {
            SetElementValues();
        }
        public inline bool UseDefaults() const
        {
            return useDefaults;
        }
        public void SetUseDefaults(bool useDefaults_)
        {
            useDefaults = useDefaults_;
        }
        [nodiscard]
        public Result<bool> LoadFromFile(const string& fileName, System.Lex.FileMap& fileMap)
        {
            auto existsResult = File.Exists(fileName);
            if (existsResult.Error())
            {
                return Result<bool>(ErrorId(existsResult.GetErrorId()));
            }
            bool exists = existsResult.Value();
            if (exists)
            {
                Result<UniquePtr<System.Xml.Document>> metricsDocResult =  System.Xml.ParseXmlDocument(fileName, fileMap);
                if (metricsDocResult.Error())
                {
                    return Result<bool>(ErrorId(metricsDocResult.GetErrorId()));
                }
                System.Xml.Document* metricsDoc = metricsDocResult.Value().Get();
                auto result = Read(metricsDoc->DocumentElement());
                if (result.Error()) return result;
                LogView* logView = Application.GetLogView();
                if (logView != null)
                {
                    auto result = logView->WriteLine("metrics loaded from '" + fileName + "'");
                    if (result.Error()) return result;
                }
            }
            else
            {
                return Result<bool>(false);
            }
            return Result<bool>(true);
        }
        public void SetElementValues() // Sets element values from the corresponding pixel-valued sizes. Call this if you have changed the pixel-valued sizes and you want to save the changed metrics.
        {
            defaultButtonSizeElement.Set(SizeF(HorizontalPixelsToMM(defaultButtonSize.w), VerticalPixelsToMM(defaultButtonSize.h)));
            defaultLabelSizeElement.Set(SizeF(HorizontalPixelsToMM(defaultLabelSize.w), VerticalPixelsToMM(defaultLabelSize.h)));
            defaultTextBoxSizeElement.Set(SizeF(HorizontalPixelsToMM(defaultTextBoxSize.w), VerticalPixelsToMM(defaultTextBoxSize.h)));
            defaultListBoxSizeElement.Set(SizeF(HorizontalPixelsToMM(defaultListBoxSize.w), VerticalPixelsToMM(defaultListBoxSize.h)));
            defaultCheckBoxSizeElement.Set(SizeF(HorizontalPixelsToMM(defaultCheckBoxSize.w), VerticalPixelsToMM(defaultCheckBoxSize.h)));
            defaultControlSpacingElement.Set(SizeF(HorizontalPixelsToMM(defaultControlSpacing.w), VerticalPixelsToMM(defaultControlSpacing.h)));
        }
        [nodiscard]
        public Result<bool> SaveTofile(const string& fileName, bool setElementValues)
        {
            if (setElementValues)
            {
                SetElementValues();
            }
            System.Xml.Document metricsDoc;
            metricsDoc.AppendChild(System.Xml.MakeElement("metrics"));
            metricsDoc.DocumentElement()->AppendChild(System.Xml.MakeComment("metrics are in millimeters"));
            metricsDoc.DocumentElement()->AppendChild(System.Xml.MakeText("\n "));
            Write(metricsDoc.DocumentElement());
            auto fileResult = File.CreateText(fileName);
            if (fileResult.Error())
            {
                return Result<bool>(ErrorId(fileResult.GetErrorId()));
            }
            StreamWriter& writer = fileResult.Value();
            System.Text.CodeFormatter formatter(writer);
            formatter.SetIndentSize(1);
            auto writeResult = metricsDoc.Write(formatter);
            if (writeResult.Error())
            {
                return Result<bool>(ErrorId(writeResult.GetErrorId()));
            }
            LogView* logView = Application.GetLogView();
            if (logView != null)
            {
                auto result = logView->WriteLine("metrics saved to '" + fileName + "'");
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Read(System.Xml.Element* parentElement)
        {
            auto result = defaultButtonSizeElement.Read(parentElement);
            if (result.Error()) return result;
            result = defaultLabelSizeElement.Read(parentElement);
            if (result.Error()) return result;
            result = defaultTextBoxSizeElement.Read(parentElement);
            if (result.Error()) return result;
            result = defaultListBoxSizeElement.Read(parentElement);
            if (result.Error()) return result;
            result = defaultCheckBoxSizeElement.Read(parentElement);
            if (result.Error()) return result;
            result = defaultControlSpacingElement.Read(parentElement);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public void Write(System.Xml.Element* parentElement)
        {
            defaultButtonSizeElement.Write(parentElement);
            defaultLabelSizeElement.Write(parentElement);
            defaultTextBoxSizeElement.Write(parentElement);
            defaultListBoxSizeElement.Write(parentElement);
            defaultCheckBoxSizeElement.Write(parentElement);
            defaultControlSpacingElement.Write(parentElement);
        }
        public inline bool Calculated() const
        {
            return calculated;
        }
        public void Calculate(Graphics& graphics)
        {
            calculated = true;
            dpiX = graphics.GetDpiX();
            dpiY = graphics.GetDpiX();
            if (useDefaults) return;
            defaultButtonSize.w = MMToHorizontalPixels(defaultButtonSizeElement.Get().w);
            defaultButtonSize.h = MMToVerticalPixels(defaultButtonSizeElement.Get().h);
            defaultLabelSize.w = MMToHorizontalPixels(defaultLabelSizeElement.Get().w);
            defaultLabelSize.h = MMToVerticalPixels(defaultLabelSizeElement.Get().h);
            defaultTextBoxSize.w = MMToHorizontalPixels(defaultTextBoxSizeElement.Get().w);
            defaultTextBoxSize.h = MMToVerticalPixels(defaultTextBoxSizeElement.Get().h);
            defaultListBoxSize.w = MMToHorizontalPixels(defaultListBoxSizeElement.Get().w);
            defaultListBoxSize.h = MMToVerticalPixels(defaultListBoxSizeElement.Get().h);
            defaultCheckBoxSize.w = MMToHorizontalPixels(defaultCheckBoxSizeElement.Get().w);
            defaultCheckBoxSize.h = MMToVerticalPixels(defaultCheckBoxSizeElement.Get().h);
            defaultControlSpacing.w = MMToHorizontalPixels(defaultControlSpacingElement.Get().w);
            defaultControlSpacing.h = MMToVerticalPixels(defaultControlSpacingElement.Get().h);
        }
        [nodiscard]
        public Result<bool> PrintToLog()
        {
            LogView* logView = Application.GetLogView();
            if (logView != null)
            {
                auto result = logView->WriteLine("DPIX=" + ToString(dpiX) + ", DPIY=" + ToString(dpiY));
                if (result.Error()) return result;
                result = logView->WriteLine("Button: " + defaultButtonSize.ToString() + " - (" + ToString(HorizontalPixelsToMM(defaultButtonSize.w)) + "mm, " +
                    ToString(VerticalPixelsToMM(defaultButtonSize.h)) + "mm)");
                if (result.Error()) return result;
                result = logView->WriteLine("Label: " + defaultLabelSize.ToString() + " - (" + ToString(HorizontalPixelsToMM(defaultLabelSize.w)) + "mm, " +
                    ToString(VerticalPixelsToMM(defaultLabelSize.h)) + "mm)");
                if (result.Error()) return result;
                result = logView->WriteLine("TextBox: " + defaultTextBoxSize.ToString() + " - (" + ToString(HorizontalPixelsToMM(defaultTextBoxSize.w)) + "mm, " +
                    ToString(VerticalPixelsToMM(defaultTextBoxSize.h)) + "mm)");
                if (result.Error()) return result;
                result = logView->WriteLine("ListBox: " + defaultListBoxSize.ToString() + " - (" + ToString(HorizontalPixelsToMM(defaultListBoxSize.w)) + "mm, " +
                    ToString(VerticalPixelsToMM(defaultListBoxSize.h)) + "mm)");
                if (result.Error()) return result;
                result = logView->WriteLine("CheckBox: " + defaultCheckBoxSize.ToString() + " - (" + ToString(HorizontalPixelsToMM(defaultCheckBoxSize.w)) + "mm, " +
                    ToString(VerticalPixelsToMM(defaultCheckBoxSize.h)) + "mm)");
                if (result.Error()) return result;
                result = logView->WriteLine("Spacing: " + defaultControlSpacing.ToString()  + " - (" + ToString(HorizontalPixelsToMM(defaultControlSpacing.w)) + "mm, " +
                    ToString(VerticalPixelsToMM(defaultControlSpacing.h)) + "mm)");
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public inline float DpiX() const
        {
            return dpiX;
        }
        public inline float DpiY() const
        {
            return dpiY;
        }
        public inline int MMToHorizontalPixels(float mm) const
        {
            return MMToPixels(mm, dpiX);
        }
        public inline float HorizontalPixelsToMM(int pixels) const
        {
            return PixelsToMM(pixels, dpiX);
        }
        public inline int MMToVerticalPixels(float mm) const
        {
            return MMToPixels(mm, dpiY);
        }
        public inline float VerticalPixelsToMM(int pixels) const
        {
            return PixelsToMM(pixels, dpiY);
        }
        public inline const Size& DefaultButtonSize()  const
        {
            return defaultButtonSize;
        }
        public void SetDefaultButtonSize(const Size& defaultButtonSize_)
        {
            defaultButtonSize = defaultButtonSize_;
        }
        public inline const Size& DefaultLabelSize() const
        {
            return defaultLabelSize;
        }
        public void SetDefaultLabelSize(const Size& defaultLabelSize_)
        {
            defaultLabelSize = defaultLabelSize_;
        }
        public inline const Size& DefaultTextBoxSize() const
        {
            return defaultTextBoxSize;
        }
        public void SetDefaultTextBoxSize(const Size& defaultTextBoxSize_)
        {
            defaultTextBoxSize = defaultTextBoxSize_;
        }
        public inline const Size& DefaultListBoxSize() const
        {
            return defaultListBoxSize;
        }
        public void SetDefaultListBoxSize(const Size& defaultListBoxSize_)
        {
            defaultListBoxSize = defaultListBoxSize_;
        }
        public inline const Size& DefaultCheckBoxSize() const
        {
            return defaultCheckBoxSize;
        }
        public void SetDefaultCheckBoxSize(const Size& defaultCheckBoxSize_)
        {
            defaultCheckBoxSize = defaultCheckBoxSize_;
        }
        public inline const Size& DefaultControlSpacing() const
        {
            return defaultControlSpacing;
        }
        public void SetDefaultControlSpacing(const Size& defaultControlSpacing_)
        {
            defaultControlSpacing = defaultControlSpacing_;
        }
        public SizeElement& DefaultButtonSizeElement()
        {
            return defaultButtonSizeElement;
        }
        public SizeElement& DefaultLabelSizeElement()
        {
            return defaultLabelSizeElement;
        }
        public SizeElement& DefaultTextBoxSizeElement()
        {
            return defaultTextBoxSizeElement;
        }
        public SizeElement& DefaultControlSpacingElement()
        {
            return defaultControlSpacingElement;
        }
        private bool useDefaults;
        private bool calculated;
        private float dpiX;
        private float dpiY;
        private Size defaultButtonSize;
        private SizeElement defaultButtonSizeElement;
        private Size defaultLabelSize;
        private SizeElement defaultLabelSizeElement;
        private Size defaultTextBoxSize;
        private SizeElement defaultTextBoxSizeElement;
        private Size defaultListBoxSize;
        private SizeElement defaultListBoxSizeElement;
        private Size defaultCheckBoxSize;
        private SizeElement defaultCheckBoxSizeElement;
        private Size defaultControlSpacing;
        private SizeElement defaultControlSpacingElement;
    }

    public static class ScreenMetrics
    {
        public static ScreenMetrics() : metrics()
        {
        }
        public static void SetUseDefaults(bool useDefaults)
        {
            metrics.SetUseDefaults(useDefaults);
        }
        public static Result<bool> Save(bool setElementValues)
        {
            string metricsFilePath = GetDefaultMetricsFilePath();
            auto saveResult = metrics.SaveTofile(metricsFilePath, setElementValues);
            if (saveResult.Error())
            {
                return Result<bool>(ErrorId(saveResult.GetErrorId()));
            }
            return Result<bool>(true);
        }
        public static Result<bool> Load(System.Lex.FileMap& fileMap)
        {
            string metricsFilePath = GetDefaultMetricsFilePath();
            auto existsResult = File.Exists(metricsFilePath);
            if (existsResult.Error())
            {
                return Result<bool>(ErrorId(existsResult.GetErrorId()));
            }
            bool exists = existsResult.Value();
            if (exists)
            {
                auto result = metrics.LoadFromFile(metricsFilePath, fileMap);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
            }
            else
            {
                return Result<bool>(false);
            }
            return Result<bool>(true);
        }
        public static bool Calculated()
        {
            return metrics.Calculated();
        }
        public static Result<bool> Calculate(Graphics& graphics)
        {
            if (!metrics.UseDefaults())
            {
                auto result = Load(defaultFileMap);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
            }
            metrics.Calculate(graphics);
            return Result<bool>(true);
        }
        public static const Metrics& Get()
        {
            return metrics;
        }
        public static void Set(const Metrics& metrics_)
        {
            metrics = metrics_;
        }
        public static Metrics metrics;
        private static System.Lex.FileMap defaultFileMap;
    }
}
