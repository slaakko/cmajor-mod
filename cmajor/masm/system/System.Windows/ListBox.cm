// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Windows
{
    public class delegate void SelectedIndexChangedEventHandler();

    public enum ListBoxStyle : long
    {
        LBS_COMBOBOX = 0x8000,
        LBS_DISABLENOSCROLL = 0x1000,
        LBS_EXTENDEDSEL = 0x0800,
        LBS_HASSTRINGS = 0x0040,
        LBS_MULTICOLUMN = 0x0200,
        LBS_MULTIPLESEL = 0x0008,
        LBS_NODATA = 0x2000,
        LBS_NOINTEGRALHEIGHT = 0x0100,
        LBS_NOREDRAW = 0x0004,
        LBS_NOSEL = 0x4000,
        LBS_NOTIFY = 0x0001,
        LBS_OWNERDRAWFIXED = 0x0010,
        LBS_OWNERDRAWVARIABLE = 0x0020,
        LBS_SORT = 0x0002,
        LBS_STANDARD = LBS_NOTIFY | LBS_SORT | WindowStyle.WS_VSCROLL | WindowStyle.WS_BORDER,
        LBS_USETABSTOPS = 0x0080,
        LBS_WANTKEYBOARDINPUT = 0x0400
    }

    public ControlCreateParams& ListBoxControlCreateParams(ControlCreateParams& controlCreateParams, ListBoxStyle listBoxStyle)
    {
        return controlCreateParams.SetWindowClassName("LISTBOX").
            SetWindowClassBackgroundColor(SystemColor.COLOR_WINDOW).SetBackgroundColor(Color.White()).
            SetWindowStyle(cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | WindowStyle.WS_VSCROLL | listBoxStyle));
    }

    public ControlCreateParams& ListBoxControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return ListBoxControlCreateParams(controlCreateParams, cast<ListBoxStyle>(ListBoxStyle.LBS_NOTIFY | ListBoxStyle.LBS_HASSTRINGS));
    }

    public class ListBoxCreateParams
    {
        public ListBoxCreateParams(ControlCreateParams& controlCreateParams_) : controlCreateParams(controlCreateParams_)
        {
        }
        public ListBoxCreateParams& Defaults()
        {
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
    }

    public class ListBox : Control
    {
        public ListBox(ListBoxStyle listBoxStyle, const Color& backgroundColor, const string& text, const Point& location, const Size& size,
            Dock dock, Anchors anchors) :
            base("LISTBOX", DefaultWindowClassStyle(), cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | listBoxStyle),
                DefaultExtendedWindowStyle(), backgroundColor, text, location, size, dock, anchors)
        {
        }
        public ListBox(const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(cast<ListBoxStyle>(ListBoxStyle.LBS_NOTIFY | ListBoxStyle.LBS_HASSTRINGS | WindowStyle.WS_VSCROLL), Color.White(),
            string(), location, size, dock, anchors)
        {
        }
        public ListBox(ListBoxCreateParams& createParams) : base(createParams.controlCreateParams)
        {
        }
        [nodiscard]
        public Result<bool> AddItem(const string& item)
        {
            if (Handle() != null)
            {
                auto utf16Result = ToUtf16(item);
                if (utf16Result.Error())
                {
                    return Result<bool>(ErrorId(utf16Result.GetErrorId()));
                }
                wstring wstr(Rvalue(utf16Result.Value()));
                WinSendMessage(Handle(), LB_ADDSTRING, 0u, cast<long>(cast<ulong>(cast<void*>(wstr.Chars()))));
            }
            return Result<bool>(true);
        }
        public void DeleteItem(int itemIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_DELETESTRING, cast<uint>(itemIndex), 0);
            }
        }
        [nodiscard]
        public Result<bool> InsertItem(int index, const string& item)
        {
            if (Handle() != null)
            {
                auto utf16Result = ToUtf16(item);
                if (utf16Result.Error())
                {
                    return Result<bool>(ErrorId(utf16Result.GetErrorId()));
                }
                wstring wstr(Rvalue(utf16Result.Value()));
                WinSendMessage(Handle(), LB_INSERTSTRING, cast<uint>(index), cast<long>(cast<ulong>(cast<void*>(wstr.Chars()))));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<string> GetItem(int index)
        {
            if (Handle() != null)
            {
                int size = cast<int>(WinSendMessage(Handle(), LB_GETTEXTLEN, cast<uint>(index), 0));
                UniquePtr<wchar> buf(cast<wchar*>(MemAlloc(size * sizeof(wchar))));
                WinSendMessage(Handle(), LB_GETTEXT, cast<uint>(index), cast<long>(cast<ulong>(cast<void*>(buf.Get()))));
                auto utf8Result = ToUtf8(buf.Get());
                if (utf8Result.Error())
                {
                    return Result<string>(ErrorId(utf8Result.GetErrorId()));
                }
                return Result<string>(utf8Result.Value());
            }
            return Result<string>(string());
        }
        [nodiscard]
        public Result<bool> SetItem(int index, const string& item)
        {
            DeleteItem(index);
            auto insertResult = InsertItem(index, item);
            if (insertResult.Error())
            {
                return Result<bool>(ErrorId(insertResult.GetErrorId()));
            }
            return Result<bool>(true);
        }
        public int GetItemCount() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETCOUNT, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public int GetTopIndex() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETTOPINDEX, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public void SetTopIndex(int topIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_SETTOPINDEX, cast<uint>(topIndex), 0);
            }
        }
        public int GetSelectedIndex() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETCURSEL, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public void SetSelectedIndex(int selectedIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_SETCURSEL, cast<uint>(selectedIndex), 0);
            }
        }
        protected override Result<bool> OnCreated()
        {
            auto result = base->OnCreated();
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            auto graphicsResult = Graphics.FromWindowHandle(Handle());
            if (graphicsResult.Error())
            {
                return Result<bool>(ErrorId(graphicsResult.GetErrorId()));
            }
            else
            {
                Graphics graphics = Rvalue(graphicsResult.Value());
                Result<FontHandle*> fontHandleResult = GetFontHandle(graphics);
                if (fontHandleResult.Error())
                {
                    return Result<bool>(ErrorId(fontHandleResult.GetErrorId()));
                }
                else
                {
                    FontHandle* fontHandle = fontHandleResult.Value();
                    if (!fontHandle->IsNull())
                    {
                        SendSetFontMessage(*fontHandle);
                    }
                }
            }
            return Result<bool>(true);
        }
        internal void SelectedIndexChangedInternal()
        {
            OnSelectedIndexChanged();
        }
        protected virtual void OnSelectedIndexChanged()
        {
            selectedIndexChangedEvent.Fire();
        }
        public Event<SelectedIndexChangedEventHandler>& SelectedIndexChangedEvent() const
        {
            return selectedIndexChangedEvent;
        }
        private Event<SelectedIndexChangedEventHandler> selectedIndexChangedEvent;
    }
}
