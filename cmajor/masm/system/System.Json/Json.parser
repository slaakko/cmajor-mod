using JsonTokens;

parser JsonParser
{
    lexer JsonLexer;
    main;

    Value : System.Json.JsonValue*
        ::= STRING
            {
                Token token = lexer.GetToken(pos);
                auto stringLiteralResult = System.Json.ParseStringLiteral(token);
                if (stringLiteralResult.Error())
                {
                    return ErrorId(stringLiteralResult.GetErrorId());
                }
                return new System.Json.JsonString(stringLiteralResult.Value());
            }
        |   NUMBER
            {
                Token token = lexer.GetToken(pos);
                auto numberResult = System.Json.ParseNumber(token);
                if (numberResult.Error())
                {
                    return ErrorId(numberResult.GetErrorId());
                }
                return new System.Json.JsonNumber(numberResult.Value());
            }
        |   Object:o{ return o; }
        |   Array:a{ return a; }
        |   TRUE{ return new System.Json.JsonBool(true); }
        |   FALSE{ return new System.Json.JsonBool(false); }
        |   NULL{ return new System.Json.JsonNull(); }
        ;

    Object(var UniquePtr<System.Json.JsonObject> o) : System.Json.JsonObject*
        ::= LBRACE{ o.Reset(new System.Json.JsonObject()); }
            (
                Field(o.Get()):field % COMMA
            )?
            RBRACE{ return o.Release(); }
        ;

    Field(System.Json.JsonObject* o, var ustring n) : bool
        ::= STRING
            {
                Token token = lexer.GetToken(pos);
                auto stringLiteralResult = System.Json.ParseStringLiteral(token);
                if (stringLiteralResult.Error())
                {
                    return ErrorId(stringLiteralResult.GetErrorId());
                }
                n = stringLiteralResult.Value();
            }
            COLON
            Value:v
            {
                o->AddField(n, v);
            }
        ;

    Array(var UniquePtr<System.Json.JsonArray> a) : System.Json.JsonArray*
        ::= LBRACKET{ a.Reset(new System.Json.JsonArray()); } (Value:v{ a->AddItem(v); } % COMMA)? RBRACKET{ return a.Release(); }
        ;
}
