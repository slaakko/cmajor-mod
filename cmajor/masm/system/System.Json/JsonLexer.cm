// this file has been generated from 'C:/work/cmajor-mod/cmajor/masm/system/System.Json/Json.lexer' using SoulCm lexer generator scmlg version 5.0.0

using System;
using System.Collections;
using JsonTokens;

public class JsonLexer : System.Lex.Lexer
{
    public JsonLexer(const uchar* start_, const uchar* end_, const string& fileName_) : 
        base(start_, end_, fileName_, "JsonLexer.classmap")
    {
        auto classMapResult = System.Lex.GetClassMap(ClassMapName());
        if (classMapResult.Error())
        {
            SetErrorId(classMapResult.GetErrorId());
            return;
        }
        SetClassMap(classMapResult.Value());
        SetKeywordMap(GetKeywordMap());
    }
    public override int NextState(int state, uchar c)
    {
        int cls = GetClass(c);
        switch (state)
        {
            case 0:
            {
                switch (cls)
                {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    {
                        return 1;
                    }
                    case 6:
                    {
                        return 2;
                    }
                    case 10:
                    {
                        return 3;
                    }
                    case 12:
                    {
                        return 4;
                    }
                    case 16:
                    {
                        return 5;
                    }
                    case 17:
                    {
                        return 6;
                    }
                    case 22:
                    {
                        return 7;
                    }
                    case 23:
                    {
                        return 8;
                    }
                    case 24:
                    {
                        return 9;
                    }
                    case 25:
                    {
                        return 10;
                    }
                    case 26:
                    {
                        return 11;
                    }
                    case 27:
                    {
                        return 12;
                    }
                    case 28:
                    {
                        return 13;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 13:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(8);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 12:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(7);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 11:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(6);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 10:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(5);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 9:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(4);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 8:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(3);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 7:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(2);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                switch (cls)
                {
                    case 22:
                    {
                        return 7;
                    }
                    case 18:
                    {
                        return 14;
                    }
                    case 19:
                    case 20:
                    {
                        return 15;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 15:
            {
                switch (cls)
                {
                    case 17:
                    case 21:
                    {
                        return 16;
                    }
                    case 22:
                    {
                        return 17;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 17:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(2);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                switch (cls)
                {
                    case 22:
                    {
                        return 17;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 16:
            {
                switch (cls)
                {
                    case 22:
                    {
                        return 17;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 14:
            {
                switch (cls)
                {
                    case 22:
                    {
                        return 18;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 18:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(2);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                switch (cls)
                {
                    case 19:
                    case 20:
                    {
                        return 15;
                    }
                    case 22:
                    {
                        return 18;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 6:
            {
                switch (cls)
                {
                    case 22:
                    {
                        return 7;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 5:
            {
                switch (cls)
                {
                    case 29:
                    {
                        return 19;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 19:
            {
                switch (cls)
                {
                    case 30:
                    {
                        return 20;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 20:
            {
                switch (cls)
                {
                    case 31:
                    {
                        return 21;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 21:
            {
                switch (cls)
                {
                    case 19:
                    {
                        return 22;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 22:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(10);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 4:
            {
                switch (cls)
                {
                    case 11:
                    {
                        return 23;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 23:
            {
                switch (cls)
                {
                    case 13:
                    {
                        return 24;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 24:
            {
                switch (cls)
                {
                    case 19:
                    {
                        return 25;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 25:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(9);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 3:
            {
                switch (cls)
                {
                    case 13:
                    {
                        return 26;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 26:
            {
                switch (cls)
                {
                    case 30:
                    {
                        return 27;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 27:
            {
                switch (cls)
                {
                    case 30:
                    {
                        return 28;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 28:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(11);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 2:
            {
                switch (cls)
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    {
                        return 29;
                    }
                    case 6:
                    {
                        return 30;
                    }
                    case 8:
                    {
                        return 31;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 31:
            {
                switch (cls)
                {
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 15:
                    case 16:
                    {
                        return 32;
                    }
                    case 13:
                    {
                        return 33;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 33:
            {
                switch (cls)
                {
                    case 14:
                    case 15:
                    case 16:
                    case 19:
                    case 20:
                    case 22:
                    case 29:
                    {
                        return 34;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 34:
            {
                switch (cls)
                {
                    case 14:
                    case 15:
                    case 16:
                    case 19:
                    case 20:
                    case 22:
                    case 29:
                    {
                        return 35;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 35:
            {
                switch (cls)
                {
                    case 14:
                    case 15:
                    case 16:
                    case 19:
                    case 20:
                    case 22:
                    case 29:
                    {
                        return 36;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 36:
            {
                switch (cls)
                {
                    case 14:
                    case 15:
                    case 16:
                    case 19:
                    case 20:
                    case 22:
                    case 29:
                    {
                        return 37;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 37:
            {
                switch (cls)
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    {
                        return 29;
                    }
                    case 6:
                    {
                        return 30;
                    }
                    case 8:
                    {
                        return 31;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 32:
            {
                switch (cls)
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    {
                        return 29;
                    }
                    case 6:
                    {
                        return 30;
                    }
                    case 8:
                    {
                        return 31;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 30:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(1);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 29:
            {
                switch (cls)
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    {
                        return 29;
                    }
                    case 6:
                    {
                        return 30;
                    }
                    case 8:
                    {
                        return 31;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 1:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(0);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                switch (cls)
                {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    {
                        return 1;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
        }
        return -1;
    }
    public long GetTokenId(int ruleIndex)
    {
        switch (ruleIndex)
        {
            case 0:
            {
                Retract();
                break;
            }
            case 1:
            {
                Retract();
                return STRING;
                break;
            }
            case 2:
            {
                Retract();
                return NUMBER;
                break;
            }
            case 3:
            {
                Retract();
                return LBRACKET;
                break;
            }
            case 4:
            {
                Retract();
                return RBRACKET;
                break;
            }
            case 5:
            {
                Retract();
                return LBRACE;
                break;
            }
            case 6:
            {
                Retract();
                return RBRACE;
                break;
            }
            case 7:
            {
                Retract();
                return COMMA;
                break;
            }
            case 8:
            {
                Retract();
                return COLON;
                break;
            }
            case 9:
            {
                Retract();
                return TRUE;
                break;
            }
            case 10:
            {
                Retract();
                return FALSE;
                break;
            }
            case 11:
            {
                Retract();
                return NULL;
                break;
            }
        }
        return System.Lex.CONTINUE_TOKEN;
    }
    public JsonLexer_Variables vars;
}

public class JsonLexer_Variables
{
    public JsonLexer_Variables()
    {
    }
}
