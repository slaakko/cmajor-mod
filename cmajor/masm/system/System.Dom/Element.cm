// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Xml
{
    public class Element : ParentNode
    {
        public Element(const System.Lex.Span& span_, int fileIndex_, const string& name_) : base(NodeKind.elementNode, span_, fileIndex_, name_)
        {
        }
        public const Map<string, UniquePtr<AttributeNode>>& Attributes() const
        {
            return attributeMap;
        }
        public AttributeNode* GetAttributeNode(const string& attributeName) const
        {
            auto it = attributeMap.Find(attributeName);
            if (it != attributeMap.End())
            {
                return it->second.Get();
            }
            else
            {
                return null;
            }
        }
        public string GetAttribute(const string& name) const
        {
            AttributeNode* attributeNode = GetAttributeNode(name);
            if (attributeNode != null)
            {
                return attributeNode->Value();
            }
            else
            {
                return string();
            }
        }
        public void AddAttribute(AttributeNode* attributeNode)
        {
            attributeMap[attributeNode->Name()] = UniquePtr<AttributeNode>(attributeNode);
        }
        public void SetAttribute(const System.Lex.Span& span, int fileIndex, const string& name, const string& value)
        {
            AttributeNode* attributeNode = GetAttributeNode(name);
            if (attributeNode != null)
            {
                attributeNode->SetValue(value);
            }
            else
            {
                AddAttribute(new AttributeNode(span, fileIndex, name, value));
            }
        }
        public void SetAttribute(const string& name, const string& value)
        {
            SetAttribute(System.Lex.Span(), -1, name, value);
        }
        public bool HasAttributes() const
        {
            return !attributeMap.IsEmpty();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            base->Accept(visitor);
            visitor.EndVisit(*this);
        }
        public override Result<bool> Write(System.Text.CodeFormatter& formatter)
        {
            if (formatter.Error())
            {
                return Result<bool>(ErrorId(formatter.GetErrorId()));
            }
            if (HasChildNodes())
            {
                if (attributeMap.IsEmpty())
                {
                    formatter << "<" << Name() << ">";
                }
                else
                {
                    formatter << "<" << Name();
                    WriteAttributes(formatter);
                    formatter << ">";
                }
                bool prevPreserveSpace = formatter.PreserveSpace();
                if (GetAttribute("xml:space") == "preserve")
                {
                    formatter.SetPreserveSpace(true);
                }
                bool preserveSpace = formatter.PreserveSpace() || !HasMultilineContent();
                if (!preserveSpace)
                {
                    formatter.WriteLine();
                    formatter.IncIndent();
                }
                base->Write(formatter);
                if (!preserveSpace)
                {
                    formatter.DecIndent();
                    formatter << "</" << Name() << ">" << endl();
                }
                else if (prevPreserveSpace)
                {
                    formatter << "</" << Name() << ">";
                }
                else
                {
                    formatter << "</" << Name() << ">" << endl();
                }
                formatter.SetPreserveSpace(prevPreserveSpace);
            }
            else
            {
                if (attributeMap.IsEmpty())
                {
                    formatter << "<" << Name() << "/>" << endl();
                }
                else
                {
                    formatter << "<" << Name();
                    WriteAttributes(formatter);
                    formatter << "/>" << endl();
                }
            }
            return Result<bool>(true);
        }
        public void WriteAttributes(System.Text.CodeFormatter& formatter)
        {
            for (const auto& a : attributeMap)
            {
                a.second->Write(formatter);
            }
        }
        public bool HasMultilineContent() const
        {
            if (FirstChild() != LastChild())
            {
                return true;
            }
            Node* child = FirstChild();
            if (child != null)
            {
                if (child->IsElementNode() || child->IsDocumentNode())
                {
                    return true;
                }
                if (child->ValueContainsNewLine())
                {
                    return true;
                }
            }
            return false;
        }
        public override void WalkAttribute(NodeOperation& operation)
        {
            for (const auto& attribute : attributeMap)
            {
                operation.Apply(attribute.second.Get());
            }
        }
        private Map<string, UniquePtr<AttributeNode>> attributeMap;
    }

    public Element* MakeElement(const string& name)
    {
        return new Element(System.Lex.Span(), -1, name);
    }
}

