// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Xml
{
    public class CDataSection : Text
    {
        public CDataSection(const System.Lex.Span& span_, int fileIndex_) : base(NodeKind.cdataSectionNode, span_, fileIndex_, "cdata_section")
        {
        }
        public CDataSection(const System.Lex.Span& span_, int fileIndex_, const string& text_) : base(NodeKind.cdataSectionNode, span_, fileIndex_, "cdata_section", text_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        [nodiscard]
        public override Result<bool> Write(System.Text.CodeFormatter& formatter)
        {
            if (formatter.Error())
            {
                return Result<bool>(ErrorId(formatter.GetErrorId()));
            }
            auto result = formatter.Write("<![CDATA[");
            if (result.Error()) return result;
            result = formatter.Write(Data());
            if (result.Error()) return result;
            result = formatter.Write("]]>");
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public override Node* Clone(bool deep) const
        {
            return new CDataSection(Span(), FileIndex(), Data());
        }
    }

    public CDataSection* MakeCDataSection(const string& text)
    {
        return new CDataSection(System.Lex.Span(), -1, text);
    }
}

