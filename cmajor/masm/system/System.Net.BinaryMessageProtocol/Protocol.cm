// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Net.Sockets;
using System.IO;

namespace System.Net.BinaryMessageProtocol
{
    public abstract class BinaryMessage
    {
        public BinaryMessage(uint id_) : id(id_)
        {
        }
        public virtual ~BinaryMessage()
        {
        }
        public abstract uint Length() const;
        [nodiscard]
        public abstract Result<bool> Write(MemoryWriter& writer);
        [nodiscard]
        public abstract Result<bool> Read(MemoryReader& reader);
        public uint Id() const { return id; }
        private uint id;
    }

    public uint MakeMessageId(ulong hashCode)
    {
        uint messageId = cast<uint>(1u + (hashCode % cast<ulong>(0xFFFFFFFFu)));
        return messageId;
    }

    public Result<BinaryMessage*> ReadMessage(TcpSocket& socket)
    {
        int messageLength = 0;
        byte[4] buffer;
        int offset = 0;
        int bytesToReceive = cast<int>(sizeof(messageLength));
        Result<int> receiveResult = socket.Receive(&buffer[offset], bytesToReceive);
        if (receiveResult.Error())
        {
            return Result<BinaryMessage*>(ErrorId(receiveResult.GetErrorId()));
        }
        int bytesReceived = receiveResult.Value();
        if (bytesReceived == 0)
        {
            return Result<BinaryMessage*>();
        }
        bytesToReceive = bytesToReceive - bytesReceived;
        offset = offset + bytesReceived;
        while (bytesToReceive > 0)
        {
            receiveResult = socket.Receive(&buffer[offset], bytesToReceive);
            if (receiveResult.Error())
            {
                return Result<BinaryMessage*>(ErrorId(receiveResult.GetErrorId()));
            }
            bytesReceived = receiveResult.Value();
            if (bytesReceived == 0)
            {
                return Result<BinaryMessage*>();
            }
            bytesToReceive = bytesToReceive - bytesReceived;
            offset = offset + bytesReceived;
        }
        MemoryReader lengthReader(&buffer[0], sizeof(messageLength));
        auto lengthResult = lengthReader.ReadUInt();
        if (lengthResult.Error()) return Result<BinaryMessage*>(ErrorId(lengthResult.GetErrorId()));
        messageLength = cast<int>(lengthResult.Value());
        UniquePtr<byte> mem(cast<byte*>(MemAlloc(messageLength + 4)));
        offset = 0;
        bytesToReceive = messageLength + 4;
        receiveResult = socket.Receive(mem.Get() + offset, bytesToReceive);
        if (receiveResult.Error())
        {
            return Result<BinaryMessage*>(ErrorId(receiveResult.GetErrorId()));
        }
        bytesReceived = receiveResult.Value();
        if (bytesReceived == 0)
        {
            return Result<BinaryMessage*>();
        }
        bytesToReceive = bytesToReceive - bytesReceived;
        offset = offset + bytesReceived;
        while (bytesToReceive > 0)
        {
            receiveResult = socket.Receive(mem.Get() + offset, bytesToReceive);
            if (receiveResult.Error())
            {
                return Result<BinaryMessage*>(ErrorId(receiveResult.GetErrorId()));
            }
            bytesReceived = receiveResult.Value();
            if (bytesReceived == 0)
            {
                return Result<BinaryMessage*>();
            }
            bytesToReceive = bytesToReceive - bytesReceived;
            offset = offset + bytesReceived;
        }
        MemoryReader messageReader(mem.Get(), messageLength + 4);
        auto messageIdResult = messageReader.ReadUInt();
        if (messageIdResult.Error())
        {
            return Result<BinaryMessage*>(ErrorId(messageIdResult.GetErrorId()));
        }
        uint messageId = messageIdResult.Value();
        Result<BinaryMessage*> createResult = MessageRegistry.Instance().Create(messageId);
        if (createResult.Error())
        {
            return Result<BinaryMessage*>(ErrorId(createResult.GetErrorId()));
        }
        BinaryMessage* message = createResult.Value();
        auto readResult = message->Read(messageReader);
        if (readResult.Error())
        {
            return Result<BinaryMessage*>(ErrorId(readResult.GetErrorId()));
        }
        return Result<BinaryMessage*>(message);
    }
    [nodiscard]
    public Result<bool> WriteMessage(TcpSocket& socket, BinaryMessage* message)
    {
        uint messageLength = message->Length();
        byte[4] lengthBuffer;
        MemoryWriter lengthWriter(&lengthBuffer[0], 4);
        auto result = lengthWriter.Write(messageLength);
        if (result.Error()) return result;
        result = socket.SendAll(&lengthBuffer[0], 4);
        if (result.Error()) return result;
        uint messageId = message->Id();
        byte[4] messageIdBuffer;
        MemoryWriter idWriter(&messageIdBuffer[0], 4);
        result = idWriter.Write(messageId);
        if (result.Error()) return result;
        result = socket.SendAll(&messageIdBuffer[0], 4);
        if (result.Error()) return result;
        if (messageLength > 0)
        {
            UniquePtr<byte> mem(cast<byte*>(MemAlloc(messageLength)));
            MemoryWriter messageWriter(mem.Get(), cast<int>(messageLength));
            result = message->Write(messageWriter);
            if (result.Error()) return result;
            result = socket.SendAll(mem.Get(), cast<int>(messageLength));
            if (result.Error()) return result;
        }
        return Result<bool>(true);
    }
}
