// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

public extern cdecl void RtmInit();
public extern cdecl void RtmDone();
public extern cdecl void RtmEnqueueDestruction(void*, void*);
public extern cdecl void RtmBeginStaticInitCriticalSection();
public extern cdecl void RtmEndtaticInitCriticalSection();
public extern cdecl void RtmPushFunction(void* traceInfo);
public extern cdecl void RtmPopFunction(void* traceInfo);
public extern cdecl void* RtmMemAlloc(long size);
public extern cdecl void RtmMemFree(void* ptr);
public extern cdecl void RtmPrintInteger(long x);
public extern cdecl void RtmPrintFloat(float x);
public extern cdecl void RtmPrintDouble(double x);
public extern cdecl void RtmPrintString(const char* s);
public extern cdecl void RtmBeginUnitTest(int numAssertions, const char* unitTestFilePath);
public extern cdecl void RtmEndUnitTest(const char* testName, int exitCode);
public extern cdecl void RtmSetUnitTestAssertionResult(int assertionIndex, bool assertionResult, int line);
public extern cdecl long RtmEvaluateUnaryOp(long operand, int type, int operation);
public extern cdecl long RtmEvaluateBinOp(long left, long right, int type, int operation);
public extern cdecl float RtmEvaluateFloatUnaryOp(float operand, int operation);
public extern cdecl float RtmEvaluateFloatBinaryOp(float left, float right, int operation);
public extern cdecl double RtmEvaluateDoubleUnaryOp(double operand, int operation);
public extern cdecl double RtmEvaluateDoubleBinaryOp(double left, double right, int operation);
public extern cdecl void RtmPanic(const char* message);
public extern cdecl void RtmFailAssertion(const char* assertion, const char* function, const char* sourceFilePath, int lineNumber);
public extern cdecl int RtmAllocateError(const char* errorMessage);
public extern cdecl const char* RtmGetErrorMessage(int errorId);
public extern cdecl int RtmGetErrno();
public extern cdecl void RtmDisposeError(int errorId);
public extern cdecl void RtmInitRand(uint seed);
public extern cdecl uint RtmRandom();
public extern cdecl ulong RtmRandom64();
public extern cdecl void* RtmOpenFile(const char* filePath, byte openMode, int& errorId);
public extern cdecl void* RtmOpenStdFile(int handle, int& errorId);
public extern cdecl bool RtmClose(void* fileHandle, int& errorId);
public extern cdecl bool RtmDisposeFile(void* fileHandle, int& errorId);
public extern cdecl long RtmWrite(void* fileHandle, const byte* buffer, long count, int& errorId);
public extern cdecl bool RtmWriteByte(void* fileHandle, byte x, int& errorId);
public extern cdecl long RtmRead(void* fileHandle, byte* buffer, long bufferSize, int& errorId);
public extern cdecl int RtmReadByte(void* fileHandle, int& errorId);
public extern cdecl bool RtmEof(void* fileHandle);
public extern cdecl bool RtmGetFileError(void* fileHandle, int& errorId);
public extern cdecl bool RtmSeek(void* fileHandle, long pos, byte origin, int& errorId);
public extern cdecl long RtmTell(void* fileHandle, int& errorId);
public extern cdecl bool RtmFlush(void* fileHandle, int& errorId);
public extern cdecl bool RtmFileExists(const char* filePath, int& errorId);
public extern cdecl bool RtmLastWriteTimeLess(const char* filePath1, const char* filePath2, int& errorId);
public extern cdecl long RtmGetFileSize(const char* filePath, int& errorId);
public extern cdecl bool RtmRemoveFile(const char* filePath, int& errorId);
public extern cdecl bool RtmCopyFile(const char* sourceFilePath, const char* targetFilePath, int& errorId);
public extern cdecl bool RtmMoveFile(const char* sourceFilePath, const char* targetFilePath, int& errorId);
public extern cdecl bool RtmIsConsoleHandle(int handle);
public extern cdecl long RtmNow();
public extern cdecl void RtmSleep(long nanoSeconds);
public extern cdecl void RtmGetCurrentDate(short* year, sbyte* month, sbyte* day);
public extern cdecl void RtmGetCurrentDateTime(short* year, sbyte* month, sbyte* day, int* secs);
public extern cdecl double RtmPow(double x, int exponent);
public extern cdecl double Pow(double x, double y);
public extern cdecl double RtmSqrt(double x);
public extern cdecl double RtmPi();
public extern cdecl double RtmCos(double angleRad);
public extern cdecl double RtmSin(double angleRad);
public extern cdecl double RtmArcCos(double x);
public extern cdecl double RtmArcSin(double x);
public extern cdecl double RtmAtan2(double y, double x);
public extern cdecl double RtmEpsilon();
public extern cdecl int RtmGetCurrentWorkingDirectoryHandle(int& errorId);
public extern cdecl const char* RtmGetCurrentWorkingDirectory(int handle);
public extern cdecl void RtmFreeCurrentWorkingDirectoryHandle(int handle);
public extern cdecl int RtmAllocateString(const char* s);
public extern cdecl void RtmFreeString(int stringHandle);
public extern cdecl const char* RtmGetString(int stringHandle);
public extern cdecl char RtmAsciiToUpper(char c);
public extern cdecl char RtmAsciiToLower(char c);
public extern cdecl int RtmBeginGetPathToExecutable();
public extern cdecl const char* RtmGetPathToExecutable(int pathHandle);
public extern cdecl void RtmEndGetPathToExecutable(int pathHandle);
public extern cdecl const char* RtmGetEnvironmentVariable(const char* envVarName);
public extern cdecl void* RtmAllocateMutex();
public extern cdecl void RtmFreeMutex(void* mutexHandle);
public extern cdecl void* RtmAllocateRecursiveMutex();
public extern cdecl void RtmFreeRecursiveMutex(void* recursiveMutexHandle);
public extern cdecl void RtmLockMutex(void* mutexHandle);
public extern cdecl void RtmUnlockMutex(void* mutexHandle);
public extern cdecl void RtmLockRecursiveMutex(void* recursiveMutexHandle);
public extern cdecl void RtmUnlockRecursiveMutex(void* recursiveMutexHandle);
public extern cdecl void* RtmAllocateConditionVariable();
public extern cdecl void RtmFreeConditionVariable(void* nativeHandle);
public extern cdecl bool RtmNotifyOne(void* nativeHandle, int& errorId);
public extern cdecl bool RtmNotifyAll(void* nativeHandle, int& errorId);
public extern cdecl bool RtmWaitConditionVariable(void* nativeHandle, void* recursiveMutexHandle, int& errorId);
public extern cdecl int RtmWaitConditionVariableDuration(void* nativeHandle, void* recursiveMutexHandle, long nanoseconds, int& errorId);
public extern cdecl bool RtmDirectoryExists(const char* directoryPath);
public extern cdecl void RtmCreateDirectories(const char* directoryPath);
public extern cdecl int RtmBeginIterateDirectory(const char* directoryPath);
public extern cdecl const char* RtmGetNextFilePath(int directoryIterationHandle);
public extern cdecl const char* RtmGetNextDirectoryPath(int directoryIterationHandle);
public extern cdecl void RtmEndIterateDirectory(int directoryIterationHandle);
public extern cdecl int RtmExecute(const char* command);
public extern cdecl int RtmBeginExec(const char* command);
public extern cdecl void RtmAddRedirection(int execHandle, int handle, const char* file);
public extern cdecl int RtmEndExec(int execHandle);
public extern cdecl void* RtmConvertThreadToFiber(void* param);
public extern cdecl void* RtmCreateFiber(ulong stackSize, void* startAddress, void* param);
public extern cdecl void RtmSwitchToFiber(void* fiber);
public extern cdecl void* RtmGetFiberData();
public extern cdecl void RtmDeleteFiber(void* fiber);
public extern cdecl void* RtmCreateProcess(const char* command, int redirections, int& errorId);
public extern cdecl void RtmDeleteProcess(void* process);
public extern cdecl bool RtmProcessRunning(void* process, int& errorId);
public extern cdecl bool RtmProcessWaitForExit(void* process, int& errorId);
public extern cdecl int RtmProcessExitCode(void* process, int& errorId);
public extern cdecl bool RtmProcessTerminate(void* process, int& errorId);
public extern cdecl bool RtmProcessEof(void* process, int handle, int& errorId);
public extern cdecl int RtmProcessReadLine(void* process, int handle, int& errorId);
public extern cdecl int RtmProcessReadToEnd(void* process, int handle, int& errorId);
public extern cdecl bool RtmProcessWriteLine(void* process, const char* line, int& errorId);
public extern cdecl int* RtmGetClassMap(const char* classMapName, int& errorId);
public extern cdecl int RtmInitZlib(int mode, int level, void** handle, int& errorId);
public extern cdecl void RtmDoneZlib(int mode, void* handle);
public extern cdecl void RtmSetInputZlib(void* inChunk, uint inAvail, void* handle);
public extern cdecl int RtmInflateZlib(void* outChunk, uint outChunkSize, uint* have, uint* outAvail, uint* inAvail, void* handle, int& errorId);
public extern cdecl int RtmDeflateZlib(void* outChunk, uint outChunkSize, uint* have, uint* outAvail, void* handle, int flush, int& errorId);
public extern cdecl void* RtmCreateSocket(int& errorId);
public extern cdecl void RtmBindSocket(void* socketHandle, int port, int& errorId);
public extern cdecl void RtmListenSocket(void* socketHandle, int backlog, int& errorId);
public extern cdecl void* RtmAcceptSocket(void* socketHandle, int& errorId);
public extern cdecl void RtmCloseSocket(void* socketHandle, int& errorId);
public extern cdecl void RtmShutdownSocket(void* socketHandle, int mode, int& errorId);
public extern cdecl void* RtmConnectSocket(const char* node, const char* service, int& errorId);
public extern cdecl int RtmSendSocket(void* socketHandle, byte* buf, int len, int flags, int& errorId);
public extern cdecl int RtmReceiveSocket(void* socketHandle, byte* buf, int len, int flags, int& errorId);
public extern cdecl void RtmDestroySocket(void* socketHandle);
public extern cdecl void* RtmGetExceptionTypeId();
public extern cdecl void RtmThrowException(void* exception, void* exceptionTypeId);
public extern cdecl void RtmCaptureException(void** exception, void** exceptionTypeId);
public extern cdecl void RtmThrowCapturedException(void* exception, void* exceptionTypeId);
public extern cdecl bool RtmHandleException(void* exceptionTypeId);
public extern cdecl void* RtmGetException();

