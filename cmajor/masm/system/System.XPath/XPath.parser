// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.XPath.Token;

parser System.XPath.XPathParser
{
    lexer System.XPath.XPathLexer;
    main;

    Expr : System.XPath.Expr*
        ::=
        (
            OrExpr:orExpr
        )
        {
            return orExpr;
        }
        ;

    OrExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            AndExpr:left{ expr.Reset(left); }
            (
                OrKeyword:orKeyword AndExpr:right{ expr.Reset(new System.XPath.BinaryExpr(System.XPath.Operator.or_, expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    AndExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            EqualityExpr:left{ expr.Reset(left); }
            (
                AndKeyword:andKeyword EqualityExpr:right{ expr.Reset(new System.XPath.BinaryExpr(System.XPath.Operator.and_, expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    EqualityExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            RelationalExpr:left{ expr.Reset(left); }
            (
                EqualityOp:op RelationalExpr:right{ expr.Reset(new System.XPath.BinaryExpr(op, expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    RelationalExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            AdditiveExpr:left{ expr.Reset(left); }
            (
                RelationalOp:op AdditiveExpr:right{ expr.Reset(new System.XPath.BinaryExpr(op, expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    AdditiveExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            MultiplicativeExpr:left{ expr.Reset(left); }
            (
                AdditiveOp:op MultiplicativeExpr:right{ expr.Reset(new System.XPath.BinaryExpr(op, expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    MultiplicativeExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            UnaryExpr:left{ expr.Reset(left); }
            (
                MultiplicativeOp:op UnaryExpr:right{ expr.Reset(new System.XPath.BinaryExpr(op, expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    UnaryExpr : System.XPath.Expr*
        ::= MINUS UnaryExpr:subject{ return new System.XPath.UnaryExpr(System.XPath.Operator.minus, subject); }
        |   UnionExpr:unionExpr{ return unionExpr; }
        ;

    UnionExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            PathExpr:left{ expr.Reset(left); }
            (
                UNION PathExpr:right{ expr.Reset(new System.XPath.BinaryExpr(System.XPath.Operator.union, expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    PathExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            (
                LocationPath:locationPath - FunctionCall:functionCall
            )
            {
                return locationPath;
            }
        )
        |
        (
            FilterExpr:filterExpr{ expr.Reset(filterExpr); }
            (
                (
                    (
                        CombinePathOp:op
                        RelativeLocationPath:right
                    )
                    {
                        switch (op)
                        {
                            case System.XPath.Operator.slash:
                            {
                                return new System.XPath.BinaryExpr(System.XPath.Operator.slash, expr.Release(), right);
                            }
                            case System.XPath.Operator.slashSlash:
                            {
                                return System.XPath.MakeSlashSlashExpr(expr.Release(), right);
                            }
                        }
                    }
                )?
            )
            {
                return expr.Release();
            }
        )
        ;

    LocationPath : System.XPath.Expr*
        ::= AbsoluteLocationPath:absoluteLocationPath{ return absoluteLocationPath; }
        |   RelativeLocationPath:relativeLocationPath{ return relativeLocationPath; }
        ;

    AbsoluteLocationPath(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (   AbbreviatedAbsoluteLocationPath:abbreviatedAbsoluteLocationPath{ expr.Reset(abbreviatedAbsoluteLocationPath); }
        |   SLASH{ expr.Reset(new System.XPath.Root()); }
            (
                RelativeLocationPath:right{ expr.Reset(new System.XPath.BinaryExpr(System.XPath.Operator.slash, expr.Release(), right)); }
            )?
        )
        {
            return expr.Release();
        }
        ;

    AbbreviatedAbsoluteLocationPath : System.XPath.Expr*
        ::= SLASH_SLASH RelativeLocationPath:right{ return System.XPath.MakeSlashSlashExpr(new System.XPath.Root(), right); }
        ;

    RelativeLocationPath(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            Step:left{ expr.Reset(left); }
            (
                (
                    CombinePathOp:op
                    Step:right
                )
                {
                    switch (op)
                    {
                        case System.XPath.Operator.slash:
                        {
                            expr.Reset(new System.XPath.BinaryExpr(System.XPath.Operator.slash, expr.Release(), right));
                            break;
                        }
                        case System.XPath.Operator.slashSlash:
                        {
                            expr.Reset(System.XPath.MakeSlashSlashExpr(expr.Release(), right));
                            break;
                        }
                    }
                }
            )*
        )
        {
            return expr.Release();
        }
        ;

    Step(var UniquePtr<System.XPath.LocationStepExpr> expr) : System.XPath.Expr*
        ::=
        (
            AxisSpecifier:axis NodeTest:nodeTest{ expr.Reset(new System.XPath.LocationStepExpr(axis, nodeTest)); }
            (
                Predicate:predicate{ expr->AddPredicate(predicate); }
            )*
        |   AbbreviatedStep:abbreviatedStep{ expr.Reset(abbreviatedStep); }
        )
        {
            return expr.Release();
        }
        ;

    AxisSpecifier : System.Xml.Axis
        ::= AxisName:axis COLON_COLON{ return axis; }
        |   AbbreviatedAxisSpecifier:abbreviatedAxisSpecifier{ return abbreviatedAxisSpecifier; }
        ;

    AxisName : System.Xml.Axis
        ::= NAME
        {
            switch (lexer.GetKeywordToken(lexer.GetToken(pos).match))
            {
                case ANCESTOR:
                {
                    return System.Xml.Axis.ancestor;
                }
                case ANCESTOR_OR_SELF:
                {
                    return System.Xml.Axis.ancestorOrSelf;
                }
                case ATTRIBUTE:
                {
                    return System.Xml.Axis.attribute;
                }
                case CHILD:
                {
                    return System.Xml.Axis.child;
                }
                case DESCENDANT:
                {
                    return System.Xml.Axis.descendant;
                }
                case DESCENDANT_OR_SELF:
                {
                    return System.Xml.Axis.descendantOrSelf;
                }
                case FOLLOWING:
                {
                    return System.Xml.Axis.following;
                }
                case FOLLOWING_SIBLING:
                {
                    return System.Xml.Axis.followingSibling;
                }
                case NAMESPACE:
                {
                    return System.Xml.Axis.ns;
                }
                case PARENT:
                {
                    return System.Xml.Axis.parent;
                }
                case PRECEDING:
                {
                    return System.Xml.Axis.preceding;
                }
                case PRECEDING_SIBLING:
                {
                    return System.Xml.Axis.precedingSibling;
                }
                case SELF:
                {
                    return System.Xml.Axis.self;
                }
                default:
                {
                    pass = false;
                    break;
                }
            }
        }
        ;

    AbbreviatedAxisSpecifier : System.Xml.Axis
        ::= AT{ return System.Xml.Axis.attribute; }
        |   empty{ return System.Xml.Axis.child; }
        ;

    NodeTest : System.XPath.NodeTest*
        ::=
        (
            (
                ProcessingInstructionKeyword:pikw LPAREN Literal:pi RPAREN
            )
            {
                return new System.XPath.PILiteralNodeTest(pi);
            }
        |
            (
                NodeType:nodeType LPAREN RPAREN
            )
            {
                return nodeType;
            }
        |
            (
                NameTest:nameTest
            )
            {
                return nameTest;
            }
        )
        ;

    Literal : System.XPath.Literal*
        ::= DQ_STRING
            {
                auto dqs = System.XPath.ParseDQString(lexer.FileName(), lexer.GetToken(pos));
                if (dqs.Error())
                {
                    return ErrorId(dqs.GetErrorId());
                }
                return new System.XPath.Literal(dqs.Value());
            }
        |   SQ_STRING
            {
                auto sqs = System.XPath.ParseSQString(lexer.FileName(), lexer.GetToken(pos));
                if (sqs.Error())
                {
                    return ErrorId(sqs.GetErrorId());
                }
                return new System.XPath.Literal(sqs.Value());
            }
        ;

    NodeType : System.XPath.NodeTest*
        ::= NAME
        {
            switch (lexer.GetKeywordToken(lexer.GetToken(pos).match))
            {
                case COMMENT:
                {
                    return new System.XPath.NodeTest(System.XPath.NodeTestKind.commentNodeTest);
                }
                case TEXT:
                {
                    return new System.XPath.NodeTest(System.XPath.NodeTestKind.textNodeTest);
                }
                case PROCESSING_INSTRUCTION:
                {
                    return new System.XPath.NodeTest(System.XPath.NodeTestKind.piNodeTest);
                }
                case NODE:
                {
                    return new System.XPath.NodeTest(System.XPath.NodeTestKind.anyNodeTest);
                }
                default:
                {
                    pass = false;
                    break;
                }
            }
        }
        ;

    NameTest : System.XPath.NodeTest*
        ::= STAR{ return new System.XPath.NodeTest(System.XPath.NodeTestKind.principalNodeTest); }
        |   NCName:ncname COLON STAR{ return new System.XPath.PrefixNodeTest(ncname); }
        |   QName:qname{ return new System.XPath.NameNodeTest(qname); }
        ;

    NCName : string
        ::= NAME
        {
            auto utf8Result = ToUtf8(lexer.GetToken(pos).ToString());
            if (utf8Result.Error())
            {
                return ErrorId(utf8Result.GetErrorId());
            }
            return utf8Result.Value();
        }
        ;

    QName : string
        ::= PrefixedName:prefixedName{ return prefixedName; }
        |   UnprefixedName:unprefixedName{ return unprefixedName; }
        ;

    PrefixedName : string
        ::=
        (
            Prefix:prefix COLON LocalPart:localPart
        )
        {
            return prefix + ":" + localPart;
        }
        ;

    Prefix : string
        ::= NCName:ncname{ return ncname; }
        ;

    UnprefixedName : string
        ::= LocalPart:localPart{ return localPart; }
        ;

    LocalPart : string
        ::= NCName:ncname{ return ncname; }
        ;

    Predicate : System.XPath.Expr*
        ::=
        (
            LBRACKET
            Expr:expr
            RBRACKET
        )
        {
            return expr;
        }
        ;

    AbbreviatedStep : System.XPath.LocationStepExpr*
        ::=
        (   DOT_DOT{ return new System.XPath.LocationStepExpr(System.Xml.Axis.parent, new System.XPath.NodeTest(System.XPath.NodeTestKind.anyNodeTest)); }
        |   DOT{ return new System.XPath.LocationStepExpr(System.Xml.Axis.self, new System.XPath.NodeTest(System.XPath.NodeTestKind.anyNodeTest)); }
        )
        ;

    FunctionCall(var UniquePtr<System.XPath.FunctionCall> functionCall) : System.XPath.Expr*
        ::=
        (
            FunctionName:functionName
            LPAREN{ functionCall.Reset(new System.XPath.FunctionCall(functionName)); }
            (
                Argument:arg{ functionCall->AddArgument(arg); } % COMMA
            )?
            RPAREN
        )
        {
            return functionCall.Release();
        }
        ;

    FunctionName : string
        ::=
        (
            QName:qname - NodeType:nodeType
        )
        {
            return qname;
        }
        ;

    Argument : System.XPath.Expr*
        ::= Expr:expr{ return expr; }
        ;

    FilterExpr(var UniquePtr<System.XPath.Expr> expr) : System.XPath.Expr*
        ::=
        (
            PrimaryExpr:primaryExpr{ expr.Reset(primaryExpr); }
            (
                Predicate:predicate{ expr.Reset(new System.XPath.FilterExpr(expr.Release(), predicate)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    PrimaryExpr : System.XPath.Expr*
        ::= FunctionCall:functionCall{ return functionCall; }
        |   VariableReference:variableReference{ return variableReference; }
        |   (LPAREN Expr:expr RPAREN){ return new System.XPath.UnaryExpr(System.XPath.Operator.parens, expr); }
        |   Literal:literal{ return literal; }
        |   Number:number{ return number; }
        ;

    VariableReference : System.XPath.Expr*
        ::= (DOLLAR QName:qname){ return new System.XPath.VariableReference(qname); }
        ;

    Number : System.XPath.Expr*
        ::= NUMBER
        {
            auto number = lexer.GetDouble(pos);
            if (number.Error())
            {
                return ErrorId(number.GetErrorId());
            }
            return new System.XPath.NumberExpr(number.Value());
        }
        ;

    EqualityOp : System.XPath.Operator
        ::= EQ{ return System.XPath.Operator.equal; }
        |   NEQ{ return System.XPath.Operator.notEqual; }
        ;

    RelationalOp : System.XPath.Operator
        ::= LESS{ return System.XPath.Operator.less; }
        |   GREATER{ return System.XPath.Operator.greater; }
        |   LEQ{ return System.XPath.Operator.lessOrEqual; }
        |   GEQ{ return System.XPath.Operator.greaterOrEqual; }
        ;

    AdditiveOp : System.XPath.Operator
        ::= PLUS{ return System.XPath.Operator.plus; }
        |   MINUS{ return System.XPath.Operator.minus; }
        ;

    MultiplicativeOp : System.XPath.Operator
        ::= STAR{ return System.XPath.Operator.mul; }
        |   DivKeyword:div{ return System.XPath.Operator.div; }
        |   ModKeyword:mod{ return System.XPath.Operator.mod; }
        ;

    CombinePathOp : System.XPath.Operator
        ::= SLASH{ return System.XPath.Operator.slash; }
        |   SLASH_SLASH{ return System.XPath.Operator.slashSlash; }
        ;

    OrKeyword
        ::= NAME{ pass = lexer.GetKeywordToken(lexer.GetToken(pos).match) == OR; }
        ;

    AndKeyword
        ::= NAME{ pass = lexer.GetKeywordToken(lexer.GetToken(pos).match) == AND; }
        ;

    DivKeyword
        ::= NAME{ pass = lexer.GetKeywordToken(lexer.GetToken(pos).match) == DIV; }
        ;

    ModKeyword
        ::= NAME{ pass = lexer.GetKeywordToken(lexer.GetToken(pos).match) == MOD; }
        ;

    ProcessingInstructionKeyword
        ::= NAME{ pass = lexer.GetKeywordToken(lexer.GetToken(pos).match) == PROCESSING_INSTRUCTION; }
        ;
}
