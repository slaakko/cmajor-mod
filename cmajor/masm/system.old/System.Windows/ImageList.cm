// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public class ImageList
    {
        public ImageList()
        {
        }
        [nodiscard]
        public Result<bool> AddImage(const string& imageName)
        {
            auto bitmapResult = Bitmap.FromResource(imageName);
            if (bitmapResult.Error())
            {
                return Result<bool>(ErrorId(bitmapResult.GetErrorId()));
            }
            UniquePtr<Bitmap> bm(new Bitmap(Rvalue(bitmapResult.Value())));
            if (bm->Error())
            {
                return Result<bool>(ErrorId(bm->GetErrorId()));
            }
            AddImage(imageName, bm.Release());
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> AddDisabledImage(const string& imageName)
        {
            int imageIndex = GetImageIndex(imageName);
            if (imageIndex != -1)
            {
                Bitmap* bitmap = images[imageIndex].Get();
                auto grayBitmapResult = bitmap->ToGrayBitmap();
                if (grayBitmapResult.Error())
                {
                    return Result<bool>(ErrorId(grayBitmapResult.GetErrorId()));
                }
                UniquePtr<Bitmap> disabledImage = new Bitmap(Rvalue(grayBitmapResult.Value()));
                if (disabledImage->Error())
                {
                    return Result<bool>(ErrorId(disabledImage->GetErrorId()));
                }
                AddImage(imageName + ".disabled", disabledImage.Release());
            }
            else
            {
                int errorId = AllocateError("image '" + imageName + "' not found");
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        public void AddImage(const string& imageName, Bitmap* bitmap)
        {
            int imageIndex = cast<int>(images.Count());
            images.Add(UniquePtr<Bitmap>(bitmap));
            imageIndexMap[imageName] = imageIndex;
        }
        public int GetImageIndex(const string& imageName)
        {
            auto it = imageIndexMap.CFind(imageName);
            if (it != imageIndexMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return -1;
            }
        }
        public int GetDisabledImageIndex(const string& imageName)
        {
            return GetImageIndex(imageName + ".disabled");
        }
        public Bitmap* GetImage(int imageIndex) const
        {
            if (imageIndex >= 0 && imageIndex < images.Count())
            {
                return images[imageIndex].Get();
            }
            else
            {
                return null;
            }
        }
        private Map<string, int> imageIndexMap;
        private List<UniquePtr<Bitmap>> images;
    }
}

