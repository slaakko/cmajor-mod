// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Concepts;
using System.Collections;
using System.XPath;

namespace System.Xml.Serialization
{
    public concept XmlConstructible<T>
    {
        where DefaultConstructible<T>;
        Result<bool> T.FromXml(System.Xml.Element* element);
        Result<bool> T.FromXml(System.Xml.Element* element, XmlSerializationContext& ctx);
    }

    public concept XmlImportableScalarType<T>
    {
        where
            T is bool or
            T is sbyte or
            T is byte or
            T is short or
            T is ushort or
            T is int or
            T is uint or
            T is long or
            T is ulong or
            T is float or
            T is double or
            T is char or
            T is wchar or
            T is uchar or
            T is string or
            T is wstring or
            T is ustring or
            T is System.Uuid or
            T is System.Date or
            T is System.DateTime or
            T is System.TimePoint or
            T is System.Duration;
    }

    public concept XmlImportableEnumeratedType<T>
    {
        where System.Meta.IsEnumeratedType<T>();
    }

    public Result<System.Xml.Element*> GetXmlFieldElement(const string& fieldName, System.Xml.Element* fromElement)
    {
        Result<UniquePtr<NodeSet>> result = EvaluateToNodeSet(fieldName, fromElement);
        if (result.Error()) return Result<System.Xml.Element*>(ErrorId(result.GetErrorId()));
        NodeSet* nodeSet = result.Value().Get();
        if (nodeSet->Count() == 1)
        {
            System.Xml.Node* node = nodeSet->GetNode(0);
            if (node->IsElementNode())
            {
                System.Xml.Element* fieldElement = cast<System.Xml.Element*>(node);
                return Result<System.Xml.Element*>(fieldElement);
            }
        }
        return Result<System.Xml.Element*>(cast<System.Xml.Element*>(null));
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, bool& value)
    {
        if (element != null)
        {
            auto result = ParseBool(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, bool& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, sbyte& value)
    {
        if (element != null)
        {
            auto result = ParseSByte(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, sbyte& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, byte& value)
    {
        if (element != null)
        {
            auto result = ParseByte(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, byte& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, short& value)
    {
        if (element != null)
        {
            auto result = ParseShort(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, short& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, ushort& value)
    {
        if (element != null)
        {
            auto result = ParseUShort(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, ushort& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, int& value)
    {
        if (element != null)
        {
            auto result = ParseInt(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, int& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, uint& value)
    {
        if (element != null)
        {
            auto result = ParseUInt(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, uint& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, long& value)
    {
        if (element != null)
        {
            auto result = ParseLong(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, long& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, ulong& value)
    {
        if (element != null)
        {
            auto result = ParseULong(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, ulong& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, float& value)
    {
        if (element != null)
        {
            auto result = ParseFloat(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, float& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, double& value)
    {
        if (element != null)
        {
            auto result = ParseDouble(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, double& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(Element* element, XmlSerializationContext& ctx, char& value)
    {
        if (element != null)
        {
            string result = element->GetAttribute("value");
            if (result.IsEmpty())
            {
                int errorId = AllocateError("result is empty");
                return Result<bool>(ErrorId(errorId));
            }
            value = result[0];
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, char& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(Element* element, XmlSerializationContext& ctx, wchar& value)
    {
        if (element != null)
        {
            string valueAttr = element->GetAttribute("value");
            if (valueAttr.IsEmpty())
            {
                int errorId = AllocateError("valueAttr is empty");
                return Result<bool>(ErrorId(errorId));
            }
            auto utf16Result = ToUtf16(valueAttr);
            if (utf16Result.Error())
            {
                return Result<bool>(ErrorId(utf16Result.GetErrorId()));
            }
            value = utf16Result.Value()[0];
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, wchar& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, uchar& value)
    {
        if (element != null)
        {
            string valueAttr = element->GetAttribute("value");
            if (valueAttr.IsEmpty())
            {
                int errorId = AllocateError("valueAttr is empty");
                return Result<bool>(ErrorId(errorId));
            }
            auto utf32Result = ToUtf32(valueAttr);
            if (utf32Result.Error())
            {
                return Result<bool>(ErrorId(utf32Result.GetErrorId()));
            }
            value = utf32Result.Value()[0];
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, uchar& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* element, XmlSerializationContext& ctx, T& value)
        where T is XmlImportableEnumeratedType
    {
        if (element != null)
        {
            auto result = ParseLong(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            long longValue = result.Value();
            value = cast<T>(cast<T.UnderlyingType>(longValue));
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, T& value)
        where T is XmlImportableEnumeratedType
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, System.Date& value)
    {
        if (element != null)
        {
            auto result = ParseDate(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, System.Date& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, System.DateTime& value)
    {
        if (element != null)
        {
            auto result = ParseDateTime(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, System.DateTime& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, string& value)
    {
        if (element != null)
        {
            value = element->GetAttribute("value");
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, string& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, wstring& value)
    {
        if (element != null)
        {
            string attributeValue = element->GetAttribute("value");
            auto result = ToUtf16(attributeValue);
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, wstring& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, ustring& value)
    {
        if (element != null)
        {
            string attributeValue = element->GetAttribute("value");
            auto result = ToUtf32(attributeValue);
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, ustring& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, System.TimePoint& value)
    {
        if (element != null)
        {
            auto result = ParseLong(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            long longValue = result.Value();
            value = TimePoint(longValue);
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, System.TimePoint& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, System.Duration& value)
    {
        if (element != null)
        {
            auto result = ParseLong(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            long longValue = result.Value();
            value = Duration(longValue);
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, System.Duration& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml(System.Xml.Element* element, XmlSerializationContext& ctx, System.Uuid& value)
    {
        if (element != null)
        {
            auto result = ParseUuid(element->GetAttribute("value"));
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            value = result.Value();
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, System.Uuid& value)
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        return FromXml(element, ctx, value);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, T& object)
        where T is XmlConstructible
    {
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            return object.FromXml(element, ctx);
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, UniquePtr<T>& object)
        where T is XmlConstructible
    {
        object.Reset();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            string value = element->GetAttribute("value");
            if (value != "null")
            {
                string classIdAttr = element->GetAttribute("classId");
                if (!classIdAttr.IsEmpty())
                {
                    auto result = ParseInt(classIdAttr);
                    if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                    int classId = result.Value();
                    Result<XmlSerializable*> objectResult = XmlClassRegistry.Instance().Create(classId);
                    if (objectResult.Error()) return Result<bool>(ErrorId(objectResult.GetErrorId()));
                    object.Reset(cast<T*>(objectResult.Value()));
                    return object->FromXml(element, ctx);
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, SharedPtr<T>& object)
        where T is XmlConstructible
    {
        object.Reset();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            string value = element->GetAttribute("value");
            if (value != "null")
            {
                string classIdAttr = element->GetAttribute("classId");
                if (!classIdAttr.IsEmpty())
                {
                    auto result = ParseInt(classIdAttr);
                    if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                    int classId = result.Value();
                    Result<XmlSerializable*> objectResult = XmlClassRegistry.Instance().Create(classId);
                    if (objectResult.Error()) return Result<bool>(ErrorId(objectResult.GetErrorId()));
                    object.Reset(cast<T*>(objectResult.Value()));
                    return object->FromXml(element, ctx);
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, XmlPtr<T>& ptr)
        where T is XmlConstructible
    {
        ptr.Reset();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            string value = element->GetAttribute("value");
            if (value != "null")
            {
                string objectIdAttr = element->GetAttribute("objectId");
                if (!objectIdAttr.IsEmpty())
                {
                    auto result = ParseUuid(objectIdAttr);
                    if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                    Uuid objectId = result.Value();
                    ptr.SetTargetObjectId(objectId);
                    XmlBundle* xmlBundle = ctx.GetXmlBundle();
                    if (xmlBundle != null)
                    {
                        xmlBundle->AddPtr(&ptr);
                    }
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, List<T>& list)
        where T is XmlImportableScalarType
    {
        list.Clear();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            Result<UniquePtr<NodeSet>> result = EvaluateToNodeSet("item", element);
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            NodeSet* nodeSet = result.Value().Get();
            int n = nodeSet->Count();
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* element = cast<System.Xml.Element*>(node);
                    T value;
                    auto result = FromXml(element, ctx, value);
                    if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                    list.Add(Rvalue(value));
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, List<T>& list)
        where T is XmlConstructible
    {
        list.Clear();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            Result<UniquePtr<NodeSet>> result = EvaluateToNodeSet("item", element);
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            NodeSet* nodeSet = result.Value().Get();
            int n = nodeSet->Count();
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* element = cast<System.Xml.Element*>(node);
                    T object;
                    auto result = object.FromXml(element, ctx);
                    if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                    list.Add(Rvalue(object));
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, List<UniquePtr<T>>& list)
        where T is XmlConstructible
    {
        list.Clear();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            Result<UniquePtr<NodeSet>> result = EvaluateToNodeSet("item", element);
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            NodeSet* nodeSet = result.Value().Get();
            int n = nodeSet->Count();
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* element = cast<System.Xml.Element*>(node);
                    UniquePtr<T> object;
                    string value = element->GetAttribute("value");
                    if (value != "null")
                    {
                        string classIdAttr = element->GetAttribute("classId");
                        if (!classIdAttr.IsEmpty())
                        {
                            auto result = ParseInt(classIdAttr);
                            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                            int classId = result.Value();
                            Result<XmlSerializable*> objectResult = XmlClassRegistry.Instance().Create(classId);
                            if (objectResult.Error()) return Result<bool>(ErrorId(objectResult.GetErrorId()));
                            object.Reset(cast<T*>(objectResult.Value()));
                            auto xmlResult = object->FromXml(element, ctx);
                            if (xmlResult.Error()) return Result<bool>(ErrorId(xmlResult.GetErrorId()));
                        }
                    }
                    list.Add(Rvalue(object));
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(System.Xml.Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, List<SharedPtr<T>>& list)
        where T is XmlConstructible
    {
        list.Clear();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            Result<UniquePtr<NodeSet>> result = EvaluateToNodeSet("item", element);
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            NodeSet* nodeSet = result.Value().Get();
            int n = nodeSet->Count();
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* element = cast<System.Xml.Element*>(node);
                    SharedPtr<T> object;
                    string value = element->GetAttribute("value");
                    if (value != "null")
                    {
                        string classIdAttr = element->GetAttribute("classId");
                        if (!classIdAttr.IsEmpty())
                        {
                            auto result = ParseInt(classIdAttr);
                            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                            int classId = result.Value();
                            Result<XmlSerializable*> objectResult = XmlClassRegistry.Instance().Create(classId);
                            if (objectResult.Error()) return Result<bool>(ErrorId(objectResult.GetErrorId()));
                            object.Reset(cast<T*>(objectResult.Value()));
                            auto xmlResult = object->FromXml(element, ctx);
                            if (xmlResult.Error()) return Result<bool>(ErrorId(xmlResult.GetErrorId()));
                        }
                    }
                    list.Add(Rvalue(object));
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> FromXml<T>(Element* parentElement, XmlSerializationContext& ctx, const string& fieldName, List<XmlPtr<T>>& list)
        where T is XmlConstructible
    {
        list.Clear();
        auto result = GetXmlFieldElement(fieldName, parentElement);
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* element = result.Value();
        if (element != null)
        {
            Result<UniquePtr<NodeSet>> result = EvaluateToNodeSet("item", element);
            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
            NodeSet* nodeSet = result.Value().Get();
            int n = nodeSet->Count();
            list.Reserve(n);
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* element = cast<System.Xml.Element*>(node);
                    list.Add(XmlPtr<T>());
                    XmlPtr<T>& ptr = list.Back();
                    string value = element->GetAttribute("value");
                    if (value != "null")
                    {
                        string objectIdAttr = element->GetAttribute("objectId");
                        if (!objectIdAttr.IsEmpty())
                        {
                            auto result = ParseUuid(objectIdAttr);
                            if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
                            Uuid objectId = result.Value();
                            ptr.SetTargetObjectId(objectId);
                            XmlBundle* xmlBundle = ctx.GetXmlBundle();
                            if (xmlBundle != null)
                            {
                                xmlBundle->AddPtr(&ptr);
                            }
                        }
                    }
                }
            }
        }
        return Result<bool>(true);
    }
}

