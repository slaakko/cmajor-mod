// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cmcode.main.window;

import cmajor.service;
import cmajor.debuggers;
import cmajor.view;
import cmajor.ast;
import cmajor.info;
import cmcode.search.dialog;
import cmcode.solution.explorer;
import cmcode.solution;
import cmcode.location.list;
import soul.rex;
import wing;
import std.core;

export namespace cmcode {

extern const char* cmajorCodeVersion;

const int buildProgressTimerId = 10;
const int buildProgressTimerPeriod = 100;
const int startupDialogTimer = 15;
const int startupDialogTimerDelay = 10;
const int toolTipTimerId = 12;
const int toolTipShowPeriod = 3000;

enum class MainWindowState : int
{
    idle, building, debugging, running
};

struct ExpressionEvaluateRequest
{
    ExpressionEvaluateRequest(const std::string& expression_, const wing::Point& screenLoc_);
    std::string expression;
    wing::Point screenLoc;
};

class MainWindow : public wing::Window
{
public:
    MainWindow(const std::string& filePath);
    ~MainWindow();
    void BuildSolutionClick();
    void RebuildSolutionClick();
    void CleanSolutionClick();
    void BuildProject(cmajor::ast::Project* project);
    void RebuildProject(cmajor::ast::Project* project);
    void CleanProject(cmajor::ast::Project* project);
    void AddNewProject();
    void AddExistingProject();
    void SetActiveProject(cmajor::ast::Project* project, wing::TreeViewNode* newActiveProjectNode);
    void RemoveProject(cmajor::ast::Project* project);
    void OpenFileLocation(const std::string& filePath);
    void AddNewSourceFile(cmajor::ast::Project* project, wing::TreeViewNode* projectNode);
    void AddExistingSourceFile(cmajor::ast::Project* project, wing::TreeViewNode* projectNode);
    void AddNewResourceFile(cmajor::ast::Project* project, wing::TreeViewNode* projectNode);
    void AddExistingResourceFile(cmajor::ast::Project* project, wing::TreeViewNode* projectNode);
    void AddNewTextFile(cmajor::ast::Project* project, wing::TreeViewNode* projectNode);
    void AddExistingTextFile(cmajor::ast::Project* project, wing::TreeViewNode* projectNode);
    void RemoveFile(cmajor::ast::Project* project, const std::string& filePath, const std::string& fileName, wing::TreeViewNode* fileNode);
    void GotoDefinition(cmajor::ast::Project* project, const std::string& identifier, const cmajor::info::bs::DefinitionSourceLocation& sourceLocation);
    void GotoCursor(const cmajor::info::db::SourceLoc& sourceLocation);
    void GotoLocation(const cmajor::info::bs::DefinitionSourceLocation& location);
    void SetProjectReferences(cmajor::ast::Project* project);
    void TreeViewNodeDoubleClick(wing::TreeViewNodeClickEventArgs& args);
    void TreeViewNodeClick(wing::TreeViewNodeClickEventArgs& args);
    void TreeViewNodeExpanded(wing::TreeViewNodeEventArgs& args);
    void TreeViewNodeCollapsed(wing::TreeViewNodeEventArgs& args);
    void UpdateColors() override;
protected:
    bool ProcessMessage(wing::Message& msg) override;
    void OnWindowStateChanged() override;
    void OnNCPaint(wing::NCPaintEventArgs& args) override;
    void OnSizeChanged() override;
    void OnWindowClosing(wing::CancelArgs& args) override;
    void OnKeyDown(wing::KeyEventArgs& args) override;
    void MouseUpNotification(wing::MouseEventArgs& args) override;
    void OnTimer(wing::TimerEventArgs& args) override;
    void OnGotFocus() override;
    void OnClipboardUpdate() override;
private:
    void AddToolButtons();
    void SaveConfigurationSettings();
    void LoadConfigurationSettings();
    void ShowStartupDialog();
    void SaveProjectData();
    void SaveSolutionData();
    void AddClipboardListener();
    void RemoveClipboardListener();
    void StartBuilding();
    void StopBuilding();
    void ShowBuildProgress();
    void StartDebugging();
    void StopDebugging();
    void StartRunning();
    void StopRunning();
    void StartCodeCompletion();
    void StopCodeCompletion(bool log);
    void LoadEditModule();
    void LoadEditModule(cmajor::ast::Project* project);
    void LoadEditModuleForCurrentFile();
    void ResetEditModuleCache();
    void ParseSource();
    //void GetParamHelpList(int symbolIndex);
    void HandleServiceMessage();
    void ClearOutput();
    void WriteOutput(const std::string& text);
    void OpenProject(const std::string& filePath);
    void SetIDEState();
    void AddEditor(const std::string& filePath);
    void HandleBuildResult(const cmajor::info::bs::BuildResult& buildResult);
    void HandleBuildStopped();
    void HandleGetDefinitionReply(const cmajor::info::bs::GetDefinitionReply& getDefinitionReply);
    void HandleGetDefinitionError(const std::string& getDefinitionError);
    void HandleStartDebugReply(cmajor::debugger::Reply* reply);
    void HandleStartDebugError(const std::string& error);
    void HandleExecReply(cmajor::debugger::Reply* reply);
    void HandleDebugError(const std::string& error);
    void HandleBreakReply(const cmajor::info::db::BreakReply& breakReply);
    void HandleDeleteReply(const cmajor::info::db::DeleteReply& deleteReply);
    void HandleDepthReply(const cmajor::info::db::DepthReply& depthReply);
    void HandleFramesReply(const cmajor::info::db::FramesReply& framesReply);
    void HandleEvaluateReply(const cmajor::info::db::EvaluateReply& evaluateReply, int requestId);
    void HandleCountReply(const cmajor::info::db::CountReply& countReply);
    void HandleEvaluateChildReply(const cmajor::info::db::EvaluateChildReply& evaluateChildReply);
    void HandleLocation(const cmajor::info::db::Location& location, bool saveLocation, bool setSelection);
    void HandleTargetState(const cmajor::debugger::TargetState& state);
    void HandleTargetRunning();
    void HandleTargetInput();
    void HandleTargetOutputRequest(const cmajor::debugger::OutputRequest& outputRequest);
    void ConsoleInputReady();
    void HandleDebugServiceStopped();
    void HandleProcessTerminated();
    void HandleRunServiceStopped();
    /*
    void HandleLoadEditModuleReply(const LoadEditModuleReply& loadEditModuleReply);
    void HandleLoadEditModuleError(const std::string& error);
    void HandleResetEditModuleCacheReply(const ResetEditModuleCacheReply& resetEditModuleCacherReply);
    void HandleResetEditModuleCacheError(const std::string& error);
    void HandleParseSourceReply(const ParseSourceReply& parseSourceReply);
    void HandleParseSourceError(const std::string& error);
    void HandleGetCCListReply(const GetCCListReply& getCCListReply);
    void HandleGetCCListError(const std::string& error);
    void HandleGetParamHelpListReply(const GetParamHelpListReply& getParamHelpListReply);
    void HandleGetParamHelpListError(const std::string& error);
*/
    void SetState(MainWindowState state_);
    void SetEditorState();
    void ResetDebugLocations();
    void ResetBreakpoints();
    void SetEditorsReadOnly();
    void SetEditorsReadWrite();
    void SetFocusToEditor();
    void EditorReadOnlyChanged();
    void EditorDirtyChanged();
    void EditorCCDirtyChanged();
    void EditorCaretPosChanged();
    void EditorSelectionChanged();
    void EditorRightClick(wing::RightClickEventArgs& args);
    bool GetDefinitionSourceLocationAt(const wing::Point& loc, wing::TextView* textView, std::string& identifier, cmajor::info::bs::DefinitionSourceLocation& sourceLocation);
    int GetEndColumn(wing::TextView* textView, const cmajor::info::bs::DefinitionSourceLocation& sourceLocation) const;
    cmajor::ast::Project* CurrentProject();
    cmajor::info::bs::DefinitionSourceLocation CurrentLocation() const;
    void ChangeBreakpoints(wing::CancelArgs& args);
    void BreakpointAdded(cmajor::view::AddBreakpointEventArgs& args);
    void BreakpointRemoved(cmajor::view::RemoveBreakpointEventArgs& args);
    void VerticalSplitContainerSplitterDistanceChanged();
    void HorizontalSplitContainerSplitterDistanceChanged();
    void NewProjectClick();
    void OpenProjectClick();
    bool CloseSolution();
    void CloseSolutionClick();
    void SaveClick();
    void SaveAllClick();
    void ExitClick();
    void CopyClick();
    void CutClick();
    void PasteClick();
    void UndoClick();
    void RedoClick();
    void GotoClick();
    void SearchClick();
    void Search(SearchExtent extent, const std::vector<std::string>& files, const std::vector<std::u32string>& lines, const std::string& searchText,
        bool wholeWords, bool caseInsensitive, bool regularExpression);
    bool Search(const std::u32string& line, const std::u32string& text, bool wholeWords, soul::rex::nfa::Nfa* re);
    void ViewSearchResult(cmajor::view::ViewSearchResultEventArgs& args);
    void OptionsClick();
    void CallStackClick();
    void LocalsClick();
    void ErrorsClick();
    void SearchResultsClick();
    void PortMapClick();
    void BuildActiveProjectClick();
    bool BuildActiveProject();
    void RebuildActiveProjectClick();
    void CleanActiveProjectClick();
    void BuildSettingsClick();
    void StartDebuggingClick();
    void StartWithoutDebuggingClick();
    void TerminateProcessClick();
    void StopDebuggingClick();
    void ShowNextStatementClick();
    void StepOverClick();
    void StepIntoClick();
    void StepOutClick();
    void ToggleBreakpointClick();
    void ProgramArgumentsClick();
    void CloseAllTabsClick();
    void CloseExternalTabsClick();
    void HomepageClick();
    void LocalDocumentationClick();
    void AboutClick();
    void GotoPreviousLocationClick();
    void GotoNextLocationClick();
    void CppButtonClick();
    void LlvmButtonClick();
    void MasmButtonClick();
    void CmButtonClick();
    void DebugButtonClick();
    void ReleaseButtonClick();
    void ZeroButtonClick();
    void OneButtonClick();
    void TwoButtonClick();
    void ThreeButtonClick();
    void StopBuildClick();
    void ToggleCodeCompletionClick();
    cmajor::view::Editor* GetEditorByTabPage(wing::TabPage* tabPage) const;
    cmajor::view::CmajorEditor* AddCmajorEditor(const std::string& fileName, const std::string& key, const std::string& filePath, cmajor::ast::Project* project);
    cmajor::view::ResourceFileEditor* AddResourceFileEditor(const std::string& fileName, const std::string& key, const std::string& filePath, cmajor::ast::Project* project);
    cmajor::view::TextFileEditor* AddTextFileEditor(const std::string& fileName, const std::string& key, const std::string& filePath, cmajor::ast::Project* project);
    void AddFilePathsToProject(const std::string& newSourceFilePath, const std::string& newResourceFilePath, const std::string& newTextFilePath, 
        cmajor::ast::Project* project, wing::TreeViewNode* projectNode);
    void CodeTabPageSelected();
    void CodeTabPageRemoved(wing::ControlEventArgs& args);
    void OutputTabControlTabPageRemoved(wing::ControlEventArgs& args);
    void OutputTabControlTabPageSelected();
    wing::LogView* GetOutputLogView();
    wing::LogView* GetDebugLog();
    cmajor::view::ErrorView* GetErrorView();
    cmajor::view::WarningsView* GetWarningsView();
    void ViewError(cmajor::view::ViewErrorArgs& args);
    void ViewWarning(cmajor::view::ViewWarningArgs& args);
    cmajor::view::Editor* CurrentEditor() const;
    cmajor::view::SearchResultsView* GetSearchResultsView();
    cmajor::view::CallStackView* GetCallStackView();
    void ClearCallStack();
    void UpdateCallStack(bool fetchDepth);
    void CallStackFrameSelected(cmajor::view::FrameSelectedEventArgs& args);
    cmajor::view::LocalsView* GetLocalsView();
    void ClearLocals();
    void UpdateLocals();
    void LocalsViewNodeExpanded(wing::TreeViewNodeEventArgs& args);
    void LocalsViewUpdateNeeded();
    wing::Console* GetConsole();
    void UpdateCurrentDebugStrip();
    void ResetSelections();
    void ExpressionHover(cmajor::view::ExpressionHoverEventArgs& args);
    wing::MenuItem* newProjectMenuItem;
    wing::MenuItem* openProjectMenuItem;
    wing::MenuItem* closeSolutionMenuItem;
    wing::MenuItem* saveMenuItem;
    wing::MenuItem* saveAllMenuItem;
    wing::MenuItem* exitMenuItem;
    wing::MenuItem* copyMenuItem;
    wing::MenuItem* cutMenuItem;
    wing::MenuItem* pasteMenuItem;
    wing::MenuItem* undoMenuItem;
    wing::MenuItem* redoMenuItem;
    wing::MenuItem* gotoMenuItem;
    wing::MenuItem* searchMenuItem;
    wing::MenuItem* optionsMenuItem;
    wing::MenuItem* callStackMenuItem;
    wing::MenuItem* localsMenuItem;
    wing::MenuItem* errorsMenuItem;
    wing::MenuItem* searchResultsMenuItem;
    wing::MenuItem* portMapMenuItem;
    wing::MenuItem* buildSolutionMenuItem;
    wing::MenuItem* rebuildSolutionMenuItem;
    wing::MenuItem* cleanSolutionMenuItem;
    wing::MenuItem* buildActiveProjectMenuItem;
    wing::MenuItem* rebuildActiveProjectMenuItem;
    wing::MenuItem* cleanActiveProjectMenuItem;
    wing::MenuItem* buildSettingsMenuItem;
    wing::MenuItem* startDebuggingMenuItem;
    wing::MenuItem* startWithoutDebuggingMenuItem;
    wing::MenuItem* terminateProcessMenuItem;
    wing::MenuItem* stopDebuggingMenuItem;
    wing::MenuItem* showNextStatementMenuItem;
    wing::MenuItem* stepOverMenuItem;
    wing::MenuItem* stepIntoMenuItem;
    wing::MenuItem* stepOutMenuItem;
    wing::MenuItem* toggleBreakpointMenuItem;
    wing::MenuItem* programArgumentsMenuItem;
    wing::MenuItem* closeAllTabsMenuItem;
    wing::MenuItem* closeExternalTabsMenuItem;
    wing::MenuItem* homepageMenuItem;
    wing::MenuItem* localDocumentationMenuItem;
    wing::MenuItem* aboutMenuItem;
    wing::ToolBar* toolBar;
    wing::Control* borderedToolbar;
    wing::ToolButton* prevToolButton;
    wing::ToolButton* nextToolButton;
    wing::ToolButton* saveToolButton;
    wing::ToolButton* saveAllToolButton;
    wing::ToolButton* cppToolButton;
    wing::ToolButton* llvmToolButton;
    wing::ToolButton* masmToolButton;
    wing::ToolButton* cmToolButton;
    wing::ToolButton* debugToolButton;
    wing::ToolButton* releaseToolButton;
    wing::ToolButton* optLevelZeroToolButton;
    wing::ToolButton* optLevelOneToolButton;
    wing::ToolButton* optLevelTwoToolButton;
    wing::ToolButton* optLevelThreeToolButton;
    wing::ToolButton* buildSolutionToolButton;
    wing::ToolButton* buildActiveProjectToolButton;
    wing::ToolButton* stopBuildToolButton;
    wing::ToolButton* startDebuggingToolButton;
    wing::ToolButton* stopDebuggingToolButton;
    wing::ToolButton* showNextStatementToolButton;
    wing::ToolButton* stepOverToolButton;
    wing::ToolButton* stepIntoToolButton;
    wing::ToolButton* stepOutToolButton;
    wing::SplitContainer* verticalSplitContainer;
    wing::SplitContainer* horizontalSplitContainer;
    wing::TabControl* codeTabControl;
    SolutionExplorer* solutionExplorer;
    wing::TabControl* outputTabControl;
    wing::TabPage* outputTabPage;
    wing::LogView* outputLogView;
    wing::TabPage* errorTabPage;
    wing::TabPage* warningsTabPage;
    cmajor::view::ErrorView* errorView;
    cmajor::view::WarningsView* warningsView;
    wing::TabPage* logTabPage;
    wing::LogView* log;
    wing::TabPage* consoleTabPage;
    wing::Console* console;
    wing::TabPage* debugTabPage;
    wing::LogView* debugLog;
    wing::StatusBar* statusBar;
    wing::TabPage* searchResultsTabPage;
    cmajor::view::SearchResultsView* searchResultsView;
    wing::TabPage* callStackTabPage;
    cmajor::view::CallStackView* callStackView;
    wing::TabPage* localsTabPage;
    cmajor::view::LocalsView* localsView;
    wing::StatusBarTextItem* buildIndicatorStatuBarItem;
    wing::StatusBarTextItem* editorReadWriteIndicatorStatusBarItem;
    wing::StatusBarTextItem* editorDirtyIndicatorStatusBarItem;
    wing::StatusBarTextItem* sourceFilePathStatusBarItem;
    wing::StatusBarTextItem* lineStatusBarItem;
    wing::StatusBarTextItem* columnStatusBarItem;
    int buildProgressCounter;
    bool buildProgressTimerRunning;
    bool setMaximizedSplitterDistance;
    bool sizeChanged;
    float verticalSplitContainerFactor;
    float horizontalSplitContainerFactor;
    bool showingDialog;
    std::unique_ptr<SolutionData> solutionData;
    std::unordered_map<wing::TabPage*, cmajor::view::Editor*> tabPageEditorMap;
    MainWindowState state;
    bool programRunning;
    bool startDebugging;
    bool signalReceived;
    int callStackDepth;
    bool callStackOpen;
    bool localsViewOpen;
    std::string backend;
    std::string config;
    int optLevel;
    std::unique_ptr<wing::ClipboardListener> clipboardListener;
    int pid;
    wing::ClipboardFormat cmajorCodeFormat;
    std::u32string clipboardData;
    std::vector<std::unique_ptr<wing::ClickAction>> clickActions;
    LocationList locations;
    std::unique_ptr<cmajor::service::Request> debugRequest;
    std::unique_ptr<cmajor::service::Request> getDefinitionRequest;
    cmajor::info::db::Location savedLocation;
    std::vector<std::string> buildIndicatorTexts;
    std::vector<ExpressionEvaluateRequest> expressionEvaluateRequests;
    wing::ToolTip* toolTipWindow;
    bool editModuleLoaded;
    std::vector<int> ruleContext;
    wing::ImageList imageList;
};

} // namespace cmcode
