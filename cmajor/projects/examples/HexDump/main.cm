using System;
using System.Collections;
using System.IO;

void PrintHelp()
{
    Console.WriteLine("Usage: hexdump [options] { <filename> }");
    Console.WriteLine("options:");
    Console.WriteLine("--help | -h");
    Console.WriteLine("     print this help");
}

const uint bytesInLine = 16u;

Result<string> HexDumpLine(uint addr, byte* bytes, uint numBytes)
{
    #assert(numBytes > 0 && numBytes <= bytesInLine);
    auto lineResult = ToHexString(addr);
    if (lineResult.Error())
    {
        return Result<string>(ErrorId(lineResult.GetErrorId()));
    }
    string line = lineResult.Value();
    line.Append(": ");
    for (uint i = 0u; i < bytesInLine; ++i)
    {
        if (i == bytesInLine / 2)
        {
            line.Append("- ");
        }
        if (i < numBytes)
        {
            auto byteResult = ToHexString(bytes[i]);
            if (byteResult.Error())
            {
                return Result<string>(ErrorId(byteResult.GetErrorId()));
            }
            string hexByteStr = byteResult.Value();
            line.Append(hexByteStr);
        }
        else
        {
            line.Append("  ");
        }
        line.Append(' ');
    }
    line.Append('|');
    for (uint i = 0u; i < bytesInLine; ++i)
    {
        char c = ' ';
        if (i < numBytes)
        {
            char b = cast<char>(bytes[i]);
            if (IsPrintable(b))
            {
                c = b;
            }
        }
        line.Append(c);
    }
    line.Append('|');
    return Result<string>(line);
}

Result<bool> HexDump(const string& fileName)
{
    Console.WriteLine(fileName + ":");
    auto fileSizeResult = File.Size(fileName);
    if (fileSizeResult.Error())
    {
        return Result<bool>(ErrorId(fileSizeResult.GetErrorId()));
    }
    long fileSize = fileSizeResult.Value();
    auto readerResult = File.OpenBinary(fileName);
    if (readerResult.Error())
    {
        return Result<bool>(ErrorId(readerResult.GetErrorId()));
    }
    BinaryReader& reader = readerResult.Value();
    byte[bytesInLine] bytes;
    uint addr = 0u;
    long numRows = fileSize / bytesInLine;
    for (ulong i = 0u; i < numRows; ++i)
    {
        for (uint j = 0u; j < bytesInLine; ++j)
        {
            auto byteResult = reader.ReadByte();
            if (byteResult.Error())
            {
                return Result<bool>(ErrorId(byteResult.GetErrorId()));
            }
            bytes[j] = byteResult.Value();
        }
        auto lineResult = HexDumpLine(addr, &bytes[0], bytesInLine);
        if (lineResult.Error())
        {
            return Result<bool>(ErrorId(lineResult.GetErrorId()));
        }
        string line = lineResult.Value();
        Console.WriteLine(line);
        addr = addr + bytesInLine;
    }
    uint rest = cast<uint>(fileSize % bytesInLine);
    for (uint j = 0u; j < rest; ++j)
    {
        auto byteResult = reader.ReadByte();
        if (byteResult.Error())
        {
            return Result<bool>(ErrorId(byteResult.GetErrorId()));
        }
        bytes[j] = byteResult.Value();
    }
    auto lineResult = HexDumpLine(addr, &bytes[0], rest);
    if (lineResult.Error())
    {
        return Result<bool>(ErrorId(lineResult.GetErrorId()));
    }
    string line = lineResult.Value();
    Console.WriteLine(line);
    addr = addr + rest;
    uint size = addr;
    auto sizeLineResult = ToHexString(size);
    if (sizeLineResult.Error())
    {
        return Result<bool>(ErrorId(sizeLineResult.GetErrorId()));
    }
    string sizeLine = sizeLineResult.Value();
    sizeLine.Append(';');
    Console.WriteLine(sizeLine);
    return Result<bool>(true);
}

int main(int argc, const char** argv)
{
    List<string> fileNames;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("-"))
        {
            if (arg == "--help" || arg == "-h")
            {
                PrintHelp();
                return 0;
            }
            else
            {
                int errorId = AllocateError("unknown arguent '" + arg + "'");
                Console.Error() << GetErrorMessage(errorId) << endl();
                return 1;
            }
        }
        else
        {
            auto fullPathResult = GetFullPath(arg);
            if (fullPathResult.Error())
            {
                Console.Error() << fullPathResult.GetErrorMessage();
                return 1;
            }
            fileNames.Add(fullPathResult.Value());
        }
    }
    if (fileNames.IsEmpty())
    {
        int errorId = AllocateError("no files given");
        Console.Error() << GetErrorMessage(errorId) << endl();
        return 1;
    }
    else
    {
        for (const string& fileName : fileNames)
        {
            auto result = HexDump(fileName);
            if (result.Error())
            {
                Console.Error() << result.GetErrorMessage() << endl();
                return 1;
            }
        }
    }
    return 0;
}
