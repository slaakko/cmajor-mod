using System;
using System.Collections;
using System.IO;
using System.Windows;

namespace FileExplorer
{
    public class DirectoryNode : Node
    {
        public DirectoryNode(const string& name_) : base(name_), isRootDirectory(false)
        {
        }
        public override bool IsRootDirectory() const
        {
            return isRootDirectory;
        }
        public void SetRootDirectory()
        {
            isRootDirectory = true;
        }
        public void AddDirectory(DirectoryNode* directory)
        {
            directory->SetParent(this);
            directories.Add(UniquePtr<DirectoryNode>(directory));
        }
        public void AddFile(FileNode* file)
        {
            file->SetParent(this);
            files.Add(UniquePtr<FileNode>(file));
        }
        public override string ImageName() const
        {
            return "folder_closed.bitmap";
        }
        public override string ExpandedImageName() const
        {
            return "folder_opened.bitmap";
        }
        [nodiscard]
        public override Result<UniquePtr<TreeViewNode>> ToTreeViewNode(bool createChilren, ImageList* imageList)
        {
            UniquePtr<TreeViewNode> treeViewNodePtr(new TreeViewNode(Name()));
            if (treeViewNodePtr->Error())
            {
                return Result<UniquePtr<TreeViewNode>>(ErrorId(treeViewNodePtr->GetErrorId()));
            }
            TreeViewNode* node = treeViewNodePtr.Get();
            auto result = SetTreeViewNode(node);
            if (result.Error())
            {
                return Result<UniquePtr<TreeViewNode>>(ErrorId(result.GetErrorId()));
            }
            if (imageList != null)
            {
                int imageIndex = imageList->GetImageIndex(ImageName());
                if (imageIndex != -1)
                {
                    auto imageIndexResult = node->SetImageIndex(imageIndex);
                    if (imageIndexResult.Error())
                    {
                        return Result<UniquePtr<TreeViewNode>>(ErrorId(imageIndexResult.GetErrorId()));
                    }
                }
                int expandedImageIndex = imageList->GetImageIndex(ExpandedImageName());
                if (expandedImageIndex != -1)
                {
                    auto expandedImageIndexResult = node->SetExpandedImageIndex(expandedImageIndex);
                    if (expandedImageIndexResult.Error())
                    {
                        return Result<UniquePtr<TreeViewNode>>(ErrorId(expandedImageIndexResult.GetErrorId()));
                    }
                }
            }
            return Result<UniquePtr<TreeViewNode>>(Rvalue(treeViewNodePtr));
        }
        public override Result<Control*> CreateView(ImageList* imageList)
        {
            Clear();
            string directoryPath = DirectoryPath();
            List<string> directoryNames = Directory.GetDirectories(directoryPath);
            Sort(directoryNames.Begin(), directoryNames.End());
            for (const string& directoryName : directoryNames)
            {
                AddDirectory(new DirectoryNode(Path.GetFileName(directoryName)));
            }
            List<string> fileNames = Directory.GetFiles(directoryPath);
            Sort(fileNames.Begin(), fileNames.End());
            for (const string& fileName : fileNames)
            {
                AddFile(new FileNode(Path.GetFileName(fileName)));
            }
            ListView* listView = new ListView(ListViewCreateParams(ListViewControlCreateParams(ControlCreateParams().Defaults())).Defaults());
            if (listView->Error())
            {
                return Result<Control*>(ErrorId(listView->GetErrorId()));
            }
            MainWindow* mainWindow = GetMainWindow();
            if (mainWindow != null)
            {
                mainWindow->AddListViewEventHandlers(listView);
            }
            listView->SetData(this);
            listView->SetDoubleBuffered();
            listView->SetImageList(imageList);
            listView->AddColumn("Name", 400);
            TreeViewNode* treeViewNode = GetTreeViewNode();
            if (treeViewNode == null)
            {
                Node* parent = Parent();
                if (parent != null)
                {
                    treeViewNode = parent->GetTreeViewNode();
                }
            }
            if (treeViewNode != null)
            {
                treeViewNode->RemoveChildren();
            }
            for (const UniquePtr<DirectoryNode>& directory : directories)
            {
                ListViewItem* directoryItem = listView->AddItem();
                auto result = directory->SetData(directoryItem, imageList);
                if (result.Error()) return Result<Control*>(ErrorId(result.GetErrorId()));
                if (treeViewNode != null)
                {
                    auto treeViewNodeResult = directory->ToTreeViewNode(false, imageList);
                    auto result = treeViewNode->AddChild(treeViewNodeResult.Value().Release());
                    if (result.Error())
                    {
                        return Result<Control*>(ErrorId(result.GetErrorId()));
                    }
                }
            }
            for (const UniquePtr<FileNode>& file : files)
            {
                ListViewItem* fileItem = listView->AddItem();
                auto result = file->SetData(fileItem, imageList);
                if (result.Error()) return Result<Control*>(ErrorId(result.GetErrorId()));
            }
            if (treeViewNode != null)
            {
                treeViewNode->Select();
                TreeView* treeView = treeViewNode->GetTreeView();
                if (treeView != null)
                {
                    auto result = treeView->Invalidate();
                    if (result.Error()) return Result<Control*>(ErrorId(result.GetErrorId()));
                }
            }
            return Result<Control*>(listView);
        }
        protected override string DirectoryPath()
        {
            string parentDirectoryPath;
            Node* p = Parent();
            if (p != null)
            {
                parentDirectoryPath = p->DirectoryPath();
            }
            if (!parentDirectoryPath.IsEmpty())
            {
                return Path.Combine(parentDirectoryPath, Name());
            }
            else
            {
                return Name();
            }
        }
        private void Clear()
        {
            directories.Clear();
            files.Clear();
        }
        private bool isRootDirectory;
        private List<UniquePtr<DirectoryNode>> directories;
        private List<UniquePtr<FileNode>> files;
    }
}
