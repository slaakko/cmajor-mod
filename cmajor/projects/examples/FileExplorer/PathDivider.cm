using System;
using System.Windows;

namespace FileExplorer
{
    public System.Windows.Color DefaultPathDividerBackgroundColor()
    {
        return System.Windows.Color.White();
    }

    public System.Windows.Color DefaultPathDividerLineColor()
    {
        return System.Windows.Color(204u, 206u, 219u);
    }

    public ControlCreateParams& PathDividerControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return controlCreateParams.SetWindowClassName("FileExplorer.PathDivider").
            SetWindowClassBackgroundColor(SystemColor.COLOR_WINDOW).
            SetBackgroundColor(DefaultPathDividerBackgroundColor()).
            SetSize(Size(1, 0)).SetDock(Dock.left);
    }

    public class PathDividerCreateParams
    {
        public PathDividerCreateParams(ControlCreateParams& controlCreateParams_) :
            controlCreateParams(controlCreateParams_),
            lineColor(DefaultPathDividerLineColor())
        {
        }
        public PathDividerCreateParams& Defaults()
        {
            return *this;
        }
        public PathDividerCreateParams& SetLineColor(const System.Windows.Color& lineColor_)
        {
            lineColor = lineColor_;
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
        public System.Windows.Color lineColor;
    }

    public class PathDivider : Control
    {
        public PathDivider(PathDividerCreateParams& createParams) :
            base(createParams.controlCreateParams),
            pen(createParams.lineColor)
        {
        }
        protected override Result<bool> OnPaint(PaintEventArgs& args)
        {
            PointF start(0, 0);
            Size sz = GetSize();
            PointF end(0, sz.h);
            auto result = args.graphics.DrawLine(pen, start, end);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        private Pen pen;
    }
}
