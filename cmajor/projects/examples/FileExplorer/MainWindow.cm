using System;
using System.Collections;
using System.Windows;

namespace FileExplorer
{
    PathBar* MakePathBar(ImageList* imageList)
    {
        PathBar* pathBar = new PathBar(PathBarCreateParams(PathBarControlCreateParams(ControlCreateParams().Defaults())),
            EmptyViewControlCreateParams(ControlCreateParams().SetDock(Dock.left).SetSize(Size(100, 0))),
            ParentPathSelectorCreateParams(ParentPathSelectorControlCreateParams(ControlCreateParams().Defaults()), imageList),
            PathDividerCreateParams(PathDividerControlCreateParams(ControlCreateParams().Defaults())),
            PathViewCreateParams(PathViewControlCreateParams(ControlCreateParams().SetDock(Dock.fill))));
        return pathBar;
    }

    public class MainWindow : Window
    {
        public MainWindow(const string& caption) : base(
            WindowCreateParams(WindowControlCreateParams(
                ControlCreateParams().SetWindowClassBackgroundColor(SystemColor.COLOR_WINDOW).SetBackgroundColor(Color.White()),
                caption)).Defaults())
        {
            auto result = imageList.AddImage("computer.bitmap");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = imageList.AddImage("hard_drive.bitmap");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = imageList.AddImage("folder_closed.bitmap");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = imageList.AddImage("folder_opened.bitmap");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = imageList.AddImage("file.bitmap");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = imageList.AddImage("up.arrow.bitmap");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            auto logicalDrivesResult = GetLogicalDrives();
            if (logicalDrivesResult.Error())
            {
                SetErrorId(logicalDrivesResult.GetErrorId());
                return;
            }
            logicalDrives = logicalDrivesResult.Value();
            computer.Reset(new ComputerNode());
            computer->SetMainWindow(this);
            for (const string& driveName : logicalDrives)
            {
                UniquePtr<DriveNode> drivePtr(new DriveNode(driveName));
                DriveNode* drive = drivePtr.Get();
                drive->SetRootDirectory(new DirectoryNode(driveName + "/"));
                computer->AddDrive(drivePtr.Release());
            }
            UniquePtr<PathBar> pathBarPtr(MakePathBar(&imageList));
            if (pathBarPtr->Error())
            {
                SetErrorId(pathBarPtr->GetErrorId());
                return;
            }
            pathBar = pathBarPtr.Get();
            pathBar->GetParentPathSelector()->ClickEvent().AddHandler(ParentPathSelectorClick);
            pathBar->GetPathView()->PathComponentSelectedEvent().AddHandler(PathComponentSelected);
            UniquePtr<BorderedControl> borderedControl = new BorderedControl(BorderedControlCreateParams(BorderedControlControlCreateParams(
                ControlCreateParams().SetSize(Size(0, 32)).SetDock(Dock.top), pathBar), pathBarPtr.Release()).
                SetNormalBorderColor(DefaultPathBarFrameColor()));
            if (borderedControl->Error())
            {
                SetErrorId(borderedControl->GetErrorId());
                return;
            }
            result = AddChild(borderedControl.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            UniquePtr<SplitContainer> splitContainerPtr(new SplitContainer(Orientation.horizontal, 500, Point(), Size(), Dock.fill, Anchors.none));
            if (splitContainerPtr->Error())
            {
                SetErrorId(splitContainerPtr->GetErrorId());
                return;
            }
            splitContainer = splitContainerPtr.Get();
            result = AddChild(splitContainerPtr.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            UniquePtr<DirectoryTreeView> directoryTreeViewPtr(new DirectoryTreeView(&imageList, computer.Get()));
            if (directoryTreeViewPtr->Error())
            {
                SetErrorId(directoryTreeViewPtr->GetErrorId());
                return;
            }
            directoryTreeView = directoryTreeViewPtr.Get();
            directoryTreeView->SetMainWindow(this);
            directoryTreeView->SizeChangedEvent().AddHandler(DirectoryTreeViewSizeChanged);
            result = splitContainer->Pane1Container()->AddChild(directoryTreeViewPtr.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            UniquePtr<ContentView> contentViewPtr(new ContentView(&imageList));
            if (contentViewPtr->Error())
            {
                SetErrorId(contentViewPtr->GetErrorId());
                return;
            }
            contentView = contentViewPtr.Get();
            contentView->SetMainWindow(this);
            contentView->SizeChangedEvent().AddHandler(ContentViewSizeChanged);
            result = splitContainer->Pane2Container()->AddChild(contentViewPtr.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            setSplitterDistance = true;
        }
        public inline ContentView* GetContentView() const
        {
            return contentView;
        }
        public inline DirectoryTreeView* GetDirectoryTreeView() const
        {
            return directoryTreeView;
        }
        public inline PathBar* GetPathBar() const
        {
            return pathBar;
        }
        public void AddListViewEventHandlers(ListView* listView)
        {
            listView->ItemClickEvent().AddHandler(ListViewItemClick);
            listView->ItemRightClickEvent().AddHandler(ListViewItemRightClick);
            listView->ItemDoubleClickEvent().AddHandler(ListViewItemDoubleClick);
        }
        [nodiscard]
        protected override Result<bool> OnShown()
        {
            auto result = base->OnShown();
            if (result.Error()) return result;
            if (setSplitterDistance)
            {
                setSplitterDistance = false;
                Size sz = GetSize();
                result = splitContainer->SetSplitterDistance(cast<int>(sz.w * 1.0 / 3.0));
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        protected override Result<bool> OnKeyDown(KeyEventArgs& args)
        {
            auto result = base->OnKeyDown(args);
            if (result.Error()) return result;
            if (!args.handled)
            {
                switch (args.key)
                {
                    case Keys.escape:
                    {
                        result = RemoveContextMenu();
                        if (result.Error()) return result;
                        args.handled = true;
                        break;
                    }
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> MouseUpNotification(MouseEventArgs& args)
        {
            if (args.buttons == MouseButtons.lbutton)
            {
                auto result = RemoveContextMenu();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        private void ListViewItemClick(ListViewItemEventArgs& args)
        {
            if (args.item != null)
            {
                ListView* view = args.item->View();
                if (view != null)
                {
                    auto result = view->SetSelectedItem(args.item);
                    if (result.Error())
                    {
                        args.errorId = result.GetErrorId();
                        return;
                    }
                }
            }
        }
        private void ListViewItemRightClick(ListViewItemEventArgs& args)
        {
            if (args.item != null)
            {
                ListView* view = args.view;
                if (view != null)
                {
                    auto result = view->SetSelectedItem(args.item);
                    if (result.Error())
                    {
                        args.errorId = result.GetErrorId();
                        return;
                    }
                    void* data = args.item->Data();
                    if (data != null)
                    {
                        Node* node = cast<Node*>(data);
                        UniquePtr<ContextMenu> contextMenu(new ContextMenu());
                        auto result = node->AddMenuItems(contextMenu.Get(), false);
                        if (result.Error())
                        {
                            args.errorId = result.GetErrorId();
                            return;
                        }
                        if (contextMenu->HasMenuItems())
                        {
                            view->TranslateContentLocation(args.location);
                            auto clientToScreenResult = view->ClientToScreen(args.location);
                            if (clientToScreenResult.Error())
                            {
                                args.errorId = clientToScreenResult.GetErrorId();
                                return;
                            }
                            Point screenLoc = clientToScreenResult.Value();
                            result = ShowContextMenu(contextMenu.Release(), screenLoc);
                            if (result.Error())
                            {
                                args.errorId = result.GetErrorId();
                                return;
                            }
                        }
                    }
                }
            }
        }
        private void ListViewItemDoubleClick(ListViewItemEventArgs& args)
        {
            if (args.item != null && args.item->Data() != null)
            {
                Node* node = cast<Node*>(args.item->Data());
                auto result = node->ExecuteDefaultAction();
                if (result.Error())
                {
                    args.errorId = result.GetErrorId();
                    return;
                }
            }
        }
        private void DirectoryTreeViewSizeChanged(SizeChangedEventArgs& args)
        {
            Size sz = directoryTreeView->GetSize();
            auto result = pathBar->SetEmptyViewWidth(sz.w);
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
        }
        private void ContentViewSizeChanged(SizeChangedEventArgs& args)
        {
            Size sz = contentView->GetSize();
            auto result = pathBar->SetPathViewMaxWidth(sz.w);
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
        }
        private void ParentPathSelectorClick(ClickEventArgs& args)
        {
            Node* currentNode = pathBar->CurrentNode();
            if (currentNode == null)
            {
                currentNode = directoryTreeView->SelectedNode();
            }
            if (currentNode != null)
            {
                currentNode = currentNode->Parent();
                if (currentNode != null)
                {
                    if (currentNode->IsRootDirectory())
                    {
                        currentNode = currentNode->Parent();
                    }
                }
            }
            if (currentNode != null)
            {
                auto result = currentNode->Open();
                if (result.Error())
                {
                    args.errorId = result.GetErrorId();
                    return;
                }
            }
        }
        private void PathComponentSelected(PathComponentEventArgs& args)
        {
            PathComponent* pathComponent = args.pathComponent;
            if (pathComponent != null)
            {
                void* data = pathComponent->Data();
                if (data != null)
                {
                    Node* node = cast<Node*>(data);
                    auto result = node->Open();
                    if (result.Error())
                    {
                        args.errorId = result.GetErrorId();
                        return;
                    }
                }
            }
        }
        private bool setSplitterDistance;
        private ImageList imageList;
        private List<string> logicalDrives;
        private UniquePtr<ComputerNode> computer;
        private PathBar* pathBar;
        private SplitContainer* splitContainer;
        private DirectoryTreeView* directoryTreeView;
        private ContentView* contentView;
    }
}
