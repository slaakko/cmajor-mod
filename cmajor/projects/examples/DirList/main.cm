using System;
using System.Collections;

void PrintHelp()
{
    Console.Out() << "Directory list" << endl();
    Console.Out() << "Usage: DirList [options] { FILE_PATH_WITH_WILD_CARDS }" << endl();
    Console.Out() << "Prints list of files matching FILE_PATH_WITH_WILD_CARDS '*' and '?' such as '*.cm' or 'C:/programs/*.exe'." << endl();
    Console.Out() << "--help | h" << endl();
    Console.Out() << "    Print help and exit." << endl();
    Console.Out() << "--debug-parsing | -d" << endl();
    Console.Out() << "    Print XML parsing log to stderr for regular expression parsing." << endl();
}

int main(int argc, const char** argv)
{
    List<string> filePaths;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("--"))
        {
            if (arg == "--help")
            {
                PrintHelp();
                return 0;
            }
            else if (arg == "--debug-parsing")
            {
                System.RegularExpressions.SetDebugParsing(true);
            }
            else
            {
                Console.Error() << "unknown option '" << arg << "'" << endl();
                return 1;
            }
        }
        else if (arg.StartsWith("-"))
        {
            string options = arg.Substring(1);
            for (char o : options)
            {
                switch (o)
                {
                    case 'h':
                    {
                        PrintHelp();
                        return 0;
                    }
                    case 'd':
                    {
                        System.RegularExpressions.SetDebugParsing(true);
                        break;
                    }
                    default:
                    {
                        Console.Error() << "unknown option '-" << string(o) << "'" << endl();
                        return 1;
                    }
                }
            }
        }
        else
        {
            auto result = System.IO.GetFullPath(arg);
            if (result.Error())
            {
                Console.Error() << result.GetErrorMessage() << endl();
                return 1;
            }
            filePaths.Add(result.Value());
        }
        System.RegularExpressions.Context context;
        for (const auto& filePath : filePaths)
        {
            string dir = System.IO.Path.GetDirectoryName(filePath);
            string pattern = System.IO.Path.GetFileName(filePath);
            auto utf32Result = ToUtf32(pattern);
            if (utf32Result.Error())
            {
                Console.Error() << utf32Result.GetErrorMessage() << endl();
                return 1;
            }
            const ustring& u32pattern = utf32Result.Value();
            auto nfaResult = System.RegularExpressions.CompileFilePattern(context, u32pattern);
            if (nfaResult.Error())
            {
                Console.Error() << nfaResult.GetErrorMessage() << endl();
                return 1;
            }
            System.RegularExpressions.Nfa& nfa = nfaResult.Value();
            List<string> files = Directory.GetFiles(dir);
            for (const string& fp : files)
            {
                string fileName = System.IO.Path.GetFileName(fp);
                auto utf32Result = ToUtf32(fileName);
                if (utf32Result.Error())
                {
                    Console.Error() << utf32Result.GetErrorMessage() << endl();
                    return 1;
                }
                const ustring& u32fileName = utf32Result.Value();
                if (System.RegularExpressions.PatternMatch(u32fileName, nfa))
                {
                    Console.Out() << fp << endl();
                }
            }
        }
    }
    return 0;
}
