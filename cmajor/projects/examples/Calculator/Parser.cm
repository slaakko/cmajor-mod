using System;

namespace Calculator
{
    public Result<bool> Parse(const ustring& input)
    {
        Scanner scanner(input);
        auto nextTokenResult = scanner.NextToken();
        if (nextTokenResult.Error())
        {
            return nextTokenResult;
        }
        if (scanner.CurrentToken() is PrintToken*)
        {
            SymbolTable.Instance().Print();
            return Result<bool>(true);
        }
        else if (scanner.CurrentToken() is VariableNameToken*)
        {
            VariableNameToken* token = cast<VariableNameToken*>(scanner.CurrentToken());
            ustring variableName = token->VariableName();
            auto nextTokenResult = scanner.NextToken();
            if (nextTokenResult.Error())
            {
                return nextTokenResult;
            }
            if (scanner.CurrentToken() is OperatorToken*)
            {
                OperatorToken* token = cast<OperatorToken*>(scanner.CurrentToken());
                if (token->Char() == '=')
                {
                    auto nextTokenResult = scanner.NextToken();
                    if (nextTokenResult.Error())
                    {
                        return nextTokenResult;
                    }
                    auto expr = Expr(scanner);
                    if (expr.Error())
                    {
                        return Result<bool>(ErrorId(expr.GetErrorId()));
                    }
                    double value = expr.Value();
                    Token* token = scanner.CurrentToken();
                    if (token is EndToken*)
                    {
                        SymbolTable.Instance().SetVariable(variableName, value);
                        Console.Out() << variableName << " = " << value << endl();
                        return Result<bool>(true);
                    }
                    else
                    {
                        int errorId = AllocateError("invalid input");
                        return Result<bool>(ErrorId(errorId));
                    }
                }
            }
        }
        scanner.Rewind();
        nextTokenResult = scanner.NextToken();
        if (nextTokenResult.Error())
        {
            return nextTokenResult;
        }
        auto expr = Expr(scanner);
        if (expr.Error())
        {
            return Result<bool>(ErrorId(expr.GetErrorId()));
        }
        Token* token = scanner.CurrentToken();
        if (token is EndToken*)
        {
            Console.Out() << "= " << expr.Value() << endl();
        }
        else
        {
            int errorId = AllocateError("invalid input");
            return Result<bool>(ErrorId(errorId));
        }
        return Result<bool>(true);
    }

    internal Result<double> Expr(Scanner& scanner)
    {
        auto term = Term(scanner);
        if (term.Error())
        {
            return Result<double>(ErrorId(term.GetErrorId()));
        }
        double value = term.Value();
        Token* token = scanner.CurrentToken();
        OperatorToken* op = token as OperatorToken*;
        while (op != null && op->IsAdditiveOperator())
        {
            uchar opChar = op->Char();
            auto nextTokenResult = scanner.NextToken();
            if (nextTokenResult.Error())
            {
                return Result<double>(ErrorId(nextTokenResult.GetErrorId()));
            }
            auto rightTerm = Term(scanner);
            if (rightTerm.Error())
            {
                return Result<double>(ErrorId(rightTerm.GetErrorId()));
            }
            double right = rightTerm.Value();
            if (opChar == '+')
            {
                value = value + right;
            }
            else if (opChar == '-')
            {
                value = value - right;
            }
            else
            {
                int errorId = AllocateError("logic error");
                return Result<double>(ErrorId(errorId));
            }
            token = scanner.CurrentToken();
            op = token as OperatorToken*;
        }
        return value;
    }

    internal Result<double> Term(Scanner& scanner)
    {
        auto factor = Factor(scanner);
        if (factor.Error())
        {
            return factor;
        }
        double value = factor.Value();
        Token* token = scanner.CurrentToken();
        OperatorToken* op = token as OperatorToken*;
        while (op != null && op->IsMultiplicativeOperator())
        {
            uchar opChar = op->Char();
            auto nextTokenResult = scanner.NextToken();
            if (nextTokenResult.Error())
            {
                return Result<double>(ErrorId(nextTokenResult.GetErrorId()));;
            }
            auto rightFactor = Factor(scanner);
            if (rightFactor.Error())
            {
                return rightFactor;
            }
            double right = rightFactor.Value();
            if (opChar == '*')
            {
                value = value * right;
            }
            else if (opChar == '/')
            {
                if (right == 0)
                {
                    int errorId = AllocateError("division by zero");
                    return Result<double>(ErrorId(errorId));
                }
                value = value / right;
            }
            else
            {
                int errorId = AllocateError("logic error");
                return Result<double>(ErrorId(errorId));
            }
            token = scanner.CurrentToken();
            op = token as OperatorToken*;
        }
        return value;
    }

    internal Result<double> Factor(Scanner& scanner)
    {
        Token* token = scanner.CurrentToken();
        OperatorToken* op = token as OperatorToken*;
        bool neg = false;
        if (op != null && op->IsAdditiveOperator())
        {
            if (op->Char() == '-')
            {
                neg = true;
            }
            auto nextTokenResult = scanner.NextToken();
            if (nextTokenResult.Error())
            {
                return Result<double>(ErrorId(nextTokenResult.GetErrorId()));
            }
        }
        auto primary = Primary(scanner);
        if (primary.Error())
        {
            return primary;
        }
        double value = primary.Value();
        if (neg)
        {
            return -value;
        }
        return Result<double>(value);
    }

    internal Result<double> Primary(Scanner& scanner)
    {
        Token* token = scanner.CurrentToken();
        if (token is NumberToken*)
        {
            NumberToken* number = cast<NumberToken*>(token);
            double value = number->Value();
            auto nextTokenResult = scanner.NextToken();
            if (nextTokenResult.Error())
            {
                return Result<double>(ErrorId(nextTokenResult.GetErrorId()));
            }
            return Result<double>(value);
        }
        else if (token is VariableNameToken*)
        {
            VariableNameToken* variableNameToken = cast<VariableNameToken*>(token);
            auto variableResult = SymbolTable.Instance().GetVariableValue(variableNameToken->VariableName());
            if (variableResult.Error())
            {
                return variableResult;
            }
            double value = variableResult.Value();
            auto nextTokenResult = scanner.NextToken();
            if (nextTokenResult.Error())
            {
                return Result<double>(ErrorId(nextTokenResult.GetErrorId()));
            }
            return Result<double>(value);
        }
        else if (token is OperatorToken*)
        {
            OperatorToken* op = cast<OperatorToken*>(token);
            if (op->Char() == '(')
            {
                auto nextTokenResult = scanner.NextToken();
                if (nextTokenResult.Error())
                {
                    return Result<double>(ErrorId(nextTokenResult.GetErrorId()));
                }
                auto expr = Expr(scanner);
                if (expr.Error())
                {
                    return expr;
                }
                double value = expr.Value();
                token = scanner.CurrentToken();
                if (token is OperatorToken*)
                {
                    op = cast<OperatorToken*>(token);
                    if (op->Char() == ')')
                    {
                        auto nextTokenResult = scanner.NextToken();
                        if (nextTokenResult.Error())
                        {
                            return Result<double>(ErrorId(nextTokenResult.GetErrorId()));
                        }
                        return Result<double>(value);
                    }
                    else
                    {
                        int errorId = AllocateError("')' expected");
                        return Result<double>(ErrorId(errorId));
                    }
                }
            }
        }
        int errorId = AllocateError("number, variable name or subexpression expected");
        return Result<double>(ErrorId(errorId));
    }
}
