using System;
using System.Collections;

namespace Calculator
{
    public class SymbolTable
    {
        static SymbolTable() : instance(new SymbolTable())
        {
        }
        public static SymbolTable& Instance()
        {
            return *instance;
        }
        private SymbolTable() : variableMap()
        {
        }
        public void SetVariable(const ustring& variableName, double variableValue)
        {
            variableMap[variableName] = variableValue;
        }
        public Result<double> GetVariableValue(const ustring& variableName)
        {
            Map<ustring, double>.ConstIterator it = variableMap.CFind(variableName);
            if (it != variableMap.CEnd())
            {
                double value = it->second;
                return value;
            }
            else
            {
                auto utf8Result = ToUtf8(variableName);
                if (utf8Result.Error())
                {
                    return Result<double>(ErrorId(utf8Result.GetErrorId()));
                }
                string variableNameValue = utf8Result.Value();
                int errorId = AllocateError("variable '" + variableNameValue + "' not found");
                return Result<double>(ErrorId(errorId));
            }
        }
        public void Print()
        {
            Console.WriteLine("variables:");
            for (const Pair<ustring, double>& pair : variableMap)
            {
                Console.Out() << pair.first << " = " << pair.second << endl();
            }
        }
        private static UniquePtr<SymbolTable> instance;
        private Map<ustring, double> variableMap;
    }
}
