using System;

namespace Calculator
{
    public inline bool IsNumberChar(uchar c)
    {
        return IsAsciiDigit(c) || c == '.';
    }

    public class Scanner
    {
        public Scanner(const ustring& input_) : input(input_)
        {
        }
        public inline Token* CurrentToken() const
        {
            return token.Get();
        }
        public Result<bool> NextToken()
        {
            SkipWhiteSpace();
            if (pos < input.Length())
            {
                if (IsNumberChar(input[pos]))
                {
                    int start = pos;
                    ++pos;
                    while (pos < input.Length() && IsNumberChar(input[pos]))
                    {
                        ++pos;
                    }
                    auto utf8Result = ToUtf8(input.Substring(start, pos - start));
                    if (utf8Result.Error())
                    {
                        return Result<bool>(ErrorId(utf8Result.GetErrorId()));
                    }
                    auto parseResult = ParseDouble(utf8Result.Value());
                    if (parseResult.Error())
                    {
                        return Result<bool>(ErrorId(parseResult.GetErrorId()));
                    }
                    double number = parseResult.Value();
                    token.Reset(new NumberToken(number));
                }
                else 
                {
                    auto idStartResult = IsIdStart(input[pos]);
                    if (idStartResult.Error())
                    {
                        return idStartResult;
                    }
                    bool isIdStart = idStartResult.Value();
                    if (isIdStart)
                    {
                        int start = pos;
                        ++pos;
                        auto idContResult = IsIdCont(input[pos]);
                        if (idContResult.Error())
                        {
                            return idContResult;
                        }
                        bool isIdCont = idContResult.Value();
                        while (pos < input.Length() && isIdCont)
                        {
                            ++pos;
                            idContResult = IsIdCont(input[pos]);
                            if (idContResult.Error())
                            {
                                return idContResult;
                            }
                            isIdCont = idContResult.Value();
                        }
                        ustring variableName = input.Substring(start, pos - start);
                        auto toLowerResult = ToLower(variableName);
                        if (toLowerResult.Error())
                        {
                            return Result<bool>(ErrorId(toLowerResult.GetErrorId()));
                        }
                        ustring lower = toLowerResult.Value();
                        if (lower == u"print")
                        {
                            token.Reset(new PrintToken());
                        }
                        else
                        {
                            token.Reset(new VariableNameToken(variableName));
                        }
                    }
                    else
                    {
                        token.Reset(new OperatorToken(input[pos]));
                        ++pos;
                    }
                }
            }
            else
            {
                token.Reset(new EndToken());
            }
            return Result<bool>(true);
        }
        public void Rewind()
        {
            pos = 0;
        }
        private void SkipWhiteSpace()
        {
            while (pos < input.Length() && (input[pos] == ' ' || input[pos] == '\t'))
            {
                ++pos;
            }
        }
        private UniquePtr<Token> token;
        private ustring input;
        private int pos;
    }
}
