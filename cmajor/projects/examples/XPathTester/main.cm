using System;

void PrintHelp()
{
    Console.Out() << "XPath tester" << endl();
    Console.Out() << "Usage: XPathTester [options] [XML_FILE]" << endl();
    Console.Out() << "Options:" << endl();
    Console.Out() << "--help | -h" << endl();
    Console.Out() << "    Print help and exit." << endl();
    Console.Out() << "--debug-parse | -d" << endl();
    Console.Out() << "     Write XML parsing log to stderr." << endl();
    Console.Out() << endl();
    Console.Out() << "First reads the XML_FILE, or 'library.xml' if no file given." << endl();
    Console.Out() << "Then user can enter an XPATH query such as '/library/objects/object'. " << endl();
    Console.Out() << "The program evaluates the query and prints the parsed XPATH expression and results as XML." << endl();
    Console.Out() << endl();
}

int main(int argc, const char** argv)
{
    #if (WINDOWS)
    string end = "CTRL-Z";
    #else
    string end = "CTRL-D";
    #endif
    string xmlFile;
    bool debugParse = false;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("--"))
        {
            if (arg == "--help")
            {
                PrintHelp();
                return 0;
            }
            else if (arg == "--debug-parse")
            {
                debugParse = true;
            }
            else
            {
                Console.Error() << "unknown option '" << arg << "'" << endl();
                return 1;
            }
        }
        else if (arg.StartsWith("-"))
        {
            string options = arg.Substring(1);
            for (char o : options)
            {
                switch (o)
                {
                    case 'h':
                    {
                        PrintHelp();
                        return 0;
                    }
                    case 'd':
                    {
                        debugParse = true;
                        break;
                    }
                }
            }
        }
        else
        {
            xmlFile = arg;
        }
    }
    if (xmlFile.IsEmpty())
    {
        string executablePath = GetPathToExecutable();
        auto projectDirPathResult = System.IO.GetFullPath(
            System.IO.Path.Combine(System.IO.Path.Combine(System.IO.Path.Combine(System.IO.Path.GetDirectoryName(executablePath), ".."), ".."), ".."));
        if (projectDirPathResult.Error())
        {
            Console.Error() << projectDirPathResult.GetErrorMessage();
            return 1;
        }
        const string& projectDirPath = projectDirPathResult.Value();
        xmlFile = System.IO.Path.Combine(projectDirPath, "library.xml");
    }
    System.Lex.FileMap fileMap;
    Console.Out() << "reading " << xmlFile << "..." << endl();
    auto result = System.Xml.ParseXmlDocument(xmlFile, fileMap);
    if (result.Error())
    {
        Console.Error() << result.GetErrorMessage() << endl();
        return 1;
    }
    System.XPath.SetDebug(true);
    if (debugParse)
    {
        System.XPath.SetDebugParse(true);
    }
    System.Xml.Document* document = result.Value().Get();
    Console.Out() << "Enter XPATH query expression, or " << end << " to end> ";
    auto lineResult = Console.ReadLine();
    if (lineResult.Error())
    {
        Console.Error() << lineResult.GetErrorMessage() << endl();
        return 1;
    }
    string expr = lineResult.Value();
    while (!Console.In().EndOfStream())
    {
        auto result = System.XPath.Evaluate(expr, document);
        if (result.Error())
        {
            Console.Error() << result.GetErrorMessage() << endl();
        }
        Console.Out() << "Enter XPATH query expression, or " << end << " to end> ";
        lineResult = Console.ReadLine();
        if (lineResult.Error())
        {
            Console.Error() << lineResult.GetErrorMessage() << endl();
            return 1;
        }
        expr = lineResult.Value();
    }
    Console.WriteLine("bye!");
    return 0;
}

