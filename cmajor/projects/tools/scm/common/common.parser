// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module scm.common.parser;

//[interface]import soul.ast.common;
[implementation]import cm.token;
[implementation]import scm.token;
[implementation]import punctuation.token;
//[implementation]import scm.lex.scmlg;
//[implementation]import soul.lex.spg;
//[implementation]import soul.common.token.parser;

parser CommonParser
{
	lexer ScmlgLexer;
	lexer ScmpgLexer;

	QualifiedId(var ustring str) : ustring
		::= 
        (
            ID{ str.Append(lexer.GetToken(pos).ToString()); } (DOT ID{ str.Append('.').Append(lexer.GetToken(pos).ToString()); })*
        )
        { 
            return str; 
        }
		;

	Import(var UniquePtr<scm.common.Import> imp) : scm.common.Import*
		::= 
		(
			ImportKeyword:importKeyword QualifiedId:moduleName{ imp.Reset(new scm.common.Import(moduleName)); }
			SEMICOLON
		)
		{
			return imp.Release();
		}
		;

	ExprString : ustring
		::= STRING_LITERAL
			{
				auto result = scm.common.MakeExprStringValue(lexer.FileName(), lexer.GetToken(pos));
				if (result.Error())
				{
					return ErrorId(result.GetErrorId());
				}
				return result.Value();
			}
		;

	FilePath : string
		::=	FILEPATH
			{ 
				auto result = scm.common.MakeFilePath(lexer.FileName(), lexer.GetToken(pos));
				if (result.Error())
				{
					return ErrorId(result.GetErrorId());
				}
				return result.Value();
			}
		;

	ExportKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"export"; }
		;

	ModuleKeyword 
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"module"; }
		;

	ImportKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"import"; }
		;

	ParserKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"parser"; }
		;

	LexerKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"lexer"; }
		;

	TokensKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"tokens"; }
		;

	KeywordsKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"keywords"; }
		;

	ExpressionsKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"expressions"; }
		;

	RulesKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"rules"; }
		;

	VariablesKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"variables"; }
		;

	ActionsKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"actions"; }
		;

	MainKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"main"; }
		;

	StartKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"start"; }
		;

	EmptyKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"empty"; }
		;

	AnyKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"any"; }
		;

	VarKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"var"; }
		;

	ProjectKeyword
		::= ID{ pass = lexer.GetToken(pos).ToString() == u"project"; }
		;

}
