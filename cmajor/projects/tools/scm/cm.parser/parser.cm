// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

using cm.ast;

namespace cm.parser
{
    public Result<UniquePtr<SourceFileNode>> ParseSourceFile(const string& sourceFilePath)
    {
        auto sourceFileContentResult = File.ReadAllText(sourceFilePath);
        if (sourceFileContentResult.Error())
        {
            return Result<UniquePtr<SourceFileNode>>(ErrorId(sourceFileContentResult.GetErrorId()));
        }
        const string& sourceFileContent = sourceFileContentResult.Value();
        auto utf32Result = ToUtf32(sourceFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<SourceFileNode>>(ErrorId(utf32Result.GetErrorId()));
        }
        const ustring& content = utf32Result.Value();
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        CmajorLexer lexer(start, end, sourceFilePath);
        cm.parser.Context context;
        auto parseResult = SourceFileParser<CmajorLexer>.Parse(lexer, &context);
        if (parseResult.Error())
        {
            return Result<UniquePtr<SourceFileNode>>(ErrorId(parseResult.GetErrorId()));
        }
        return Result<UniquePtr<SourceFileNode>>(Rvalue(parseResult.Value()));
    }
}
