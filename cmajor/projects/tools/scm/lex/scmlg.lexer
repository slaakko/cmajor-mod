// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module scmlg.lexer;

import cm.token;
import cm.keyword;
import punctuation.token;
import scm.token;
import scm.expr;

namespace scm
{
    lexer ScmlgLexer
    {
        rules
        {
            "{separators}" {}
            "{id}" { long kw = GetKeywordToken(token.match); if (kw == INVALID_TOKEN) return ID; else return kw; }
            "{integer_literal}" { return INTEGER_LITERAL; }
            "{floating_literal}" { return FLOATING_LITERAL; }
            "{char_literal}" { return CHAR_LITERAL; }
            "{string_literal}" { return STRING_LITERAL; }
            "$" { return DOLLAR; }
            "\|\|" { return DISJUNCTION; }
            "&&" { return AMP_AMP; }
            "\|" { return PIPE; }
            "^" { return CARET; }
            "&" { return AMP; }
            "==" { return EQ; }
            "!=" { return NEQ; }
            "<=" { return LEQ; }
            ">=" { return GEQ; }
            "<" { return LANGLE; }
            ">" { return RANGLE; }
            "<<"{ return SHIFT_LEFT; }
            ">>" $(0) { return SHIFT_RIGHT; }
            "\+" { return PLUS; }
            "-" { return MINUS; }
            "\*" { return STAR; }
            "/" { return DIV; }
            "%" { return REM; }
            "\+\+" { return PLUS_PLUS; }
            "--" { return MINUS_MINUS; }
            "!" { return EXCLAMATION; }
            "\?" { return QUEST; }
            "~" { return TILDE; }
            "\." { return DOT; }
            "->" { return ARROW; }
            "\[" { return LBRACKET; }
            "\]" { return RBRACKET; }
            "\(" { return LPAREN; }
            "\)" { return RPAREN; }
            "\{" { return LBRACE; }
            "\}" { return RBRACE; }
            ":" { return COLON; }
            ";" { return SEMICOLON; }
            "," { return COMMA; }
            "=" { return ASSIGN; }
            "<[^\n>]*>" $(1) { return FILEPATH; }
        }

        variables
        {
            int leftAngleCount;
            bool matchFilePath;
        }

        actions
        {
            $(0)={ if (vars.leftAngleCount > 0) return System.Lex.INVALID_TOKEN; }
            $(1)={ if (!vars.matchFilePath) return System.Lex.INVALID_TOKEN; }
        }
    }

} // namespace scm

