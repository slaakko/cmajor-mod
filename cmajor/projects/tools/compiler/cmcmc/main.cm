// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using build;
using symbols;

string Version()
{
    return "5.0.0";
}

void PrintHelp()
{
    Console.Out() << "Cmajor compiler version " << Version() << " with CM/MASM backend for Windows x64" << endl();
    // todo
}

int main(int argc, const char** argv)
{
    SetPrintFn(symbols.PrintConversion);
    Set<string> builtProjects;
    UniquePtr<Module> rootModule;
    List<UniquePtr<Module>> rootModules;
    List<string> files;
    SetConfig("debug");
    bool prevWasDefine = false;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("--"))
        {
            if (arg.Find('=') != -1)
            {
                List<string> components = arg.Split('=');
                if (components.Count() != 2)
                {
                    LogMessage(-1, "unknown option '" + arg + "'");
                    return 1;
                }
                if (components[0] == "--config")
                {
                    if (components[1] != "debug" && components[1] != "release")
                    {
                        LogMessage(-1, "unknown configuration '" + components[1] + "'");
                        return 1;
                    }
                    SetConfig(components[1]);
                }
                else if (components[0] == "--opt")
                {
                    Result<bool> result = optimizer.Optimizer.Instance().SetCurrentProfile(components[1]);
                    if (result.Error())
                    {
                        LogMessage(-1, result.GetErrorMessage());
                        return 1;
                    }
                }
                else
                {
                    LogMessage(-1, "unknown option '" + arg + "'");
                    return 1;
                }
            }
            else
            {
                if (arg == "--help")
                {
                    PrintHelp();
                    return 0;
                }
                else if (arg == "--verbose")
                {
                    SetGlobalFlag(GlobalFlags.verbose);
                }
                else if (arg == "--rebuild")
                {
                    SetGlobalFlag(GlobalFlags.rebuild);
                }
                else if (arg == "--single-threaded")
                {
                    SetGlobalFlag(GlobalFlags.singleThreadedCompile);
                }
                else if (arg == "--clean")
                {
                    SetGlobalFlag(GlobalFlags.clean);
                }
                else if (arg == "--all")
                {
                    SetGlobalFlag(GlobalFlags.buildAll);
                }
                else if (arg == "--define")
                {
                    prevWasDefine = true;
                }
                else
                {
                    LogMessage(-1, "unknown option '" + arg + "'");
                    return 1;
                }
            }
        }
        else if (arg.StartsWith("-"))
        {
            string options = arg.Substring(1);
            if (options.Find('=') != -1)
            {
                List<string> components = options.Split('=');
                if (components.Count() != 2)
                {
                    LogMessage(-1, "unknown option '" + arg + "'");
                    return 1;
                }
                if (components[0] == "c")
                {
                    if (components[1] != "debug" && components[1] != "release")
                    {
                        LogMessage(-1, "unknown configuration '" + components[1] + "'");
                        return 1;
                    }
                    SetConfig(components[1]);
                }
                else if (components[0] == "O")
                {
                    Result<bool> result = optimizer.Optimizer.Instance().SetCurrentProfile(components[1]);
                    if (result.Error())
                    {
                        LogMessage(-1, result.GetErrorMessage());
                        return 1;
                    }
                }
                else
                {
                    LogMessage(-1, "unknown option '" + arg + "'");
                    return 1;
                }
            }
            else
            {
                for (char o : options)
                {
                    switch (o)
                    {
                        case 'h':
                        {
                            PrintHelp();
                            return 0;
                        }
                        case 'v':
                        {
                            SetGlobalFlag(GlobalFlags.verbose);
                            break;
                        }
                        case 'r':
                        {
                            SetGlobalFlag(GlobalFlags.rebuild);
                            break;
                        }
                        case 's':
                        {
                            SetGlobalFlag(GlobalFlags.singleThreadedCompile);
                            break;
                        }
                        case 'e':
                        {
                            SetGlobalFlag(GlobalFlags.clean);
                            break;
                        }
                        case 'a':
                        {
                            SetGlobalFlag(GlobalFlags.buildAll);
                            break;
                        }
                        case 'D':
                        {
                            prevWasDefine = true;
                            break;
                        }
                        default:
                        {
                            LogMessage(-1, "unknown option '" + string(o) + "'");
                            return 1;
                        }
                    }
                }
            }
        }
        else if (prevWasDefine)
        {
            prevWasDefine = false;
            auto result = ToUtf32(arg);
            if (result.Error())
            {
                LogMessage(-1, result.GetErrorMessage());
                return 1;
            }
            ustring symbol = Rvalue(result.Value());
            DefineCommandLineConditionalSymbol(symbol);
        }
        else
        {
            auto fullPathResult = System.IO.GetFullPath(arg);
            if (fullPathResult.Error())
            {
                LogMessage(-1, fullPathResult.GetErrorMessage());
                return 1;
            }
            const string& file = fullPathResult.Value();
            files.Add(file);
        }
        for (const string& file : files)
        {
            if (file.EndsWith(".cms"))
            {
                auto existsResult = System.IO.File.Exists(file);
                if (existsResult.Error())
                {
                    LogMessage(-1, existsResult.GetErrorMessage());
                    return 1;
                }
                bool exists = existsResult.Value();
                if (!exists)
                {
                    LogMessage(-1, "solution file '" + file + "' not found");
                    return 1;
                }
                auto result = BuildSolution(file, rootModules);
                if (result.Error())
                {
                    if (result.GetErrorId() != -1)
                    {
                        LogMessage(-1, result.GetErrorMessage());
                    }
                    return 1;
                }
            }
            else if (file.EndsWith(".cmp"))
            {
                auto existsResult = System.IO.File.Exists(file);
                if (existsResult.Error())
                {
                    LogMessage(-1, existsResult.GetErrorMessage());
                    return 1;
                }
                bool exists = existsResult.Value();
                if (!exists)
                {
                    LogMessage(-1, "project  file '" + file + "' not found");
                    return 1;
                }
                Result<bool> result = BuildProject(file, rootModule, builtProjects);
                if (result.Error())
                {
                    if (result.GetErrorId() != -1)
                    {
                        LogMessage(-1, result.GetErrorMessage());
                    }
                    return 1;
                }
            }
            else
            {
                LogMessage(-1, "file '" + file + "' has unknown extension (not .cmp or .cms)");
                return 1;
            }
        }
    }
    return 0;
}


