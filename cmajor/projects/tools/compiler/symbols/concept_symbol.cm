// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using cm.ast;

namespace symbols
{
    public class IntrinsicConcepts
    {
        static IntrinsicConcepts() : instance(new IntrinsicConcepts())
        {
        }
        public static IntrinsicConcepts& Instance()
        {
            return *instance;
        }
        public void AddIntrinsicConcept(ConceptNode* intrinsicConcept)
        {
            intrinsicConcepts.Add(UniquePtr<ConceptNode>(intrinsicConcept));
        }
        public inline const List<UniquePtr<ConceptNode>>& GetIntrinsicConcepts() const
        {
            return intrinsicConcepts;
        }
        private IntrinsicConcepts() : initialized(false)
        {
        }
        public inline bool Initialized() const
        {
            return initialized;
        }
        public inline void SetInitialized()
        {
            initialized = true;
        }
        private static UniquePtr<IntrinsicConcepts> instance;
        private bool initialized;
        private List<UniquePtr<ConceptNode>> intrinsicConcepts;
    }

    public class ConceptGroupSymbol : Symbol
    {
        public ConceptGroupSymbol(const System.Lex.Span& span_,  const ustring& name_) : base(SymbolKind.conceptGroupSymbol, span_, name_)
        {
        }
        public override ustring TypeString() const
        {
             return u"concept_group";
        }
        public override bool IsExportSymbol() const
        {
            return false;
        }
        public Result<bool> AddConcept(ConceptSymbol* conceptSymbol)
        {
            #assert(conceptSymbol->GroupName() == Name());
            int arity = conceptSymbol->Arity();
            auto it = arityConceptMap.Find(arity);
            if (it != arityConceptMap.End())
            {
                Result<string> conceptGroupNameResult = ToUtf8(conceptSymbol->GroupName());
                if (conceptGroupNameResult.Error()) return Result<bool>(ErrorId(conceptGroupNameResult.GetErrorId()));
                string conceptGroupName = Rvalue(conceptGroupNameResult.Value());
                int errorId = MakeError("concept group '" + conceptGroupName + "' already has concept with arity " + ToString(arity), FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            arityConceptMap[arity] = conceptSymbol;
            conceptSymbol->SetConceptGroup(this);
            return Result<bool>(true);
        }
        public Result<ConceptSymbol*> GetConcept(int arity) const
        {
            auto it = arityConceptMap.Find(arity);
            if (it != arityConceptMap.End())
            {
                return Result<ConceptSymbol*>(it->second);
            }
            else
            {
                Result<string> conceptGroupFullNameResult = ToUtf8(FullName());
                if (conceptGroupFullNameResult.Error()) return Result<ConceptSymbol*>(ErrorId(conceptGroupFullNameResult.GetErrorId()));
                string conceptGroupFullName = Rvalue(conceptGroupFullNameResult.Value());
                int errorId = MakeError("concept with arity " + ToString(arity) + " not found from concept group '" + conceptGroupFullName + "'", FullSpan());
                return Result<ConceptSymbol*>(ErrorId(errorId));
            }
        }
        private Map<int, ConceptSymbol*> arityConceptMap;
    }

    public class ConceptSymbol : ContainerSymbol
    {
        public ConceptSymbol(const System.Lex.Span& span_, const ustring& name_) : base(SymbolKind.conceptSymbol, span_, name_), hasSource(false)
        {
        }
        public override ustring TypeString() const
        {
             return u"concept";
        }
        public override ustring SimpleName() const
        {
            return groupName;
        }
        public inline bool HasSource() const
        {
            return hasSource;
        }
        public inline void SetHasSource()
        {
            hasSource = true;
        }
        public inline const ustring& GroupName() const
        {
            return groupName;
        }
        public void SetGroupName(const ustring& groupName_)
        {
            groupName = groupName_;
        }
        public inline void SetConceptGroup(ConceptGroupSymbol* conceptGroup_)
        {
            conceptGroup = conceptGroup_;
        }
        public inline ConceptGroupSymbol* ConceptGroup() const
        {
            return conceptGroup;
        }
        public inline ConceptNode* GetConceptNode() const
        {
            return conceptNode.Get();
        }
        public inline const List<TemplateParameterSymbol*>& TemplateParameters() const
        {
            return templateParameters;
        }
        public inline int Arity() const
        {
            return cast<int>(templateParameters.Count());
        }
        public inline const Uuid& TypeId() const
        {
            return typeId;
        }
        public inline void SetTypeId(const Uuid& typeId_)
        {
            typeId = typeId_;
        }
        public inline ConceptSymbol* RefinedConcept() const
        {
            return refinedConcept;
        }
        public inline void SetRefinedConcept(ConceptSymbol* refinedConcept_)
        {
            refinedConcept = refinedConcept_;
        }
        [nodiscard]
        public Result<bool> ComputeName()
        {
            ustring name = groupName;
            name.Append('<');
            bool first = true;
            for (TemplateParameterSymbol* templateParameter : templateParameters)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    name.Append(u", ");
                }
                name.Append(templateParameter->Name());
            }
            name.Append('>');
            SetName(name);
            Result<bool> result = ComputeMangledName();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public override Result<bool> Write(SymbolWriter& writer)
        {
            Result<bool> result = base->Write(writer);
            if (result.Error()) return result;
            result = writer.GetBinaryWriter().Write(typeId);
            if (result.Error()) return result;
            result = writer.GetBinaryWriter().Write(groupName);
            if (result.Error()) return result;
            Uuid refinedConceptId;
            if (refinedConcept != null)
            {
                refinedConceptId = refinedConcept->TypeId();
            }
            result = writer.GetBinaryWriter().Write(refinedConceptId);
            if (result.Error()) return result;
            Node* node = writer.Context().RootModule()->GetSymbolTable()->GetNode(this);
            #assert(node != null && node->IsConceptNode());
            result = writer.GetAstWriter().Write(node);
            if (result.Error()) return result;
            result = writer.GetBinaryWriter().Write(hasSource);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public override Result<bool> Read(SymbolReader& reader)
        {
            Result<bool> result = base->Read(reader);
            if (result.Error()) return result;
            Result<Uuid> typeIdResult = reader.GetBinaryReader().ReadUuid();
            if (typeIdResult.Error()) return Result<bool>(ErrorId(typeIdResult.GetErrorId()));
            typeId = typeIdResult.Value();
            reader.GetSymbolTable()->MapConcept(this);
            Result<ustring> groupNameResult = reader.GetBinaryReader().ReadUString();
            if (groupNameResult.Error()) return Result<bool>(ErrorId(groupNameResult.GetErrorId()));
            groupName = Rvalue(groupNameResult.Value());
            Result<Uuid> refinedConceptIdResult = reader.GetBinaryReader().ReadUuid();
            if (refinedConceptIdResult.Error()) return Result<bool>(ErrorId(refinedConceptIdResult.GetErrorId()));
            refinedConceptId = refinedConceptIdResult.Value();
            Result<ConceptNode*> conceptNodeResult = reader.GetAstReader().ReadConceptNode();
            if (conceptNodeResult.Error()) return Result<bool>(ErrorId(conceptNodeResult.GetErrorId()));
            conceptNode.Reset(conceptNodeResult.Value());
            Result<bool> hasSourceResult = reader.GetBinaryReader().ReadBool();
            if (hasSourceResult.Error()) return Result<bool>(ErrorId(hasSourceResult.GetErrorId()));
            hasSource = hasSourceResult.Value();
            reader.AddToSymbolResolutionList(this);
            return Result<bool>(true);
        }
        public override Result<bool> Resolve(SymbolTable* symbolTable)
        {
            Result<bool> baseResolveResult = base->Resolve(symbolTable);
            if (baseResolveResult.Error()) return baseResolveResult;
            for (const Uuid& templateParameterId : templateParameterIds)
            {
                Result<TypeSymbol*> typeResult = symbolTable->GetType(templateParameterId);
                if (typeResult.Error()) return Result<bool>(ErrorId(typeResult.GetErrorId()));
                TypeSymbol* type = typeResult.Value();
                if (type->IsTemplateParameterSymbol())
                {
                    TemplateParameterSymbol* templateParameter = cast<TemplateParameterSymbol*>(type);
                    templateParameters.Add(templateParameter);
                }
                else
                {
                    int errorId = MakeError("template parameter symbol expected", FullSpan());
                    return Result<bool>(ErrorId(errorId));
                }
            }
            if (!refinedConceptId.IsNil())
            {
                Result<ConceptSymbol*> refinedConceptResult = symbolTable->GetConcept(refinedConceptId);
                if (refinedConceptResult.Error()) return Result<bool>(ErrorId(refinedConceptResult.GetErrorId()));
                refinedConcept = refinedConceptResult.Value();
            }
            return Result<bool>(true);
        }
        public override Result<bool> AddMember(Symbol* member, SymbolsContext& context)
        {
            Result<bool> result = base->AddMember(member, context);
            if (result.Error()) return result;
            if (member->IsTemplateParameterSymbol())
            {
                templateParameters.Add(cast<TemplateParameterSymbol*>(member));
            }
            return Result<bool>(true);
        }
        public Result<bool> SetSpecifiers(const Specifiers& specifiers)
        {
            Specifiers accessSpecifiers = specifiers & Specifiers.access_;
            Result<bool> result = SetAccess(accessSpecifiers);
            if (result.Error()) return result;
            if ((specifiers & Specifiers.static_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be static", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.virtual_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be virtual", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.override_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be override", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.abstract_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be abstract", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.inline_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be inline", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.explicit_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be explicit", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.external_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be external", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.suppress_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be suppressed", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.default_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be default", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.constexpr_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be constexpr", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.cdecl_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be cdecl", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.nothrow_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be nothrow", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.throw_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be throw", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.new_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be new", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.const_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be const", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            if ((specifiers & Specifiers.unit_test_) != Specifiers.none)
            {
                int errorId = MakeError("concept cannot be unit_test", FullSpan());
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        private bool hasSource;
        private ustring groupName;
        private ConceptGroupSymbol* conceptGroup;
        private List<TemplateParameterSymbol*> templateParameters;
        private List<Uuid> templateParameterIds;
        private Uuid typeId;
        private ConceptSymbol* refinedConcept;
        private Uuid refinedConceptId;
        private UniquePtr<ConceptNode> conceptNode;
    }

    public class AxiomSymbol : ContainerSymbol
    {
        public AxiomSymbol(const System.Lex.Span& span_, const ustring& name_) : base(SymbolKind.axiomSymbol, span_, name_)
        {
        }
        public override bool IsExportSymbol() const
        {
            return false;
        }
    }
}

