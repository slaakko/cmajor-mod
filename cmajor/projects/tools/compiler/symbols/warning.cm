// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace symbols
{
    [nodiscard]
    public Result<bool> LogLocationText(int logStreamId, const System.Lex.FullSpan& location)
    {
        Module* module = GetModuleById(location.moduleId);
        if (module != null)
        {
            int fileIndex = location.fileIndex;
            const System.Lex.FileMap& fileMap = module->GetFileMap();
            if (fileMap.HasFileName(fileIndex))
            {
                Result<System.Lex.SourceFile*> sourceFileResult = fileMap.GetOrReadSourceFile(fileIndex);
                if (sourceFileResult.Error())
                {
                    Result<bool> result = LogMessage(logStreamId, sourceFileResult.GetErrorMessage());
                    if (result.Error()) return result;
                }
                System.Lex.SourceFile* sourceFile = sourceFileResult.Value();
                if (sourceFile != null)
                {
                    System.Lex.LineColLen lineColLen = System.Lex.SpanToLineColLen(location.span, sourceFile->LineStartIndeces());
                    if (lineColLen.IsValid())
                    {
                        string locationText;
                        locationText.Append(fileMap.GetFileName(fileIndex)).Append(" line ").Append(ToString(lineColLen.line)).Append(":");
                        Result<bool> result = LogMessage(logStreamId, locationText);
                        if (result.Error()) return result;
                        Result<string> lineResult = sourceFile->GetLine(lineColLen.line);
                        if (!lineResult.Error())
                        {
                            string line = Rvalue(lineResult.Value());
                            Result<bool> result = LogMessage(logStreamId, line);
                            if (result.Error()) return result;
                            string caretText;
                            caretText.Append(string(' ', Max(cast<int>(0), lineColLen.col - 1))).Append(string('^', lineColLen.len));
                            result = LogMessage(logStreamId, caretText);
                            if (result.Error()) return result;
                        }
                        else
                        {
                            RtmDisposeError(lineResult.GetErrorId());
                        }
                    }
                }
            }
        }
        return Result<bool>(true);
    }

    public const int nodiscardWarning = 1;

    public class Warning
    {
        public Warning(int number_, const string& moduleName_, const string& message_) :
            number(number_), moduleName(moduleName_), message(message_)
        {
        }
        public inline int Number() const
        {
            return number;
        }
        public inline const string& ModuleName() const
        {
            return moduleName;
        }
        public inline const string& Message() const
        {
            return message;
        }
        public inline const System.Lex.FullSpan& Defined() const
        {
            return defined;
        }
        public void SetDefined(const System.Lex.FullSpan& defined_)
        {
            defined = defined_;
        }
        public inline const List<System.Lex.FullSpan>& References() const
        {
            return references;
        }
        public void SetReferences(List<System.Lex.FullSpan>&& references_)
        {
            references = references_;
        }
        [nodiscard]
        public Result<bool> ToLog(int logStreamId)
        {
            string warningText = "warning ";
            warningText.Append(ToString(number)).Append(": project '").Append(moduleName).Append("': ").Append(message);
            Result<bool> result = LogMessage(logStreamId, warningText);
            if (result.Error()) return result;
            List<System.Lex.FullSpan> locations;
            if (defined.span.IsValid())
            {
                locations.Add(defined);
            }
            for (const auto& ref : references)
            {
                if (ref.span.IsValid())
                {
                    if (Find(locations.Begin(), locations.End(), ref) != locations.End()) continue;
                    locations.Add(ref);
                }
            }
            int n = cast<int>(locations.Count());
            for (int i = 0; i < n; ++i)
            {
                if (i > 0)
                {
                    Result<bool> result = LogMessage(logStreamId, "see reference:");
                    if (result.Error()) return result;
                }
                Result<bool> result = LogLocationText(logStreamId, locations[i]);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        private int number;
        private string moduleName;
        private string message;
        private System.Lex.FullSpan defined;
        private List<System.Lex.FullSpan> references;
    }

    public class CompileWarningCollection
    {
        static CompileWarningCollection() : instance(new CompileWarningCollection())
        {
        }
        private CompileWarningCollection()
        {
        }
        public static CompileWarningCollection& Instance()
        {
            return *instance;
        }
        public bool IsWarningDisabled(int warningNumber) const
        {
            return disabledWarnings.Find(warningNumber) != disabledWarnings.End();
        }
        public void DisableWarning(int warningNumber)
        {
            disabledWarnings.Insert(warningNumber);
        }
        public void ClearDisabledWarnings()
        {
            disabledWarnings.Clear();
        }
        public void AddWarning(Warning&& warning)
        {
            warnings.Add(warning);
        }
        public inline const List<Warning>& Warnings() const
        {
            return warnings;
        }
        private static UniquePtr<CompileWarningCollection> instance;
        private Set<int> disabledWarnings;
        private List<Warning> warnings;
    }

    public bool IsWarningDisabled(int warningNumber)
    {
        return CompileWarningCollection.Instance().IsWarningDisabled(warningNumber);
    }

    public void DisableWarning(int warningNumber)
    {
        CompileWarningCollection.Instance().DisableWarning(warningNumber);
    }

    public void ClearDisabledWarnings()
    {
        CompileWarningCollection.Instance().ClearDisabledWarnings();
    }

    public void AddWarning(Warning&& warning)
    {
        CompileWarningCollection.Instance().AddWarning(warning);
    }
}
