// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace optimizer
{
    [nodiscard]
    public Result<bool> OptimizeNot(intermediate.NotInstruction* notInst, intermediate.Context* context)
    {
        bool optimized = false;
        switch (notInst->Operand()->Kind())
        {
            case intermediate.ValueKind.boolValue:
            {
                intermediate.BoolValue* boolValue = cast<intermediate.BoolValue*>(notInst->Operand());
                intermediate.Value* value = context->GetData()->GetBoolValue(!boolValue->GetValue());
                Result<bool> result = intermediate.ReplaceInstructionWithValue(notInst, value);
                if (result.Error()) return result;
                optimized = true;
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeNeg(intermediate.NegInstruction* negInst, intermediate.Context* context)
    {
        bool optimized = false;
        switch (negInst->Operand()->Kind())
        {
            case intermediate.ValueKind.sbyteValue:
            {
                intermediate.SByteValue* sbyteValue = cast<intermediate.SByteValue*>(negInst->Operand());
                intermediate.Value* value = context->GetData()->MakeValue(-sbyteValue->GetValue());
                Result<bool> result = intermediate.ReplaceInstructionWithValue(negInst, value);
                if (result.Error()) return result;
                optimized = true;
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                intermediate.ShortValue* shortValue = cast<intermediate.ShortValue*>(negInst->Operand());
                intermediate.Value* value = context->GetData()->MakeValue(-shortValue->GetValue());
                Result<bool> result = intermediate.ReplaceInstructionWithValue(negInst, value);
                if (result.Error()) return result;
                optimized = true;
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                intermediate.IntValue* intValue = cast<intermediate.IntValue*>(negInst->Operand());
                intermediate.Value* value = context->GetData()->MakeValue(-intValue->GetValue());
                Result<bool> result = intermediate.ReplaceInstructionWithValue(negInst, value);
                if (result.Error()) return result;
                optimized = true;
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                intermediate.LongValue* longValue = cast<intermediate.LongValue*>(negInst->Operand());
                intermediate.Value* value = context->GetData()->MakeValue(-longValue->GetValue());
                Result<bool> result = intermediate.ReplaceInstructionWithValue(negInst, value);
                if (result.Error()) return result;
                optimized = true;
                break;
            }
            case intermediate.ValueKind.floatValue:
            {
                intermediate.FloatValue* floatValue = cast<intermediate.FloatValue*>(negInst->Operand());
                intermediate.Value* value = context->GetData()->MakeValue(-floatValue->GetValue());
                Result<bool> result = intermediate.ReplaceInstructionWithValue(negInst, value);
                if (result.Error()) return result;
                optimized = true;
                break;
            }
            case intermediate.ValueKind.doubleValue:
            {
                intermediate.DoubleValue* doubleValue = cast<intermediate.DoubleValue*>(negInst->Operand());
                intermediate.Value* value = context->GetData()->MakeValue(-doubleValue->GetValue());
                Result<bool> result = intermediate.ReplaceInstructionWithValue(negInst, value);
                if (result.Error()) return result;
                optimized = true;
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeSignExtend(intermediate.SignExtendInstruction* signExtendInst, intermediate.Context* context)
    {
        bool optimized = false;
        switch (signExtendInst->GetResult()->GetType()->Id())
        {
            case intermediate.shortTypeId:
            {
                switch (signExtendInst->Operand()->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        intermediate.SByteValue* sbyteValue = cast<intermediate.SByteValue*>(signExtendInst->Operand());
                        short val = sbyteValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(signExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.intTypeId:
            {
                switch (signExtendInst->Operand()->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        intermediate.SByteValue* sbyteValue = cast<intermediate.SByteValue*>(signExtendInst->Operand());
                        int val = sbyteValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(signExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                    case intermediate.ValueKind.shortValue:
                    {
                        intermediate.ShortValue* shortValue = cast<intermediate.ShortValue*>(signExtendInst->Operand());
                        int val = shortValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(signExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.longTypeId:
            {
                switch (signExtendInst->Operand()->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        intermediate.SByteValue* sbyteValue = cast<intermediate.SByteValue*>(signExtendInst->Operand());
                        long val = sbyteValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(signExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                    case intermediate.ValueKind.shortValue:
                    {
                        intermediate.ShortValue* shortValue = cast<intermediate.ShortValue*>(signExtendInst->Operand());
                        long val = shortValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(signExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                    case intermediate.ValueKind.intValue:
                    {
                        intermediate.IntValue* intValue = cast<intermediate.IntValue*>(signExtendInst->Operand());
                        long val = intValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(signExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeZeroExtend(intermediate.ZeroExtendInstruction* zeroExtendInst, intermediate.Context* context)
    {
        bool optimized = false;
        switch (zeroExtendInst->GetResult()->GetType()->Id())
        {
            case intermediate.ushortTypeId:
            {
                switch (zeroExtendInst->Operand()->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        intermediate.ByteValue* byteValue = cast<intermediate.ByteValue*>(zeroExtendInst->Operand());
                        ushort val = byteValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(zeroExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.uintTypeId:
            {
                switch (zeroExtendInst->Operand()->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        intermediate.ByteValue* byteValue = cast<intermediate.ByteValue*>(zeroExtendInst->Operand());
                        uint val = byteValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(zeroExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                    case intermediate.ValueKind.ushortValue:
                    {
                        intermediate.UShortValue* ushortValue = cast<intermediate.UShortValue*>(zeroExtendInst->Operand());
                        uint val = ushortValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(zeroExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ulongTypeId:
            {
                switch (zeroExtendInst->Operand()->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        intermediate.ByteValue* byteValue = cast<intermediate.ByteValue*>(zeroExtendInst->Operand());
                        ulong val = byteValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(zeroExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                    case intermediate.ValueKind.ushortValue:
                    {
                        intermediate.UShortValue* ushortValue = cast<intermediate.UShortValue*>(zeroExtendInst->Operand());
                        ulong val = ushortValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(zeroExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                    case intermediate.ValueKind.uintValue:
                    {
                        intermediate.UIntValue* uintValue = cast<intermediate.UIntValue*>(zeroExtendInst->Operand());
                        ulong val = uintValue->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(val);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(zeroExtendInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeAdd(intermediate.AddInstruction* addInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = addInst->Left();
        intermediate.Value* right = addInst->Right();
        if (left->IsZero())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, right);
            if (result.Error()) return result;
            optimized = true;
        }
        else if (right->IsZero())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, left);
            if (result.Error()) return result;
            optimized = true;
        }
        if (!optimized)
        {
            switch (left->Kind())
            {
                case intermediate.ValueKind.sbyteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.sbyteValue:
                        {
                            sbyte sum = cast<intermediate.SByteValue*>(left)->GetValue() + cast<intermediate.SByteValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.byteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.byteValue:
                        {
                            byte sum = cast<intermediate.ByteValue*>(left)->GetValue() + cast<intermediate.ByteValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.shortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.shortValue:
                        {
                            short sum = cast<intermediate.ShortValue*>(left)->GetValue() + cast<intermediate.ShortValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ushortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ushortValue:
                        {
                            ushort sum = cast<intermediate.UShortValue*>(left)->GetValue() + cast<intermediate.UShortValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.intValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.intValue:
                        {
                            int sum = cast<intermediate.IntValue*>(left)->GetValue() + cast<intermediate.IntValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.uintValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.uintValue:
                        {
                            uint sum = cast<intermediate.UIntValue*>(left)->GetValue() + cast<intermediate.UIntValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.longValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.longValue:
                        {
                            long sum = cast<intermediate.LongValue*>(left)->GetValue() + cast<intermediate.LongValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ulongValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ulongValue:
                        {
                            ulong sum = cast<intermediate.ULongValue*>(left)->GetValue() + cast<intermediate.ULongValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.floatValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.floatValue:
                        {
                            float sum = cast<intermediate.FloatValue*>(left)->GetValue() + cast<intermediate.FloatValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.doubleValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.doubleValue:
                        {
                            double sum = cast<intermediate.DoubleValue*>(left)->GetValue() + cast<intermediate.DoubleValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(sum);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(addInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeSub(intermediate.SubInstruction* subInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = subInst->Left();
        intermediate.Value* right = subInst->Right();
        if (right->IsZero())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, left);
            if (result.Error()) return result;
            optimized = true;
        }
        if (!optimized)
        {
            switch (left->Kind())
            {
                case intermediate.ValueKind.sbyteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.sbyteValue:
                        {
                            sbyte difference = cast<intermediate.SByteValue*>(left)->GetValue() - cast<intermediate.SByteValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.byteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.byteValue:
                        {
                            byte difference = cast<intermediate.ByteValue*>(left)->GetValue() - cast<intermediate.ByteValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.shortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.shortValue:
                        {
                            short difference = cast<intermediate.ShortValue*>(left)->GetValue() - cast<intermediate.ShortValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ushortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ushortValue:
                        {
                            ushort difference = cast<intermediate.UShortValue*>(left)->GetValue() - cast<intermediate.UShortValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.intValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.intValue:
                        {
                            int difference = cast<intermediate.IntValue*>(left)->GetValue() - cast<intermediate.IntValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.uintValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.uintValue:
                        {
                            uint difference = cast<intermediate.UIntValue*>(left)->GetValue() - cast<intermediate.UIntValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.longValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.longValue:
                        {
                            long difference = cast<intermediate.LongValue*>(left)->GetValue() - cast<intermediate.LongValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ulongValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ulongValue:
                        {
                            ulong difference = cast<intermediate.ULongValue*>(left)->GetValue() - cast<intermediate.ULongValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.floatValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.floatValue:
                        {
                            float difference = cast<intermediate.FloatValue*>(left)->GetValue() - cast<intermediate.FloatValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.doubleValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.doubleValue:
                        {
                            double difference = cast<intermediate.DoubleValue*>(left)->GetValue() - cast<intermediate.DoubleValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(difference);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(subInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeMul(intermediate.MulInstruction* mulInst, intermediate.Function* fn, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = mulInst->Left();
        intermediate.Value* right = mulInst->Right();
        if (left->IsZero())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, left);
            if (result.Error()) return result;
        }
        else if (right->IsZero())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, right);
            if (result.Error()) return result;
        }
        else if (left->IsOne())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, right);
            if (result.Error()) return result;
            optimized = true;
        }
        else if (right->IsOne())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, left);
            if (result.Error()) return result;
            optimized = true;
        }
        else if (left->IsTwo())
        {
            intermediate.AddInstruction* addInst = new intermediate.AddInstruction(
                System.Lex.Span(), fn->MakeNextRegValue(right->GetType()), right, right);
            Result<bool> result = intermediate.ReplaceInstructionWithInstruction(mulInst, addInst);
            if (result.Error()) return result;
            optimized = true;
        }
        else if (right->IsTwo())
        {
            intermediate.AddInstruction* addInst = new intermediate.AddInstruction(
                System.Lex.Span(), fn->MakeNextRegValue(left->GetType()), left, left);
            Result<bool> result = intermediate.ReplaceInstructionWithInstruction(mulInst, addInst);
            if (result.Error()) return result;
            optimized = true;
        }
        else
        {
            intermediate.Value* leftLog2 = left->Log2(context);
            if (leftLog2 != null)
            {
                intermediate.ShlInstruction* shlInst = new intermediate.ShlInstruction(
                    System.Lex.Span(), fn->MakeNextRegValue(left->GetType()), right, leftLog2);
                Result<bool> result = intermediate.ReplaceInstructionWithInstruction(mulInst, shlInst);
                if (result.Error()) return result;
                optimized = true;
            }
            else
            {
                intermediate.Value* rightLog2 = right->Log2(context);
                if (rightLog2 != null)
                {
                    intermediate.ShlInstruction* shlInst = new intermediate.ShlInstruction(
                        System.Lex.Span(), fn->MakeNextRegValue(right->GetType()), left, rightLog2);
                    Result<bool> result = intermediate.ReplaceInstructionWithInstruction(mulInst, shlInst);
                    if (result.Error()) return result;
                    optimized = true;
                }
            }
        }
        if (!optimized)
        {
            switch (left->Kind())
            {
                case intermediate.ValueKind.sbyteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.sbyteValue:
                        {
                            sbyte product = cast<intermediate.SByteValue*>(left)->GetValue() * cast<intermediate.SByteValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.byteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.byteValue:
                        {
                            byte product = cast<intermediate.ByteValue*>(left)->GetValue() * cast<intermediate.ByteValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.shortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.shortValue:
                        {
                            short product = cast<intermediate.ShortValue*>(left)->GetValue() * cast<intermediate.ShortValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ushortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ushortValue:
                        {
                            ushort product = cast<intermediate.UShortValue*>(left)->GetValue() * cast<intermediate.UShortValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.intValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.intValue:
                        {
                            int product = cast<intermediate.IntValue*>(left)->GetValue() * cast<intermediate.IntValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.uintValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.uintValue:
                        {
                            uint product = cast<intermediate.UIntValue*>(left)->GetValue() * cast<intermediate.UIntValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.longValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.longValue:
                        {
                            long product = cast<intermediate.LongValue*>(left)->GetValue() * cast<intermediate.LongValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ulongValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ulongValue:
                        {
                            ulong product = cast<intermediate.ULongValue*>(left)->GetValue() * cast<intermediate.ULongValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.floatValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.floatValue:
                        {
                            float product = cast<intermediate.FloatValue*>(left)->GetValue() * cast<intermediate.FloatValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.doubleValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.doubleValue:
                        {
                            double product = cast<intermediate.DoubleValue*>(left)->GetValue() * cast<intermediate.DoubleValue*>(right)->GetValue();
                            intermediate.Value* value = context->GetData()->MakeValue(product);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(mulInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeDiv(intermediate.DivInstruction* divInst, intermediate.Function* fn, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = divInst->Left();
        intermediate.Value* right = divInst->Right();
        if (right->IsOne())
        {
            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, left);
            if (result.Error()) return result;
            optimized = true;
        }
        else
        {
            intermediate.Value* rightLog2 = right->Log2(context);
            if (rightLog2 != null)
            {
                intermediate.ShrInstruction* shrInst = new intermediate.ShrInstruction(
                    System.Lex.Span(), fn->MakeNextRegValue(right->GetType()), left, rightLog2);
                Result<bool> result = intermediate.ReplaceInstructionWithInstruction(divInst, shrInst);
                if (result.Error()) return result;
                optimized = true;
            }
        }
        if (!optimized)
        {
            switch (left->Kind())
            {
                case intermediate.ValueKind.sbyteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.sbyteValue:
                        {
                            sbyte r = cast<intermediate.SByteValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            sbyte quotient = cast<intermediate.SByteValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.byteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.byteValue:
                        {
                            byte r = cast<intermediate.ByteValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            byte quotient = cast<intermediate.ByteValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.shortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.shortValue:
                        {
                            short r = cast<intermediate.ShortValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            short quotient = cast<intermediate.ShortValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ushortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ushortValue:
                        {
                            ushort r = cast<intermediate.UShortValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            ushort quotient = cast<intermediate.UShortValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.intValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.intValue:
                        {
                            int r = cast<intermediate.IntValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            int quotient = cast<intermediate.IntValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.uintValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.uintValue:
                        {
                            uint r = cast<intermediate.UIntValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            uint quotient = cast<intermediate.UIntValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.longValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.longValue:
                        {
                            long r = cast<intermediate.LongValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            long quotient = cast<intermediate.LongValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ulongValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ulongValue:
                        {
                            ulong r = cast<intermediate.ULongValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            ulong quotient = cast<intermediate.ULongValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.floatValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.floatValue:
                        {
                            float r = cast<intermediate.FloatValue*>(right)->GetValue();
                            if (r == 0.0f)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            float quotient = cast<intermediate.FloatValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.doubleValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.doubleValue:
                        {
                            double r = cast<intermediate.DoubleValue*>(right)->GetValue();
                            if (r == 0.0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            double quotient = cast<intermediate.DoubleValue*>(left)->GetValue() / r;
                            intermediate.Value* value = context->GetData()->MakeValue(quotient);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(divInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeMod(intermediate.ModInstruction* modInst, intermediate.Function* fn, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = modInst->Left();
        intermediate.Value* right = modInst->Right();
        intermediate.Value* rightPowerOfTwoMod = right->PowerOfTwoMod(context);
        if (rightPowerOfTwoMod != null)
        {
            intermediate.AndInstruction* andInst = new intermediate.AndInstruction(
                System.Lex.Span(), fn->MakeNextRegValue(left->GetType()), left, rightPowerOfTwoMod);
            Result<bool> result = intermediate.ReplaceInstructionWithInstruction(modInst, andInst);
            if (result.Error()) return result;
            optimized = true;
        }
        if (!optimized)
        {
            switch (left->Kind())
            {
                case intermediate.ValueKind.sbyteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.sbyteValue:
                        {
                            sbyte r = cast<intermediate.SByteValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            sbyte remainder = cast<intermediate.SByteValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.byteValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.byteValue:
                        {
                            byte r = cast<intermediate.ByteValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            byte remainder = cast<intermediate.ByteValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.shortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.shortValue:
                        {
                            short r = cast<intermediate.ShortValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            short remainder = cast<intermediate.ShortValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ushortValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ushortValue:
                        {
                            ushort r = cast<intermediate.UShortValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            ushort remainder = cast<intermediate.UShortValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.intValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.intValue:
                        {
                            int r = cast<intermediate.IntValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            int remainder = cast<intermediate.IntValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.uintValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.uintValue:
                        {
                            uint r = cast<intermediate.UIntValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            uint remainder = cast<intermediate.UIntValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.longValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.longValue:
                        {
                            long r = cast<intermediate.LongValue*>(right)->GetValue();
                            if (r == 0)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            long remainder = cast<intermediate.LongValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
                case intermediate.ValueKind.ulongValue:
                {
                    switch (right->Kind())
                    {
                        case intermediate.ValueKind.ulongValue:
                        {
                            ulong r = cast<intermediate.ULongValue*>(right)->GetValue();
                            if (r == 0u)
                            {
                                int errorId = intermediate.Error("division by zero", right->Span(), context);
                                return Result<bool>(ErrorId(errorId));
                            }
                            ulong remainder = cast<intermediate.ULongValue*>(left)->GetValue() % r;
                            intermediate.Value* value = context->GetData()->MakeValue(remainder);
                            Result<bool> result = intermediate.ReplaceInstructionWithValue(modInst, value);
                            if (result.Error()) return result;
                            optimized = true;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeAnd(intermediate.AndInstruction* andInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = andInst->Left();
        intermediate.Value* right = andInst->Right();
        switch (left->Kind())
        {
            case intermediate.ValueKind.sbyteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        sbyte andResult = cast<intermediate.SByteValue*>(left)->GetValue() & cast<intermediate.SByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.byteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        byte andResult = cast<intermediate.ByteValue*>(left)->GetValue() & cast<intermediate.ByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.shortValue:
                    {
                        short andResult = cast<intermediate.ShortValue*>(left)->GetValue() & cast<intermediate.ShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ushortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ushortValue:
                    {
                        ushort andResult = cast<intermediate.UShortValue*>(left)->GetValue() & cast<intermediate.UShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.intValue:
                    {
                        int andResult = cast<intermediate.IntValue*>(left)->GetValue() & cast<intermediate.IntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.uintValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.uintValue:
                    {
                        uint andResult = cast<intermediate.UIntValue*>(left)->GetValue() & cast<intermediate.UIntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.longValue:
                    {
                        long andResult = cast<intermediate.LongValue*>(left)->GetValue() & cast<intermediate.LongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ulongValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ulongValue:
                    {
                        ulong andResult = cast<intermediate.ULongValue*>(left)->GetValue() & cast<intermediate.ULongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(andResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(andInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeOr(intermediate.OrInstruction* orInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = orInst->Left();
        intermediate.Value* right = orInst->Right();
        switch (left->Kind())
        {
            case intermediate.ValueKind.sbyteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        sbyte orResult = cast<intermediate.SByteValue*>(left)->GetValue() | cast<intermediate.SByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.byteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        byte orResult = cast<intermediate.ByteValue*>(left)->GetValue() | cast<intermediate.ByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.shortValue:
                    {
                        short orResult = cast<intermediate.ShortValue*>(left)->GetValue() | cast<intermediate.ShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ushortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ushortValue:
                    {
                        ushort orResult = cast<intermediate.UShortValue*>(left)->GetValue() | cast<intermediate.UShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.intValue:
                    {
                        int orResult = cast<intermediate.IntValue*>(left)->GetValue() | cast<intermediate.IntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.uintValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.uintValue:
                    {
                        uint orResult = cast<intermediate.UIntValue*>(left)->GetValue() | cast<intermediate.UIntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.longValue:
                    {
                        long orResult = cast<intermediate.LongValue*>(left)->GetValue() | cast<intermediate.LongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ulongValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ulongValue:
                    {
                        ulong orResult = cast<intermediate.ULongValue*>(left)->GetValue() | cast<intermediate.ULongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(orResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(orInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeXor(intermediate.XorInstruction* xorInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = xorInst->Left();
        intermediate.Value* right = xorInst->Right();
        switch (left->Kind())
        {
            case intermediate.ValueKind.sbyteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        sbyte xorResult = cast<intermediate.SByteValue*>(left)->GetValue() ^ cast<intermediate.SByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.byteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        byte xorResult = cast<intermediate.ByteValue*>(left)->GetValue() ^ cast<intermediate.ByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.shortValue:
                    {
                        short xorResult = cast<intermediate.ShortValue*>(left)->GetValue() ^ cast<intermediate.ShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ushortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ushortValue:
                    {
                        ushort xorResult = cast<intermediate.UShortValue*>(left)->GetValue() ^ cast<intermediate.UShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.intValue:
                    {
                        int xorResult = cast<intermediate.IntValue*>(left)->GetValue() ^ cast<intermediate.IntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.uintValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.uintValue:
                    {
                        uint xorResult = cast<intermediate.UIntValue*>(left)->GetValue() ^ cast<intermediate.UIntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.longValue:
                    {
                        long xorResult = cast<intermediate.LongValue*>(left)->GetValue() ^ cast<intermediate.LongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ulongValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ulongValue:
                    {
                        ulong xorResult = cast<intermediate.ULongValue*>(left)->GetValue() ^ cast<intermediate.ULongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(xorResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(xorInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeShl(intermediate.ShlInstruction* shlInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = shlInst->Left();
        intermediate.Value* right = shlInst->Right();
        switch (left->Kind())
        {
            case intermediate.ValueKind.sbyteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        sbyte shlResult = cast<intermediate.SByteValue*>(left)->GetValue() << cast<intermediate.SByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.byteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        byte shlResult = cast<intermediate.ByteValue*>(left)->GetValue() << cast<intermediate.ByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.shortValue:
                    {
                        short shlResult = cast<intermediate.ShortValue*>(left)->GetValue() << cast<intermediate.ShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ushortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ushortValue:
                    {
                        ushort shlResult = cast<intermediate.UShortValue*>(left)->GetValue() << cast<intermediate.UShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.intValue:
                    {
                        int shlResult = cast<intermediate.IntValue*>(left)->GetValue() << cast<intermediate.IntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.uintValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.uintValue:
                    {
                        uint shlResult = cast<intermediate.UIntValue*>(left)->GetValue() << cast<intermediate.UIntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.longValue:
                    {
                        long shlResult = cast<intermediate.LongValue*>(left)->GetValue() << cast<intermediate.LongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ulongValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ulongValue:
                    {
                        ulong shlResult = cast<intermediate.ULongValue*>(left)->GetValue() << cast<intermediate.ULongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shlResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shlInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeShr(intermediate.ShrInstruction* shrInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = shrInst->Left();
        intermediate.Value* right = shrInst->Right();
        switch (left->Kind())
        {
            case intermediate.ValueKind.sbyteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        sbyte shrResult = cast<intermediate.SByteValue*>(left)->GetValue() >> cast<intermediate.SByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.byteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        byte shrResult = cast<intermediate.ByteValue*>(left)->GetValue() >> cast<intermediate.ByteValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.shortValue:
                    {
                        short shrResult = cast<intermediate.ShortValue*>(left)->GetValue() >> cast<intermediate.ShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ushortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ushortValue:
                    {
                        ushort shrResult = cast<intermediate.UShortValue*>(left)->GetValue() >> cast<intermediate.UShortValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.intValue:
                    {
                        int shrResult = cast<intermediate.IntValue*>(left)->GetValue() >> cast<intermediate.IntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.uintValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.uintValue:
                    {
                        uint shrResult = cast<intermediate.UIntValue*>(left)->GetValue() >> cast<intermediate.UIntValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.longValue:
                    {
                        long shrResult = cast<intermediate.LongValue*>(left)->GetValue() >> cast<intermediate.LongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ulongValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ulongValue:
                    {
                        ulong shrResult = cast<intermediate.ULongValue*>(left)->GetValue() >> cast<intermediate.ULongValue*>(right)->GetValue();
                        intermediate.Value* value = context->GetData()->MakeValue(shrResult);
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(shrInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeEqual(intermediate.EqualInstruction* equalInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = equalInst->Left();
        intermediate.Value* right = equalInst->Right();
        switch (left->Kind())
        {
            case intermediate.ValueKind.boolValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.boolValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.BoolValue*>(left)->GetValue() == cast<intermediate.BoolValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.sbyteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.SByteValue*>(left)->GetValue() == cast<intermediate.SByteValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.byteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.ByteValue*>(left)->GetValue() == cast<intermediate.ByteValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.shortValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.ShortValue*>(left)->GetValue() == cast<intermediate.ShortValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ushortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ushortValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.UShortValue*>(left)->GetValue() == cast<intermediate.UShortValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.intValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.IntValue*>(left)->GetValue() == cast<intermediate.IntValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.uintValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.uintValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.UIntValue*>(left)->GetValue() == cast<intermediate.UIntValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.longValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.LongValue*>(left)->GetValue() == cast<intermediate.LongValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ulongValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ulongValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.ULongValue*>(left)->GetValue() == cast<intermediate.ULongValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.floatValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.floatValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.FloatValue*>(left)->GetValue() == cast<intermediate.FloatValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.doubleValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.doubleValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.DoubleValue*>(left)->GetValue() == cast<intermediate.DoubleValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(equalInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeLess(intermediate.LessInstruction* lessInst, intermediate.Context* context)
    {
        bool optimized = false;
        intermediate.Value* left = lessInst->Left();
        intermediate.Value* right = lessInst->Right();
        switch (left->Kind())
        {
            case intermediate.ValueKind.sbyteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.sbyteValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.SByteValue*>(left)->GetValue() < cast<intermediate.SByteValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.byteValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.byteValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.ByteValue*>(left)->GetValue() < cast<intermediate.ByteValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.shortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.shortValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.ShortValue*>(left)->GetValue() < cast<intermediate.ShortValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ushortValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ushortValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.UShortValue*>(left)->GetValue() < cast<intermediate.UShortValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.intValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.intValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.IntValue*>(left)->GetValue() < cast<intermediate.IntValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.uintValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.uintValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.UIntValue*>(left)->GetValue() < cast<intermediate.UIntValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.longValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.longValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.LongValue*>(left)->GetValue() < cast<intermediate.LongValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.ulongValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.ulongValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.ULongValue*>(left)->GetValue() < cast<intermediate.ULongValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.floatValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.floatValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.FloatValue*>(left)->GetValue() < cast<intermediate.FloatValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
            case intermediate.ValueKind.doubleValue:
            {
                switch (right->Kind())
                {
                    case intermediate.ValueKind.doubleValue:
                    {
                        intermediate.Value* value = context->GetData()->GetBoolValue(
                            cast<intermediate.DoubleValue*>(left)->GetValue() < cast<intermediate.DoubleValue*>(right)->GetValue());
                        Result<bool> result = intermediate.ReplaceInstructionWithValue(lessInst, value);
                        if (result.Error()) return result;
                        optimized = true;
                        break;
                    }
                }
                break;
            }
        }
        return Result<bool>(optimized);
    }

    [nodiscard]
    public Result<bool> OptimizeArithmetic(intermediate.Function* fn, intermediate.Context* context)
    {
        bool optimized = true;
        int count = 0;
        int maxArithmeticOptimizationCount = context->MaxArithmeticOptimizationCount();
        while (optimized && count < maxArithmeticOptimizationCount)
        {
            optimized = false;
            intermediate.BasicBlock* bb = fn->FirstBasicBlock();
            while (bb != null)
            {
                intermediate.Instruction* inst = bb->FirstInstruction();
                while (inst != null)
                {
                    intermediate.Instruction* next = inst->Next();
                    switch (inst->GetOpCode())
                    {
                        case intermediate.OpCode.not_:
                        {
                            intermediate.NotInstruction* notInst = cast<intermediate.NotInstruction*>(inst);
                            Result<bool> result = OptimizeNot(notInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.neg:
                        {
                            intermediate.NegInstruction* negInst = cast<intermediate.NegInstruction*>(inst);
                            Result<bool> result = OptimizeNeg(negInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.signextend:
                        {
                            intermediate.SignExtendInstruction* signExtendInst = cast<intermediate.SignExtendInstruction*>(inst);
                            Result<bool> result = OptimizeSignExtend(signExtendInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.zeroextend:
                        {
                            intermediate.ZeroExtendInstruction* zeroExtendInst = cast<intermediate.ZeroExtendInstruction*>(inst);
                            Result<bool> result = OptimizeZeroExtend(zeroExtendInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.add:
                        {
                            intermediate.AddInstruction* addInst = cast<intermediate.AddInstruction*>(inst);
                            Result<bool> result = OptimizeAdd(addInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.sub:
                        {
                            intermediate.SubInstruction* subInst = cast<intermediate.SubInstruction*>(inst);
                            Result<bool> result = OptimizeSub(subInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.mul:
                        {
                            intermediate.MulInstruction* mulInst = cast<intermediate.MulInstruction*>(inst);
                            Result<bool> result = OptimizeMul(mulInst, fn, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.div_:
                        {
                            intermediate.DivInstruction* divInst = cast<intermediate.DivInstruction*>(inst);
                            Result<bool> result = OptimizeDiv(divInst, fn, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.mod:
                        {
                            intermediate.ModInstruction* modInst = cast<intermediate.ModInstruction*>(inst);
                            Result<bool> result = OptimizeMod(modInst, fn, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.and_:
                        {
                            intermediate.AndInstruction* andInst = cast<intermediate.AndInstruction*>(inst);
                            Result<bool> result = OptimizeAnd(andInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.or_:
                        {
                            intermediate.OrInstruction* orInst = cast<intermediate.OrInstruction*>(inst);
                            Result<bool> result = OptimizeOr(orInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.xor_:
                        {
                            intermediate.XorInstruction* xorInst = cast<intermediate.XorInstruction*>(inst);
                            Result<bool> result = OptimizeXor(xorInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.shl:
                        {
                            intermediate.ShlInstruction* shlInst = cast<intermediate.ShlInstruction*>(inst);
                            Result<bool> result = OptimizeShl(shlInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.shr:
                        {
                            intermediate.ShrInstruction* shrInst = cast<intermediate.ShrInstruction*>(inst);
                            Result<bool> result = OptimizeShr(shrInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.equal:
                        {
                            intermediate.EqualInstruction* equalInst = cast<intermediate.EqualInstruction*>(inst);
                            Result<bool> result = OptimizeEqual(equalInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                        case intermediate.OpCode.less:
                        {
                            intermediate.LessInstruction* lessInst = cast<intermediate.LessInstruction*>(inst);
                            Result<bool> result = OptimizeLess(lessInst, context);
                            if (result.Error()) return result;
                            if (result.Value())
                            {
                                optimized = true;
                            }
                            break;
                        }
                    }
                    inst = next;
                }
                bb = bb->Next();
            }
            if (optimized)
            {
                ++count;
                Result<bool> result = fn->SetNumbers();
                if (result.Error()) return result;
            }
        }
        return Result<bool>(true);
    }
}

