// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace optimizer
{
    public enum Optimizations : ulong
    {
        none = 0u,
        xor = 1u << 0u,
        jump = 1u << 1u,
        removeNops = 1u << 2u,
        jumpTableSwitch = 1u << 3u,
        arithmetic = 1u << 4u,
        identity = 1u << 5u,
        deadCodeElimination = 1u << 6u,
        moveLocalsToEntryBlock = 1u << 7u,
        inln = 1u << 8u,
        o0 = none,
        o1 = xor | jump | removeNops | jumpTableSwitch | arithmetic | identity | deadCodeElimination | moveLocalsToEntryBlock,
        o2 = xor | jump | removeNops | jumpTableSwitch | arithmetic | identity | deadCodeElimination | moveLocalsToEntryBlock | inln,
        o3 = xor | jump | removeNops | jumpTableSwitch | arithmetic | identity | deadCodeElimination | moveLocalsToEntryBlock | inln
    }

    internal Optimizations currentOptimizations = Optimizations.o2;

    public inline void SetOptimizations(Optimizations optimizations)
    {
        currentOptimizations = optimizations;
    }

    public inline bool HasOptimization(Optimizations optimization)
    {
        return (currentOptimizations & optimization) != Optimizations.none;
    }

    public class Optimizer
    {
        static Optimizer() : instance(new Optimizer())
        {
        }
        public static Optimizer& Instance()
        {
            return *instance;
        }
        private Optimizer()
        {
            profileMap["0"] = Optimizations.o0;
            profileMap["1"] = Optimizations.o1;
            profileMap["2"] = Optimizations.o2;
            profileMap["3"] = Optimizations.o3;
            currentProfile = "2";
        }
        public inline const string& CurrentProfile() const
        {
            return currentProfile;
        }
        [nodiscard]
        public Result<bool> SetCurrentProfile(const string& profile)
        {
            auto it = profileMap.Find(profile);
            if (it != profileMap.End())
            {
                currentProfile = profile;
                SetOptimizations(it->second);
            }
            else
            {
                int errorId = AllocateError("optimization profile '" + profile + "' not found");
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        private static UniquePtr<Optimizer> instance;
        private Map<string, Optimizations> profileMap;
        private string currentProfile;
    }

    [nodiscard]
    public Result<bool> Optimize(intermediate.Context* intermediateContext)
    {
        intermediate.Code* code = intermediateContext->GetCode();
        intermediate.Function* fn = code->FirstFunction();
        while (fn != null)
        {
            intermediate.Function* next = fn->Next();
            if (fn->IsDefined())
            {
                intermediate.CloneContext cloneContext;
                Result<intermediate.Value*> cloneResult = fn->Clone(cloneContext);
                if (cloneResult.Error())
                {
                    string errorMessage = cloneResult.GetErrorMessage();
                    Result<bool> result = LogMessage(-1, "error cloning function '" + fn->Name() + "': " + errorMessage);
                    if (result.Error()) return result;
                    intermediate.Break();
                }
                else
                {
                    UniquePtr<intermediate.Function> clonedFn(cast<intermediate.Function*>(cloneResult.Value()));
                    bool succeeded = true;
                    if (HasOptimization(Optimizations.deadCodeElimination))
                    {
                        Result<bool> result = DeadCodeElimination(fn);
                        if (result.Error())
                        {
                            string errorMessage = result.GetErrorMessage();
                            result = LogMessage(-1, "error eliminating dead code for function '" + fn->Name() + "': " + errorMessage);
                            if (result.Error()) return result;
                            succeeded = false;
                        }
                    }
                    if (succeeded)
                    {
                        if (HasOptimization(Optimizations.identity))
                        {
                            Result<bool> result = OptimizeIdentity(fn, intermediateContext);
                            if (result.Error())
                            {
                                string errorMessage = result.GetErrorMessage();
                                result = LogMessage(-1, "error optimizing identity calls for function '" + fn->Name() + "': " + errorMessage);
                                if (result.Error()) return result;
                                succeeded = false;
                            }
                        }
                    }
                    if (succeeded)
                    {
                        if (HasOptimization(Optimizations.inln))
                        {
                            Result<bool> result = InlineExpand(fn, intermediateContext);
                            if (result.Error())
                            {
                                string errorMessage = result.GetErrorMessage();
                                result = LogMessage(-1, "error inlining function '" + fn->Name() + "': " + errorMessage);
                                if (result.Error()) return result;
                                succeeded = false;
                            }
                        }
                    }
                    if (succeeded)
                    {
                        if (HasOptimization(Optimizations.moveLocalsToEntryBlock))
                        {
                            MoveLocalsToEntryBlock(fn);
                        }
                    }
                    if (succeeded)
                    {
                        if (HasOptimization(Optimizations.arithmetic))
                        {
                            Result<bool> result = OptimizeArithmetic(fn, intermediateContext);
                            if (result.Error())
                            {
                                string errorMessage = result.GetErrorMessage();
                                result = LogMessage(-1, "error optimizing arithmetic for function '" + fn->Name() + "': " + errorMessage);
                                if (result.Error()) return result;
                                succeeded = false;
                            }
                        }
                    }
                    if (succeeded)
                    {
                        if (HasOptimization(Optimizations.jump))
                        {
                            Result<bool> result = OptimizeJumps(fn);
                            if (result.Error())
                            {
                                string errorMessage = result.GetErrorMessage();
                                result = LogMessage(-1, "error optimizing jumps for function '" + fn->Name() + "': " + errorMessage);
                                if (result.Error()) return result;
                                succeeded = false;
                            }
                        }
                    }
                    if (succeeded)
                    {
                        if (HasOptimization(Optimizations.deadCodeElimination))
                        {
                            Result<bool> result = DeadCodeElimination(fn);
                            if (result.Error())
                            {
                                string errorMessage = result.GetErrorMessage();
                                result = LogMessage(-1, "error eliminating dead code for function '" + fn->Name() + "': " + errorMessage);
                                if (result.Error()) return result;
                                succeeded = false;
                            }
                        }
                    }
                    if (!succeeded)
                    {
                        code->Functions()->InsertBefore(clonedFn.Release(), fn);
                        code->Functions()->RemoveChild(fn);
                        intermediate.Break();
                    }
                }
            }
            fn = next;
        }
        return Result<bool>(true);
    }
}

