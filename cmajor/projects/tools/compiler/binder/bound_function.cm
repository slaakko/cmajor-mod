// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Threading;
using symbols;
using cm.ast;

namespace binder
{
    public class BoundFunction : BoundNode
    {
        public BoundFunction(const System.Lex.Span& span_, FunctionSymbol* functionSymbol_, const Uuid& moduleId_, int fileIndex_) :
            base(span_, BoundNodeKind.boundFunction), functionSymbol(functionSymbol_), moduleId(moduleId_), fileIndex(fileIndex_),
            hasGotos(false)
        {
        }
        public override void Accept(BoundNodeVisitor& visitor)
        {
            visitor.Visit(*this);
        }
        public inline FunctionSymbol* GetFunctionSymbol() const
        {
            #assert(this != null);
            return functionSymbol;
        }
        public void SetBody(UniquePtr<BoundCompoundStatement>&& body_)
        {
            body = body_;
        }
        public inline BoundCompoundStatement* Body() const
        {
            return body.Get();
        }
        public void AddLabeledStatement(BoundStatement* labeledStatement)
        {
            labeledStatements.Add(labeledStatement);
        }
        public inline const List<BoundStatement*>& LabeledStatements() const
        {
            return labeledStatements;
        }
        [nodiscard]
        public Result<bool> AddTemporaryDestructorCall(UniquePtr<BoundFunctionCall>&& destructorCall, BoundFunction* currentFunction,
            ContainerScope* currentContainerScope, Node* node, SymbolsContext& context)
        {
            FunctionSymbol* functionSymbol = destructorCall->GetFunctionSymbol();
            if (functionSymbol->IsDestructorSymbol())
            {
                DestructorSymbol* destructorSymbol = cast<DestructorSymbol*>(functionSymbol);
                if (destructorSymbol->IsGenerated() || (destructorSymbol->IsTemplateSpecialization() && !destructorSymbol->Parent()->SpecializationHasFullInstantiation()))
                {
                    if (destructorSymbol->Parent()->IsClassTypeSymbol())
                    {
                        ClassTypeSymbol* classType = cast<ClassTypeSymbol*>(destructorSymbol->Parent());
                        if (destructorSymbol->IsGenerated() && !compileUnit->IsGeneratedDestructorInstantiated(destructorSymbol) || destructorSymbol->IsTemplateSpecialization())
                        {
                            if (destructorSymbol->IsGenerated())
                            {
                                compileUnit->SetGeneratedDestructorInstantiated(destructorSymbol);
                            }
                            else if (destructorSymbol->IsTemplateSpecialization())
                            {
                                if (destructorSymbol->Parent()->IsClassTemplateSpecializationSymbol())
                                {
                                    ClassTemplateSpecializationSymbol* specialization = cast<ClassTemplateSpecializationSymbol*>(destructorSymbol->Parent());
                                    if (!specialization->IsBound())
                                    {
                                        Result<bool> result = compileUnit->GetClassTemplateRepository()->BindClassTemplateSpecialization(specialization,
                                            currentContainerScope, node);
                                        if (result.Error()) return result;
                                    }
                                    Result<FunctionSymbol*> instanceResult = compileUnit->GetClassTemplateRepository()->Instantiate(
                                        destructorSymbol, currentContainerScope, currentFunction, node);
                                    if (instanceResult.Error())
                                    {
                                        LockGuard<RecursiveMutex> lock(compileUnit->GetModule()->Lock());
                                        Result<ClassTemplateSpecializationSymbol*> copyResult =
                                            compileUnit->GetSymbolTable()->CopyClassTemplateSpecialization(specialization, context);
                                        if (copyResult.Error()) return Result<bool>(ErrorId(copyResult.GetErrorId()));
                                        ClassTemplateSpecializationSymbol* copy = copyResult.Value();
                                        Result<bool> bindResult = compileUnit->GetClassTemplateRepository()->BindClassTemplateSpecialization(
                                            copy, compileUnit->GetSymbolTable()->GlobalNs().GetContainerScope(), node);
                                        if (bindResult.Error()) return Result<bool>(ErrorId(bindResult.GetErrorId()));
                                        int index = destructorSymbol->Index();
                                        FunctionSymbol* fn = copy->GetFunctionByIndex(index);
                                        if (fn == null)
                                        {
                                            Result<string> fullNameResult = ToUtf8(copy->FullName());
                                            if (fullNameResult.Error()) return Result<bool>(ErrorId(fullNameResult.GetErrorId()));
                                            string fullName = Rvalue(fullNameResult.Value());
                                            int errorId = MakeError("function by index " + ToString(index) + " not found in class template specialization '" + fullName + "'",
                                                node->GetFullSpan());
                                            return Result<bool>(ErrorId(errorId));
                                        }
                                        #assert(fn->IsDestructorSymbol());
                                        destructorSymbol = cast<DestructorSymbol*>(fn);
                                        instanceResult = compileUnit->GetClassTemplateRepository()->Instantiate(destructorSymbol, currentContainerScope, currentFunction, node);
                                    }
                                    if (instanceResult.Error())
                                    {
                                        return Result<bool>(ErrorId(instanceResult.GetErrorId()));
                                    }
                                    else
                                    {
                                        FunctionSymbol* instance = instanceResult.Value();
                                        destructorCall->SetFunctionSymbol(instance);
                                        return Result<bool>(true);
                                    }
                                }
                            }
                            Result<FunctionSymbol*> copyResult = destructorSymbol->Copy();
                            if (copyResult.Error()) return Result<bool>(ErrorId(copyResult.GetErrorId()));
                            DestructorSymbol* copy = cast<DestructorSymbol*>(copyResult.Value());
                            compileUnit->GetSymbolTable()->AddFunctionSymbol(UniquePtr<FunctionSymbol>(copy));
                            SourceFileNode* sourceFile = compileUnit->SourceFile();
                            Result<string> sourceFileIdResult = sourceFile->Id();
                            if (sourceFileIdResult.Error())
                            {
                                return Result<bool>(ErrorId(sourceFileIdResult.GetErrorId()));
                            }
                            string sourceFileId = Rvalue(sourceFileIdResult.Value());
                            copy->SetSourceFileId(sourceFileId);
                            Result<bool> result = copy->ComputeMangledName();
                            if (result.Error()) return result;
                            destructorSymbol->SetInstantiatedName(copy->MangledName(), context);
                            destructorSymbol = copy;
                            destructorCall->SetFunctionSymbol(destructorSymbol);
                            if (destructorSymbol->IsGenerated())
                            {
                                UniquePtr<BoundClass> boundClass(new BoundClass(classType->Span(), classType, classType->ModuleId(), classType->FileIndex()));
                                result = GenerateDestructorImplementation(boundClass.Get(), destructorSymbol, compileUnit, currentContainerScope, currentFunction, node);
                                if (result.Error()) return result;
                                compileUnit->AddBoundNode(UniquePtr<BoundNode>(boundClass.Release()));
                            }
                        }
                    }
                }
            }
            temporaryDestructorCalls.Add(destructorCall);
            return Result<bool>(true);
        }
        public inline bool HasTemporaryDestructorCalls() const
        {
            return !temporaryDestructorCalls.IsEmpty();
        }
        public List<UniquePtr<BoundFunctionCall>> GetTemporaryDestructorCalls()
        {
            return Rvalue(temporaryDestructorCalls);
        }
        public void ClearTemporaryDestructorCalls()
        {
            temporaryDestructorCalls.Clear();
        }
        [nodiscard]
        public override Result<bool> Load(Emitter& emitter, OperationFlags flags)
        {
            int errorId = MakeError("cannot load from function", functionSymbol->FullSpan(), FullSpan());
            return Result<bool>(ErrorId(errorId));
        }
        [nodiscard]
        public override Result<bool> Store(Emitter& emitter, OperationFlags flags)
        {
            int errorId = MakeError("cannot store to function", functionSymbol->FullSpan(), FullSpan());
            return Result<bool>(ErrorId(errorId));
        }
        public override const Uuid& ModuleId() const
        {
            return moduleId;
        }
        public override int FileIndex() const
        {
            return fileIndex;
        }
        public inline bool HasGotos() const
        {
            return hasGotos;
        }
        public inline void SetHasGotos()
        {
            hasGotos = true;
        }
        public inline Node* GetNode() const
        {
            return node;
        }
        public inline void SetNode(Node* node_)
        {
            node = node_;
        }
        public inline BoundCompileUnit* GetBoundCompileUnit() const
        {
            return compileUnit;
        }
        public inline void SetBoundCompileUnit(BoundCompileUnit* compileUnit_)
        {
            compileUnit = compileUnit_;
        }
        public void SetLineCode(UniquePtr<BoundStatement>&& lineCode_)
        {
            lineCode = lineCode_;
        }
        public inline BoundStatement* GetLineCode() const
        {
            return lineCode.Get();
        }
        public void SetEnterCode(List<UniquePtr<BoundStatement>>&& enterCode_)
        {
            enterCode = enterCode_;
        }
        public inline const List<UniquePtr<BoundStatement>>& EnterCode() const
        {
            return enterCode;
        }
        private FunctionSymbol* functionSymbol;
        private UniquePtr<BoundCompoundStatement> body;
        private Uuid moduleId;
        private BoundCompileUnit* compileUnit;
        private int fileIndex;
        private bool hasGotos;
        private List<UniquePtr<BoundFunctionCall>> temporaryDestructorCalls;
        private List<BoundStatement*> labeledStatements;
        private Node* node;
        private UniquePtr<BoundStatement> lineCode;
        private List<UniquePtr<BoundStatement>> enterCode;
    }
}

