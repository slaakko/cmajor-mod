// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace intermediate
{
    internal void Break()
    {
    }

    public enum Locations
    {
        none = 0, reg = 1 << 0, frame = 1 << 1
    }

    public class FrameLocation
    {
        public FrameLocation() : reg(assembly.RegisterGroupKind.rbp), index(-1), offset(0), size(0), macro(null)
        {
        }
        public FrameLocation(assembly.RegisterGroupKind reg_, int index_, long offset_, long size_) : reg(reg_), index(index_), offset(offset_), size(size_), macro(null)
        {
        }
        public inline bool IsValid() const
        {
            return index != -1;
        }
        public inline assembly.RegisterGroupKind Reg() const
        {
            return reg;
        }
        public inline int Index() const
        {
            return index;
        }
        public inline long Offset() const
        {
            return offset;
        }
        public inline long Size() const
        {
            return size;
        }
        public inline assembly.Macro* GetMacro() const
        {
            return macro;
        }
        public inline void SetMacro(assembly.Macro* macro_)
        {
            macro = macro_;
        }
        public void Dump()
        {
            Console.Out() << "index=" << index << ", offset=" << offset << ", size=" << size << endl();
        }
        private assembly.RegisterGroupKind reg;
        private int index;
        private long offset;
        private long size;
        private assembly.Macro* macro;
    }

    public class ArgLocation
    {
        public ArgLocation(int index_, long offset_, long size_) : reg(assembly.RegisterGroupKind.rsp), index(index_), offset(offset_), size(size_)
        {
        }
        public inline assembly.RegisterGroupKind Reg() const
        {
            return reg;
        }
        public inline int Index() const
        {
            return index;
        }
        public inline long Offset() const
        {
            return offset;
        }
        public inline long Size() const
        {
            return size;
        }
        private assembly.RegisterGroupKind reg;
        private int index;
        private long offset;
        private long size;
    }

    public class Frame
    {
        public Frame() : calleeParamAreaSize(32), numUsedXMMRegs(0), rbxPushed(false)
        {
        }
        public FrameLocation GetParamLocation(long size, assembly.AssemblyContext* assemblyContext)
        {
            if (paramLocations.IsEmpty())
            {
                FrameLocation paramLocation(assembly.RegisterGroupKind.rsp, 0, 8, 8);
                paramLocations.Add(paramLocation);
                return paramLocation;
            }
            else if (paramLocations.Count() < 4)
            {
                const FrameLocation& last = paramLocations.Back();
                FrameLocation paramLocation(assembly.RegisterGroupKind.rsp, cast<int>(paramLocations.Count()), last.Offset() + last.Size(), 8);
                paramLocations.Add(paramLocation);
                return paramLocation;
            }
            else
            {
                const FrameLocation& last = paramLocations.Back();
                assembly.Macro* macro = assemblyContext->MakeMacro("param" + ToString(paramLocations.Count()) + "$");
                FrameLocation paramLocation(assembly.RegisterGroupKind.rbp, cast<int>(paramLocations.Count()), last.Offset() + last.Size(), size);
                paramLocation.SetMacro(macro);
                paramLocations.Add(paramLocation);
                return paramLocation;
            }
        }
        public FrameLocation GetFrameLocation(long size)
        {
            if (frameLocations.IsEmpty())
            {
                FrameLocation frameLocation(assembly.RegisterGroupKind.rbp, 0, 8, size);
                frameLocations.Add(frameLocation);
                return frameLocation;
            }
            else
            {
                const FrameLocation& last = frameLocations.Back();
                FrameLocation frameLocation(assembly.RegisterGroupKind.rbp, cast<int>(frameLocations.Count()), last.Offset() + last.Size(), size);
                frameLocations.Add(frameLocation);
                return frameLocation;
            }
        }
        public inline void SetRbxPushed()
        {
            rbxPushed = true;
        }
        public inline bool RbxPushed() const
        {
            return rbxPushed;
        }
        public long Size() const
        {
            if (frameLocations.IsEmpty())
            {
                return 32 + numUsedXMMRegs * 16;
            }
            else
            {
                const FrameLocation& last = frameLocations.Back();
                return Align(calleeParamAreaSize + last.Offset() + last.Size() + numUsedXMMRegs * 16, 16);
            }
        }
        public inline long CalleeParamAreaSize() const
        {
            return calleeParamAreaSize;
        }
        public inline long XMMSaveRegSize() const
        {
            return 16 * numUsedXMMRegs;
        }
        public inline void SetCalleeParamAreaSize(long calleeParamAreaSize_)
        {
            calleeParamAreaSize = calleeParamAreaSize_;
        }
        [nodiscard]
        public Result<bool> SetMacroValues(assembly.AssemblyContext* assemblyContext)
        {
            int retVal = 1;
            int pushRbp = 1;
            int numUsedLocalRegs = cast<int>(assemblyContext->GetRegisterPool()->UsedLocalRegs().Count());
            int numUsedNonvolatileRegs = cast<int>(assemblyContext->GetRegisterPool()->UsedNonvolatileRegs().Count());

            long paramOffset = 8 * (retVal + pushRbp + numUsedLocalRegs + numUsedNonvolatileRegs);
            if (rbxPushed)
            {
                paramOffset = paramOffset + 8;
            }
            long frameSize = Size();

            for (auto& paramLocation : paramLocations)
            {
                assembly.Macro* macro = paramLocation.GetMacro();
                if (macro != null)
                {
                    long value = (paramLocation.Index() - 4) * 8 + paramOffset + frameSize;
                    value = value - XMMSaveRegSize();
                    value = value - (calleeParamAreaSize - 4 * 8);
                    Result<assembly.IntegerLiteral*> literalResult = assemblyContext->MakeIntegerLiteral(value, 8);
                    if (literalResult.Error()) return Result<bool>(ErrorId(literalResult.GetErrorId()));
                    assembly.IntegerLiteral* literal = literalResult.Value();
                    macro->SetValue(literal);
                }
            }
            return Result<bool>(true);
        }
        public void Dump()
        {
            int n = cast<int>(frameLocations.Count());
            for (int i = 0; i < n; ++i)
            {
                const FrameLocation& loc = frameLocations[i];
                loc.Dump();
            }
        }
        public inline void SetNumUsedXMMRegs(int numUsedXMMRegs_)
        {
            numUsedXMMRegs = numUsedXMMRegs_;
        }
        public inline int GetNumUsedXMMRegs() const
        {
            return numUsedXMMRegs;
        }
        private List<FrameLocation> paramLocations;
        private List<FrameLocation> frameLocations;
        private long calleeParamAreaSize;
        private int numUsedXMMRegs;
        private bool rbxPushed;
    }

    public class CallFrame
    {
        public CallFrame()
        {
        }
        public void AllocateArgLocation(long size)
        {
            if (argLocations.IsEmpty())
            {
                ArgLocation argLocation(0, 0, 8);
                argLocations.Add(argLocation);
            }
            else
            {
                const ArgLocation& last = argLocations.Back();
                ArgLocation argLocation(cast<int>(argLocations.Count()), last.Offset() + last.Size(), 8);
                argLocations.Add(argLocation);
            }
        }
        public ArgLocation GetArgLocation(int index) const
        {
            return argLocations[index];
        }
        private List<ArgLocation> argLocations;
    }
}
