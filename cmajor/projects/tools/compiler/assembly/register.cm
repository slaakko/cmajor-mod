// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace assembly
{
    public enum RegisterKind
    {
        al, bl, cl, dl, sil, dil, bpl, spl, r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b,
        ax, bx, cx, dx, si, di, bp, sp, r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w,
        eax, ebx, ecx, edx, esi, edi, ebp, esp, r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d,
        rax, rbx, rcx, rdx, rsi, rdi, rbp, rsp, r8, r9, r10, r11, r12, r13, r14, r15,
        ah, bh, ch, dh,
        xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,
        max
    }

    public enum RegisterGroupKind
    {
        rax, rbx, rcx, rdx, rsi, rdi, rbp, rsp, r8, r9, r10, r11, r12, r13, r14, r15,
        xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,
        max
    }

    public string RegisterGroupName(RegisterGroupKind kind)
    {
        switch (kind)
        {
            case RegisterGroupKind.rax: return "rax";
            case RegisterGroupKind.rbx: return "rbx";
            case RegisterGroupKind.rcx: return "rcx";
            case RegisterGroupKind.rdx: return "rdx";
            case RegisterGroupKind.rsi: return "rsi";
            case RegisterGroupKind.rdi: return "rdi";
            case RegisterGroupKind.rbp: return "rbp";
            case RegisterGroupKind.rsp: return "rsp";
            case RegisterGroupKind.r8: return "r8";
            case RegisterGroupKind.r9: return "r9";
            case RegisterGroupKind.r10: return "r10";
            case RegisterGroupKind.r11: return "r11";
            case RegisterGroupKind.r12: return "r12";
            case RegisterGroupKind.r13: return "r13";
            case RegisterGroupKind.r14: return "r14";
            case RegisterGroupKind.r15: return "r15";
            case RegisterGroupKind.xmm0: return "xmm0";
            case RegisterGroupKind.xmm1: return "xmm1";
            case RegisterGroupKind.xmm2: return "xmm2";
            case RegisterGroupKind.xmm3: return "xmm3";
            case RegisterGroupKind.xmm4: return "xmm4";
            case RegisterGroupKind.xmm5: return "xmm5";
            case RegisterGroupKind.xmm6: return "xmm6";
            case RegisterGroupKind.xmm7: return "xmm7";
            case RegisterGroupKind.xmm8: return "xmm8";
            case RegisterGroupKind.xmm9: return "xmm9";
            case RegisterGroupKind.xmm10: return "xmm10";
            case RegisterGroupKind.xmm11: return "xmm11";
            case RegisterGroupKind.xmm12: return "xmm12";
            case RegisterGroupKind.xmm13: return "xmm13";
            case RegisterGroupKind.xmm14: return "xmm14";
            case RegisterGroupKind.xmm15: return "xmm15";
        }
        return "<INVALID REGISTER GROUP " + ToString(cast<int>(kind)) + ">";
    }

    public string RegName(RegisterKind kind)
    {
        switch (kind)
        {
            case RegisterKind.al: return "al";
            case RegisterKind.bl: return "bl";
            case RegisterKind.cl: return "cl";
            case RegisterKind.dl: return "dl";
            case RegisterKind.sil: return "sil";
            case RegisterKind.dil: return "dil";
            case RegisterKind.bpl: return "bpl";
            case RegisterKind.spl: return "spl";
            case RegisterKind.r8b: return "r8b";
            case RegisterKind.r9b: return "r9b";
            case RegisterKind.r10b: return "r10b";
            case RegisterKind.r11b: return "r11b";
            case RegisterKind.r12b: return "r12b";
            case RegisterKind.r13b: return "r13b";
            case RegisterKind.r14b: return "r14b";
            case RegisterKind.r15b: return "r15b";
            case RegisterKind.ax: return "ax";
            case RegisterKind.bx: return "bx";
            case RegisterKind.cx: return "cx";
            case RegisterKind.dx: return "dx";
            case RegisterKind.si: return "si";
            case RegisterKind.di: return "di";
            case RegisterKind.bp: return "bp";
            case RegisterKind.sp: return "sp";
            case RegisterKind.r8w: return "r8w";
            case RegisterKind.r9w: return "r9w";
            case RegisterKind.r10w: return "r10w";
            case RegisterKind.r11w: return "r11w";
            case RegisterKind.r12w: return "r12w";
            case RegisterKind.r13w: return "r13w";
            case RegisterKind.r14w: return "r14w";
            case RegisterKind.r15w: return "r15w";
            case RegisterKind.eax: return "eax";
            case RegisterKind.ebx: return "ebx";
            case RegisterKind.ecx: return "ecx";
            case RegisterKind.edx: return "edx";
            case RegisterKind.esi: return "esi";
            case RegisterKind.edi: return "edi";
            case RegisterKind.ebp: return "ebp";
            case RegisterKind.esp: return "esp";
            case RegisterKind.r8d: return "r8d";
            case RegisterKind.r9d: return "r9d";
            case RegisterKind.r10d: return "r10d";
            case RegisterKind.r11d: return "r11d";
            case RegisterKind.r12d: return "r12d";
            case RegisterKind.r13d: return "r13d";
            case RegisterKind.r14d: return "r14d";
            case RegisterKind.r15d: return "r15d";
            case RegisterKind.rax: return "rax";
            case RegisterKind.rbx: return "rbx";
            case RegisterKind.rcx: return "rcx";
            case RegisterKind.rdx: return "rdx";
            case RegisterKind.rsi: return "rsi";
            case RegisterKind.rdi: return "rdi";
            case RegisterKind.rbp: return "rbp";
            case RegisterKind.rsp: return "rsp";
            case RegisterKind.r8: return "r8";
            case RegisterKind.r9: return "r9";
            case RegisterKind.r10: return "r10";
            case RegisterKind.r11: return "r11";
            case RegisterKind.r12: return "r12";
            case RegisterKind.r13: return "r13";
            case RegisterKind.r14: return "r14";
            case RegisterKind.r15: return "r15";
            case RegisterKind.ah: return "ah";
            case RegisterKind.bh: return "bh";
            case RegisterKind.ch: return "ch";
            case RegisterKind.dh: return "dh";
            case RegisterKind.xmm0: return "xmm0";
            case RegisterKind.xmm1: return "xmm1";
            case RegisterKind.xmm2: return "xmm2";
            case RegisterKind.xmm3: return "xmm3";
            case RegisterKind.xmm4: return "xmm4";
            case RegisterKind.xmm5: return "xmm5";
            case RegisterKind.xmm6: return "xmm6";
            case RegisterKind.xmm7: return "xmm7";
            case RegisterKind.xmm8: return "xmm8";
            case RegisterKind.xmm9: return "xmm9";
            case RegisterKind.xmm10: return "xmm10";
            case RegisterKind.xmm11: return "xmm11";
            case RegisterKind.xmm12: return "xmm12";
            case RegisterKind.xmm13: return "xmm13";
            case RegisterKind.xmm14: return "xmm14";
            case RegisterKind.xmm15: return "xmm15";
        }
        return "<INVALID REGISTER " + ToString(cast<int>(kind)) + ">";
    }

    public class Register : Value
    {
        public Register() : base(ValueKind.reg, "<EMPTY REGISTER>"), kind(RegisterKind.max), group(RegisterGroupKind.max), size(0)
        {
        }
        public Register(RegisterKind kind_, RegisterGroupKind group_, int size_) : base(ValueKind.reg, RegName(kind_)), kind(kind_), group(group_), size(size_)
        {
        }
        public void Print()
        {
            Console.Out() << "REGISTER " << Name() << " : GROUP " << RegisterGroupName(group) << " : SIZE " << size << endl();
        }
        public inline RegisterKind RegKind() const
        {
            return kind;
        }
        public inline RegisterGroupKind Group() const
        {
            return group;
        }
        public inline int Size() const
        {
            return size;
        }
        public inline bool IsFloatingPointReg() const
        {
            return group >= RegisterGroupKind.xmm0 && group <= RegisterGroupKind.xmm15;
        }
        private RegisterKind kind;
        private RegisterGroupKind group;
        private int size;
    }

    public const int highByteRegSize = 9;

    public class RegisterGroup
    {
        public RegisterGroup() : kind(RegisterGroupKind.max), nonvolatile(false)
        {
        }
        public RegisterGroup(RegisterGroupKind kind_) : kind(kind_), nonvolatile(false)
        {
        }
        public void Print()
        {
            Console.Out() << "REGISTER GROUP " << RegisterGroupName(kind) << " : LOCAL " << IsLocal() << " : FLOATING POINT " << IsFloatingPointReg() <<
                " : VOLATILE " << IsVolatile() << endl();
            for (int size = 1; size < 16; ++size)
            {
                if (size >= 1 && size <= 8 || size == highByteRegSize || size == 16)
                {
                    Register* reg = GetReg(size);
                    if (reg->RegKind() != RegisterKind.max)
                    {
                        reg->Print();
                    }
                }
            }
        }
        public inline RegisterGroupKind Kind() const
        {
            return kind;
        }
        public inline Register* GetReg(long size) const
        {
            #assert(size >= 1 && size <= 8 || size == highByteRegSize || size == 16);
            return &regs[size - 1];
        }
        public inline void SetReg(long size, const Register& reg)
        {
            #assert(size >= 1 && size <= 8 || size == highByteRegSize || size == 16);
            regs[size - 1] = reg;
        }
        public bool IsLocal() const
        {
            if (kind == RegisterGroupKind.rsi || kind == RegisterGroupKind.rdi || kind >= RegisterGroupKind.r12 && kind <= RegisterGroupKind.r15)
            {
                return true;
            }
            else if (kind >= RegisterGroupKind.xmm6 && kind <= RegisterGroupKind.xmm15)
            {
                return true;
            }
            return false;
        }
        public inline bool IsFloatingPointReg() const
        {
            return kind >= RegisterGroupKind.xmm0 && kind <= RegisterGroupKind.xmm15;
        }
        public inline bool IsVolatile() const
        {
            return !nonvolatile;
        }
        public inline bool IsNonvolatile() const
        {
            return nonvolatile;
        }
        public inline void SetNonvolatile(bool nonvolatile_)
        {
            nonvolatile = nonvolatile_;
        }
        private RegisterGroupKind kind;
        private Register[16] regs;
        private bool nonvolatile;
    }

    public class Registers
    {
        static Registers() : instance(new Registers())
        {
        }
        public static Registers& Instance()
        {
            return *instance;
        }
        public void Print()
        {
            for (const auto& regGroup : regGroups)
            {
                regGroup->Print();
            }
        }
        private Registers()
        {
            RegisterGroup* rax = new RegisterGroup(RegisterGroupKind.rax);
            rax->SetNonvolatile(false);
            rax->SetReg(1, Register(RegisterKind.al, RegisterGroupKind.rax, 1));
            rax->SetReg(2, Register(RegisterKind.ax, RegisterGroupKind.rax, 2));
            rax->SetReg(4, Register(RegisterKind.eax, RegisterGroupKind.rax, 4));
            rax->SetReg(8, Register(RegisterKind.rax, RegisterGroupKind.rax, 8));
            rax->SetReg(highByteRegSize, Register(RegisterKind.ah, RegisterGroupKind.rax, highByteRegSize));
            regGroups.Add(UniquePtr<RegisterGroup>(rax));

            RegisterGroup* rbx = new RegisterGroup(RegisterGroupKind.rbx);
            rbx->SetNonvolatile(true);
            rbx->SetReg(1, Register(RegisterKind.bl, RegisterGroupKind.rbx, 1));
            rbx->SetReg(2, Register(RegisterKind.bx, RegisterGroupKind.rbx, 2));
            rbx->SetReg(4, Register(RegisterKind.ebx, RegisterGroupKind.rbx, 4));
            rbx->SetReg(8, Register(RegisterKind.rbx, RegisterGroupKind.rbx, 8));
            rbx->SetReg(highByteRegSize, Register(RegisterKind.bh, RegisterGroupKind.rbx, highByteRegSize));
            regGroups.Add(UniquePtr<RegisterGroup>(rbx));

            RegisterGroup* rcx = new RegisterGroup(RegisterGroupKind.rcx);
            rcx->SetNonvolatile(false);
            rcx->SetReg(1, Register(RegisterKind.cl, RegisterGroupKind.rcx, 1));
            rcx->SetReg(2, Register(RegisterKind.cx, RegisterGroupKind.rcx, 2));
            rcx->SetReg(4, Register(RegisterKind.ecx, RegisterGroupKind.rcx, 4));
            rcx->SetReg(8, Register(RegisterKind.rcx, RegisterGroupKind.rcx, 8));
            rcx->SetReg(highByteRegSize, Register(RegisterKind.ch, RegisterGroupKind.rcx, highByteRegSize));
            regGroups.Add(UniquePtr<RegisterGroup>(rcx));

            RegisterGroup* rdx = new RegisterGroup(RegisterGroupKind.rdx);
            rdx->SetNonvolatile(false);
            rdx->SetReg(1, Register(RegisterKind.dl, RegisterGroupKind.rdx, 1));
            rdx->SetReg(2, Register(RegisterKind.dx, RegisterGroupKind.rdx, 2));
            rdx->SetReg(4, Register(RegisterKind.edx, RegisterGroupKind.rdx, 4));
            rdx->SetReg(8, Register(RegisterKind.rdx, RegisterGroupKind.rdx, 8));
            rdx->SetReg(highByteRegSize, Register(RegisterKind.dh, RegisterGroupKind.rdx, highByteRegSize));
            regGroups.Add(UniquePtr<RegisterGroup>(rdx));

            RegisterGroup* rsi = new RegisterGroup(RegisterGroupKind.rsi);
            rsi->SetNonvolatile(true);
            rsi->SetReg(1, Register(RegisterKind.sil, RegisterGroupKind.rsi, 1));
            rsi->SetReg(2, Register(RegisterKind.si, RegisterGroupKind.rsi, 2));
            rsi->SetReg(4, Register(RegisterKind.esi, RegisterGroupKind.rsi, 4));
            rsi->SetReg(8, Register(RegisterKind.rsi, RegisterGroupKind.rsi, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(rsi));

            RegisterGroup* rdi = new RegisterGroup(RegisterGroupKind.rdi);
            rdi->SetNonvolatile(true);
            rdi->SetReg(1, Register(RegisterKind.dil, RegisterGroupKind.rdi, 1));
            rdi->SetReg(2, Register(RegisterKind.di, RegisterGroupKind.rdi, 2));
            rdi->SetReg(4, Register(RegisterKind.edi, RegisterGroupKind.rdi, 4));
            rdi->SetReg(8, Register(RegisterKind.rdi, RegisterGroupKind.rdi, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(rdi));

            RegisterGroup* rbp = new RegisterGroup(RegisterGroupKind.rbp);
            rbp->SetNonvolatile(false);
            rbp->SetReg(1, Register(RegisterKind.bpl, RegisterGroupKind.rbp, 1));
            rbp->SetReg(2, Register(RegisterKind.bp, RegisterGroupKind.rbp, 2));
            rbp->SetReg(4, Register(RegisterKind.ebp, RegisterGroupKind.rbp, 4));
            rbp->SetReg(8, Register(RegisterKind.rbp, RegisterGroupKind.rbp, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(rbp));

            RegisterGroup* rsp = new RegisterGroup(RegisterGroupKind.rsp);
            rsp->SetNonvolatile(false);
            rsp->SetReg(1, Register(RegisterKind.spl, RegisterGroupKind.rsp, 1));
            rsp->SetReg(2, Register(RegisterKind.sp, RegisterGroupKind.rsp, 2));
            rsp->SetReg(4, Register(RegisterKind.esp, RegisterGroupKind.rsp, 4));
            rsp->SetReg(8, Register(RegisterKind.rsp, RegisterGroupKind.rsp, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(rsp));

            RegisterGroup* r8 = new RegisterGroup(RegisterGroupKind.r8);
            r8->SetNonvolatile(false);
            r8->SetReg(1, Register(RegisterKind.r8b, RegisterGroupKind.r8, 1));
            r8->SetReg(2, Register(RegisterKind.r8w, RegisterGroupKind.r8, 2));
            r8->SetReg(4, Register(RegisterKind.r8d, RegisterGroupKind.r8, 4));
            r8->SetReg(8, Register(RegisterKind.r8, RegisterGroupKind.r8, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r8));

            RegisterGroup* r9 = new RegisterGroup(RegisterGroupKind.r9);
            r9->SetNonvolatile(false);
            r9->SetReg(1, Register(RegisterKind.r9b, RegisterGroupKind.r9, 1));
            r9->SetReg(2, Register(RegisterKind.r9w, RegisterGroupKind.r9, 2));
            r9->SetReg(4, Register(RegisterKind.r9d, RegisterGroupKind.r9, 4));
            r9->SetReg(8, Register(RegisterKind.r9, RegisterGroupKind.r9, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r9));

            RegisterGroup* r10 = new RegisterGroup(RegisterGroupKind.r10);
            r10->SetNonvolatile(false);
            r10->SetReg(1, Register(RegisterKind.r10b, RegisterGroupKind.r10, 1));
            r10->SetReg(2, Register(RegisterKind.r10w, RegisterGroupKind.r10, 2));
            r10->SetReg(4, Register(RegisterKind.r10d, RegisterGroupKind.r10, 4));
            r10->SetReg(8, Register(RegisterKind.r10, RegisterGroupKind.r10, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r10));

            RegisterGroup* r11 = new RegisterGroup(RegisterGroupKind.r11);
            r11->SetNonvolatile(false);
            r11->SetReg(1, Register(RegisterKind.r11b, RegisterGroupKind.r11, 1));
            r11->SetReg(2, Register(RegisterKind.r11w, RegisterGroupKind.r11, 2));
            r11->SetReg(4, Register(RegisterKind.r11d, RegisterGroupKind.r11, 4));
            r11->SetReg(8, Register(RegisterKind.r11, RegisterGroupKind.r11, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r11));

            RegisterGroup* r12 = new RegisterGroup(RegisterGroupKind.r12);
            r12->SetNonvolatile(true);
            r12->SetReg(1, Register(RegisterKind.r12b, RegisterGroupKind.r12, 1));
            r12->SetReg(2, Register(RegisterKind.r12w, RegisterGroupKind.r12, 2));
            r12->SetReg(4, Register(RegisterKind.r12d, RegisterGroupKind.r12, 4));
            r12->SetReg(8, Register(RegisterKind.r12, RegisterGroupKind.r12, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r12));

            RegisterGroup* r13 = new RegisterGroup(RegisterGroupKind.r13);
            r13->SetNonvolatile(true);
            r13->SetReg(1, Register(RegisterKind.r13b, RegisterGroupKind.r13, 1));
            r13->SetReg(2, Register(RegisterKind.r13w, RegisterGroupKind.r13, 2));
            r13->SetReg(4, Register(RegisterKind.r13d, RegisterGroupKind.r13, 4));
            r13->SetReg(8, Register(RegisterKind.r13, RegisterGroupKind.r13, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r13));

            RegisterGroup* r14 = new RegisterGroup(RegisterGroupKind.r14);
            r14->SetNonvolatile(true);
            r14->SetReg(1, Register(RegisterKind.r14b, RegisterGroupKind.r14, 1));
            r14->SetReg(2, Register(RegisterKind.r14w, RegisterGroupKind.r14, 2));
            r14->SetReg(4, Register(RegisterKind.r14d, RegisterGroupKind.r14, 4));
            r14->SetReg(8, Register(RegisterKind.r14, RegisterGroupKind.r14, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r14));

            RegisterGroup* r15 = new RegisterGroup(RegisterGroupKind.r15);
            r15->SetNonvolatile(true);
            r15->SetReg(1, Register(RegisterKind.r15b, RegisterGroupKind.r15, 1));
            r15->SetReg(2, Register(RegisterKind.r15w, RegisterGroupKind.r15, 2));
            r15->SetReg(4, Register(RegisterKind.r15d, RegisterGroupKind.r15, 4));
            r15->SetReg(8, Register(RegisterKind.r15, RegisterGroupKind.r15, 8));
            regGroups.Add(UniquePtr<RegisterGroup>(r15));

            RegisterGroup* xmm0 = new RegisterGroup(RegisterGroupKind.xmm0);
            xmm0->SetReg(4, Register(RegisterKind.xmm0, RegisterGroupKind.xmm0, 4));
            xmm0->SetReg(8, Register(RegisterKind.xmm0, RegisterGroupKind.xmm0, 8));
            xmm0->SetReg(16, Register(RegisterKind.xmm0, RegisterGroupKind.xmm0, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm0));

            RegisterGroup* xmm1 = new RegisterGroup(RegisterGroupKind.xmm1);
            xmm1->SetReg(4, Register(RegisterKind.xmm1, RegisterGroupKind.xmm1, 4));
            xmm1->SetReg(8, Register(RegisterKind.xmm1, RegisterGroupKind.xmm1, 8));
            xmm1->SetReg(16, Register(RegisterKind.xmm1, RegisterGroupKind.xmm1, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm1));

            RegisterGroup* xmm2 = new RegisterGroup(RegisterGroupKind.xmm2);
            xmm2->SetReg(4, Register(RegisterKind.xmm2, RegisterGroupKind.xmm2, 4));
            xmm2->SetReg(8, Register(RegisterKind.xmm2, RegisterGroupKind.xmm2, 8));
            xmm2->SetReg(16, Register(RegisterKind.xmm2, RegisterGroupKind.xmm2, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm2));

            RegisterGroup* xmm3 = new RegisterGroup(RegisterGroupKind.xmm3);
            xmm3->SetReg(4, Register(RegisterKind.xmm3, RegisterGroupKind.xmm3, 4));
            xmm3->SetReg(8, Register(RegisterKind.xmm3, RegisterGroupKind.xmm3, 8));
            xmm3->SetReg(16, Register(RegisterKind.xmm3, RegisterGroupKind.xmm3, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm3));

            RegisterGroup* xmm4 = new RegisterGroup(RegisterGroupKind.xmm4);
            xmm4->SetReg(4, Register(RegisterKind.xmm4, RegisterGroupKind.xmm4, 4));
            xmm4->SetReg(8, Register(RegisterKind.xmm4, RegisterGroupKind.xmm4, 8));
            xmm4->SetReg(16, Register(RegisterKind.xmm4, RegisterGroupKind.xmm4, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm4));

            RegisterGroup* xmm5 = new RegisterGroup(RegisterGroupKind.xmm5);
            xmm5->SetReg(4, Register(RegisterKind.xmm5, RegisterGroupKind.xmm5, 4));
            xmm5->SetReg(8, Register(RegisterKind.xmm5, RegisterGroupKind.xmm5, 8));
            xmm5->SetReg(16, Register(RegisterKind.xmm5, RegisterGroupKind.xmm5, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm5));

            RegisterGroup* xmm6 = new RegisterGroup(RegisterGroupKind.xmm6);
            xmm6->SetNonvolatile(true);
            xmm6->SetReg(4, Register(RegisterKind.xmm6, RegisterGroupKind.xmm6, 4));
            xmm6->SetReg(8, Register(RegisterKind.xmm6, RegisterGroupKind.xmm6, 8));
            xmm6->SetReg(16, Register(RegisterKind.xmm6, RegisterGroupKind.xmm6, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm6));

            RegisterGroup* xmm7 = new RegisterGroup(RegisterGroupKind.xmm7);
            xmm7->SetNonvolatile(true);
            xmm7->SetReg(4, Register(RegisterKind.xmm7, RegisterGroupKind.xmm7, 4));
            xmm7->SetReg(8, Register(RegisterKind.xmm7, RegisterGroupKind.xmm7, 8));
            xmm7->SetReg(16, Register(RegisterKind.xmm7, RegisterGroupKind.xmm7, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm7));

            RegisterGroup* xmm8 = new RegisterGroup(RegisterGroupKind.xmm8);
            xmm8->SetNonvolatile(true);
            xmm8->SetReg(4, Register(RegisterKind.xmm8, RegisterGroupKind.xmm8, 4));
            xmm8->SetReg(8, Register(RegisterKind.xmm8, RegisterGroupKind.xmm8, 8));
            xmm8->SetReg(16, Register(RegisterKind.xmm8, RegisterGroupKind.xmm8, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm8));

            RegisterGroup* xmm9 = new RegisterGroup(RegisterGroupKind.xmm9);
            xmm9->SetNonvolatile(true);
            xmm9->SetReg(4, Register(RegisterKind.xmm9, RegisterGroupKind.xmm9, 4));
            xmm9->SetReg(8, Register(RegisterKind.xmm9, RegisterGroupKind.xmm9, 8));
            xmm9->SetReg(16, Register(RegisterKind.xmm9, RegisterGroupKind.xmm9, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm9));

            RegisterGroup* xmm10 = new RegisterGroup(RegisterGroupKind.xmm10);
            xmm10->SetNonvolatile(true);
            xmm10->SetReg(4, Register(RegisterKind.xmm10, RegisterGroupKind.xmm10, 4));
            xmm10->SetReg(8, Register(RegisterKind.xmm10, RegisterGroupKind.xmm10, 8));
            xmm10->SetReg(16, Register(RegisterKind.xmm10, RegisterGroupKind.xmm10, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm10));

            RegisterGroup* xmm11 = new RegisterGroup(RegisterGroupKind.xmm11);
            xmm11->SetNonvolatile(true);
            xmm11->SetReg(4, Register(RegisterKind.xmm11, RegisterGroupKind.xmm11, 4));
            xmm11->SetReg(8, Register(RegisterKind.xmm11, RegisterGroupKind.xmm11, 8));
            xmm11->SetReg(16, Register(RegisterKind.xmm11, RegisterGroupKind.xmm11, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm11));

            RegisterGroup* xmm12 = new RegisterGroup(RegisterGroupKind.xmm12);
            xmm12->SetNonvolatile(true);
            xmm12->SetReg(4, Register(RegisterKind.xmm12, RegisterGroupKind.xmm12, 4));
            xmm12->SetReg(8, Register(RegisterKind.xmm12, RegisterGroupKind.xmm12, 8));
            xmm12->SetReg(16, Register(RegisterKind.xmm12, RegisterGroupKind.xmm12, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm12));

            RegisterGroup* xmm13 = new RegisterGroup(RegisterGroupKind.xmm13);
            xmm13->SetNonvolatile(true);
            xmm13->SetReg(4, Register(RegisterKind.xmm13, RegisterGroupKind.xmm13, 4));
            xmm13->SetReg(8, Register(RegisterKind.xmm13, RegisterGroupKind.xmm13, 8));
            xmm13->SetReg(16, Register(RegisterKind.xmm13, RegisterGroupKind.xmm13, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm13));

            RegisterGroup* xmm14 = new RegisterGroup(RegisterGroupKind.xmm14);
            xmm14->SetNonvolatile(true);
            xmm14->SetReg(4, Register(RegisterKind.xmm14, RegisterGroupKind.xmm14, 4));
            xmm14->SetReg(8, Register(RegisterKind.xmm14, RegisterGroupKind.xmm14, 8));
            xmm14->SetReg(16, Register(RegisterKind.xmm14, RegisterGroupKind.xmm14, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm14));

            RegisterGroup* xmm15 = new RegisterGroup(RegisterGroupKind.xmm15);
            xmm15->SetNonvolatile(true);
            xmm15->SetReg(4, Register(RegisterKind.xmm15, RegisterGroupKind.xmm15, 4));
            xmm15->SetReg(8, Register(RegisterKind.xmm15, RegisterGroupKind.xmm15, 8));
            xmm15->SetReg(16, Register(RegisterKind.xmm15, RegisterGroupKind.xmm15, 16));
            regGroups.Add(UniquePtr<RegisterGroup>(xmm15));
        }
        public inline RegisterGroup* GetRegisterGroup(RegisterGroupKind kind) const
        {
            return regGroups[cast<int>(kind)].Get();
        }
        private static UniquePtr<Registers> instance;
        private List<UniquePtr<RegisterGroup>> regGroups;
    }

    public class RegisterGroupLess : Rel<RegisterGroup*>
    {
        public inline bool operator()(RegisterGroup* left, RegisterGroup* right) const
        {
            return cast<int>(left->Kind()) < cast<int>(right->Kind());
        }
    }

    public class RegisterPool
    {
        public RegisterPool() : registers(Registers.Instance()), localRegisterCount(0), localXMMRegisterCount(0)
        {
            AddLocalRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.rsi));
            AddLocalRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.rdi));
            AddLocalRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.r12));
            AddLocalRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.r13));
            AddLocalRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.r14));
            AddLocalRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.r15));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm6));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm7));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm8));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm9));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm10));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm11));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm12));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm13));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm14));
            AddLocalXMMRegisterGroup(registers.GetRegisterGroup(RegisterGroupKind.xmm15));
            localRegisterCount = cast<int>(localRegisterPool.Count());
            localXMMRegisterCount = cast<int>(localXMMRegisterPool.Count());
            globalRegisterMap[RegisterGroupKind.rax] = registers.GetRegisterGroup(RegisterGroupKind.rax);
            globalRegisterMap[RegisterGroupKind.rbx] = registers.GetRegisterGroup(RegisterGroupKind.rbx);
            globalRegisterMap[RegisterGroupKind.rcx] = registers.GetRegisterGroup(RegisterGroupKind.rcx);
            globalRegisterMap[RegisterGroupKind.rdx] = registers.GetRegisterGroup(RegisterGroupKind.rdx);
            globalRegisterMap[RegisterGroupKind.r8] = registers.GetRegisterGroup(RegisterGroupKind.r8);
            globalRegisterMap[RegisterGroupKind.r9] = registers.GetRegisterGroup(RegisterGroupKind.r9);
            globalRegisterMap[RegisterGroupKind.r10] = registers.GetRegisterGroup(RegisterGroupKind.r10);
            globalRegisterMap[RegisterGroupKind.r11] = registers.GetRegisterGroup(RegisterGroupKind.r11);
            globalRegisterMap[RegisterGroupKind.rbp] = registers.GetRegisterGroup(RegisterGroupKind.rbp);
            globalRegisterMap[RegisterGroupKind.rsp] = registers.GetRegisterGroup(RegisterGroupKind.rsp);
            globalRegisterMap[RegisterGroupKind.xmm0] = registers.GetRegisterGroup(RegisterGroupKind.xmm0);
            globalRegisterMap[RegisterGroupKind.xmm1] = registers.GetRegisterGroup(RegisterGroupKind.xmm1);
            globalRegisterMap[RegisterGroupKind.xmm2] = registers.GetRegisterGroup(RegisterGroupKind.xmm2);
            globalRegisterMap[RegisterGroupKind.xmm3] = registers.GetRegisterGroup(RegisterGroupKind.xmm3);
            globalRegisterMap[RegisterGroupKind.xmm4] = registers.GetRegisterGroup(RegisterGroupKind.xmm4);
            globalRegisterMap[RegisterGroupKind.xmm5] = registers.GetRegisterGroup(RegisterGroupKind.xmm5);
        }
        public void AddLocalRegisterGroup(RegisterGroup* regGroup)
        {
            localRegisterPool.Insert(regGroup);
        }
        public void AddLocalXMMRegisterGroup(RegisterGroup* regGroup)
        {
            localXMMRegisterPool.Insert(regGroup);
        }
        public Result<RegisterGroup*> GetLocalRegisterGroup()
        {
            if (localRegisterPool.IsEmpty())
            {
                return Result<RegisterGroup*>(ErrorId(AllocateError("local register pool is empty")));
            }
            RegisterGroup* regGroup = *localRegisterPool.Begin();
            localRegisterPool.Remove(regGroup);
            usedLocalRegs.Insert(regGroup);
            return Result<RegisterGroup*>(regGroup);
        }
        public Result<RegisterGroup*> GetLocalXMMRegisterGroup()
        {
            if (localXMMRegisterPool.IsEmpty())
            {
                return Result<RegisterGroup*>(ErrorId(AllocateError("local XMM register pool is empty")));
            }
            RegisterGroup* regGroup = *localXMMRegisterPool.Begin();
            localXMMRegisterPool.Remove(regGroup);
            usedLocalXMMRegs.Insert(regGroup);
            return Result<RegisterGroup*>(regGroup);
        }
        public RegisterGroup* GetRegisterGroup(RegisterGroupKind regGroupKind, bool used)
        {
            RegisterGroup* regGroup = registers.GetRegisterGroup(regGroupKind);
            if (used && !regGroup->IsLocal() && regGroup->IsNonvolatile())
            {
                usedNonvolatileRegs.Insert(regGroup);
            }
            return regGroup;
        }
        public inline int LocalRegisterCount() const
        {
            return localRegisterCount;
        }
        public inline int LocalXMMRegisterCount() const
        {
            return localXMMRegisterCount;
        }
        public inline int NumFreeLocalRegisters() const
        {
            return cast<int>(localRegisterPool.Count());
        }
        public inline int NumFreeLocalXMMRegisters() const
        {
            return cast<int>(localXMMRegisterPool.Count());
        }
        public inline const Set<RegisterGroup*, RegisterGroupLess>& UsedLocalRegs() const
        {
            return usedLocalRegs;
        }
        public inline const Set<RegisterGroup*, RegisterGroupLess>& UsedNonvolatileRegs() const
        {
            return usedNonvolatileRegs;
        }
        public inline const Set<RegisterGroup*, RegisterGroupLess>& UsedLocalXMMRegs() const
        {
            return usedLocalXMMRegs;
        }
        public inline const Set<RegisterGroup*, RegisterGroupLess>& UsedNonvolatileXMMRegs() const
        {
            return usedNonvolatileXMMRegs;
        }
        private Registers& registers;
        private int localRegisterCount;
        private int localXMMRegisterCount;
        private Set<RegisterGroup*, RegisterGroupLess> localRegisterPool;
        private Set<RegisterGroup*, RegisterGroupLess> localXMMRegisterPool;
        private Map<RegisterGroupKind, RegisterGroup*> globalRegisterMap;
        private Set<RegisterGroup*, RegisterGroupLess> usedLocalRegs;
        private Set<RegisterGroup*, RegisterGroupLess> usedNonvolatileRegs;
        private Set<RegisterGroup*, RegisterGroupLess> usedLocalXMMRegs;
        private Set<RegisterGroup*, RegisterGroupLess> usedNonvolatileXMMRegs;
    }
}

