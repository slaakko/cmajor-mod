module scmlg.parser.rules;

namespace scmlg.parser.rules {

std::mutex ruleMtx;

std::map<int64_t, std::string>* GetRuleNameMapPtr()
{
    std::lock_guard<std::mutex> lock(ruleMtx);
    static std::map<int64_t, std::string> ruleNameMap = {
        { 89331080624078849, "ExpressionFileParser.ExpressionFile" },
        { 89331080624078850, "ExpressionFileParser.Expression" },
        { 89331080624078851, "ExpressionFileParser.ExprString" },
        { 713474246315081729, "KeywordFileParser.KeywordFile" },
        { 713474246315081730, "KeywordFileParser.Usings" },
        { 713474246315081731, "KeywordFileParser.Keyword" },
        { 3806600759638753281, "LexerFileParser.LexerFile" },
        { 3806600759638753282, "LexerFileParser.Usings" },
        { 3806600759638753283, "LexerFileParser.LexerDefinition" },
        { 3806600759638753284, "LexerFileParser.LexerContent" },
        { 3806600759638753285, "LexerFileParser.Rules" },
        { 3806600759638753286, "LexerFileParser.Rule" },
        { 3806600759638753287, "LexerFileParser.Variables" },
        { 3806600759638753288, "LexerFileParser.Variable" },
        { 3806600759638753289, "LexerFileParser.Actions" },
        { 3806600759638753290, "LexerFileParser.Action" },
        { 3806600759638753291, "LexerFileParser.RulesKeyword" },
        { 3806600759638753292, "LexerFileParser.VariablesKeyword" },
        { 3806600759638753293, "LexerFileParser.ActionsKeyword" },
        { 3806600759638753294, "LexerFileParser.OpaqueKeyword" },
        { 753471983957573633, "ScmlgFileParser.ScmlgFile" },
        { 753471983957573634, "ScmlgFileParser.ScmlgFileDeclaration" },
        { 753471983957573635, "ScmlgFileParser.TokenFileDeclaration" },
        { 753471983957573636, "ScmlgFileParser.KeywordFileDeclaration" },
        { 753471983957573637, "ScmlgFileParser.ExpressionFileDeclaration" },
        { 753471983957573638, "ScmlgFileParser.LexerFileDeclaration" },
        { 1158510743117627393, "TokenFileParser.TokenFile" },
        { 1158510743117627394, "TokenFileParser.Token" },
        { 7440832391356088321, "CommonParser.TokensKeyword" },
        { 7440832391356088322, "CommonParser.KeywordsKeyword" },
        { 7440832391356088323, "CommonParser.ExpressionsKeyword" },
        { 7440832391356088324, "CommonParser.LexerKeyword" },
        { 7440832391356088325, "CommonParser.ProjectKeyword" },
        { 7440832391356088326, "CommonParser.QualifiedUtf8Id" },
        { 1044754359574855681, "ContainerFileParser.QualifiedId" },
        { 1044754359574855682, "ContainerFileParser.FilePath" },
        { 1044754359574855683, "ContainerFileParser.ProjectKeyword" },
        { 1044754359574855684, "ContainerFileParser.SolutionKeyword" },
        { 8886062459526316033, "StatementParser.Statement" },
        { 8886062459526316034, "StatementParser.Label" },
        { 8886062459526316035, "StatementParser.LabeledStatement" },
        { 8886062459526316036, "StatementParser.ControlStatement" },
        { 8886062459526316037, "StatementParser.CompoundStatement" },
        { 8886062459526316038, "StatementParser.ReturnStatement" },
        { 8886062459526316039, "StatementParser.IfStatement" },
        { 8886062459526316040, "StatementParser.WhileStatement" },
        { 8886062459526316041, "StatementParser.DoStatement" },
        { 8886062459526316042, "StatementParser.RangeForStatement" },
        { 8886062459526316043, "StatementParser.ForStatement" },
        { 8886062459526316044, "StatementParser.ForInitStatement" },
        { 8886062459526316045, "StatementParser.ForLoopStatementExpr" },
        { 8886062459526316046, "StatementParser.BreakStatement" },
        { 8886062459526316047, "StatementParser.ContinueStatement" },
        { 8886062459526316048, "StatementParser.GotoStatement" },
        { 8886062459526316049, "StatementParser.SwitchStatement" },
        { 8886062459526316050, "StatementParser.CaseStatement" },
        { 8886062459526316051, "StatementParser.DefaultStatement" },
        { 8886062459526316052, "StatementParser.GotoCaseStatement" },
        { 8886062459526316053, "StatementParser.GotoDefaultStatement" },
        { 8886062459526316054, "StatementParser.ExpressionStatement" },
        { 8886062459526316055, "StatementParser.AssignmentStatement" },
        { 8886062459526316056, "StatementParser.AssignmentStatementExpr" },
        { 8886062459526316057, "StatementParser.ConstructionStatement" },
        { 8886062459526316058, "StatementParser.DeleteStatement" },
        { 8886062459526316059, "StatementParser.DestroyStatement" },
        { 8886062459526316060, "StatementParser.EmptyStatement" },
        { 8886062459526316061, "StatementParser.ThrowStatement" },
        { 8886062459526316062, "StatementParser.TryStatement" },
        { 8886062459526316063, "StatementParser.Catch" },
        { 8886062459526316064, "StatementParser.AssertStatement" },
        { 8886062459526316065, "StatementParser.ConditionalCompilationStatement" },
        { 8886062459526316066, "StatementParser.ConditionalCompilationExpression" },
        { 8886062459526316067, "StatementParser.ConditionalCompilationDisjunction" },
        { 8886062459526316068, "StatementParser.ConditionalCompilationConjunction" },
        { 8886062459526316069, "StatementParser.ConditionalCompilationPrefix" },
        { 8886062459526316070, "StatementParser.ConditionalCompilationPrimary" },
        { 6032173986891169793, "TypeExprParser.TypeExpr" },
        { 6032173986891169794, "TypeExprParser.PrefixTypeExpr" },
        { 6032173986891169795, "TypeExprParser.PostfixTypeExpr" },
        { 6032173986891169796, "TypeExprParser.PrimaryTypeExpr" },
        { 1106159468351062017, "ExpressionParser.Expression" },
        { 1106159468351062018, "ExpressionParser.Equivalence" },
        { 1106159468351062019, "ExpressionParser.Implication" },
        { 1106159468351062020, "ExpressionParser.Disjunction" },
        { 1106159468351062021, "ExpressionParser.Conjunction" },
        { 1106159468351062022, "ExpressionParser.BitOr" },
        { 1106159468351062023, "ExpressionParser.BitXor" },
        { 1106159468351062024, "ExpressionParser.BitAnd" },
        { 1106159468351062025, "ExpressionParser.Equality" },
        { 1106159468351062026, "ExpressionParser.EqualityOp" },
        { 1106159468351062027, "ExpressionParser.Relational" },
        { 1106159468351062028, "ExpressionParser.RelationalOp" },
        { 1106159468351062029, "ExpressionParser.Shift" },
        { 1106159468351062030, "ExpressionParser.ShiftOp" },
        { 1106159468351062031, "ExpressionParser.Additive" },
        { 1106159468351062032, "ExpressionParser.AdditiveOp" },
        { 1106159468351062033, "ExpressionParser.Multiplicative" },
        { 1106159468351062034, "ExpressionParser.MultiplicativeOp" },
        { 1106159468351062035, "ExpressionParser.Prefix" },
        { 1106159468351062036, "ExpressionParser.PrefixOp" },
        { 1106159468351062037, "ExpressionParser.Postfix" },
        { 1106159468351062038, "ExpressionParser.Primary" },
        { 1106159468351062039, "ExpressionParser.ArgumentList" },
        { 1106159468351062040, "ExpressionParser.ExpressionList" },
        { 1106159468351062041, "ExpressionParser.SizeOfExpr" },
        { 1106159468351062042, "ExpressionParser.TypeNameExpr" },
        { 1106159468351062043, "ExpressionParser.TypeIdExpr" },
        { 1106159468351062044, "ExpressionParser.CastExpr" },
        { 1106159468351062045, "ExpressionParser.ConstructExpr" },
        { 1106159468351062046, "ExpressionParser.NewExpr" },
        { 1106159468351062047, "ExpressionParser.InvokeExpr" },
        { 9148055026495651841, "IdentifierParser.Identifier" },
        { 9148055026495651842, "IdentifierParser.QualifiedId" },
        { 6112958198560325633, "FundamentalTypeParser.FundamentalType" },
        { 8781986653095854081, "TemplateParser.TemplateId" },
        { 8781986653095854082, "TemplateParser.TemplateParameterList" },
        { 8781986653095854083, "TemplateParser.TemplateParameter" },
        { 8781986653095854084, "TemplateParser.InstantiationRequest" },
        { 1060778478829305857, "LiteralParser.Literal" },
        { 1060778478829305858, "LiteralParser.SimpleLiteral" },
        { 1060778478829305859, "LiteralParser.ComplexLiteral" },
        { 1060778478829305860, "LiteralParser.ArrayLiteral" },
        { 1060778478829305861, "LiteralParser.StructuredLiteral" }
    };
    return &ruleNameMap;
}

} // scmlg.parser.rules
