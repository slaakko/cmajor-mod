// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using scmlg.ast;

namespace scmlg.parser
{
    public Result<UniquePtr<scmlg.ast.ScmlgFile>> ParseScmlgFile(const string& scmlgFilePath)
    {
        Result<string> scmlgFileContentResult = System.IO.File.ReadAllText(scmlgFilePath);
        if (scmlgFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.ScmlgFile>>(ErrorId(scmlgFileContentResult.GetErrorId()));
        }
        string scmlgFileContent = Rvalue(scmlgFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(scmlgFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.ScmlgFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        cm.lexer.CmajorLexer lexer(start, end, scmlgFilePath);
        lexer.SetRuleNameMapPtr(scmlg.parser.GetRuleNameMapPtr());
        return scmlg.parser.ScmlgFileParser<cm.lexer.CmajorLexer>.Parse(lexer);
    }

    public Result<UniquePtr<scmlg.ast.TokenFile>> ParseTokenFile(const string& tokenFilePath)
    {
        Result<string> tokenFileContentResult = System.IO.File.ReadAllText(tokenFilePath);
        if (tokenFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.TokenFile>>(ErrorId(tokenFileContentResult.GetErrorId()));
        }
        string tokenFileContent = Rvalue(tokenFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(tokenFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.TokenFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        cm.lexer.CmajorLexer lexer(start, end, tokenFilePath);
        lexer.SetRuleNameMapPtr(scmlg.parser.GetRuleNameMapPtr());
        return scmlg.parser.TokenFileParser<cm.lexer.CmajorLexer>.Parse(lexer);
    }

    public Result<UniquePtr<scmlg.ast.KeywordFile>> ParseKeywordFile(const string& keywordFilePath)
    {
        Result<string> keywordFileContentResult = System.IO.File.ReadAllText(keywordFilePath);
        if (keywordFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.KeywordFile>>(ErrorId(keywordFileContentResult.GetErrorId()));
        }
        string keywordFileContent = Rvalue(keywordFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(keywordFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.KeywordFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        cm.lexer.CmajorLexer lexer(start, end, keywordFilePath);
        lexer.SetRuleNameMapPtr(scmlg.parser.GetRuleNameMapPtr());
        return scmlg.parser.KeywordFileParser<cm.lexer.CmajorLexer>.Parse(lexer);
    }

    public Result<UniquePtr<scmlg.ast.ExpressionFile>> ParseExpressionFile(const string& expressionFilePath)
    {
        Result<string> expressionFileContentResult = System.IO.File.ReadAllText(expressionFilePath);
        if (expressionFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.ExpressionFile>>(ErrorId(expressionFileContentResult.GetErrorId()));
        }
        string expressionFileContent = Rvalue(expressionFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(expressionFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.ExpressionFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        cm.lexer.CmajorLexer lexer(start, end, expressionFilePath);
        lexer.SetRuleNameMapPtr(scmlg.parser.GetRuleNameMapPtr());
        return scmlg.parser.ExpressionFileParser<cm.lexer.CmajorLexer>.Parse(lexer);
    }

    public Result<UniquePtr<scmlg.ast.LexerFile>> ParseLexerFile(const string& lexerFilePath)
    {
        Result<string> lexerFileContentResult = System.IO.File.ReadAllText(lexerFilePath);
        if (lexerFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.LexerFile>>(ErrorId(lexerFileContentResult.GetErrorId()));
        }
        string lexerFileContent = Rvalue(lexerFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(lexerFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.LexerFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        cm.lexer.CmajorLexer lexer(start, end, lexerFilePath);
        lexer.SetRuleNameMapPtr(scmlg.parser.GetRuleNameMapPtr());
        cm.parser.Context context;
        return scmlg.parser.LexerFileParser<cm.lexer.CmajorLexer>.Parse(lexer, &context);
    }
}
