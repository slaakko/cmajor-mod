// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using scmlg.ast;

namespace scmlg.parser
{
    public Result<UniquePtr<scmlg.ast.ScmlgFile>> ParseScmlgFile(const string& scmlgFilePath)
    {
        auto scmlgFileContentResult = System.IO.File.ReadAllText(scmlgFilePath);
        if (scmlgFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.ScmlgFile>>(ErrorId(scmlgFileContentResult.GetErrorId()));
        }
        const string& scmlgFileContent = scmlgFileContentResult.Value();
        auto utf32Result = ToUtf32(scmlgFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.ScmlgFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        const ustring& content = utf32Result.Value();
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        CmajorLexer lexer(start, end, scmlgFilePath);
        auto parseResult = ScmlgFileParser<CmajorLexer>.Parse(lexer);
        if (parseResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.ScmlgFile>>(ErrorId(parseResult.GetErrorId()));
        }
        return Result<UniquePtr<scmlg.ast.ScmlgFile>>(Rvalue(parseResult.Value()));
    }

    public Result<UniquePtr<scmlg.ast.TokenFile>> ParseTokenFile(const string& tokenFilePath)
    {
        auto tokenFileContentResult = System.IO.File.ReadAllText(tokenFilePath);
        if (tokenFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.TokenFile>>(ErrorId(tokenFileContentResult.GetErrorId()));
        }
        const string& tokenFileContent = tokenFileContentResult.Value();
        auto utf32Result = ToUtf32(tokenFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.TokenFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        const ustring& content = utf32Result.Value();
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        CmajorLexer lexer(start, end, tokenFilePath);
        auto parseResult = TokenFileParser<CmajorLexer>.Parse(lexer);
        if (parseResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.TokenFile>>(ErrorId(parseResult.GetErrorId()));
        }
        return Result<UniquePtr<scmlg.ast.TokenFile>>(Rvalue(parseResult.Value()));
    }

    public Result<UniquePtr<scmlg.ast.KeywordFile>> ParseKeywordFile(const string& keywordFilePath)
    {
        auto keywordFileContentResult = System.IO.File.ReadAllText(keywordFilePath);
        if (keywordFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.KeywordFile>>(ErrorId(keywordFileContentResult.GetErrorId()));
        }
        const string& keywordFileContent = keywordFileContentResult.Value();
        auto utf32Result = ToUtf32(keywordFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.KeywordFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        const ustring& content = utf32Result.Value();
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        CmajorLexer lexer(start, end, keywordFilePath);
        auto parseResult = KeywordFileParser<CmajorLexer>.Parse(lexer);
        if (parseResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.KeywordFile>>(ErrorId(parseResult.GetErrorId()));
        }
        return Result<UniquePtr<scmlg.ast.KeywordFile>>(Rvalue(parseResult.Value()));
    }

    public Result<UniquePtr<scmlg.ast.ExpressionFile>> ParseExpressionFile(const string& expressionFilePath)
    {
        auto expressionFileContentResult = System.IO.File.ReadAllText(expressionFilePath);
        if (expressionFileContentResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.ExpressionFile>>(ErrorId(expressionFileContentResult.GetErrorId()));
        }
        const string& expressionFileContent = expressionFileContentResult.Value();
        auto utf32Result = ToUtf32(expressionFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<scmlg.ast.ExpressionFile>>(ErrorId(utf32Result.GetErrorId()));
        }
        const ustring& content = utf32Result.Value();
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        CmajorLexer lexer(start, end, expressionFilePath);
        auto parseResult = ExpressionFileParser<CmajorLexer>.Parse(lexer);
        if (parseResult.Error())
        {
            return Result<UniquePtr<scmlg.ast.ExpressionFile>>(ErrorId(parseResult.GetErrorId()));
        }
        return Result<UniquePtr<scmlg.ast.ExpressionFile>>(Rvalue(parseResult.Value()));
    }
}
