project cm.parser;
target=library;
reference <../cm.ast/cm.ast.cmp>;
reference <../cm.lexer/cm.lexer.cmp>;
source <alias.parser.cm>;
source <attribute.parser.cm>;
source <class.parser.cm>;
source <concept.parser.cm>;
source <constant.parser.cm>;
source <container_file.parser.cm>;
source <context.cm>;
source <delegate.parser.cm>;
source <enumeration.parser.cm>;
source <expression.parser.cm>;
source <function.parser.cm>;
source <fundamental_type.parser.cm>;
source <global_variable.parser.cm>;
source <identifier.parser.cm>;
source <interface.parser.cm>;
source <literal.parser.cm>;
source <operator.cm>;
source <parameter.parser.cm>;
source <project_file.parser.cm>;
source <solution_file.parser.cm>;
source <source_file.parser.cm>;
source <specifier.parser.cm>;
source <statement.parser.cm>;
source <template.parser.cm>;
source <token_parser.cm>;
source <type_expr.parser.cm>;
text <alias.parser>;
text <attribute.parser>;
text <class.parser>;
text <concept.parser>;
text <constant.parser>;
text <container_file.parser>;
text <delegate.parser>;
text <enumeration.parser>;
text <expression.parser>;
text <function.parser>;
text <fundamental_type.parser>;
text <global_variable.parser>;
text <identifier.parser>;
text <interface.parser>;
text <literal.parser>;
text <parameter.parser>;
text <project_file.parser>;
text <solution_file.parser>;
text <source_file.parser>;
text <specifier.parser>;
text <statement.parser>;
text <template.parser>;
text <type_expr.parser>;
text <cm.parser.scmpg>;
