<parserFile>
 <grammar name="cm.parser.ConstantParser">
  <rule first="{#, ABSTRACT, AMP, AMP_AMP, ARROW, AS, ASSIGN, AUTO, BASE, BOOL, BYTE, CARET, CAST, CDECL, CHAR, CHAR_LITERAL, CONST, CONSTEXPR, CONSTRUCT, DEFAULT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, EXPLICIT, EXTERN, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INLINE, INT, INTEGER_LITERAL, INTERNAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NOTHROW, NULL_LITERAL, OVERRIDE, PIPE, PLUS, PLUS_PLUS, PRIVATE, PROTECTED, PUBLIC, RANGLE, REM, SBYTE, SEMICOLON, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STATIC, STRING_LITERAL, SUPPRESS, THIS, THROW, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}" name="Constant">
   <action first="{#, ABSTRACT, AMP, AMP_AMP, ARROW, AS, ASSIGN, AUTO, BASE, BOOL, BYTE, CARET, CAST, CDECL, CHAR, CHAR_LITERAL, CONST, CONSTEXPR, CONSTRUCT, DEFAULT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, EXPLICIT, EXTERN, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INLINE, INT, INTEGER_LITERAL, INTERNAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NOTHROW, NULL_LITERAL, OVERRIDE, PIPE, PLUS, PLUS_PLUS, PRIVATE, PROTECTED, PUBLIC, RANGLE, REM, SBYTE, SEMICOLON, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STATIC, STRING_LITERAL, SUPPRESS, THIS, THROW, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}">
    <group first="{#, ABSTRACT, AMP, AMP_AMP, ARROW, AS, ASSIGN, AUTO, BASE, BOOL, BYTE, CARET, CAST, CDECL, CHAR, CHAR_LITERAL, CONST, CONSTEXPR, CONSTRUCT, DEFAULT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, EXPLICIT, EXTERN, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INLINE, INT, INTEGER_LITERAL, INTERNAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NOTHROW, NULL_LITERAL, OVERRIDE, PIPE, PLUS, PLUS_PLUS, PRIVATE, PROTECTED, PUBLIC, RANGLE, REM, SBYTE, SEMICOLON, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STATIC, STRING_LITERAL, SUPPRESS, THIS, THROW, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}">
     <sequence first="{#, ABSTRACT, AMP, AMP_AMP, ARROW, AS, ASSIGN, AUTO, BASE, BOOL, BYTE, CARET, CAST, CDECL, CHAR, CHAR_LITERAL, CONST, CONSTEXPR, CONSTRUCT, DEFAULT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, EXPLICIT, EXTERN, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INLINE, INT, INTEGER_LITERAL, INTERNAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NOTHROW, NULL_LITERAL, OVERRIDE, PIPE, PLUS, PLUS_PLUS, PRIVATE, PROTECTED, PUBLIC, RANGLE, REM, SBYTE, SEMICOLON, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STATIC, STRING_LITERAL, SUPPRESS, THIS, THROW, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}">
      <sequence first="{#, ABSTRACT, AMP, AMP_AMP, ARROW, AS, ASSIGN, AUTO, BASE, BOOL, BYTE, CARET, CAST, CDECL, CHAR, CHAR_LITERAL, CONST, CONSTEXPR, CONSTRUCT, DEFAULT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, EXPLICIT, EXTERN, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INLINE, INT, INTEGER_LITERAL, INTERNAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NOTHROW, NULL_LITERAL, OVERRIDE, PIPE, PLUS, PLUS_PLUS, PRIVATE, PROTECTED, PUBLIC, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STATIC, STRING_LITERAL, SUPPRESS, THIS, THROW, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}">
       <sequence first="{#, ABSTRACT, AMP, AMP_AMP, ASSIGN, AUTO, BOOL, BYTE, CDECL, CHAR, CONST, CONSTEXPR, DEFAULT, DOT, DOUBLE, EXPLICIT, EXTERN, FLOAT, ID, INLINE, INT, INTERNAL, LBRACKET, LONG, NEW, NOTHROW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, SBYTE, SHORT, STAR, STATIC, SUPPRESS, THROW, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}">
        <sequence first="{#, ABSTRACT, AMP, AMP_AMP, AUTO, BOOL, BYTE, CDECL, CHAR, CONST, CONSTEXPR, DEFAULT, DOT, DOUBLE, EXPLICIT, EXTERN, FLOAT, ID, INLINE, INT, INTERNAL, LBRACKET, LONG, NEW, NOTHROW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, SBYTE, SHORT, STAR, STATIC, SUPPRESS, THROW, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}">
         <sequence first="{#, ABSTRACT, AMP, AMP_AMP, AUTO, BOOL, BYTE, CDECL, CHAR, CONST, CONSTEXPR, DEFAULT, DOT, DOUBLE, EXPLICIT, EXTERN, FLOAT, ID, INLINE, INT, INTERNAL, LBRACKET, LONG, NEW, NOTHROW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, SBYTE, SHORT, STAR, STATIC, SUPPRESS, THROW, UCHAR, UINT, ULONG, UNIT_TEST, USHORT, VIRTUAL, VOID, WCHAR, WINAPI}">
          <sequence first="{#, ABSTRACT, CDECL, CONST, CONSTEXPR, DEFAULT, EXPLICIT, EXTERN, INLINE, INTERNAL, NEW, NOTHROW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, STATIC, SUPPRESS, THROW, UNIT_TEST, VIRTUAL, WINAPI}">
           <action first="{#, ABSTRACT, CDECL, CONSTEXPR, DEFAULT, EXPLICIT, EXTERN, INLINE, INTERNAL, NEW, NOTHROW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, STATIC, SUPPRESS, THROW, UNIT_TEST, VIRTUAL, WINAPI}">
            <nonterminal first="{#, ABSTRACT, CDECL, CONSTEXPR, DEFAULT, EXPLICIT, EXTERN, INLINE, INTERNAL, NEW, NOTHROW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, STATIC, SUPPRESS, THROW, UNIT_TEST, VIRTUAL, WINAPI}" ruleName="Specifiers"/>
           </action>
           <token first="{CONST}" name="CONST"/>
          </sequence>
          <nonterminal first="{#, AMP, AMP_AMP, AUTO, BOOL, BYTE, CHAR, CONST, DOT, DOUBLE, FLOAT, ID, INT, LBRACKET, LONG, SBYTE, SHORT, STAR, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}" ruleName="TypeExpr"/>
         </sequence>
         <nonterminal first="{ID}" ruleName="Identifier"/>
        </sequence>
        <token first="{ASSIGN}" name="ASSIGN"/>
       </sequence>
       <nonterminal first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}" ruleName="Expression"/>
      </sequence>
      <token first="{SEMICOLON}" name="SEMICOLON"/>
     </sequence>
    </group>
   </action>
  </rule>
 </grammar>
</parserFile>
