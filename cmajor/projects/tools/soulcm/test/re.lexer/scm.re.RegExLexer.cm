// this file has been generated from 'C:/work/cmajor-mod/cmajor/projects/tools/soulcm/test/re.lexer/re.lexer' using SoulCm lexer generator scmlg version 5.0.0

using System;
using System.Collections;
using re.token;

namespace scm.re
{
    public class RegExLexer : System.Lex.Lexer
    {
        public RegExLexer(const uchar* start_, const uchar* end_, const string& fileName_) : 
            base(start_, end_, fileName_, "scm.re.RegExLexer.classmap")
        {
            auto classMapResult = System.Lex.GetClassMap(ClassMapName());
            if (classMapResult.Error())
            {
                SetErrorId(classMapResult.GetErrorId());
                return;
            }
            SetClassMap(classMapResult.Value());
            SetKeywordMap(GetKeywordMap());
        }
        public override int NextState(int state, uchar c)
        {
            int cls = GetClass(c);
            switch (state)
            {
                case 0:
                {
                    switch (cls)
                    {
                        case 0:
                        case 1:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        {
                            return 1;
                        }
                        case 2:
                        {
                            return 2;
                        }
                        case 3:
                        {
                            return 3;
                        }
                        case 4:
                        {
                            return 4;
                        }
                        case 5:
                        {
                            return 5;
                        }
                        case 6:
                        {
                            return 6;
                        }
                        case 7:
                        {
                            return 7;
                        }
                        case 8:
                        {
                            return 8;
                        }
                        case 9:
                        {
                            return 9;
                        }
                        case 10:
                        {
                            return 10;
                        }
                        case 11:
                        {
                            return 11;
                        }
                        case 12:
                        {
                            return 12;
                        }
                        case 13:
                        {
                            return 13;
                        }
                        case 14:
                        {
                            return 14;
                        }
                        case 15:
                        {
                            return 15;
                        }
                        case 33:
                        {
                            return 16;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 16:
                {
                    switch (cls)
                    {
                        case 0:
                        case 1:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        {
                            return 1;
                        }
                        case 2:
                        {
                            return 2;
                        }
                        case 3:
                        {
                            return 3;
                        }
                        case 4:
                        {
                            return 4;
                        }
                        case 5:
                        {
                            return 5;
                        }
                        case 6:
                        {
                            return 6;
                        }
                        case 7:
                        {
                            return 7;
                        }
                        case 8:
                        {
                            return 8;
                        }
                        case 9:
                        {
                            return 9;
                        }
                        case 10:
                        {
                            return 10;
                        }
                        case 11:
                        {
                            return 11;
                        }
                        case 12:
                        {
                            return 12;
                        }
                        case 13:
                        {
                            return 13;
                        }
                        case 14:
                        {
                            return 14;
                        }
                        case 15:
                        {
                            return 15;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 15:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 16:
                        {
                            return 17;
                        }
                        case 17:
                        {
                            return 18;
                        }
                        case 18:
                        {
                            return 19;
                        }
                        case 19:
                        {
                            return 20;
                        }
                        case 21:
                        {
                            return 21;
                        }
                        case 22:
                        {
                            return 22;
                        }
                        case 24:
                        {
                            return 23;
                        }
                        case 29:
                        {
                            return 24;
                        }
                        case 30:
                        {
                            return 25;
                        }
                        case 31:
                        {
                            return 26;
                        }
                        case 33:
                        {
                            return 27;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 27:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 16:
                        {
                            return 17;
                        }
                        case 17:
                        {
                            return 18;
                        }
                        case 18:
                        {
                            return 19;
                        }
                        case 19:
                        {
                            return 20;
                        }
                        case 21:
                        {
                            return 21;
                        }
                        case 22:
                        {
                            return 22;
                        }
                        case 24:
                        {
                            return 23;
                        }
                        case 26:
                        {
                            return 28;
                        }
                        case 27:
                        {
                            return 29;
                        }
                        case 33:
                        {
                            return 30;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 30:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 16:
                        {
                            return 17;
                        }
                        case 17:
                        {
                            return 18;
                        }
                        case 18:
                        {
                            return 19;
                        }
                        case 19:
                        {
                            return 20;
                        }
                        case 21:
                        {
                            return 21;
                        }
                        case 22:
                        {
                            return 22;
                        }
                        case 24:
                        {
                            return 23;
                        }
                        case 29:
                        {
                            return 24;
                        }
                        case 31:
                        {
                            return 26;
                        }
                        case 26:
                        {
                            return 28;
                        }
                        case 27:
                        {
                            return 29;
                        }
                        case 25:
                        {
                            return 31;
                        }
                        case 28:
                        {
                            return 32;
                        }
                        case 33:
                        {
                            return 33;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 33:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 16:
                        {
                            return 17;
                        }
                        case 17:
                        {
                            return 18;
                        }
                        case 18:
                        {
                            return 19;
                        }
                        case 21:
                        {
                            return 21;
                        }
                        case 22:
                        {
                            return 22;
                        }
                        case 24:
                        {
                            return 23;
                        }
                        case 29:
                        {
                            return 24;
                        }
                        case 26:
                        {
                            return 28;
                        }
                        case 27:
                        {
                            return 29;
                        }
                        case 25:
                        {
                            return 31;
                        }
                        case 33:
                        {
                            return 34;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 34:
                {
                    switch (cls)
                    {
                        case 16:
                        {
                            return 17;
                        }
                        case 17:
                        {
                            return 18;
                        }
                        case 21:
                        {
                            return 21;
                        }
                        case 22:
                        {
                            return 22;
                        }
                        case 24:
                        {
                            return 23;
                        }
                        case 26:
                        {
                            return 28;
                        }
                        case 27:
                        {
                            return 29;
                        }
                        case 25:
                        {
                            return 31;
                        }
                        case 28:
                        {
                            return 32;
                        }
                        case 33:
                        {
                            return 35;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 35:
                {
                    switch (cls)
                    {
                        case 16:
                        {
                            return 17;
                        }
                        case 17:
                        {
                            return 18;
                        }
                        case 21:
                        {
                            return 21;
                        }
                        case 22:
                        {
                            return 22;
                        }
                        case 24:
                        {
                            return 23;
                        }
                        case 26:
                        {
                            return 28;
                        }
                        case 27:
                        {
                            return 29;
                        }
                        case 25:
                        {
                            return 31;
                        }
                        case 33:
                        {
                            return 36;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 36:
                {
                    switch (cls)
                    {
                        case 16:
                        {
                            return 17;
                        }
                        case 17:
                        {
                            return 18;
                        }
                        case 21:
                        {
                            return 21;
                        }
                        case 22:
                        {
                            return 22;
                        }
                        case 26:
                        {
                            return 28;
                        }
                        case 25:
                        {
                            return 31;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 32:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 37;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 37:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 38;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 38:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 39;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 39:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 40;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 40:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 41;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 41:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 42;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 42:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 31:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 43;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 43:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 44;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 44:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 37;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 29:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 44;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 28:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 43;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 26:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 40;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 25:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 39;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 24:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 38;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 23:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 24:
                        {
                            return 23;
                        }
                        case 33:
                        {
                            return 45;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 45:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 24:
                        {
                            return 23;
                        }
                        case 33:
                        {
                            return 46;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 46:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 47;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 47:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 48;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 48:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 42;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 22:
                {
                    switch (cls)
                    {
                        case 23:
                        case 24:
                        {
                            return 49;
                        }
                        case 33:
                        {
                            return 50;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 50:
                {
                    switch (cls)
                    {
                        case 23:
                        case 24:
                        {
                            return 49;
                        }
                        case 33:
                        {
                            return 51;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 51:
                {
                    switch (cls)
                    {
                        case 23:
                        case 24:
                        {
                            return 49;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 49:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 23:
                        case 24:
                        {
                            return 49;
                        }
                        case 33:
                        {
                            return 52;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 52:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 23:
                        case 24:
                        {
                            return 49;
                        }
                        case 33:
                        {
                            return 53;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 53:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 46;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 21:
                {
                    switch (cls)
                    {
                        case 23:
                        case 24:
                        {
                            return 49;
                        }
                        case 33:
                        {
                            return 50;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 20:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 54;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 54:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 55;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 55:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 56;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 56:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 57;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 57:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 58;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 58:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 59;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 59:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 60;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 60:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 61;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 61:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 48;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 19:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 62;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 62:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 63;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 63:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 64;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 64:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 65;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 65:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 47;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 18:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 66;
                        }
                        case 33:
                        {
                            return 67;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 67:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 66;
                        }
                        case 33:
                        {
                            return 68;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 68:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 66;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 66:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 66;
                        }
                        case 33:
                        {
                            return 69;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 69:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(13);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    switch (cls)
                    {
                        case 33:
                        {
                            return 53;
                        }
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 66;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 17:
                {
                    switch (cls)
                    {
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        {
                            return 66;
                        }
                        case 33:
                        {
                            return 67;
                        }
                        default:
                        {
                            return -1;
                        }
                    }
                    break;
                }
                case 14:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(12);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 13:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(11);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 12:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(10);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 11:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(9);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 10:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(8);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 9:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(7);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 8:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(6);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 7:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(5);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 6:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(4);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 5:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(3);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 4:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(2);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 3:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(1);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 2:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(0);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
                case 1:
                {
                    auto prevMatch = token.match;
                    token.match = lexeme;
                    long tokenId = GetTokenId(14);
                    if (tokenId == System.Lex.CONTINUE_TOKEN)
                    {
                        token.id = System.Lex.CONTINUE_TOKEN;
                        return -1;
                    }
                    else if (tokenId != System.Lex.INVALID_TOKEN)
                    {
                        token.id = tokenId;
                    }
                    else
                    {
                        token.match = prevMatch;
                    }
                    return -1;
                }
            }
            return -1;
        }
        public long GetTokenId(int ruleIndex)
        {
            switch (ruleIndex)
            {
                case 0:
                {
                    Retract();
                    return LPAREN;
                    break;
                }
                case 1:
                {
                    Retract();
                    return RPAREN;
                    break;
                }
                case 2:
                {
                    Retract();
                    return LBRACKET;
                    break;
                }
                case 3:
                {
                    Retract();
                    return RBRACKET;
                    break;
                }
                case 4:
                {
                    Retract();
                    return LBRACE;
                    break;
                }
                case 5:
                {
                    Retract();
                    return RBRACE;
                    break;
                }
                case 6:
                {
                    Retract();
                    return PIPE;
                    break;
                }
                case 7:
                {
                    Retract();
                    return STAR;
                    break;
                }
                case 8:
                {
                    Retract();
                    return PLUS;
                    break;
                }
                case 9:
                {
                    Retract();
                    return QUEST;
                    break;
                }
                case 10:
                {
                    Retract();
                    return DOT;
                    break;
                }
                case 11:
                {
                    Retract();
                    return CARET;
                    break;
                }
                case 12:
                {
                    Retract();
                    return MINUS;
                    break;
                }
                case 13:
                {
                    Retract();
                    return ESCAPE;
                    break;
                }
                case 14:
                {
                    Retract();
                    return CHARACTER;
                    break;
                }
            }
            return System.Lex.CONTINUE_TOKEN;
        }
        public RegExLexer_Variables vars;
    }

    public class RegExLexer_Variables
    {
        public RegExLexer_Variables()
        {
        }
    }

} // scm.re
