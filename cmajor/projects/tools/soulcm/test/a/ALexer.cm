// this file has been generated from 'C:/work/cmajor-mod/cmajor/projects/tools/soulcm/test/a/a.lexer' using SoulCm lexer generator scmlg version 5.0.0

using System;
using System.Collections;
using a.token;

public class ALexer : System.Lex.Lexer
{
    public ALexer(const uchar* start_, const uchar* end_, const string& fileName_) : 
        base(start_, end_, fileName_, "ALexer.classmap")
    {
        auto classMapResult = System.Lex.GetClassMap(ClassMapName());
        if (classMapResult.Error())
        {
            SetErrorId(classMapResult.GetErrorId());
            return;
        }
        SetClassMap(classMapResult.Value());
        SetKeywordMap(GetKeywordMap());
    }
    public override int NextState(int state, uchar c)
    {
        int cls = GetClass(c);
        switch (state)
        {
            case 0:
            {
                switch (cls)
                {
                    case 2:
                    {
                        return 1;
                    }
                    case 3:
                    {
                        return 2;
                    }
                    default:
                    {
                        return -1;
                    }
                }
                break;
            }
            case 2:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(1);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
            case 1:
            {
                auto prevMatch = token.match;
                token.match = lexeme;
                long tokenId = GetTokenId(0);
                if (tokenId == System.Lex.CONTINUE_TOKEN)
                {
                    token.id = System.Lex.CONTINUE_TOKEN;
                    return -1;
                }
                else if (tokenId != System.Lex.INVALID_TOKEN)
                {
                    token.id = tokenId;
                }
                else
                {
                    token.match = prevMatch;
                }
                return -1;
            }
        }
        return -1;
    }
    public long GetTokenId(int ruleIndex)
    {
        switch (ruleIndex)
        {
            case 0:
            {
                Retract();
                return A;
                break;
            }
            case 1:
            {
                Retract();
                return LPAREN;
                break;
            }
        }
        return System.Lex.CONTINUE_TOKEN;
    }
    public ALexer_Variables vars;
}

public class ALexer_Variables
{
    public ALexer_Variables()
    {
    }
}
