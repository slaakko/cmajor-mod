// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace scmlg.ast
{
    public class Token
    {
        public Token(long id_, const string& name_, const string& info_) : id(id_), name(name_), info(info_), collection(null)
        {
        }
        public Token(const string& name_, const string& info_) : id(-1), name(name_), info(info_), collection(null)
        {
        }
        public inline long Id() const
        {
            return id;
        }
        public void SetId(long id_)
        {
            id = id_;
        }
        public const string& Name() const
        {
            return name;
        }
        public const string& Info() const
        {
            return info;
        }
        public void SetCollection(Collection* collection_)
        {
            collection = collection_;
        }
        public inline Collection* GetCollection() const
        {
            return collection;
        }
        private long id;
        private string name;
        private string info;
        private Collection* collection;
    }

    public class TokenCollection : Collection
    {
        public TokenCollection(const string& name_) :
            base(CollectionKind.tokenCollection, name_), initialized(false), id(cast<long>(System.Collections.GetHashCode(Name())) & 0x7FFFFFFF)
        {
        }
        public inline bool Initialized() const
        {
            return initialized;
        }
        public void SetInitialized()
        {
            initialized = true;
        }
        public inline long Id() const
        {
            return id;
        }
        public void AddToken(Token* token)
        {
            if (token->Id() == -1)
            {
                long tokenId = (id << 32) | (tokens.Count() + 1);
                token->SetId(tokenId);
            }
            tokens.Add(UniquePtr<Token>(token));
            tokenMap[token->Id()] = token;
            token->SetCollection(this);
        }
        public Token* GetToken(long id) const
        {
            auto it = tokenMap.CFind(id);
            if (it != tokenMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public const List<UniquePtr<Token>>& Tokens() const
        {
            return tokens;
        }
        private bool initialized;
        private long id;
        private List<UniquePtr<Token>> tokens;
        private Map<long, Token*> tokenMap;
    }

    public class TokenFile : File
    {
        public TokenFile(const string& filePath_) : base(FileKind.tokenFile, filePath_)
        {
        }
        public void SetTokenCollection(TokenCollection* tokenCollection_)
        {
            tokenCollection.Reset(tokenCollection_);
            tokenCollection->SetFile(this);
        }
        public inline TokenCollection* GetTokenCollection() const
        {
            return tokenCollection.Get();
        }
        private UniquePtr<TokenCollection> tokenCollection;
    }
}

