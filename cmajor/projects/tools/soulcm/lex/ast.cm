// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace scm.lex.ast
{
    public enum FileKind
    {
        tokenFile, keywordFile, expressionFile, lexerFile, scmlgFile
    }

    public class File
    {
        public File(FileKind kind_, const string& filePath_) : kind(kind_), filePath(filePath_)
        {
        }
        public default virtual ~File();
        public inline FileKind Kind() const
        {
            return kind;
        }
        public inline const string& FilePath() const
        {
            return filePath;
        }
        private FileKind kind;
        private string filePath;
    }

    public enum CollectionKind
    {
        tokenCollection, keywordCollection, expressionCollection, lexer
    }

    public class Collection
    {
        public Collection(CollectionKind kind_, const string& name_) : kind(kind_), name(name_), file(null)
        {
        }
        public default virtual ~Collection();
        public inline CollectionKind Kind() const
        {
            return kind;
        }
        public inline const string& Name() const
        {
            return name;
        }
        public inline void SetFile(File* file_)
        {
            file = file_;
        }
        public inline File* GetFile() const
        {
            return file;
        }
        private CollectionKind kind;
        private string name;
        private File* file;
    }

    public class Token
    {
        public Token(long id_, const string& name_, const string& info_) : id(id_), name(name_), info(info_)
        {
        }
        public Token(const string& name_, const string& info_) : id(-1), name(name_), info(info_)
        {
        }
        public inline long Id() const
        {
            return id;
        }
        public inline void SetId(long id_)
        {
            id = id_;
        }
        public inline const string& Name() const
        {
            return name;
        }
        public inline const string& Info() const
        {
            return info;
        }
        public inline Collection* GetCollection() const
        {
            return collection;
        }
        public inline void SetCollection(Collection* collection_)
        {
            collection = collection_;
        }
        private long id;
        private string name;
        private string info;
        private Collection* collection;
    }

    public class TokenCollection : Collection
    {
        public TokenCollection(const string& name_) :
            base(CollectionKind.tokenCollection, name_), id(cast<long>(GetHashCode(name_) & 0x7FFFFFFFu))
        {
        }
        public void AddToken(Token* token)
        {
            if (token->Id() == -1)
            {
                token->SetId((id << 32) | (tokens.Count() + 1));
            }
            tokens.Add(UniquePtr<Token>(token));
            tokenMap[token->Id()] = token;
            token->SetCollection(this);
        }
        public Token* GetToken(long id) const
        {
            auto it = tokenMap.CFind(id);
            if (it != tokenMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        private long id;
        private List<UniquePtr<Token>> tokens;
        private Map<long, Token*> tokenMap;
    }

    public class TokenFile : File
    {
        public TokenFile(const string& filePath_) : base(FileKind.tokenFile, filePath_)
        {
        }
        public void SetTokenCollection(TokenCollection* tokenCollection_)
        {
            tokenCollection.Reset(tokenCollection_);
            tokenCollection->SetFile(this);
        }
        public TokenCollection* GetTokenCollection() const
        {
            return tokenCollection.Get();
        }
        private UniquePtr<TokenCollection> tokenCollection;
    }
}
