// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module scmpg.parser;

import cm.token;
import cm.parser;
import common.parser;
import scmpg.ast;

parser ScmpgFileParser
{
    lexer CmajorLexer;
    main;

    using CommonParser.ProjectKeyword;
    using CommonParser.QualifiedUtf8Id;
    using CommonParser.ParserKeyword;
    using ContainerFileParser.FilePath;

    ScmpgFile(var UniquePtr<scmpg.ast.ScmpgFile> scmpgFile) : scmpg.ast.ScmpgFile*
        ::= 
        (
            empty{ lexer.vars.matchFilePath = true; }
            ProjectKeyword:projectKeyword
            QualifiedUtf8Id:projectName
            {
                scmpgFile.Reset(new scmpg.ast.ScmpgFile(lexer.FileName(), projectName));
            }
            SEMICOLON
            (
                Declaration:declaration{ scmpgFile->AddDeclaration(declaration); }
            )*
        )
        {
            return scmpgFile.Release();
        }
        ;

    Declaration : scmpg.ast.Declaration*
        ::= ParserFileDeclaration:parserFileDeclaration{ return parserFileDeclaration; }
        ;

    ParserFileDeclaration(var System.Lex.Span span, var bool external) : scmpg.ast.Declaration*
        ::= 
        (
            (
                EXTERN{ external = true; } | empty{ external = false; }
            ) 
            ParserKeyword:parserKeyword{ span = lexer.GetSpan(pos); }
            FilePath:filePath 
            SEMICOLON
        )
        {
            return new scmpg.ast.ParserFileDeclaration(span, filePath, external);
        }
        ;
}
