// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cm.parser;

import cm.ast;
import cm.token;

parser ExpressionParser
{
    lexer CmajorLexer;

    using TypeExprParser.TypeExpr;
    using LiteralParser.Literal;
    using FundamentalTypeParser.FundamentalType;
    using TemplateParser.TemplateId;
    using IdentifierParser.Identifier;

    Expression(cm.parser.Context* context) : cm.ast.Node*
        ::=
        (
            Equivalence(context):equivalence{ return equivalence; }
        )
        ;

    Equivalence(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Implication(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                EQUIVALENCE{ if (!context->ParsingConcept() || context->ParsingTemplateId()) pass = false; }
                Implication(context):right{ expr.Reset(new cm.ast.EquivalenceNode(span, lexer.FileIndex(), expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    Implication(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Disjunction(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                IMPLICATION{ if (!context->ParsingConcept() || context->ParsingTemplateId()) pass = false; }
                Implication(context):right{ expr.Reset(new cm.ast.ImplicationNode(span, lexer.FileIndex(), expr.Release(), right)); }
            )?
        )
        {
            return expr.Release();
        }
        ;

    Disjunction(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Conjunction(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                DISJUNCTION{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                Conjunction(context):right{ expr.Reset(new cm.ast.DisjunctionNode(span, lexer.FileIndex(), expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    Conjunction(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            BitOr(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                AMP_AMP{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                BitOr(context):right{ expr.Reset(new cm.ast.ConjunctionNode(span, lexer.FileIndex(), expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    BitOr(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            BitXor(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                PIPE{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                BitXor(context):right{ expr.Reset(new cm.ast.BitOrNode(span, lexer.FileIndex(), expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    BitXor(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            BitAnd(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                CARET{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                BitAnd(context):right{ expr.Reset(new cm.ast.BitXorNode(span, lexer.FileIndex(), expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    BitAnd(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Equality(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                AMP{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                Equality(context):right{ expr.Reset(new cm.ast.BitAndNode(span, lexer.FileIndex(), expr.Release(), right)); }
            )*
        )
        {
            return expr.Release();
        }
        ;

    Equality(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Relational(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                EqualityOp:op{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                Relational(context):right
                {
                    switch (op)
                    {
                        case cm.parser.Operator.eq:
                        {
                            expr.Reset(new cm.ast.EqualNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.neq:
                        {
                            expr.Reset(new cm.ast.NotEqualNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                    }
                }
            )*
        )
        {
            return expr.Release();
        }
        ;

    EqualityOp : cm.parser.Operator
        ::= EQ{ return cm.parser.Operator.eq; }
        |   NEQ{ return cm.parser.Operator.neq; }
        ;

    Relational(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span, var cm.parser.Operator op) : cm.ast.Node*
        ::=
        (
            Shift(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                (
                    RelationalOp:relOp
                    {
                        op = relOp;
                        if (context->ParsingLValueOrExprStatementAndNotArgs())
                        {
                            pass = false;
                        }
                        else
                        {
                            context->PushParsingIsOrAs(false);
                        }
                    }
                |   IS
                    {
                        if (context->ParsingLValueOrExprStatementAndNotArgs())
                        {
                            pass = false;
                        }
                        else
                        {
                            op = cm.parser.Operator.is_;
                            context->PushParsingIsOrAs(true);
                        }
                    }
                    TypeExpr(context):isType
                |   AS
                    {
                        if (context->ParsingLValueOrExprStatementAndNotArgs())
                        {
                            pass = false;
                        }
                        else
                        {
                            op = cm.parser.Operator.as_;
                            context->PushParsingIsOrAs(true);
                        }
                    }
                    TypeExpr(context):asType
                )
                (   Shift(context):right | empty{ if (!context->ParsingIsOrAs()) pass = false; }    )
                {
                    context->PopParsingIsOrAs();
                    switch (op)
                    {
                        case cm.parser.Operator.lessOrEq:
                        {
                            expr.Reset(new cm.ast.LessOrEqualNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.greaterOrEq:
                        {
                            expr.Reset(new cm.ast.GreaterOrEqualNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.less:
                        {
                            expr.Reset(new cm.ast.LessNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.greater:
                        {
                            expr.Reset(new cm.ast.GreaterNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.is_:
                        {
                            expr.Reset(new cm.ast.IsNode(span, lexer.FileIndex(), expr.Release(), isType));
                            break;
                        }
                        case cm.parser.Operator.as_:
                        {
                            expr.Reset(new cm.ast.AsNode(span, lexer.FileIndex(), expr.Release(), asType));
                            break;
                        }
                    }
                }
            )*
        )
        {
            return expr.Release();
        }
        ;

    RelationalOp : cm.parser.Operator
        ::= LEQ{ return cm.parser.Operator.lessOrEq; }
        |   GEQ{ return cm.parser.Operator.greaterOrEq; }
        |   LANGLE{ return cm.parser.Operator.less; }
        |   RANGLE{ return cm.parser.Operator.greater; }
        ;

    Shift(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Additive(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                ShiftOp:op{ if (context->ParsingLValue()) pass = false; }
                empty{ context->BeginParsingArguments(); }
                Additive(context):right
                {
                    switch (op)
                    {
                        case cm.parser.Operator.shiftLeft:
                        {
                            expr.Reset(new cm.ast.ShiftLeftNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.shiftRight:
                        {
                            expr.Reset(new cm.ast.ShiftRightNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                    }
                    context->EndParsingArguments();
                }
                /
                {
                    context->EndParsingArguments();
                }
            )*
        )
        {
            return expr.Release();
        }
        ;

    ShiftOp : cm.parser.Operator
        ::= SHIFT_LEFT{ return cm.parser.Operator.shiftLeft; }
        |   SHIFT_RIGHT{ return cm.parser.Operator.shiftRight; }
        ;

    Additive(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Multiplicative(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                AdditiveOp:op{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                Multiplicative(context):right
                {
                    switch (op)
                    {
                        case cm.parser.Operator.plus:
                        {
                            expr.Reset(new cm.ast.AddNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.minus:
                        {
                            expr.Reset(new cm.ast.SubNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                    }
                }
            )*
        )
        {
            return expr.Release();
        }
        ;

    AdditiveOp : cm.parser.Operator
        ::= PLUS{ return cm.parser.Operator.plus; }
        |   MINUS{ return cm.parser.Operator.minus; }
        ;

    Multiplicative(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Prefix(context):left{ span = lexer.GetSpan(pos); expr.Reset(left); }
            (
                MultiplicativeOp:op{ if (context->ParsingLValueOrExprStatementAndNotArgs()) pass = false; }
                Prefix(context):right
                {
                    switch (op)
                    {
                        case cm.parser.Operator.mul:
                        {
                            expr.Reset(new cm.ast.MulNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.div:
                        {
                            expr.Reset(new cm.ast.DivNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                        case cm.parser.Operator.rem:
                        {
                            expr.Reset(new cm.ast.RemNode(span, lexer.FileIndex(), expr.Release(), right));
                            break;
                        }
                    }
                }
            )*
        )
        {
            return expr.Release();
        }
        ;

    MultiplicativeOp : cm.parser.Operator
        ::= STAR{ return cm.parser.Operator.mul; }
        |   DIV{ return cm.parser.Operator.div; }
        |   REM{ return cm.parser.Operator.rem; }
        ;

    Prefix(cm.parser.Context* context, var UniquePtr<cm.ast.Node> prefix, var System.Lex.Span span, var cm.parser.Operator op) : cm.ast.Node*
        ::=
        (
            PrefixOp:prefixOp
            {
                op = prefixOp;
                span = lexer.GetSpan(pos);
                if (op != cm.parser.Operator.plusPlus && op != cm.parser.Operator.minusMinus && context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false;
            }
            Prefix(context):p
            {
                prefix.Reset(p);
                switch (op)
                {
                    case cm.parser.Operator.plusPlus:
                    {
                        return new cm.ast.PrefixIncrementNode(span, lexer.FileIndex(), prefix.Release());
                    }
                    case cm.parser.Operator.minusMinus:
                    {
                        return new cm.ast.PrefixDecrementNode(span, lexer.FileIndex(), prefix.Release());
                    }
                    case cm.parser.Operator.plus:
                    {
                        return new cm.ast.UnaryPlusNode(span, lexer.FileIndex(), prefix.Release());
                    }
                    case cm.parser.Operator.minus:
                    {
                        return new cm.ast.UnaryMinusNode(span, lexer.FileIndex(), prefix.Release());
                    }
                    case cm.parser.Operator.not_:
                    {
                        return new cm.ast.NotNode(span, lexer.FileIndex(), prefix.Release());
                    }
                    case cm.parser.Operator.complement:
                    {
                        return new cm.ast.ComplementNode(span, lexer.FileIndex(), prefix.Release());
                    }
                    case cm.parser.Operator.deref:
                    {
                        return new cm.ast.DerefNode(span, lexer.FileIndex(), prefix.Release());
                    }
                    case cm.parser.Operator.addrOf:
                    {
                        return new cm.ast.AddrOfNode(span, lexer.FileIndex(), prefix.Release());
                    }
                }
            }
        )
        |   Postfix(context):postfix{ return postfix; }
        ;

    PrefixOp : cm.parser.Operator
        ::= PLUS_PLUS{ return cm.parser.Operator.plusPlus; }
        |   MINUS_MINUS{ return cm.parser.Operator.minusMinus; }
        |   PLUS{ return cm.parser.Operator.plus; }
        |   MINUS{ return cm.parser.Operator.minus; }
        |   EXCLAMATION{ return cm.parser.Operator.not_; }
        |   TILDE{ return cm.parser.Operator.complement; }
        |   STAR{ return cm.parser.Operator.deref; }
        |   AMP{ return cm.parser.Operator.addrOf; }
        ;

    Postfix(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            Primary(context):primary{ span = lexer.GetSpan(pos); expr.Reset(primary); }
            (   PLUS_PLUS{ expr.Reset(new cm.ast.PostfixIncrementNode(span, lexer.FileIndex(), expr.Release())); }
            |   MINUS_MINUS{ expr.Reset(new cm.ast.PostfixDecrementNode(span, lexer.FileIndex(), expr.Release())); }
            |   DOT Identifier:dotMember{ expr.Reset(new cm.ast.DotNode(span, lexer.FileIndex(), expr.Release(), dotMember)); }
            |   ARROW  Identifier:arrowMember{ expr.Reset(new cm.ast.ArrowNode(span, lexer.FileIndex(), expr.Release(), arrowMember)); }
            |   LBRACKET{ context->PushParsingLValue(false); context->PushParsingExpressionStatement(false); }
                Expression(context):index{ context->PopParsingExpressionStatement(); context->PopParsingLValue(); }
                RBRACKET{ expr.Reset(new cm.ast.IndexingNode(span, lexer.FileIndex(), expr.Release(), index)); }
            |   LPAREN{ expr.Reset(new cm.ast.InvokeNode(span, lexer.FileIndex(), expr.Release())); } ArgumentList(context, expr.Get()):args RPAREN
            )*
        )
        {
            return expr.Release();
        }
        ;

    Primary(cm.parser.Context* context, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (   LPAREN{ span = lexer.GetSpan(pos); } Expression(context):expr RPAREN{ return new cm.ast.ParenthesizedExpressionNode(span, lexer.FileIndex(), expr); }
        |   Literal(context):literal{ return literal; }
        |   FundamentalType:fundamentalType{ return fundamentalType; }
        |   TemplateId(context):templateId{ return templateId; }
        |   Identifier:id{ return id; }
        |   THIS{ return new cm.ast.ThisNode(lexer.GetSpan(pos), lexer.FileIndex()); }
        |   BASE{ return new cm.ast.BaseNode(lexer.GetSpan(pos), lexer.FileIndex()); }
        |   SizeOfExpr(context):sizeOf{ return sizeOf; }
        |   TypeNameExpr(context):typeName{ return typeName; }
        |   TypeIdExpr(context):typeId{ return typeId; }
        |   CastExpr(context):castExpr{ return castExpr; }
        |   ConstructExpr(context):constructExpr{ return constructExpr; }
        |   NewExpr(context):newExpr{ return newExpr; }
        )
        ;

    ArgumentList(cm.parser.Context* context, cm.ast.Node* owner)
        ::= ExpressionList(context, owner):exprList?
        ;

    ExpressionList(cm.parser.Context* context, cm.ast.Node* owner)
        ::=
        (
            empty{ context->BeginParsingArguments(); }
            (
                Expression(context):arg{ owner->AddArgument(arg); } % COMMA
            )
            {
                context->EndParsingArguments();
            }
            /
            {
                context->EndParsingArguments();
            }
        )
        ;

    SizeOfExpr(cm.parser.Context* context, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            SIZEOF{ span = lexer.GetSpan(pos); } LPAREN Expression(context):expr RPAREN
        )
        {
            return new cm.ast.SizeOfNode(span, lexer.FileIndex(), expr);
        }
        ;

    TypeNameExpr(cm.parser.Context* context, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            TYPENAME{ span = lexer.GetSpan(pos); } LPAREN Expression(context):expr RPAREN
        )
        {
            return new cm.ast.TypeNameNode(span, lexer.FileIndex(), expr);
        }
        ;

    TypeIdExpr(cm.parser.Context* context, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            TYPEID{ span = lexer.GetSpan(pos); } LPAREN Expression(context):expr RPAREN
        )
        {
            return new cm.ast.TypeIdNode(span, lexer.FileIndex(), expr);
        }
        ;

    CastExpr(cm.parser.Context* context, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            CAST{ span = lexer.GetSpan(pos); }
            LANGLE TypeExpr(context):typeExpr RANGLE LPAREN Expression(context):expr RPAREN
        )
        {
            return new cm.ast.CastNode(span, lexer.FileIndex(), typeExpr, expr);
        }
        ;

    ConstructExpr(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            CONSTRUCT{ span = lexer.GetSpan(pos); }
            (
                LANGLE TypeExpr(context):typeExpr RANGLE
            )
            {
                expr.Reset(new cm.ast.ConstructNode(span, lexer.FileIndex(), typeExpr));
            }
            LPAREN ExpressionList(context, expr.Get()):exprList RPAREN
        )
        {
            return expr.Release();
        }
        ;

    NewExpr(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (
            NEW{ span = lexer.GetSpan(pos); }
            TypeExpr(context):typeExpr{ expr.Reset(new cm.ast.NewNode(span, lexer.FileIndex(), typeExpr)); }
            (
                LPAREN ArgumentList(context, expr.Get()):args RPAREN
            )?
        )
        {
            return expr.Release();
        }
        ;

    InvokeExpr(cm.parser.Context* context, var UniquePtr<cm.ast.Node> expr, var System.Lex.Span span) : cm.ast.Node*
        ::=
        (   TemplateId(context):templateId{ span = lexer.GetSpan(pos); expr.Reset(templateId); }
        |   Identifier:id{ span = lexer.GetSpan(pos); expr.Reset(id); }
        )
        (
            DOT Identifier:dotMemberId{ expr.Reset(new cm.ast.DotNode(span, lexer.FileIndex(), expr.Release(), dotMemberId)); }
        )*
        (
            LPAREN{ expr.Reset(new cm.ast.InvokeNode(span, lexer.FileIndex(), expr.Release())); }
            ArgumentList(context, expr.Get()):args
            RPAREN
        )
        {
            return expr.Release();
        }
        ;
}
