<parserFile>
 <grammar name="cm.parser.LiteralParser">
  <rule first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, LBRACE, LBRACKET, NULL_LITERAL, STRING_LITERAL, TRUE}" name="Literal">
   <choice first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, LBRACE, LBRACKET, NULL_LITERAL, STRING_LITERAL, TRUE}">
    <action first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, NULL_LITERAL, STRING_LITERAL, TRUE}">
     <nonterminal first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, NULL_LITERAL, STRING_LITERAL, TRUE}" ruleName="SimpleLiteral"/>
    </action>
    <action first="{LBRACE, LBRACKET}">
     <nonterminal first="{LBRACE, LBRACKET}" ruleName="ComplexLiteral"/>
    </action>
   </choice>
  </rule>
  <rule first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, NULL_LITERAL, STRING_LITERAL, TRUE}" name="SimpleLiteral">
   <group first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, NULL_LITERAL, STRING_LITERAL, TRUE}">
    <choice first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, NULL_LITERAL, STRING_LITERAL, TRUE}">
     <choice first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, STRING_LITERAL, TRUE}">
      <choice first="{CHAR_LITERAL, FALSE, FLOATING_LITERAL, INTEGER_LITERAL, TRUE}">
       <choice first="{FALSE, FLOATING_LITERAL, INTEGER_LITERAL, TRUE}">
        <choice first="{FALSE, FLOATING_LITERAL, TRUE}">
         <choice first="{FALSE, TRUE}">
          <action first="{TRUE}">
           <token first="{TRUE}" name="TRUE"/>
          </action>
          <action first="{FALSE}">
           <token first="{FALSE}" name="FALSE"/>
          </action>
         </choice>
         <action first="{FLOATING_LITERAL}">
          <token first="{FLOATING_LITERAL}" name="FLOATING_LITERAL"/>
         </action>
        </choice>
        <action first="{INTEGER_LITERAL}">
         <token first="{INTEGER_LITERAL}" name="INTEGER_LITERAL"/>
        </action>
       </choice>
       <action first="{CHAR_LITERAL}">
        <token first="{CHAR_LITERAL}" name="CHAR_LITERAL"/>
       </action>
      </choice>
      <action first="{STRING_LITERAL}">
       <token first="{STRING_LITERAL}" name="STRING_LITERAL"/>
      </action>
     </choice>
     <action first="{NULL_LITERAL}">
      <token first="{NULL_LITERAL}" name="NULL_LITERAL"/>
     </action>
    </choice>
   </group>
  </rule>
  <rule first="{LBRACE, LBRACKET}" name="ComplexLiteral">
   <choice first="{LBRACE, LBRACKET}">
    <action first="{LBRACKET}">
     <nonterminal first="{LBRACKET}" ruleName="ArrayLiteral"/>
    </action>
    <action first="{LBRACE}">
     <nonterminal first="{LBRACE}" ruleName="StructuredLiteral"/>
    </action>
   </choice>
  </rule>
  <rule first="{LBRACKET}" name="ArrayLiteral">
   <action first="{LBRACKET}">
    <group first="{LBRACKET}">
     <sequence first="{LBRACKET}">
      <sequence first="{LBRACKET}">
       <action first="{LBRACKET}">
        <token first="{LBRACKET}" name="LBRACKET"/>
       </action>
       <optional first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
        <group first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
         <list first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
          <sequence first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
           <action first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
            <nonterminal first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}" ruleName="Expression"/>
           </action>
           <kleene first="{#, COMMA}">
            <sequence first="{COMMA}">
             <token first="{COMMA}" name="COMMA"/>
             <action first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
              <nonterminal first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}" ruleName="Expression"/>
             </action>
            </sequence>
           </kleene>
          </sequence>
         </list>
        </group>
       </optional>
      </sequence>
      <token first="{RBRACKET}" name="RBRACKET"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{LBRACE}" name="StructuredLiteral">
   <action first="{LBRACE}">
    <group first="{LBRACE}">
     <sequence first="{LBRACE}">
      <sequence first="{LBRACE}">
       <action first="{LBRACE}">
        <token first="{LBRACE}" name="LBRACE"/>
       </action>
       <optional first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
        <group first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
         <list first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
          <sequence first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, COMMA, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
           <action first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
            <nonterminal first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}" ruleName="Expression"/>
           </action>
           <kleene first="{#, COMMA}">
            <sequence first="{COMMA}">
             <token first="{COMMA}" name="COMMA"/>
             <action first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}">
              <nonterminal first="{#, AMP, AMP_AMP, ARROW, AS, AUTO, BASE, BOOL, BYTE, CARET, CAST, CHAR, CHAR_LITERAL, CONSTRUCT, DISJUNCTION, DIV, DOT, DOUBLE, EQ, EQUIVALENCE, EXCLAMATION, FALSE, FLOAT, FLOATING_LITERAL, GEQ, ID, IMPLICATION, INT, INTEGER_LITERAL, IS, LANGLE, LBRACE, LBRACKET, LEQ, LONG, LPAREN, MINUS, MINUS_MINUS, NEQ, NEW, NULL_LITERAL, PIPE, PLUS, PLUS_PLUS, RANGLE, REM, SBYTE, SHIFT_LEFT, SHIFT_RIGHT, SHORT, SIZEOF, STAR, STRING_LITERAL, THIS, TILDE, TRUE, TYPEID, TYPENAME, UCHAR, UINT, ULONG, USHORT, VOID, WCHAR}" ruleName="Expression"/>
             </action>
            </sequence>
           </kleene>
          </sequence>
         </list>
        </group>
       </optional>
      </sequence>
      <token first="{RBRACE}" name="RBRACE"/>
     </sequence>
    </group>
   </action>
  </rule>
 </grammar>
</parserFile>
