// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using cm.ast;

namespace cm.parser
{
    public Result<UniquePtr<cm.ast.SourceFileNode>> ParseSourceFile(const string& sourceFilePath, bool debug, System.Lex.FileMap& fileMap)
    {
        Result<string> sourceFileContentResult = File.ReadAllText(sourceFilePath);
        if (sourceFileContentResult.Error())
        {
            return Result<UniquePtr<cm.ast.SourceFileNode>>(ErrorId(sourceFileContentResult.GetErrorId()));
        }
        string sourceFileContent = Rvalue(sourceFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(sourceFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<cm.ast.SourceFileNode>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        System.Lex.XmlParsingLog log(Console.Error());
        cm.lexer.CmajorLexer lexer(start, end, sourceFilePath);
        if (lexer.Error())
        {
            return Result<UniquePtr<cm.ast.SourceFileNode>>(ErrorId(lexer.GetErrorId()));
        }
        if (debug)
        {
            lexer.SetLog(&log);
        }
        lexer.SetRuleNameMapPtr(cm.parser.GetRuleNameMapPtr());
        int fileIndex = fileMap.MapFileName(sourceFilePath);
        lexer.SetFileIndex(fileIndex);
        cm.parser.Context context;
        Result<System.UniquePtr<cm.ast.SourceFileNode>> parseResult = SourceFileParser<cm.lexer.CmajorLexer>.Parse(lexer, &context);
        if (parseResult.Error()) return parseResult;
        fileMap.AddSourceFile(fileIndex, Rvalue(content), lexer.GetLineStartIndeces());
        return parseResult;
    }

    public Result<UniquePtr<cm.ast.Project>> ParseProjectFile(const string& projectFilePath, const string& config, cm.ast.BackEnd backend, const string& toolChain,
        const string& profile)
    {
        Result<string> projectFileContentResult = File.ReadAllText(projectFilePath);
        if (projectFileContentResult.Error())
        {
            return Result<UniquePtr<cm.ast.Project>>(ErrorId(projectFileContentResult.GetErrorId()));
        }
        string projectFileContent = Rvalue(projectFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(projectFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<cm.ast.Project>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        cm.lexer.CmajorLexer lexer(start, end, projectFilePath);
        if (lexer.Error())
        {
            return Result<UniquePtr<cm.ast.Project>>(ErrorId(lexer.GetErrorId()));
        }
        lexer.SetRuleNameMapPtr(cm.parser.GetRuleNameMapPtr());
        Result<UniquePtr<cm.ast.Project>> parseResult = ProjectFileParser<cm.lexer.CmajorLexer>.Parse(lexer, config, backend, toolChain, profile);
        if (parseResult.Error()) return parseResult;
        UniquePtr<cm.ast.Project> project = Rvalue(parseResult.Value());
        Result<bool> resolutionResult = project->ResolveDeclarations();
        if (resolutionResult.Error())
        {
            return Result<UniquePtr<cm.ast.Project>>(ErrorId(resolutionResult.GetErrorId()));
        }
        return Result<UniquePtr<cm.ast.Project>>(Rvalue(project));
    }

    public Result<UniquePtr<cm.ast.Solution>> ParseSolutionFile(const string& solutionFilePath)
    {
        Result<string> solutionFileContentResult = File.ReadAllText(solutionFilePath);
        if (solutionFileContentResult.Error())
        {
            return Result<UniquePtr<cm.ast.Solution>>(ErrorId(solutionFileContentResult.GetErrorId()));
        }
        string solutionFileContent = Rvalue(solutionFileContentResult.Value());
        Result<ustring> utf32Result = ToUtf32(solutionFileContent);
        if (utf32Result.Error())
        {
            return Result<UniquePtr<cm.ast.Solution>>(ErrorId(utf32Result.GetErrorId()));
        }
        ustring content = Rvalue(utf32Result.Value());
        uchar* start = content.Chars();
        uchar* end = content.Chars() + content.Length();
        cm.lexer.CmajorLexer lexer(start, end, solutionFilePath);
        lexer.SetRuleNameMapPtr(cm.parser.GetRuleNameMapPtr());
        Result<UniquePtr<cm.ast.Solution>> parseResult = SolutionFileParser<cm.lexer.CmajorLexer>.Parse(lexer);
        if (parseResult.Error()) return parseResult;
        UniquePtr<cm.ast.Solution> solution = Rvalue(parseResult.Value());
        Result<bool> resolutionResult = solution->ResolveDeclarations();
        if (resolutionResult.Error())
        {
            return Result<UniquePtr<cm.ast.Solution>>(ErrorId(resolutionResult.GetErrorId()));
        }
        return Result<UniquePtr<cm.ast.Solution>>(Rvalue(solution));
    }
}
