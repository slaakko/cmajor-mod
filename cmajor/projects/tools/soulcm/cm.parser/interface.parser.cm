// this file has been automatically generated from 'C:/work/cmajor-mod/cmajor/projects/tools/soulcm/cm.parser/interface.parser' using soul parser generator spg version 5.0.0

using System;
using System.Lex;
using System.Parsing;
using cm.ast;
using cm.token;

namespace cm.parser
{
    public static class InterfaceParser<LexerT>
    {
        public static Result<System.Parsing.Match> Interface(LexerT& lexer, cm.parser.Context* context)
        {
            System.Lex.RuleGuard<LexerT> ruleGuard(lexer, 1582658563396861953);
            System.Lex.Span span = System.Lex.Span();
            UniquePtr<cm.ast.InterfaceNode> interfaceNode = UniquePtr<cm.ast.InterfaceNode>();
            UniquePtr<cm.ast.AttributesNode> attrs;
            UniquePtr<System.Parsing.Value<cm.ast.Specifiers>> specifiers;
            UniquePtr<cm.ast.IdentifierNode> id;
            System.Parsing.Match match(false);
            System.Parsing.Match* parentMatch0 = &match;
            {
                long pos = lexer.GetPos();
                System.Parsing.Match match(false);
                System.Parsing.Match* parentMatch1 = &match;
                {
                    System.Parsing.Match match(false);
                    System.Parsing.Match* parentMatch2 = &match;
                    {
                        System.Parsing.Match match(false);
                        System.Parsing.Match* parentMatch3 = &match;
                        {
                            System.Parsing.Match match(false);
                            System.Parsing.Match* parentMatch4 = &match;
                            {
                                System.Parsing.Match match(false);
                                System.Parsing.Match* parentMatch5 = &match;
                                {
                                    System.Parsing.Match match(false);
                                    System.Parsing.Match* parentMatch6 = &match;
                                    {
                                        System.Parsing.Match match(false);
                                        System.Parsing.Match* parentMatch7 = &match;
                                        {
                                            System.Parsing.Match match(true);
                                            long save = lexer.GetPos();
                                            System.Parsing.Match* parentMatch8 = &match;
                                            {
                                                Result<System.Parsing.Match> matchResult = AttributeParser<LexerT>.Attributes(lexer, context);
                                                if (matchResult.Error())
                                                {
                                                    return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                                }
                                                System.Parsing.Match match = matchResult.Value();
                                                attrs.Reset(cast<cm.ast.AttributesNode*>(match.value));
                                                if (match.hit)
                                                {
                                                    *parentMatch8 = match;
                                                }
                                                else
                                                {
                                                    lexer.SetPos(save);
                                                }
                                            }
                                            *parentMatch7 = match;
                                        }
                                        if (match.hit)
                                        {
                                            System.Parsing.Match match(false);
                                            System.Parsing.Match* parentMatch9 = &match;
                                            {
                                                System.Parsing.Match match(false);
                                                System.Parsing.Match* parentMatch10 = &match;
                                                {
                                                    long pos = lexer.GetPos();
                                                    Result<System.Parsing.Match> matchResult = SpecifierParser<LexerT>.Specifiers(lexer);
                                                    if (matchResult.Error())
                                                    {
                                                        return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                                    }
                                                    System.Parsing.Match match = matchResult.Value();
                                                    specifiers.Reset(cast<System.Parsing.Value<cm.ast.Specifiers>*>(match.value));
                                                    if (match.hit)
                                                    {
                                                        span = lexer.GetSpan(pos);
                                                    }
                                                    *parentMatch10 = match;
                                                }
                                                *parentMatch9 = match;
                                            }
                                            *parentMatch7 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    if (match.hit)
                                    {
                                        System.Parsing.Match match(false);
                                        System.Parsing.Match* parentMatch11 = &match;
                                        {
                                            System.Parsing.Match match(false);
                                            if (*lexer == INTERFACE)
                                            {
                                                auto incResult0 = ++lexer; 
                                                if (incResult0.Error())
                                                {
                                                    return Result<System.Parsing.Match>(ErrorId(incResult0.GetErrorId()));
                                                }
                                                match.hit = true;
                                            }
                                            *parentMatch11 = match;
                                        }
                                        *parentMatch6 = match;
                                    }
                                    *parentMatch5 = match;
                                }
                                if (match.hit)
                                {
                                    System.Parsing.Match match(false);
                                    System.Parsing.Match* parentMatch12 = &match;
                                    {
                                        System.Parsing.Match match(false);
                                        System.Parsing.Match* parentMatch13 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Result<System.Parsing.Match> matchResult = IdentifierParser<LexerT>.Identifier(lexer);
                                            if (matchResult.Error())
                                            {
                                                return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                            }
                                            System.Parsing.Match match = matchResult.Value();
                                            id.Reset(cast<cm.ast.IdentifierNode*>(match.value));
                                            if (match.hit)
                                            {
                                                interfaceNode.Reset(new cm.ast.InterfaceNode(span, specifiers->value, id.Release(), attrs.Release()));
                                            }
                                            *parentMatch13 = match;
                                        }
                                        *parentMatch12 = match;
                                    }
                                    *parentMatch5 = match;
                                }
                                *parentMatch4 = match;
                            }
                            if (match.hit)
                            {
                                System.Parsing.Match match(false);
                                System.Parsing.Match* parentMatch14 = &match;
                                {
                                    System.Parsing.Match match(false);
                                    if (*lexer == LBRACE)
                                    {
                                        auto incResult1 = ++lexer; 
                                        if (incResult1.Error())
                                        {
                                            return Result<System.Parsing.Match>(ErrorId(incResult1.GetErrorId()));
                                        }
                                        match.hit = true;
                                    }
                                    *parentMatch14 = match;
                                }
                                *parentMatch4 = match;
                            }
                            *parentMatch3 = match;
                        }
                        if (match.hit)
                        {
                            System.Parsing.Match match(false);
                            System.Parsing.Match* parentMatch15 = &match;
                            {
                                Result<System.Parsing.Match> matchResult = InterfaceParser<LexerT>.InterfaceContent(lexer, context, interfaceNode.Get());
                                if (matchResult.Error())
                                {
                                    return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                }
                                System.Parsing.Match match = matchResult.Value();
                                *parentMatch15 = match;
                            }
                            *parentMatch3 = match;
                        }
                        *parentMatch2 = match;
                    }
                    if (match.hit)
                    {
                        System.Parsing.Match match(false);
                        System.Parsing.Match* parentMatch16 = &match;
                        {
                            System.Parsing.Match match(false);
                            if (*lexer == RBRACE)
                            {
                                auto incResult2 = ++lexer; 
                                if (incResult2.Error())
                                {
                                    return Result<System.Parsing.Match>(ErrorId(incResult2.GetErrorId()));
                                }
                                match.hit = true;
                            }
                            *parentMatch16 = match;
                        }
                        *parentMatch2 = match;
                    }
                    *parentMatch1 = match;
                }
                if (match.hit)
                {
                    return Result<System.Parsing.Match>(System.Parsing.Match(true, interfaceNode.Release()));
                }
                *parentMatch0 = match;
            }
            if (!match.hit)
            {
                match.value = null;
            }
            return Result<System.Parsing.Match>(match);
        }
        public static Result<System.Parsing.Match> InterfaceContent(LexerT& lexer, cm.parser.Context* context, cm.ast.InterfaceNode* interfaceNode)
        {
            System.Lex.RuleGuard<LexerT> ruleGuard(lexer, 1582658563396861954);
            UniquePtr<cm.ast.MemberFunctionNode> interfaceMemberFunction;
            System.Parsing.Match match(true);
            System.Parsing.Match* parentMatch0 = &match;
            {
                while (true)
                {
                    long save = lexer.GetPos();
                    {
                        System.Parsing.Match match(false);
                        System.Parsing.Match* parentMatch1 = &match;
                        {
                            System.Parsing.Match match(false);
                            System.Parsing.Match* parentMatch2 = &match;
                            {
                                long pos = lexer.GetPos();
                                Result<System.Parsing.Match> matchResult = InterfaceParser<LexerT>.InterfaceMemberFunction(lexer, context);
                                if (matchResult.Error())
                                {
                                    return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                }
                                System.Parsing.Match match = matchResult.Value();
                                interfaceMemberFunction.Reset(cast<cm.ast.MemberFunctionNode*>(match.value));
                                if (match.hit)
                                {
                                    interfaceNode->AddMember(interfaceMemberFunction.Release());
                                }
                                *parentMatch2 = match;
                            }
                            *parentMatch1 = match;
                        }
                        if (match.hit)
                        {
                            *parentMatch0 = match;
                        }
                        else
                        {
                            lexer.SetPos(save);
                            break;
                        }
                    }
                }
            }
            if (!match.hit)
            {
                match.value = null;
            }
            return Result<System.Parsing.Match>(match);
        }
        public static Result<System.Parsing.Match> InterfaceMemberFunction(LexerT& lexer, cm.parser.Context* context)
        {
            System.Lex.RuleGuard<LexerT> ruleGuard(lexer, 1582658563396861955);
            System.Lex.Span span = System.Lex.Span();
            UniquePtr<cm.ast.MemberFunctionNode> memberFunctionNode = UniquePtr<cm.ast.MemberFunctionNode>();
            UniquePtr<cm.ast.AttributesNode> attrs;
            UniquePtr<cm.ast.Node> returnType;
            UniquePtr<System.Parsing.Value<ustring>> groupId;
            System.Parsing.Match match(false);
            System.Parsing.Match* parentMatch0 = &match;
            {
                long pos = lexer.GetPos();
                System.Parsing.Match match(false);
                System.Parsing.Match* parentMatch1 = &match;
                {
                    System.Parsing.Match match(false);
                    System.Parsing.Match* parentMatch2 = &match;
                    {
                        System.Parsing.Match match(false);
                        System.Parsing.Match* parentMatch3 = &match;
                        {
                            System.Parsing.Match match(false);
                            System.Parsing.Match* parentMatch4 = &match;
                            {
                                System.Parsing.Match match(false);
                                System.Parsing.Match* parentMatch5 = &match;
                                {
                                    System.Parsing.Match match(true);
                                    long save = lexer.GetPos();
                                    System.Parsing.Match* parentMatch6 = &match;
                                    {
                                        Result<System.Parsing.Match> matchResult = AttributeParser<LexerT>.Attributes(lexer, context);
                                        if (matchResult.Error())
                                        {
                                            return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                        }
                                        System.Parsing.Match match = matchResult.Value();
                                        attrs.Reset(cast<cm.ast.AttributesNode*>(match.value));
                                        if (match.hit)
                                        {
                                            *parentMatch6 = match;
                                        }
                                        else
                                        {
                                            lexer.SetPos(save);
                                        }
                                    }
                                    *parentMatch5 = match;
                                }
                                if (match.hit)
                                {
                                    System.Parsing.Match match(false);
                                    System.Parsing.Match* parentMatch7 = &match;
                                    {
                                        System.Parsing.Match match(false);
                                        System.Parsing.Match* parentMatch8 = &match;
                                        {
                                            long pos = lexer.GetPos();
                                            Result<System.Parsing.Match> matchResult = TypeExprParser<LexerT>.TypeExpr(lexer, context);
                                            if (matchResult.Error())
                                            {
                                                return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                            }
                                            System.Parsing.Match match = matchResult.Value();
                                            returnType.Reset(cast<cm.ast.Node*>(match.value));
                                            if (match.hit)
                                            {
                                                span = lexer.GetSpan(pos);
                                            }
                                            *parentMatch8 = match;
                                        }
                                        *parentMatch7 = match;
                                    }
                                    *parentMatch5 = match;
                                }
                                *parentMatch4 = match;
                            }
                            if (match.hit)
                            {
                                System.Parsing.Match match(false);
                                System.Parsing.Match* parentMatch9 = &match;
                                {
                                    System.Parsing.Match match(false);
                                    System.Parsing.Match* parentMatch10 = &match;
                                    {
                                        long pos = lexer.GetPos();
                                        Result<System.Parsing.Match> matchResult = InterfaceParser<LexerT>.InterfaceFunctionGroupId(lexer);
                                        if (matchResult.Error())
                                        {
                                            return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                        }
                                        System.Parsing.Match match = matchResult.Value();
                                        groupId.Reset(cast<System.Parsing.Value<ustring>*>(match.value));
                                        if (match.hit)
                                        {
                                            memberFunctionNode.Reset(new cm.ast.MemberFunctionNode(span, cm.ast.Specifiers(), returnType.Release(), groupId->value, attrs.Release()));
                                        }
                                        *parentMatch10 = match;
                                    }
                                    *parentMatch9 = match;
                                }
                                *parentMatch4 = match;
                            }
                            *parentMatch3 = match;
                        }
                        if (match.hit)
                        {
                            System.Parsing.Match match(false);
                            System.Parsing.Match* parentMatch11 = &match;
                            {
                                Result<System.Parsing.Match> matchResult = ParameterParser<LexerT>.ParameterList(lexer, context, memberFunctionNode.Get());
                                if (matchResult.Error())
                                {
                                    return Result<System.Parsing.Match>(ErrorId(matchResult.GetErrorId()));
                                }
                                System.Parsing.Match match = matchResult.Value();
                                *parentMatch11 = match;
                            }
                            *parentMatch3 = match;
                        }
                        *parentMatch2 = match;
                    }
                    if (match.hit)
                    {
                        System.Parsing.Match match(false);
                        System.Parsing.Match* parentMatch12 = &match;
                        {
                            System.Parsing.Match match(false);
                            if (*lexer == SEMICOLON)
                            {
                                auto incResult0 = ++lexer; 
                                if (incResult0.Error())
                                {
                                    return Result<System.Parsing.Match>(ErrorId(incResult0.GetErrorId()));
                                }
                                match.hit = true;
                            }
                            *parentMatch12 = match;
                        }
                        *parentMatch2 = match;
                    }
                    *parentMatch1 = match;
                }
                if (match.hit)
                {
                    return Result<System.Parsing.Match>(System.Parsing.Match(true, memberFunctionNode.Release()));
                }
                *parentMatch0 = match;
            }
            if (!match.hit)
            {
                match.value = null;
            }
            return Result<System.Parsing.Match>(match);
        }
        public static Result<System.Parsing.Match> InterfaceFunctionGroupId(LexerT& lexer)
        {
            System.Lex.RuleGuard<LexerT> ruleGuard(lexer, 1582658563396861956);
            System.Parsing.Match match(false);
            System.Parsing.Match* parentMatch0 = &match;
            {
                long pos = lexer.GetPos();
                System.Parsing.Match match(false);
                if (*lexer == ID)
                {
                    auto incResult0 = ++lexer; 
                    if (incResult0.Error())
                    {
                        return Result<System.Parsing.Match>(ErrorId(incResult0.GetErrorId()));
                    }
                    match.hit = true;
                }
                if (match.hit)
                {
                    return Result<System.Parsing.Match>(System.Parsing.Match(true, new System.Parsing.Value<ustring>(lexer.GetToken(pos).ToString())));
                }
                *parentMatch0 = match;
            }
            if (!match.hit)
            {
                match.value = null;
            }
            return Result<System.Parsing.Match>(match);
        }
    }

    new class InterfaceParser<CmajorLexer>;

} // namespace cm.parser
