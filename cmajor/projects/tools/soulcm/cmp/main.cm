// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using cm.parser;

Result<bool> ParseSourceFiles(cm.ast.Project* project, bool verbose, bool debug, System.Lex.FileMap& fileMap)
{
    for (const auto& sourceFile : project->SourceFilePaths())
    {
        if (verbose)
        {
            Console.Out() << ">> " << sourceFile << endl();
        }
        auto result = ParseSourceFile(sourceFile, debug, fileMap);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
    }
    return Result<bool>(true);
}

Result<bool> ParseProjectFiles(cm.ast.Solution* solution, bool verbose, bool debug, System.Lex.FileMap& fileMap)
{
    for (const auto& projectFile : solution->ProjectFilePaths())
    {
        if (verbose)
        {
            Console.Out() << "> " << projectFile << endl();
        }
        auto result = ParseProjectFile(projectFile, "debug", cm.ast.BackEnd.cm, "cm", "0");
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        cm.ast.Project* project = result.Value().Get();
        auto parseResult = ParseSourceFiles(project, verbose, debug, fileMap);
        if (parseResult.Error())
        {
            return Result<bool>(ErrorId(parseResult.GetErrorId()));
        }
    }
    return Result<bool>(true);
}

int main(int argc, const char** argv)
{
    List<string> files;
    System.Lex.FileMap fileMap;
    bool verbose = false;
    bool debug = false;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("--"))
        {
            if (arg == "--verbose")
            {
                verbose = true;
            }
            else if (arg == "--debug")
            {
                debug = true;
            }
            else
            {
                Console.Error() << "unknown option '" << arg << "'" << endl();
                return 1;
            }
        }
        else if (arg.StartsWith("-"))
        {
            string options = arg.Substring(1);
            for (char o : options)
            {
                switch (o)
                {
                    case 'v':
                    {
                        verbose = true;
                        break;
                    }
                    case 'd':
                    {
                        debug = true;
                        break;
                    }
                    default:
                    {
                        Console.Error() << "unknown option '-" << string(o) << "'" << endl();
                        return 1;
                    }
                }
            }
        }
        else
        {
            auto fileResult = GetFullPath(arg);
            if (fileResult.Error())
            {
                Console.Error() << fileResult.GetErrorMessage() << endl();
                return 1;
            }
            const string& file = fileResult.Value();
            files.Add(file);
        }
    }
    for (const auto& file : files)
    {
        if (verbose)
        {
            Console.Out() << "> " << file << endl();
        }
        if (file.EndsWith(".cm"))
        {
            auto result = ParseSourceFile(file, debug, fileMap);
            if (result.Error())
            {
                Console.Error() << result.GetErrorMessage() << endl();
                return 1;
            }
        }
        else if (file.EndsWith(".cmp"))
        {
            auto result = ParseProjectFile(file, "debug", cm.ast.BackEnd.cm, "cm", "0");
            if (result.Error())
            {
                Console.Error() << result.GetErrorMessage() << endl();
                return 1;
            }
            cm.ast.Project* project = result.Value().Get();
            auto parseResult = ParseSourceFiles(project, verbose, debug, fileMap);
            if (parseResult.Error())
            {
                Console.Error() << parseResult.GetErrorMessage() << endl();
                return 1;
            }
        }
        else if (file.EndsWith(".cms"))
        {
            auto result = ParseSolutionFile(file);
            if (result.Error())
            {
                Console.Error() << result.GetErrorMessage() << endl();
                return 1;
            }
            cm.ast.Solution* solution = result.Value().Get();
            auto parseResult = ParseProjectFiles(solution, verbose, debug, fileMap);
            if (parseResult.Error())
            {
                Console.Error() << parseResult.GetErrorMessage() << endl();
                return 1;
            }
        }
        else
        {
            Console.Error() << "file '" << file << "' has unknown extension (not .cm or .cmp or .cms)" << endl();
            return 1;
        }
    }
    return 0;
}
