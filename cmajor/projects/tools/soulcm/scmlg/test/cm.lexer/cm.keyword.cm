// this file has been automatically generated from 'C:/work/cmajor-mod/cmajor/projects/tools/soulcm/scmlg/test/cm.lexer/cm.keyword' using SoulCm lexer generator scmlg version 5.0.0

using System;
using System.Collections;

namespace cm.keyword
{
    public class Keywords
    {
        static Keywords() : instance(new Keywords())
        {
        }
        public static Keywords& Instance()
        {
            return *instance;
        }
        public System.Lex.KeywordMap* GetKeywordMap() const
        {
            return &keywordMap;
        }
        private Keywords()
        {
            keywords.Add(System.Lex.Keyword("auto", AUTO);
            keywords.Add(System.Lex.Keyword("assert", ASSERT);
            keywords.Add(System.Lex.Keyword("elif", ELIF);
            keywords.Add(System.Lex.Keyword("endif", ENDIF);
            keywords.Add(System.Lex.Keyword("bool", BOOL);
            keywords.Add(System.Lex.Keyword("true", TRUE);
            keywords.Add(System.Lex.Keyword("false", FALSE);
            keywords.Add(System.Lex.Keyword("sbyte", SBYTE);
            keywords.Add(System.Lex.Keyword("byte", BYTE);
            keywords.Add(System.Lex.Keyword("short", SHORT);
            keywords.Add(System.Lex.Keyword("ushort", USHORT);
            keywords.Add(System.Lex.Keyword("int", INT);
            keywords.Add(System.Lex.Keyword("uint", UINT);
            keywords.Add(System.Lex.Keyword("long", LONG);
            keywords.Add(System.Lex.Keyword("ulong", ULONG);
            keywords.Add(System.Lex.Keyword("float", FLOAT);
            keywords.Add(System.Lex.Keyword("double", DOUBLE);
            keywords.Add(System.Lex.Keyword("char", CHAR);
            keywords.Add(System.Lex.Keyword("wchar", WCHAR);
            keywords.Add(System.Lex.Keyword("uchar", UCHAR);
            keywords.Add(System.Lex.Keyword("void", VOID);
            keywords.Add(System.Lex.Keyword("enum", ENUM);
            keywords.Add(System.Lex.Keyword("cast", CAST);
            keywords.Add(System.Lex.Keyword("interface", INTERFACE);
            keywords.Add(System.Lex.Keyword("namespace", NAMESPACE);
            keywords.Add(System.Lex.Keyword("using", USING);
            keywords.Add(System.Lex.Keyword("static", STATIC);
            keywords.Add(System.Lex.Keyword("extern", EXTERN);
            keywords.Add(System.Lex.Keyword("as", AS);
            keywords.Add(System.Lex.Keyword("is", IS);
            keywords.Add(System.Lex.Keyword("explicit", EXPLICIT);
            keywords.Add(System.Lex.Keyword("delegate", DELEGATE);
            keywords.Add(System.Lex.Keyword("inline", INLINE);
            keywords.Add(System.Lex.Keyword("cdecl", CDECL);
            keywords.Add(System.Lex.Keyword("nothrow", NOTHROW);
            keywords.Add(System.Lex.Keyword("public", PUBLIC);
            keywords.Add(System.Lex.Keyword("protected", PROTECTED);
            keywords.Add(System.Lex.Keyword("private", PRIVATE);
            keywords.Add(System.Lex.Keyword("internal", INTERNAL);
            keywords.Add(System.Lex.Keyword("virtual", VIRTUAL);
            keywords.Add(System.Lex.Keyword("abstract", ABSTRACT);
            keywords.Add(System.Lex.Keyword("override", OVERRIDE);
            keywords.Add(System.Lex.Keyword("suppress", SUPPRESS);
            keywords.Add(System.Lex.Keyword("winapi", WINAPI);
            keywords.Add(System.Lex.Keyword("operator", OPERATOR);
            keywords.Add(System.Lex.Keyword("class", CLASS);
            keywords.Add(System.Lex.Keyword("return", RETURN);
            keywords.Add(System.Lex.Keyword("if", IF);
            keywords.Add(System.Lex.Keyword("else", ELSE);
            keywords.Add(System.Lex.Keyword("switch", SWITCH);
            keywords.Add(System.Lex.Keyword("case", CASE);
            keywords.Add(System.Lex.Keyword("default", DEFAULT);
            keywords.Add(System.Lex.Keyword("while", WHILE);
            keywords.Add(System.Lex.Keyword("do", DO);
            keywords.Add(System.Lex.Keyword("for", FOR);
            keywords.Add(System.Lex.Keyword("break", BREAK);
            keywords.Add(System.Lex.Keyword("continue", CONTINUE);
            keywords.Add(System.Lex.Keyword("goto", GOTO);
            keywords.Add(System.Lex.Keyword("typedef", TYPEDEF);
            keywords.Add(System.Lex.Keyword("typename", TYPENAME);
            keywords.Add(System.Lex.Keyword("typeid", TYPEID);
            keywords.Add(System.Lex.Keyword("const", CONST);
            keywords.Add(System.Lex.Keyword("constexpr", CONSTEXPR);
            keywords.Add(System.Lex.Keyword("null", NULL_LITERAL);
            keywords.Add(System.Lex.Keyword("this", THIS);
            keywords.Add(System.Lex.Keyword("base", BASE);
            keywords.Add(System.Lex.Keyword("construct", CONSTRUCT);
            keywords.Add(System.Lex.Keyword("destroy", DESTROY);
            keywords.Add(System.Lex.Keyword("new", NEW);
            keywords.Add(System.Lex.Keyword("delete", DELETE);
            keywords.Add(System.Lex.Keyword("sizeof", SIZEOF);
            keywords.Add(System.Lex.Keyword("try", TRY);
            keywords.Add(System.Lex.Keyword("catch", CATCH);
            keywords.Add(System.Lex.Keyword("throw", THROW);
            keywords.Add(System.Lex.Keyword("concept", CONCEPT);
            keywords.Add(System.Lex.Keyword("where", WHERE);
            keywords.Add(System.Lex.Keyword("axiom", AXIOM);
            keywords.Add(System.Lex.Keyword("and", AND);
            keywords.Add(System.Lex.Keyword("or", OR);
            keywords.Add(System.Lex.Keyword("unit_test", UNIT_TEST);
            keywordMap.SetKeywords(keywords);
        }
        private List<System.Lex.Keyword> keywords;
        private System.Lex.KeywordMap keywordMap;
        private static UniquePtr<Keywords> instance;
    }

    public System.Lex.KeywordMap* GetKeywordMap() const
    {
        return Keywords.Instance().GetKeywordMap();
    }

} // cm.keyword
