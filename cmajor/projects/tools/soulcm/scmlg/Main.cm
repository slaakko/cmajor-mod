// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using scmlg;

string Version()
{
    return "5.0.0";
}

void PrintHelp()
{
    Console.Out() << "SoulCm lexer generator scmlg version " << Version() << endl();
    Console.Out() << "Usage: scmlg [OPTIONS] { FILE.scmlg }" << endl();
    Console.Out() << "Options:" << endl();
    Console.Out() << "--verbose | -v" << endl();
    Console.Out() << "  Be verbose." << endl();
    Console.Out() << "--help | -h." << endl();
    Console.Out() << "  Print help and exit." << endl();
}

Result<bool> ProcessFiles(const List<string>& files, bool verbose)
{
    if (files.IsEmpty())
    {
        string errorMessage = "no files given";
        int errorId = AllocateError(errorMessage);
        return Result<bool>(ErrorId(errorId));
    }
    for (const auto& file : files)
    {
        if (file.EndsWith(".scmlg"))
        {
            auto result = GenerateLexers(file, Version(), verbose);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
        }
        else
        {
            string errorMessage = "unknown file extension '" + System.IO.Path.GetExtension(file) + "', not .scmlg";
            int errorId = AllocateError(errorMessage);
            return Result<bool>(ErrorId(errorId));
        }
    }
    return Result<bool>(true);
}

int main(int argc, const char** argv)
{
    List<string> files;
    bool verbose = false;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("--"))
        {
            if (arg == "--verbose")
            {
                verbose = true;
            }
            else if (arg == "--help")
            {
                PrintHelp();
                return 0;
            }   
            else
            {
                Console.Error() << "unknown option '" << arg << "'" << endl();
                return 1;
            }
        }
        else if (arg.StartsWith("-"))
        {
            string options = arg.Substring(1);
            for (char o : options)
            {
                switch (o)
                {
                    case 'v':
                    {
                        verbose = true;
                        break;
                    }
                    case 'h':
                    {
                        PrintHelp();
                        return 0;
                    }
                    default:
                    {
                        Console.Error() << "unknown option '-" << string(o) << "'" << endl();
                        return 1;
                    }
                }
            }
        }
        else
        {
            auto fullPathResult = GetFullPath(arg);
            if (fullPathResult.Error())
            {
                Console.Error() << fullPathResult.GetErrorMessage() << endl();
                return 1;
            }
            files.Add(fullPathResult.Value());
        }
    }
    auto result = ProcessFiles(files, verbose);
    if (result.Error())
    {
        Console.Error() << result.GetErrorMessage() << endl();
        return 1;
    }
    return 0;
}

