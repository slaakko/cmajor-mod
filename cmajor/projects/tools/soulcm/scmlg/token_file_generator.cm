// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using scmlg.parser;
using scmlg.ast;

namespace scmlg
{
    Result<bool> GenerateTokenFile(scmlg.ast.TokenFile* tokenFile, const string& scmlgVersion, bool verbose)
    {
        if (tokenFile->IsExternal())
        {
            if (verbose)
            {
                Console.Out() << "skipping external token file '" << tokenFile->FilePath() << "'" << endl();
            }
            return Result<bool>(true);
        }
        string cmFilePath = tokenFile->FilePath() + ".cm";
        auto cmFileResult = System.IO.File.CreateText(cmFilePath);
        if (cmFileResult.Error())
        {
            return Result<bool>(cmFileResult.GetErrorId());
        }
        scmlg.ast.TokenCollection* tokenCollection = tokenFile->GetTokenCollection();
        System.IO.StreamWriter& writer = cmFileResult.Value();
        System.Text.CodeFormatter formatter(writer);
        formatter << "// this file has been automatically generated from '" << tokenFile->FilePath() << "' using SoulCm lexer generator scmlg version " << scmlgVersion << endl() << endl();
        formatter << "using System;" << endl() << endl();
        formatter << "namespace " << tokenCollection->Name() << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        formatter << "public const long tokenSetID = " << tokenCollection->Id() << ";" << endl() << endl();
        long n = tokenCollection->Tokens().Count();
        for (long i = 0; i < n; ++i)
        {
            scmlg.ast.Token* token = tokenCollection->Tokens()[i].Get();
            formatter << "public const long " << token->Name() << " = (tokenSetID << 32) | " << i + 1 << ";" << endl();
        }
        formatter << endl();
        formatter.DecIndent();
        formatter << "} // " << tokenCollection->Name() << endl();
        if (verbose)
        {
            Console.Out() << "==> " << cmFilePath << endl();
        }
        return Result<bool>(true);
    }

    Result<bool> ProcessTokenFile(scmlg.ast.ScmlgFile* scmlgFile, const string& tokenFilePath, bool external, const string& scmlgVersion, bool verbose)
    {
        if (verbose)
        {
            Console.Out() << "> " << tokenFilePath << endl();
        }
        auto result = ParseTokenFile(tokenFilePath);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        scmlg.ast.TokenFile* tokenFile = result.Value().Get();
        auto genResult = GenerateTokenFile(tokenFile, scmlgVersion, verbose);
        if (genResult.Error())
        {
            return Result<bool>(ErrorId(genResult.GetErrorId()));
        }
        scmlgFile->AddTokenFile(result.Value().Release());
        return Result<bool>(true);
    }
}
