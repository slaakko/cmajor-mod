// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.IO;
using System.IO.Compression;
using re.ast;
using scmlg.ast;

namespace scmlg
{
    public Result<bool> MakeNfas(Context& context)
    {
        scmlg.ast.Lexer* lexer = context.GetLexer();
        ExpressionParser* expressionParser = context.GetExpressionParser();
        for (const auto& rule : lexer->Rules())
        {
            auto nfaResult = expressionParser->Parse(rule->Expr(), &context, context.FileName(), rule->Line());
            if (nfaResult.Error())
            {
                return Result<bool>(ErrorId(nfaResult.GetErrorId()));
            }
            UniquePtr<Nfa> nfa(new Nfa(nfaResult.Value()));
            nfa->End()->SetRuleIndex(rule->Index());
            int nfaIndex = context.AddNfa(nfa.Release());
            rule->SetNfaIndex(nfaIndex);
        }
        return Result<bool>(true);
    }

    public Result<bool> MakeCanonicalClasses(Context& context)
    {
        List<Symbol*> symbols = context.Symbols();
        for (Symbol* symbol : symbols)
        {
            if (symbol->Contained()) continue;
            switch (symbol->Kind())
            {
                case SymbolKind.classSymbol:
                {
                    Class* cls = cast<Class*>(symbol);
                    auto canonicalClassResult = cls->MakeCanonical(context);
                    if (canonicalClassResult.Error())
                    {
                        return Result<bool>(ErrorId(canonicalClassResult.GetErrorId()));
                    }
                    Class* canonicalClass = canonicalClassResult.Value();
                    context.AddCanonicalClass(canonicalClass);
                    break;
                }
                case SymbolKind.charSymbol:
                {
                    CharSymbol* chr = cast<CharSymbol*>(symbol);
                    Class* canonicalClass = new Class(-1);
                    canonicalClass->AddRange(Range(chr->Chr(), chr->Chr()));
                    context.AddCanonicalClass(canonicalClass);
                    break;
                }
                case SymbolKind.anySymbol:
                {
                    Range* range = context.MakeRange(cast<uchar>(1), cast<uchar>(0x10FFFF));
                    Class* canonicalClass = new Class(-1);
                    canonicalClass->AddRange(*range);
                    context.AddCanonicalClass(canonicalClass);
                    break;
                }
                case SymbolKind.rangeSymbol:
                {
                    Range* range = cast<Range*>(symbol);
                    Class* canonicalClass = new Class(-1);
                    canonicalClass->AddRange(*range);
                    context.AddCanonicalClass(canonicalClass);
                    break;
                }
            }
        }
        for (Class* canonicalClass : context.CanonicalClasses())
        {
            for (const auto& range : canonicalClass->Ranges())
            {
                if (canonicalClass->Chars().IsEmpty())
                {
                    canonicalClass->AddChar(range.Start());
                }
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> MakeClassPartition(Context& context, const string& root, bool verbose)
    {
        LinkedList<Class*> classes;
        for (auto cls : context.CanonicalClasses())
        {
            classes.Add(cls);
        }
        auto classIt = classes.Begin();
        while (classIt != classes.End())
        {
            bool classChanged = false;
            Class* cls = *classIt;
            auto sourceIt = classes.Begin();
            while (!cls->Ranges().IsEmpty() && sourceIt != classes.End())
            {
                if (sourceIt == classIt)
                {
                    ++sourceIt;
                    continue;
                }
                bool sourceChanged = false;
                Class* source = *sourceIt;
                UniquePtr<Class> splitClass = new Class(-1);
                auto leftIt = cls->Ranges().Begin();
                while (leftIt != cls->Ranges().End())
                {
                    bool leftChanged = false;
                    auto rightIt = source->Ranges().Begin();
                    while (leftIt != cls->Ranges().End() && rightIt != source->Ranges().End())
                    {
                        bool rightChanged = false;
                        if (Intersect(*leftIt, *rightIt))
                        {
                            List<Range> leftRanges = *leftIt - *rightIt;
                            List<Range> rightRanges = *rightIt - *leftIt;
                            Range intersection = *leftIt & *rightIt;
                            for (const Range& leftRange : leftRanges)
                            {
                                if (leftRange.IsEmpty()) continue;
                                auto it = leftIt;
                                ++it;
                                cls->Ranges().Insert(it, leftRange);
                            }
                            leftIt = cls->Ranges().Remove(leftIt);
                            leftChanged = true;
                            if (!intersection.IsEmpty())
                            {
                                splitClass->Ranges().Add(intersection);
                            }
                            for (const Range& rightRange : rightRanges)
                            {
                                if (rightRange.IsEmpty()) continue;
                                auto it = rightIt;
                                ++it;
                                source->Ranges().Insert(it, rightRange);
                            }
                            rightIt = source->Ranges().Remove(rightIt);
                            rightChanged = true;
                        }
                        if (!rightChanged)
                        {
                            ++rightIt;
                        }
                    }
                    if (!leftChanged)
                    {
                        ++leftIt;
                    }
                }
                if (source->Ranges().IsEmpty())
                {
                    sourceIt = classes.Remove(sourceIt);
                    sourceChanged = true;
                }
                if (!splitClass->Ranges().IsEmpty())
                {
                    classes.Insert(sourceIt, splitClass.Get());
                    context.AddToSymbols(splitClass.Release());
                    sourceChanged = true;
                }
                if (!sourceChanged)
                {
                    ++sourceIt;
                }
            }
            if (cls->Ranges().IsEmpty())
            {
                classIt = classes.Remove(classIt);
                classChanged = true;
            }
            if (!classChanged)
            {
                ++classIt;
            }
        }
        for (Class* cls : classes)
        {
            cls->MakeMinimal(context);
            context.AddToPartition(cls);
        }
        for (long i = 0; i < context.Partition().Count(); ++i)
        {
            Class* cls = context.Partition()[i];
            cls->SetIndex(cast<int>(i));
        }
        if (context.GetDebug())
        {
            string partitionFileName = Path.Combine(root, "partition.debug.txt");
            auto result = System.IO.File.CreateText(partitionFileName);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            StreamWriter& writer = result.Value();
            System.Text.CodeFormatter formatter(writer);
            for (long i = 0; i < context.Partition().Count(); ++i)
            {
                Class* cls = context.Partition()[i];
                auto result = cls->Print(formatter);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
            }
            if (verbose)
            {
                Console.Out() << "==> " << partitionFileName << endl();
            }
        }
        return Result<bool>(true);
    }

    public Result<string> MakeClassMap(Context& context, const string& root, bool verbose)
    {
        List<int> classMapList(0x110000, -1);
        for (Class* cls : context.Partition())
        {
            for (const Range& range : cls->Ranges())
            {
                for (int i = cast<int>(range.Start()); i <= cast<int>(range.End()); ++i)
                {
                    if (classMapList[i] == -1)
                    {
                        classMapList[cast<int>(i)] = cls->Index();
                    }
                }
            }
        }
        Lexer* lexer = context.GetLexer();
        string classMapName = lexer->Name() + ".classmap";
        string classMapFileName = Path.Combine(root, classMapName);
        auto writerResult = System.IO.File.CreateBinary(classMapFileName);
        if (writerResult.Error())
        {
            return Result<string>(ErrorId(writerResult.GetErrorId()));
        }
        BinaryWriter& writer = writerResult.Value();
        int size = cast<int>(classMapList.Count());
        writer.Write(size);
        for (int x : classMapList)
        {
            writer.Write(x);
        }
        if (verbose)
        {
            Console.Out() << "==> " << classMapFileName << endl();
        }
        if (context.GetDebug())
        {
            string classMapDebugFileName = Path.Combine(root, classMapName + ".debug.txt");
            auto result = System.IO.File.CreateText(classMapDebugFileName);
            if (result.Error())
            {
                return Result<string>(ErrorId(result.GetErrorId()));
            }
            StreamWriter& writer = result.Value();
            for (uint i = 1u; i < 0x110000u; ++i)
            {
                string line;
                auto hex = ToHexString(i);
                if (hex.Error())
                {
                    return Result<string>(ErrorId(hex.GetErrorId()));
                }
                line.Append("U").Append(hex.Value()).Append(":C").Append(Format(ToString(i), 5, FormatWidth.exact, FormatJustify.right, '0'));
                auto utf8 = ToUtf8(ustring(cast<uchar>(i)));
                if (utf8.Error())
                {
                    return Result<string>(ErrorId(utf8.GetErrorId()));
                }
                line.Append(":").Append("'").Append(utf8.Value()).Append("'");
                line.Append(":").Append("#").Append(ToString(classMapList[i]));
                writer.WriteLine(line);
            }
            if (verbose)
            {
                Console.Out() << "==> " << classMapDebugFileName << endl();
            }
        }
        return Result<string>(classMapName);
    }

    public Result<bool> CompressClassMap(const string& classMapName, const string& root, bool verbose)
    {
        string classMapFileName = Path.Combine(root, classMapName);
        string compressedClassMapFileName = Path.Combine(root, classMapName + ".compressed");
        auto readerResult = System.IO.File.OpenBinary(classMapFileName);
        if (readerResult.Error())
        {
            return Result<bool>(ErrorId(readerResult.GetErrorId()));
        }
        BinaryReader& reader = readerResult.Value();
        auto sizeResult = reader.ReadInt();
        if (sizeResult.Error())
        {
            return Result<bool>(ErrorId(sizeResult.GetErrorId()));
        }
        int size = sizeResult.Value();
        FileStream outputFileStream(compressedClassMapFileName, cast<OpenMode>(OpenMode.write | OpenMode.binary));
        if (outputFileStream.Error())
        {
            return Result<bool>(ErrorId(outputFileStream.GetLatestErrorId()));
        }
        BinaryWriter rawWriter(&outputFileStream);
        auto rawWriteResult = rawWriter.Write(size);
        if (rawWriteResult.Error())
        {
            return Result<bool>(ErrorId(rawWriteResult.GetErrorId()));
        }
        DeflateStream compressedStream(&outputFileStream, CompressionMode.compress);
        BinaryWriter writer(&compressedStream);
        for (long i = 0; i < size; ++i)
        {
            auto readResult = reader.ReadInt();
            if (readResult.Error())
            {
                return Result<bool>(ErrorId(readResult.GetErrorId()));
            }
            int cls = readResult.Value();
            auto writeResult = writer.Write(cls);
            if (writeResult.Error())
            {
                return Result<bool>(ErrorId(writeResult.GetErrorId()));
            }
        }
        if (verbose)
        {
            Console.Out() << "==> " << compressedClassMapFileName << endl();
        }
        return Result<bool>(true);
    }

    public Result<bool> MakeResourceFile(const string& classMapName, const string& root, bool verbose)
    {
        string resourceFileName = Path.Combine(root, classMapName + ".rc");
        string compressedClassMapFileName = "./" + classMapName + ".compressed";
        auto result = System.IO.File.CreateText(resourceFileName);
        if (result.Error())
        {
            return Result<bool>(ErrorId(result.GetErrorId()));
        }
        StreamWriter& writer = result.Value();
        System.Text.CodeFormatter formatter(writer);
        formatter.WriteLine(classMapName + " RCDATA \"" + compressedClassMapFileName + "\"");
        if (verbose)
        {
            Console.Out() << "==> " << resourceFileName << endl();
        }
        return Result<bool>(true);
    }

    public Result<bool> MakeMasterNfa(Context& context, const string& root, bool verbose)
    {
        Nfa* masterNfa = new Nfa();
        int masterNfaIndex = context.AddNfa(masterNfa);
        context.SetMasterNfaIndex(masterNfaIndex);
        NfaState* start = context.MakeNfaState();
        masterNfa->SetStart(start);
        Lexer* lexer = context.GetLexer();
        for (const auto& rule : lexer->Rules())
        {
            auto ruleNfaResult = context.GetNfa(rule->NfaIndex());
            if (ruleNfaResult.Error())
            {
                return Result<bool>(ErrorId(ruleNfaResult.GetErrorId()));
            }
            Nfa* ruleNfa = ruleNfaResult.Value();
            start->AddEdge(NfaEdge(context.MakeEpsilon(), ruleNfa->Start()));
        }
        if (context.GetDebug())
        {
            string masteNfaFileName = Path.Combine(root, "nfa.debug.txt");
            auto result = System.IO.File.CreateText(masteNfaFileName);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            StreamWriter& writer = result.Value();
            System.Text.CodeFormatter formatter(writer);
            auto printResult = masterNfa->Print(formatter);
            if (printResult.Error())
            {
                return Result<bool>(ErrorId(printResult.GetErrorId()));
            }
            if (verbose)
            {
                Console.Out() << "==> " << masteNfaFileName << endl();
            }
        }
        return Result<bool>(true);
    }

    public Result<bool> MakeDfa(Context& context, const string& root, bool verbose)
    {
        auto masterNfaResult = context.GetNfa(context.MasterNfaIndex());
        if (masterNfaResult.Error())
        {
            return Result<bool>(ErrorId(masterNfaResult.GetErrorId()));
        }
        Nfa* masterNfa = masterNfaResult.Value();
        auto compileResult = Compile(context, *masterNfa);
        if (compileResult.Error())
        {
            return Result<bool>(ErrorId(compileResult.GetErrorId()));
        }
        Dfa dfa = Rvalue(compileResult.Value());
        if (context.GetDebug())
        {
            string dfaFileName = Path.Combine(root, "dfa.debug.txt");
            auto result = System.IO.File.CreateText(dfaFileName);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            StreamWriter& writer = result.Value();
            System.Text.CodeFormatter formatter(writer);
            auto printResult = dfa.Print(context, formatter);
            if (printResult.Error())
            {
                return Result<bool>(ErrorId(printResult.GetErrorId()));
            }
            if (verbose)
            {
                Console.Out() << "==> " << dfaFileName << endl();
            }
        }
        context.SetDfa(Rvalue(dfa));
        return Result<bool>(true);
    }

    public Result<bool> WriteVariables(Context& context, const string& variableClassName, System.Text.CodeFormatter& formatter)
    {
        Lexer* lexer = context.GetLexer();
        lexer->SetVariableClassName(variableClassName);
        formatter << "public class " << variableClassName << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        formatter << "public " << variableClassName << "()" << endl();
        formatter << "{" << endl();
        formatter << "}" << endl();
        for (const auto& var : lexer->Variables())
        {
            auto typeResult = var->Type()->ToString();
            if (typeResult.Error())
            {
                return Result<bool>(ErrorId(typeResult.GetErrorId()));
            }
            formatter << "public " << typeResult.Value() << " " << var->Name() << ";" << endl();
        }
        formatter.DecIndent();
        formatter << "}" << endl();
        return Result<bool>(true);
    }

    public Result<bool> WriteLexer(Context& context, scmlg.ast.ScmlgFile* scmlgFile, scmlg.ast.LexerFile* lexerFile, const string& scmlgVersion,
        const string& root, bool verbose, const string& classMapName)
    {
        Lexer* lexer = context.GetLexer();
        auto fullPathResult = GetFullPath(Path.Combine(root, lexer->Name() + ".cm"));
        if (fullPathResult.Error())
        {
            return Result<bool>(ErrorId(fullPathResult.GetErrorId()));
        }
        string sourceFilePath = fullPathResult.Value();
        auto lexerFileResult = System.IO.File.CreateText(sourceFilePath);
        if (lexerFileResult.Error())
        {
            return Result<bool>(ErrorId(lexerFileResult.GetErrorId()));
        }
        StreamWriter& writer = lexerFileResult.Value();
        System.Text.CodeFormatter formatter(writer);
        formatter << "// this file has been automatically generated from '" << context.FileName() << "' using SoulCm lexer generator scmlg version " << scmlgVersion <<
            endl() << endl();
        formatter << "using System;" << endl();
        formatter << "using System.Collections;" << endl();
        for (const Using& u : lexerFile->Usings())
        {
            if (!u.IsOpaque())
            {
                Result<Collection*> result = scmlgFile->GetCollection(u.Ns());
                if (!result.Error())
                {
                    Collection* collection = result.Value();
                    if (collection->IsExpressionCollection()) continue;
                }
            }
            formatter << "using " << u.Ns() << ";" << endl();
        }
        formatter << endl();
        string nsPrefix = lexer->NamespacePrefix();
        string lexerName = lexer->CommonName();
        if (!nsPrefix.IsEmpty())
        {
            formatter << "namespace " << nsPrefix << endl();
            formatter << "{" << endl();
            formatter.IncIndent();
        }
        formatter << "public class " << lexerName << " : System.Lex.Lexer" << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        formatter << "public " << lexerName << "(const uchar* start_, const uchar* end_, const string& fileName_) : " << endl();
        formatter.IncIndent();
        formatter << "base(start_, end_, fileName_, \"" + classMapName + "\")" << endl();
        formatter.DecIndent();
        formatter << "{" << endl();
        formatter.IncIndent();
        formatter << "auto classMapResult = System.Lex.GetClassMap(ClassMapName());" << endl();
        formatter << "if (classMapResult.Error())" << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        formatter << "SetLatestErrorId(classMapResult.GetErrorId());" << endl();
        formatter << "return;" << endl();
        formatter.DecIndent();
        formatter << "}" << endl();
        formatter << "SetClassMap(classMapResult.Value());" << endl();
        formatter << "SetKeywordMap(GetKeywordMap());" << endl();
        formatter.DecIndent();
        formatter << "}" << endl();
        formatter << "public override int NextState(int state, uchar c)" << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        formatter << "int cls = GetClass(c);" << endl();
        formatter << "switch (state)" << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        for (DfaState* state : context.GetDfa().States())
        {
            formatter << "case " << state->Id() << ":" << endl();
            formatter << "{" << endl();
            formatter.IncIndent();
            if (state->Accept())
            {
                formatter << "auto prevMatch = token.match;" << endl();
                formatter << "token.match = lexeme;" << endl();
                formatter << "long tokenId = GetTokenId(" << state->RuleIndex() << ");" << endl();
                formatter << "if (tokenId == System.Lex.CONTINUE_TOKEN)" << endl();
                formatter << "{" << endl();
                formatter.IncIndent();
                formatter << "token.id = System.Lex.CONTINUE_TOKEN;" << endl();
                formatter << "return -1;" << endl();
                formatter.DecIndent();
                formatter << "}" << endl();
                formatter << "else if (tokenId != System.Lex.INVALID_TOKEN)" << endl();
                formatter << "{" << endl();
                formatter.IncIndent();
                formatter << "token.id = tokenId;" << endl();
                formatter.DecIndent();
                formatter << "}" << endl();
                formatter << "else" << endl();
                formatter << "{" << endl();
                formatter.IncIndent();
                formatter << "token.match = prevMatch;" << endl();
                formatter.DecIndent();
                formatter << "}" << endl();
            }
            Map<int, Set<int>> m;
            for (Class* cls : context.Partition())
            {
                DfaState* next = state->Next(cls->Index());
                if (next != null)
                {
                    m[next->Id()].Insert(cls->Index());
                }
            }
            if (m.IsEmpty())
            {
                formatter << "return -1;" << endl();
            }
            else
            {
                formatter << "switch (cls)" << endl();
                formatter << "{" << endl();
                formatter.IncIndent();
                for (const auto& p : m)
                {
                    int n = p.first;
                    const Set<int>& s = p.second;
                    for (int k : s)
                    {
                        formatter << "case " << k << ":" << endl();
                    }
                    formatter << "{" << endl();
                    formatter.IncIndent();
                    formatter << "return " << n << ";" << endl();
                    formatter.DecIndent();
                    formatter << "}" << endl();
                }
                formatter << "default:" << endl();
                formatter << "{" << endl();
                formatter.IncIndent();
                formatter << "return -1;" << endl();
                formatter.DecIndent();
                formatter << "}" << endl();
                formatter.DecIndent();
                formatter << "}" << endl();
                formatter << "break;" << endl();
            }
            formatter.DecIndent();
            formatter << "}" << endl();
        }
        formatter.DecIndent();
        formatter << "}" << endl();
        formatter << "return -1;" << endl();
        formatter.DecIndent();
        formatter << "}" << endl();
        formatter << "public long GetTokenId(int ruleIndex)" << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        formatter << "switch (ruleIndex)" << endl();
        formatter << "{" << endl();
        formatter.IncIndent();
        for (const auto& rule : lexer->Rules())
        {
            formatter << "case " << rule->Index() << ":" << endl();
            System.Lex.Span span;
            rule->Code()->InsertFront(new cm.ast.ExpressionStatementNode(span,
                new cm.ast.InvokeNode(span, new cm.ast.IdentifierNode(span, u"Retract"))));
            if (rule->Action() != -1)
            {
                Action* action = lexer->GetActions().GetAction(rule->Action());
                if (action != null)
                {
                    cm.ast.CompoundStatementNode* actionCode = action->Code();
                    long n = actionCode->Statements().Count();
                    for (long i = n - 1; i >= 0; --i)
                    {
                        cm.ast.StatementNode* statement = actionCode->Statements()[cast<int>(i)];
                        cm.ast.CloneContext cloneContext;
                        rule->Code()->InsertFront(cast<cm.ast.StatementNode*>(statement->Clone(cloneContext)));
                    }
                }
                else
                {
                    string errorMessage = "action " + ToString(rule->Action()) + " not found";
                    int errorId = AllocateError(errorMessage);
                    return Result<bool>(ErrorId(errorId));
                }
            }
            rule->Code()->AddStatement(new cm.ast.BreakStatementNode(span));
            cm.ast.SourceWriter sourceWriter(formatter);
            rule->Code()->Accept(sourceWriter);
        }
        formatter.DecIndent();
        formatter << "}" << endl();
        formatter << "return System.Lex.CONTINUE_TOKEN;" << endl();
        formatter.DecIndent();
        formatter << "}" << endl();
        string variableClassName = lexer->CommonName() + "_Variables";
        formatter << "public " << variableClassName << " vars;" << endl();
        formatter.DecIndent();
        formatter << "}" << endl() << endl();
        auto variablesResult = WriteVariables(context, variableClassName, formatter);
        if (variablesResult.Error())
        {
            return Result<bool>(ErrorId(variablesResult.GetErrorId()));
        }
        if (!nsPrefix.IsEmpty())
        {
            formatter << endl();
            formatter.DecIndent();
            formatter << "} // " << nsPrefix << endl();
        }
        if (verbose)
        {
            Console.Out() << "==> " << sourceFilePath << endl();
        }
        return Result<bool>(true);
    }

    public Result<bool> GenerateLexer(scmlg.ast.ScmlgFile* scmlgFile, scmlg.ast.LexerFile* lexerFile, const string& scmlgVersion, bool verbose, bool debug)
    {
        Lexer* lexer = lexerFile->GetLexer();
        if (lexer == null)
        {
            return Result<bool>(true);
        }
        if (verbose)
        {
            Console.Out() << "Generating lexer '" << lexer->Name() << "'..." << endl();
        }
        Context context;
        context.SetDebug(debug);
        context.SetFileName(lexerFile->FilePath());
        RegularExpressionParser regExParser;
        context.SetExpressionParser(&regExParser);
        Tokens tokens;
        Keywords keywords;
        Expressions expressions;
        for (const auto& usingNs : lexerFile->Usings())
        {
            if (!usingNs.IsOpaque())
            {
                auto collectionResult = scmlgFile->GetCollection(usingNs.Ns());
                if (collectionResult.Error())
                {
                    return Result<bool>(ErrorId(collectionResult.GetErrorId()));
                }
                Collection* collection = collectionResult.Value();
                switch (collection->Kind())
                {
                    case CollectionKind.tokenCollection:
                    {
                        TokenCollection* tokenCollection = cast<TokenCollection*>(collection);
                        for (const auto& token : tokenCollection->Tokens())
                        {
                            tokens.AddToken(token.Get());
                        }
                        break;
                    }
                    case CollectionKind.keywordCollection:
                    {
                        KeywordCollection* keywordCollection = cast<KeywordCollection*>(collection);
                        for (const auto& keyword : keywordCollection->Keywords())
                        {
                            keywords.AddKeyword(keyword.Get());
                        }
                        break;
                    }
                    case CollectionKind.expressionCollection:
                    {
                        ExpressionCollection* expressionCollection = cast<ExpressionCollection*>(collection);
                        for (const auto& expression : expressionCollection->Expressions())
                        {
                            auto result = expressions.AddExpression(expression.Get());
                            if (result.Error())
                            {
                                return Result<bool>(ErrorId(result.GetErrorId()));
                            }
                        }
                        break;
                    }
                }
            }
        }
        context.SetTokens(&tokens);
        context.SetKeywords(&keywords);
        context.SetExpressions(&expressions);
        context.SetLexer(lexer);
        auto makeNfaResult = MakeNfas(context);
        if (makeNfaResult.Error())
        {
            return Result<bool>(ErrorId(makeNfaResult.GetErrorId()));
        }
        auto makeCanonicalClassesResult = MakeCanonicalClasses(context);
        if (makeCanonicalClassesResult.Error())
        {
            return Result<bool>(ErrorId(makeCanonicalClassesResult.GetErrorId()));
        }
        string root = Path.GetDirectoryName(scmlgFile->FilePath());
        auto partitionResult = MakeClassPartition(context, root, verbose);
        if (partitionResult.Error())
        {
            return Result<bool>(ErrorId(partitionResult.GetErrorId()));
        }
        auto classMapResult = MakeClassMap(context, root, verbose);
        if (classMapResult.Error())
        {
            return Result<bool>(ErrorId(classMapResult.GetErrorId()));
        }
        string classMapName = classMapResult.Value();
        auto compressResult = CompressClassMap(classMapName, root, verbose);
        if (compressResult.Error())
        {
            return Result<bool>(ErrorId(compressResult.GetErrorId()));
        }
        auto resourceFileResult = MakeResourceFile(classMapName, root, verbose);
        if (resourceFileResult.Error())
        {
            return Result<bool>(ErrorId(resourceFileResult.GetErrorId()));
        }
        auto masterNfaResult = MakeMasterNfa(context, root, verbose);
        if (masterNfaResult.Error())
        {
            return Result<bool>(ErrorId(masterNfaResult.GetErrorId()));
        }
        auto dfaResult = MakeDfa(context, root, verbose);
        if (dfaResult.Error())
        {
            return Result<bool>(ErrorId(dfaResult.GetErrorId()));
        }
        auto writeLexerResult = WriteLexer(context, scmlgFile, lexerFile, scmlgVersion, root, verbose, classMapName);
        if (writeLexerResult.Error())
        {
            return Result<bool>(ErrorId(writeLexerResult.GetErrorId()));
        }
        return Result<bool>(true);
    }
}
