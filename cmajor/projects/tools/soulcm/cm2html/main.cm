using System;
using System.Collections;
using System.IO;
using cm.token;

public List<ustring> GetLines(const ustring& content)
{
    List<ustring> lines;
    ustring line;
    int state = 0;
    for (uchar c : content)
    {
        switch (state)
        {
            case 0:
            {
                if (c == '\n')
                {
                    lines.Add(Rvalue(line));
                    line.Clear();
                    state = 1;
                }
                else if (c != '\r')
                {
                    line.Append(c);
                }
                break;
            }
            case 1:
            {
                if (c == '\n')
                {
                    lines.Add(Rvalue(line));
                    line.Clear();
                }
                else if (c != '\r')
                {
                    line.Append(c);
                    state = 0;
                }
                break;
            }
        }
    }
    if (state == 0)
    {
        lines.Add(Rvalue(line));
    }
    return lines;
}

public string KeywordColor()
{
    return "#0000ff";
}

public string IdColor()
{
    return "#000000";
}

public string NumberColor()
{
    return "#000000";
}

public string StringColor()
{
    return "#a31515";
}

public string OtherColor()
{
    return "#000000";
}

public string CommentColor()
{
    return "#57a64a";
}

public string MakeStyleText()
{
    StringWriter writer;
    System.Text.CodeFormatter formatter(writer);
    formatter.SetIndentSize(1);
    auto result = formatter.WriteLine("div.cm");
    result = formatter.WriteLine("{");
    formatter.IncIndent();
    result = formatter.WriteLine("background-color: #e6f7ff;");
    result = formatter.WriteLine("margin: 20px;");
    result = formatter.WriteLine("padding: 20px;");
    result = formatter.WriteLine("font-family: monospace;");
    formatter.DecIndent();
    result = formatter.WriteLine("}");
    result = formatter.WriteLine();
    result = formatter.WriteLine(".cm .kw");
    result = formatter.WriteLine("{");
    formatter.IncIndent();
    result = formatter.WriteLine("color: " + KeywordColor() + ";");
    formatter.DecIndent();
    result = formatter.WriteLine("}");
    result = formatter.WriteLine();

    result = formatter.WriteLine(".cm .id");
    result = formatter.WriteLine("{");
    formatter.IncIndent();
    result = formatter.WriteLine("color: " + IdColor() + ";");
    formatter.DecIndent();
    result = formatter.WriteLine("}");
    result = formatter.WriteLine();

    result = formatter.WriteLine(".cm .number");
    result = formatter.WriteLine("{");
    formatter.IncIndent();
    result = formatter.WriteLine("color: " + NumberColor() + ";");
    formatter.DecIndent();
    result = formatter.WriteLine("}");
    result = formatter.WriteLine();

    result = formatter.WriteLine(".cm .string");
    result = formatter.WriteLine("{");
    formatter.IncIndent();
    result = formatter.WriteLine("color: " + StringColor() + ";");
    formatter.DecIndent();
    result = formatter.WriteLine("}");
    result = formatter.WriteLine();

    result = formatter.WriteLine(".cm .other");
    result = formatter.WriteLine("{");
    formatter.IncIndent();
    result = formatter.WriteLine("color: " + OtherColor() + ";");
    formatter.DecIndent();
    result = formatter.WriteLine("}");
    result = formatter.WriteLine();

    result = formatter.WriteLine(".cm .comment");
    result = formatter.WriteLine("{");
    formatter.IncIndent();
    result = formatter.WriteLine("color: " + CommentColor() + ";");
    formatter.DecIndent();
    result = formatter.WriteLine("}");
    result = formatter.WriteLine();
    return writer.GetString();
}

public void AppendSpace(int count, System.Xml.Element* element)
{
    for (int i = 0; i < count; ++i)
    {
        System.Xml.EntityReference* nbsp = System.Xml.MakeEntityReference("nbsp");
        element->AppendChild(nbsp);
    }
}

public void AppendSpace(uchar* begin, uchar* end, System.Xml.Element* element)
{
    while (begin != end)
    {
        auto chr = *begin;
        switch (chr)
        {
            case ' ':
            {
                AppendSpace(1, element);
                break;
            }
            case '\t':
            {
                AppendSpace(4, element);
                break;
            }
        }
        ++begin;
    }
}

public void AppendKeyword(const string& match, System.Xml.Element* element)
{
    System.Xml.Element* span = System.Xml.MakeElement("span");
    span->SetAttribute("class", "kw");
    System.Xml.Text* text = System.Xml.MakeText(match);
    span->AppendChild(text);
    element->AppendChild(span);
}

public void AppendId(const string& match, System.Xml.Element* element)
{
    System.Xml.Element* span = System.Xml.MakeElement("span");
    span->SetAttribute("class", "id");
    System.Xml.Text* text = System.Xml.MakeText(match);
    span->AppendChild(text);
    element->AppendChild(span);
}

public void AppendNumber(const string& match, System.Xml.Element* element)
{
    System.Xml.Element* span = System.Xml.MakeElement("span");
    span->SetAttribute("class", "number");
    System.Xml.Text* text = System.Xml.MakeText(match);
    span->AppendChild(text);
    element->AppendChild(span);
}

public void AppendString(const string& match, System.Xml.Element* element)
{
    System.Xml.Element* span = System.Xml.MakeElement("span");
    span->SetAttribute("class", "string");
    System.Xml.Text* text = System.Xml.MakeText(match);
    span->AppendChild(text);
    element->AppendChild(span);
}

public void AppendOther(const string& match, System.Xml.Element* element)
{
    System.Xml.Element* span = System.Xml.MakeElement("span");
    span->SetAttribute("class", "other");
    System.Xml.Text* text = System.Xml.MakeText(match);
    span->AppendChild(text);
    element->AppendChild(span);
}

public void AppendComment(const string& match, System.Xml.Element* element)
{
    System.Xml.Element* span = System.Xml.MakeElement("span");
    span->SetAttribute("class", "comment");
    System.Xml.Text* text = System.Xml.MakeText(match);
    span->AppendChild(text);
    element->AppendChild(span);
}

public Result<bool> ProcessToken(const System.Lex.Token& token, System.Xml.Element* element)
{
    auto utf8Result = ToUtf8(token.match.ToString());
    if (utf8Result.Error())
    {
        return Result<bool>(ErrorId(utf8Result.GetErrorId()));
    }
    const string& matchStr = utf8Result.Value();
    switch (token.id)
    {
        case WS:
        {
            AppendSpace(token.match.begin, token.match.end, element);
            break;
        }
        case KEYWORD:
        {
            AppendKeyword(matchStr, element);
            break;
        }
        case ID:
        {
            AppendId(matchStr, element);
            break;
        }
        case INTEGER_LITERAL:
        case FLOATING_LITERAL:
        {
            AppendNumber(matchStr, element);
            break;
        }
        case CHAR_LITERAL:
        case STRING_LITERAL:
        {
            AppendString(matchStr, element);
            break;
        }
        case OTHER:
        {
            AppendOther(matchStr, element);
            break;
        }
        case COMMENT:
        {
            AppendComment(matchStr, element);
            break;
        }
    }
    return Result<bool>(true);
}

public Result<bool> ProcessFile(const string& filePath, bool verbose)
{
    if (verbose)
    {
        Console.Out() << "> " << filePath << endl();
    }
    string htmlFilePath = System.IO.Path.ChangeExtension(filePath, ".html");
    string divFilePath = System.IO.Path.ChangeExtension(filePath, ".div");
    string title = System.IO.Path.GetFileName(filePath);
    Result<string> contentResult = System.IO.File.ReadAllText(filePath);
    if (contentResult.Error())
    {
        return Result<bool>(ErrorId(contentResult.GetErrorId()));
    }
    auto utf32Result = ToUtf32(contentResult.Value());
    if (utf32Result.Error())
    {
        return Result<bool>(ErrorId(utf32Result.GetErrorId()));
    }
    auto htmlFileResult = System.IO.File.CreateText(htmlFilePath);
    if (htmlFileResult.Error())
    {
        return Result<bool>(ErrorId(htmlFileResult.GetErrorId()));
    }
    System.IO.StreamWriter& htmlWriter = htmlFileResult.Value();
    System.Text.CodeFormatter htmlFormatter(htmlWriter);
    htmlFormatter.SetIndentSize(2);
    auto divFileResult = System.IO.File.CreateText(divFilePath);
    if (divFileResult.Error())
    {
        return Result<bool>(ErrorId(divFileResult.GetErrorId()));
    }
    System.IO.StreamWriter& divWriter = divFileResult.Value();
    System.Text.CodeFormatter divFormatter(divWriter);
    divFormatter.SetIndentSize(2);
    System.Xml.Document htmlDoc;
    System.Xml.Document divDoc;
    auto result = htmlFormatter.WriteLine("<!DOCTYPE html>");
    if (result.Error()) return result;
    result = htmlFormatter.WriteLine();
    if (result.Error()) return result;
    System.Xml.Element* htmlElement = System.Xml.MakeElement("html");
    htmlElement->SetAttribute("xmlns", "http://www.w3.org/1999/xhtml");
    System.Xml.Element* headElement = System.Xml.MakeElement("head");
    System.Xml.Element* metaElement = System.Xml.MakeElement("meta");
    metaElement->SetAttribute("charset", "utf-8");
    headElement->AppendChild(metaElement);
    System.Xml.Element* titleElement = System.Xml.MakeElement("title");
    System.Xml.Text* titleText = System.Xml.MakeText(title);
    titleElement->AppendChild(titleText);
    headElement->AppendChild(titleElement);
    System.Xml.Element* styleElement = System.Xml.MakeElement("style");
    System.Xml.Text* styleText = System.Xml.MakeText(MakeStyleText(3));
    styleElement->AppendChild(styleText);
    headElement->AppendChild(styleElement);
    htmlElement->AppendChild(headElement);
    System.Xml.Element* bodyElement = System.Xml.MakeElement("body");
    htmlElement->AppendChild(bodyElement);
    System.Xml.Element* divElement = System.Xml.MakeElement("div");
    divElement->SetAttribute("class", "cm");
    bodyElement->AppendChild(divElement);
    System.Xml.Element* rootDivElement = System.Xml.MakeElement("div");
    rootDivElement->SetAttribute("class", "cm");
    htmlDoc.AppendChild(htmlElement);
    divDoc.AppendChild(rootDivElement);
    System.Xml.Element* currentHtmlElement = null;
    System.Xml.Element* currentDivElement = null;
    List<ustring> lines = GetLines(utf32Result.Value());
    long n = lines.Count();
    for (long i = 0; i < n; ++i)
    {
        ustring line = lines[i];
        line.Append(u"\n\n");
        cm.lexer.CmTokenLexer lexer(line.Chars(), line.Chars() + line.Length(), title);
        auto result = ++lexer;
        if (result.Error()) return Result<bool>(ErrorId(result.GetErrorId()));
        System.Xml.Element* htmlLineElement = System.Xml.MakeElement("span");
        htmlLineElement->SetAttribute("xml:space", "preserve");
        currentHtmlElement = htmlLineElement;
        System.Xml.Element* divLineElement = System.Xml.MakeElement("span");
        divLineElement->SetAttribute("xml:space", "preserve");
        currentDivElement = divLineElement;
        while (*lexer != System.Lex.END_TOKEN)
        {
            auto token = lexer.GetToken(lexer.GetPos());
            ProcessToken(token, currentHtmlElement);
            ProcessToken(token, currentDivElement);
            auto result = ++lexer;
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
        }
        System.Xml.Element* htmlBrElement = System.Xml.MakeElement("br");
        divElement->AppendChild(htmlLineElement);
        divElement->AppendChild(htmlBrElement);
        System.Xml.Element* divBrElement = System.Xml.MakeElement("br");
        rootDivElement->AppendChild(divLineElement);
        rootDivElement->AppendChild(divBrElement);
    }
    auto writeResult = htmlDoc.Write(htmlFormatter);
    if (writeResult.Error()) return writeResult;
    writeResult = divDoc.Write(divFormatter);
    if (writeResult.Error()) return writeResult;
    if (verbose)
    {
        Console.Out() << "==> " << htmlFilePath << endl();
        Console.Out() << "==> " << divFilePath << endl();
    }
    return Result<bool>(true);
}

public string Version()
{
    return "5.1.0";
}

public void PrintHelp()
{
    Console.Out()  << "Cmajor to HTML converter version " << Version() << endl();
    Console.Out()  << "Usage: cm2html [options] { FILE.cm }" << endl();
    Console.Out()  << "Options:" << endl();
    Console.Out()  << "--help | -h" << endl();
    Console.Out()  << "    Print help and exit." << endl();
    Console.Out()  << "--verbose | -v" << endl();
    Console.Out()  << "    Be verbose." << endl();
}

int main(int argc, const char** argv)
{
    bool verbose = false;
    List<string> filePaths;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("--"))
        {
            if (arg == "--help")
            {
                PrintHelp();
                return 0;
            }
            else if (arg == "--verbose")
            {
                verbose = true;
            }
            else
            {
                Console.Error() << "unknown option '" + arg + "'" << endl();
                return 1;
            }
        }
        else if (arg.StartsWith("-"))
        {
            string options = arg.Substring(1);
            for (char o : options)
            {
                switch (o)
                {
                    case 'h':
                    {
                        PrintHelp();
                        return 0;
                    }
                    case 'v':
                    {
                        verbose = true;
                        break;
                    }
                    default:
                    {
                        Console.Error() << "unknown option '-" << string(o) << "'" << endl();
                        return 1;
                    }
                }
            }
        }
        else
        {
            auto fullPathResult = System.IO.GetFullPath(arg);
            if (fullPathResult.Error())
            {
                Console.Error() << fullPathResult.GetErrorMessage() << endl();
                return 1;
            }
            string filePath = Rvalue(fullPathResult.Value());
            filePaths.Add(Rvalue(filePath));
        }
    }
    for (const string& filePath : filePaths)
    {
        auto result = ProcessFile(filePath, verbose);
        if (result.Error())
        {
            Console.Error() << result.GetErrorMessage() << endl();
            return 1;
        }
    }
    return 0;
}

