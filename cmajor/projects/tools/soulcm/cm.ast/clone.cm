// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace cm.ast
{
    public class CloneContext
    {
        public CloneContext() : instantiateFunctionNode(false), instantiateClassNode(false), makeTestUnits(false)
        {
        }
        public ~CloneContext()
        {
            for (FunctionNode* unitTestFunction : unitTestFunctions)
            {
                delete unitTestFunction;
            }
        }
        public void SetInstantiateFunctionNode()
        {
            instantiateFunctionNode = true;
        }
        public bool InstantiateFunctionNode() const
        {
            return instantiateFunctionNode;
        }
        public void SetInstantiateClassNode()
        {
            instantiateClassNode = true;
        }
        public bool InstantiateClassNode() const
        {
            return instantiateClassNode;
        }
        public void SetMakeTestUnits()
        {
            makeTestUnits = true;
        }
        public bool MakeTestUnits() const
        {
            return makeTestUnits;
        }
        public void AddUnitTestFunction(FunctionNode* unitTestFunction)
        {
            unitTestFunctions.Add(unitTestFunction);
        }
        public List<FunctionNode*>& UnitTestFunctions()
        {
            return unitTestFunctions;
        }
        private bool instantiateFunctionNode;
        private bool instantiateClassNode;
        private bool makeTestUnits;
        private List<FunctionNode*> unitTestFunctions;
    }

} // namespace cm.ast
