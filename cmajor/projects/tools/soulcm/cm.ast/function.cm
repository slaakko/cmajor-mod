// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace cm.ast
{
    public class FunctionNode : Node
    {
        public suppress FunctionNode(const FunctionNode& );
        public FunctionNode(const System.Lex.Span& span_, int fileIndex_) :
            base(NodeType.functionNode, span_, fileIndex_), specifiers(Specifiers.none), returnTypeExpr(), groupId(), parameters(), body(), bodySource(), programMain(false)
        {
        }
        public FunctionNode(NodeType nodeType_, const System.Lex.Span& span_, int fileIndex_) :
            base(nodeType_, span_, fileIndex_), specifiers(Specifiers.none), returnTypeExpr(), groupId(), parameters(), body(), bodySource(), programMain(false)
        {
        }
        public FunctionNode(const System.Lex.Span& span_, int fileIndex_, Specifiers specifiers_, Node* returnTypeExpr_, const ustring& groupId_,
            AttributesNode* attributes_) :
            base(NodeType.functionNode, span_, fileIndex_), specifiers(specifiers_), returnTypeExpr(returnTypeExpr_), groupId(groupId_),
            templateParameters(), parameters(), body(), bodySource(), attributes(attributes_), programMain(false)
        {
            if (!returnTypeExpr.IsNull())
            {
                returnTypeExpr->SetParent(this);
            }
        }
        public FunctionNode(NodeType nodeType_, const System.Lex.Span& span_, int fileIndex_, Specifiers specifiers_, Node* returnTypeExpr_, const ustring& groupId_,
            AttributesNode* attributes_) :
            base(nodeType_, span_, fileIndex_), specifiers(specifiers_), returnTypeExpr(returnTypeExpr_), groupId(groupId_), templateParameters(),
            parameters(), body(), bodySource(), attributes(attributes_), programMain(false)
        {
            if (!returnTypeExpr.IsNull())
            {
                returnTypeExpr->SetParent(this);
            }
        }
        public suppress FunctionNode& operator=(const FunctionNode& );
        public const Node* ReturnTypeExpr() const
        {
            return returnTypeExpr.Get();
        }
        public Node* ReturnTypeExpr()
        {
            return returnTypeExpr.Get();
        }
        public const ustring& GroupId() const
        {
            return groupId;
        }
        public const NodeList<TemplateParameterNode>& TemplateParameters() const
        {
            return templateParameters;
        }
        public const NodeList<ParameterNode>& Parameters() const
        {
            return parameters;
        }
        public const WhereConstraintNode* WhereConstraint() const
        {
            return whereConstraint.Get();
        }
        public WhereConstraintNode* WhereConstraint()
        {
            return whereConstraint.Get();
        }
        public const CompoundStatementNode* Body() const
        {
            return body.Get();
        }
        public CompoundStatementNode* Body()
        {
            return body.Get();
        }
        public const CompoundStatementNode* BodySource() const
        {
            return bodySource.Get();
        }
        public bool IsProgramMain() const
        {
            return programMain;
        }
        public void SetProgramMain()
        {
            programMain = true;
        }
        public AttributesNode* GetAttributes() const
        {
            return attributes.Get();
        }
        public void CloneContent(FunctionNode* clone, CloneContext& cloneContext) const
        {
            if (!attributes.IsNull())
            {
                clone->attributes.Reset(cast<AttributesNode*>(attributes->Clone(cloneContext)));
            }
            clone->specifiers = specifiers;
            Node* clonedReturnTypeExpr = null;
            if (!returnTypeExpr.IsNull())
            {
                clone->SetReturnTypeExpr(returnTypeExpr->Clone(cloneContext));
            }
            clone->groupId = groupId;
            int nt = templateParameters.Count();
            for (int i = 0; i < nt; ++i)
            {
                clone->AddTemplateParameter(cast<TemplateParameterNode*>(templateParameters[i]->Clone(cloneContext)));
            }
            int np = parameters.Count();
            for (int i = 0; i < np; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            if (!body.IsNull())
            {
                if (cloneContext.InstantiateClassNode())
                {
                    CloneContext bodyCloneContext;
                    clone->SetBodySource(cast<CompoundStatementNode*>(body->Clone(bodyCloneContext)));
                }
                else
                {
                    clone->SetBody(cast<CompoundStatementNode*>(body->Clone(cloneContext)));
                }
            }
            if (!whereConstraint.IsNull())
            {
                clone->SetConstraint(cast<WhereConstraintNode*>(whereConstraint->Clone(cloneContext)));
            }
        }
        public void SwitchToBody()
        {
            if (!bodySource.IsNull() && !!body.IsNull())
            {
                SetBody(bodySource.Release());
            }
        }
        public void SetReturnTypeExpr(Node* returnTypeExpr_)
        {
            returnTypeExpr.Reset(returnTypeExpr_);
            returnTypeExpr->SetParent(returnTypeExpr_);
        }
        public void SetSpecifiers(Specifiers specifiers_)
        {
            specifiers = specifiers_;
        }
        public void SetConstraint(WhereConstraintNode* whereConstraint_)
        {
            whereConstraint.Reset(whereConstraint_);
            whereConstraint->SetParent(this);
        }
        public void SetBody(CompoundStatementNode* body_)
        {
            body.Reset(body_);
            body->SetParent(this);
        }
        public void SetBodySource(CompoundStatementNode* bodySource_)
        {
            bodySource.Reset(bodySource_);
            bodySource->SetParent(this);
        }
        public override bool IsFunctionNode() const
        {
            return true;
        }
        public override Specifiers GetSpecifiers() const
        {
            return specifiers;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            AttributesNode* clonedAttributes = null;
            if (!attributes.IsNull())
            {
                clonedAttributes = cast<AttributesNode*>(attributes->Clone(cloneContext));
            }
            Node* clonedReturnTypeExpr = null;
            if (!returnTypeExpr.IsNull())
            {
                clonedReturnTypeExpr = returnTypeExpr->Clone(cloneContext);
            }
            FunctionNode* clone = new FunctionNode(GetSpan(), FileIndex(), specifiers, clonedReturnTypeExpr, groupId, clonedAttributes);
            if (!cloneContext.InstantiateFunctionNode())
            {
                int nt = templateParameters.Count();
                for (int i = 0; i < nt; ++i)
                {
                    clone->AddTemplateParameter(cast<TemplateParameterNode*>(templateParameters[i]->Clone(cloneContext)));
                }
            }
            int np = parameters.Count();
            for (int i = 0; i < np; ++i)
            {
                clone->AddParameter(cast<ParameterNode*>(parameters[i]->Clone(cloneContext)));
            }
            if (!body.IsNull())
            {
                if (cloneContext.InstantiateClassNode())
                {
                    CloneContext bodyCloneContext;
                    clone->SetBodySource(cast<CompoundStatementNode*>(body->Clone(bodyCloneContext)));
                }
                else
                {
                    clone->SetBody(cast<CompoundStatementNode*>(body->Clone(cloneContext)));
                }
            }
            if (!whereConstraint.IsNull())
            {
                clone->SetConstraint(cast<WhereConstraintNode*>(whereConstraint->Clone(cloneContext)));
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Result<bool> Write(AstWriter& writer)
        {
            auto result = base->Write(writer);
            if (result.Error())
            {
                return result;
            }
            bool hasAttributes = !attributes.IsNull();
            result = writer.GetBinaryWriter().Write(hasAttributes);
            if (result.Error())
            {
                return result;
            }
            if (hasAttributes)
            {
                attributes->Write(writer);
            }
            result = writer.Write(specifiers);
            if (result.Error())
            {
                return result;
            }
            bool hasReturnTypeExpr = !returnTypeExpr.IsNull();
            result = writer.GetBinaryWriter().Write(hasReturnTypeExpr);
            if (result.Error())
            {
                return result;
            }
            if (hasReturnTypeExpr)
            {
                result = writer.Write(returnTypeExpr.Get());
                if (result.Error())
                {
                    return result;
                }
            }
            result = writer.GetBinaryWriter().Write(groupId);
            if (result.Error())
            {
                return result;
            }
            result = templateParameters.Write(writer);
            if (result.Error())
            {
                return result;
            }
            result = parameters.Write(writer);
            if (result.Error())
            {
                return result;
            }
            bool hasConstraint = !whereConstraint.IsNull();
            result = writer.GetBinaryWriter().Write(hasConstraint);
            if (result.Error())
            {
                return result;
            }
            if (hasConstraint)
            {
                result = writer.Write(whereConstraint.Get());
                if (result.Error())
                {
                    return result;
                }
            }
            bool hasBody = !body.IsNull();
            result = writer.GetBinaryWriter().Write(hasBody);
            if (result.Error())
            {
                return result;
            }
            if (hasBody)
            {
                result = writer.Write(body.Get());
                if (result.Error())
                {
                    return result;
                }
            }
            bool hasBodySource = !bodySource.IsNull();
            result = writer.GetBinaryWriter().Write(hasBodySource);
            if (result.Error())
            {
                return result;
            }
            if (hasBodySource)
            {
                result = writer.Write(bodySource.Get());
                if (result.Error())
                {
                    return result;
                }
            }
            return Result<bool>(true);
        }
        public override Result<bool> Read(AstReader& reader)
        {
            auto result = base->Read(reader);
            if (result.Error())
            {
                return result;
            }
            auto hasAttributesResult = reader.GetBinaryReader().ReadBool();
            if (hasAttributesResult.Error())
            {
                return Result<bool>(ErrorId(hasAttributesResult.GetErrorId()));
            }
            bool hasAttributes = hasAttributesResult.Value();
            if (hasAttributes)
            {
                attributes.Reset(new AttributesNode(GetSpan(), FileIndex()));
                result = attributes->Read(reader);
                if (result.Error())
                {
                    return result;
                }
            }
            auto specifiersResult = reader.ReadSpecifiers();
            if (specifiersResult.Error())
            {
                return Result<bool>(ErrorId(specifiersResult.GetErrorId()));
            }
            specifiers = specifiersResult.Value();
            auto hasReturnTypeExprResult = reader.GetBinaryReader().ReadBool();
            if (hasReturnTypeExprResult.Error())
            {
                return Result<bool>(ErrorId(hasReturnTypeExprResult.GetErrorId()));
            }
            bool hasReturnTypeExpr = hasReturnTypeExprResult.Value();
            if (hasReturnTypeExpr)
            {
                auto returnTypeExprResult = reader.ReadNode();
                if (returnTypeExprResult.Error())
                {
                    return Result<bool>(ErrorId(returnTypeExprResult.GetErrorId()));
                }
                returnTypeExpr.Reset(returnTypeExprResult.Value());
                returnTypeExpr->SetParent(this);
            }
            auto groupIdResult = reader.GetBinaryReader().ReadUString();
            if (groupIdResult.Error())
            {
                return Result<bool>(ErrorId(groupIdResult.GetErrorId()));
            }
            groupId = groupIdResult.Value();
            result = templateParameters.Read(reader);
            if (result.Error())
            {
                return result;
            }
            templateParameters.SetParent(this);
            result = parameters.Read(reader);
            if (result.Error())
            {
                return result;
            }
            parameters.SetParent(this);
            auto hasConstraintResult = reader.GetBinaryReader().ReadBool();
            if (hasConstraintResult.Error())
            {
                return Result<bool>(ErrorId(hasConstraintResult.GetErrorId()));
            }
            bool hasConstraint = hasConstraintResult.Value();
            if (hasConstraint)
            {
                auto whereConstraintResult = reader.ReadWhereConstraintNode();
                if (whereConstraintResult.Error())
                {
                    return Result<bool>(ErrorId(whereConstraintResult.GetErrorId()));
                }
                whereConstraint.Reset(whereConstraintResult.Value());
            }
            auto hasBodyResult = reader.GetBinaryReader().ReadBool();
            if (hasBodyResult.Error())
            {
                return Result<bool>(ErrorId(hasBodyResult.GetErrorId()));
            }
            bool hasBody = hasBodyResult.Value();
            if (hasBody)
            {
                auto bodyResult = reader.ReadCompoundStatementNode();
                if (bodyResult.Error())
                {
                    return Result<bool>(ErrorId(bodyResult.GetErrorId()));
                }
                body.Reset(bodyResult.Value());
                body->SetParent(this);
            }
            auto hasBodySourceResult = reader.GetBinaryReader().ReadBool();
            if (hasBodySourceResult.Error())
            {
                return Result<bool>(ErrorId(hasBodySourceResult.GetErrorId()));
            }
            bool hasBodySource = hasBodySourceResult.Value();
            if (hasBodySource)
            {
                auto bodySourceResult = reader.ReadCompoundStatementNode();
                if (bodySourceResult.Error())
                {
                    return Result<bool>(ErrorId(bodySourceResult.GetErrorId()));
                }
                bodySource.Reset(bodySourceResult.Value());
                bodySource->SetParent(this);
            }
            return Result<bool>(true);
        }
        public override void AddTemplateParameter(TemplateParameterNode* templateParameter)
        {
            templateParameter->SetParent(this);
            templateParameters.Add(templateParameter);
        }
        public override void AddParameter(ParameterNode* parameter)
        {
            parameter->SetParent(this);
            parameters.Add(parameter);
        }
        private Specifiers specifiers;
        private UniquePtr<Node> returnTypeExpr;
        private ustring groupId;
        private NodeList<TemplateParameterNode> templateParameters;
        private NodeList<ParameterNode> parameters;
        private UniquePtr<WhereConstraintNode> whereConstraint;
        private UniquePtr<CompoundStatementNode> body;
        private UniquePtr<CompoundStatementNode> bodySource;
        private UniquePtr<AttributesNode> attributes;
        private bool programMain;
    }

    public class FunctionPtrNode : Node
    {
        public FunctionPtrNode(const System.Lex.Span& span_, int fileIndex_) : base(NodeType.functionPtrNode, span_, fileIndex_), boundExpression(null)
        {
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            FunctionPtrNode* clone = new FunctionPtrNode(GetSpan(), FileIndex());
            clone->SetBoundExpression(GetBoundExpression());
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public inline void* GetBoundExpression() const
        {
            return boundExpression;
        }
        public inline void SetBoundExpression(void* boundExpression_)
        {
            boundExpression = boundExpression_;
        }
        private void* boundExpression;
    }

} // namespace cm.ast
