// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace cm.ast
{
    public class ParameterNode : Node
    {
        public ParameterNode(const System.Lex.Span& span_, int fileIndex_) : base(NodeType.parameterNode, span_, fileIndex_), typeExpr(), id(), artificialId(false)
        {
        }
        public ParameterNode(const System.Lex.Span& span_, int fileIndex_, Node* typeExpr_, IdentifierNode* id_) :
            base(NodeType.parameterNode, span_, fileIndex_), typeExpr(typeExpr_), id(id_), artificialId(false)
        {
            typeExpr->SetParent(this);
            if (!id.IsNull())
            {
                id->SetParent(this);
            }
        }
        public Node* TypeExpr() const
        {
            return typeExpr.Get();
        }
        public IdentifierNode* Id() const
        {
            return id.Get();
        }
        public bool ArtificialId() const
        {
            return artificialId;
        }
        public void SetId(IdentifierNode* id_)
        {
            id.Reset(id_);
            id->SetParent(this);
            artificialId = true;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            IdentifierNode* clonedId = null;
            if (!id.IsNull())
            {
                clonedId = cast<IdentifierNode*>(id->Clone(cloneContext));
            }
            ParameterNode* clone = new ParameterNode(GetSpan(), FileIndex(), typeExpr->Clone(cloneContext), clonedId);
            if (artificialId)
            {
                clone->artificialId = true;
            }
            return clone;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override Result<bool> Write(AstWriter& writer)
        {
            auto result = base->Write(writer);
            if (result.Error())
            {
                return result;
            }
            result = writer.Write(typeExpr.Get());
            if (result.Error())
            {
                return result;
            }
            bool hasId = !id.IsNull();
            result = writer.GetBinaryWriter().Write(hasId);
            if (result.Error())
            {
                return result;
            }
            if (hasId)
            {
                result = writer.Write(id.Get());
                if (result.Error())
                {
                    return result;
                }
            }
            return writer.GetBinaryWriter().Write(artificialId);
        }
        public override Result<bool> Read(AstReader& reader)
        {
            auto result = base->Read(reader);
            if (result.Error())
            {
                return result;
            }
            auto typeExprResult = reader.ReadNode();
            if (typeExprResult.Error())
            {
                return Result<bool>(ErrorId(typeExprResult.GetErrorId()));
            }
            typeExpr.Reset(typeExprResult.Value());
            typeExpr->SetParent(this);
            auto hasIdResult = reader.GetBinaryReader().ReadBool();
            if (hasIdResult.Error())
            {
                return Result<bool>(ErrorId(hasIdResult.GetErrorId()));
            }
            bool hasId = hasIdResult.Value();
            if (hasId)
            {
                auto idResult = reader.ReadIdentifierNode();
                if (idResult.Error())
                {
                    return Result<bool>(ErrorId(idResult.GetErrorId()));
                }
                id.Reset(idResult.Value());
                id->SetParent(this);
            }
            auto artificialIdResult = reader.GetBinaryReader().ReadBool();
            if (artificialIdResult.Error())
            {
                return Result<bool>(ErrorId(artificialIdResult.GetErrorId()));
            }
            artificialId = artificialIdResult.Value();
            return Result<bool>(true);
        }
        private UniquePtr<Node> typeExpr;
        private UniquePtr<IdentifierNode> id;
        private bool artificialId;
    }

} // namespace cm.ast
