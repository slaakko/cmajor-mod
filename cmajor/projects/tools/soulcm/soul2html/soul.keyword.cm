// this file has been generated from 'C:/work/cmajor-mod/cmajor/projects/tools/soulcm/soul2html/soul.keyword' using SoulCm lexer generator scmlg version 5.0.0

using System;
using System.Collections;
using soul.token;

namespace soul.keyword
{
    public class Keywords
    {
        static Keywords() : instance(new Keywords())
        {
        }
        public static Keywords& Instance()
        {
            return *instance;
        }
        public System.Lex.KeywordMap* GetKeywordMap() const
        {
            return &keywordMap;
        }
        private Keywords()
        {
            keywords.Add(System.Lex.Keyword(u"auto", AUTO));
            keywords.Add(System.Lex.Keyword(u"assert", ASSERT));
            keywords.Add(System.Lex.Keyword(u"elif", ELIF));
            keywords.Add(System.Lex.Keyword(u"endif", ENDIF));
            keywords.Add(System.Lex.Keyword(u"bool", BOOL));
            keywords.Add(System.Lex.Keyword(u"true", TRUE));
            keywords.Add(System.Lex.Keyword(u"false", FALSE));
            keywords.Add(System.Lex.Keyword(u"sbyte", SBYTE));
            keywords.Add(System.Lex.Keyword(u"byte", BYTE));
            keywords.Add(System.Lex.Keyword(u"short", SHORT));
            keywords.Add(System.Lex.Keyword(u"ushort", USHORT));
            keywords.Add(System.Lex.Keyword(u"int", INT));
            keywords.Add(System.Lex.Keyword(u"uint", UINT));
            keywords.Add(System.Lex.Keyword(u"long", LONG));
            keywords.Add(System.Lex.Keyword(u"ulong", ULONG));
            keywords.Add(System.Lex.Keyword(u"float", FLOAT));
            keywords.Add(System.Lex.Keyword(u"double", DOUBLE));
            keywords.Add(System.Lex.Keyword(u"char", CHAR));
            keywords.Add(System.Lex.Keyword(u"wchar", WCHAR));
            keywords.Add(System.Lex.Keyword(u"uchar", UCHAR));
            keywords.Add(System.Lex.Keyword(u"void", VOID));
            keywords.Add(System.Lex.Keyword(u"enum", ENUM));
            keywords.Add(System.Lex.Keyword(u"cast", CAST));
            keywords.Add(System.Lex.Keyword(u"interface", INTERFACE));
            keywords.Add(System.Lex.Keyword(u"namespace", NAMESPACE));
            keywords.Add(System.Lex.Keyword(u"using", USING));
            keywords.Add(System.Lex.Keyword(u"static", STATIC));
            keywords.Add(System.Lex.Keyword(u"extern", EXTERN));
            keywords.Add(System.Lex.Keyword(u"as", AS));
            keywords.Add(System.Lex.Keyword(u"is", IS));
            keywords.Add(System.Lex.Keyword(u"explicit", EXPLICIT));
            keywords.Add(System.Lex.Keyword(u"delegate", DELEGATE));
            keywords.Add(System.Lex.Keyword(u"inline", INLINE));
            keywords.Add(System.Lex.Keyword(u"cdecl", CDECL));
            keywords.Add(System.Lex.Keyword(u"nothrow", NOTHROW));
            keywords.Add(System.Lex.Keyword(u"public", PUBLIC));
            keywords.Add(System.Lex.Keyword(u"protected", PROTECTED));
            keywords.Add(System.Lex.Keyword(u"private", PRIVATE));
            keywords.Add(System.Lex.Keyword(u"internal", INTERNAL));
            keywords.Add(System.Lex.Keyword(u"virtual", VIRTUAL));
            keywords.Add(System.Lex.Keyword(u"abstract", ABSTRACT));
            keywords.Add(System.Lex.Keyword(u"override", OVERRIDE));
            keywords.Add(System.Lex.Keyword(u"suppress", SUPPRESS));
            keywords.Add(System.Lex.Keyword(u"winapi", WINAPI));
            keywords.Add(System.Lex.Keyword(u"operator", OPERATOR));
            keywords.Add(System.Lex.Keyword(u"class", CLASS));
            keywords.Add(System.Lex.Keyword(u"return", RETURN));
            keywords.Add(System.Lex.Keyword(u"if", IF));
            keywords.Add(System.Lex.Keyword(u"else", ELSE));
            keywords.Add(System.Lex.Keyword(u"switch", SWITCH));
            keywords.Add(System.Lex.Keyword(u"case", CASE));
            keywords.Add(System.Lex.Keyword(u"default", DEFAULT));
            keywords.Add(System.Lex.Keyword(u"while", WHILE));
            keywords.Add(System.Lex.Keyword(u"do", DO));
            keywords.Add(System.Lex.Keyword(u"for", FOR));
            keywords.Add(System.Lex.Keyword(u"break", BREAK));
            keywords.Add(System.Lex.Keyword(u"continue", CONTINUE));
            keywords.Add(System.Lex.Keyword(u"goto", GOTO));
            keywords.Add(System.Lex.Keyword(u"typedef", TYPEDEF));
            keywords.Add(System.Lex.Keyword(u"typename", TYPENAME));
            keywords.Add(System.Lex.Keyword(u"typeid", TYPEID));
            keywords.Add(System.Lex.Keyword(u"const", CONST));
            keywords.Add(System.Lex.Keyword(u"constexpr", CONSTEXPR));
            keywords.Add(System.Lex.Keyword(u"null", NULL_LITERAL));
            keywords.Add(System.Lex.Keyword(u"this", THIS));
            keywords.Add(System.Lex.Keyword(u"base", BASE));
            keywords.Add(System.Lex.Keyword(u"construct", CONSTRUCT));
            keywords.Add(System.Lex.Keyword(u"destroy", DESTROY));
            keywords.Add(System.Lex.Keyword(u"new", NEW));
            keywords.Add(System.Lex.Keyword(u"delete", DELETE));
            keywords.Add(System.Lex.Keyword(u"sizeof", SIZEOF));
            keywords.Add(System.Lex.Keyword(u"try", TRY));
            keywords.Add(System.Lex.Keyword(u"catch", CATCH));
            keywords.Add(System.Lex.Keyword(u"throw", THROW));
            keywords.Add(System.Lex.Keyword(u"concept", CONCEPT));
            keywords.Add(System.Lex.Keyword(u"where", WHERE));
            keywords.Add(System.Lex.Keyword(u"axiom", AXIOM));
            keywords.Add(System.Lex.Keyword(u"and", AND));
            keywords.Add(System.Lex.Keyword(u"or", OR));
            keywords.Add(System.Lex.Keyword(u"unit_test", UNIT_TEST));
            keywords.Add(System.Lex.Keyword(u"tokens", TOKENS));
            keywords.Add(System.Lex.Keyword(u"keywords", KEYWORDS));
            keywords.Add(System.Lex.Keyword(u"expressions", EXPRESSIONS));
            keywords.Add(System.Lex.Keyword(u"parser", PARSER));
            keywords.Add(System.Lex.Keyword(u"lexer", LEXER));
            keywords.Add(System.Lex.Keyword(u"project", PROJECT));
            keywords.Add(System.Lex.Keyword(u"main", MAIN));
            keywords.Add(System.Lex.Keyword(u"empty", EMPTY));
            keywords.Add(System.Lex.Keyword(u"any", ANY));
            keywords.Add(System.Lex.Keyword(u"var", VAR));
            keywordMap.SetKeywords(keywords);
        }
        private List<System.Lex.Keyword> keywords;
        private System.Lex.KeywordMap keywordMap;
        private static UniquePtr<Keywords> instance;
    }

    public System.Lex.KeywordMap* GetKeywordMap()
    {
        return Keywords.Instance().GetKeywordMap();
    }

} // soul.keyword
