// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;

namespace spring
{
    enum DiagramFlags
    {
        none, changed = 1 << 0, invalidated = 1 << 1, modified = 1 << 2
    }

    class Diagram
    {
        public Diagram() : flags(DiagramFlags.none), canvas(null), operation(new EmptyOperation(this)), selection(new EmptySelection(this)), errorId(0)
        {
        }
        [nodiscard]
        public Result<bool> Draw(Graphics& graphics)
        {
            if (Changed())
            {
                ResetChanged();
                Configuration.Instance().GetLayout()->SetGraphics(&graphics);
                for (const auto& element : elements)
                {
                    auto result = element->Measure(graphics);
                    if (result.Error()) return result;
                }
            }
            if (Invalidated())
            {
                ResetInvalidated();
            }
            List<DiagramElement*> relationshipElements;
            for (const auto& element : elements)
            {
                if (element->IsContainerElement())
                {
                    auto result = element->Draw(graphics);
                    if (result.Error()) return result;
                }
                else if (element->IsRelationshipElement())
                {
                    relationshipElements.Add(element.Get());
                }
            }
            for (DiagramElement* relationshipElement : relationshipElements)
            {
                auto result = relationshipElement->Draw(graphics);
                if (result.Error()) return result;
            }
            auto result = operation->Draw(graphics);
            if (result.Error()) return result;
            result = selection->Draw(graphics);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Save(const string& filePath)
        {
            Result<StreamWriter> writerResult = System.IO.File.CreateText(filePath);
            if (writerResult.Error()) return Result<bool>(ErrorId(writerResult.GetErrorId()));
            StreamWriter& writer = writerResult.Value();
            System.Text.CodeFormatter formatter(writer);
            formatter.SetIndentSize(1);
            System.Xml.Document diagramDoc;
            System.Xml.Element* diagramElement = System.Xml.MakeElement("diagram");
            List<ContainerElement*> containerElements;
            List<RelationshipElement*> relationshipElements;
            Map<ContainerElement*, int> containerElementIndexMap;
            for (const auto& element : elements)
            {
                if (element->IsContainerElement())
                {
                    containerElements.Add(cast<ContainerElement*>(element.Get()));
                }
                else if (element->IsRelationshipElement())
                {
                    relationshipElements.Add(cast<RelationshipElement*>(element.Get()));
                }
            }
            int nc = cast<int>(containerElements.Count());
            for (int i = 0; i < nc; ++i)
            {
                ContainerElement* containerElement = containerElements[i];
                containerElementIndexMap[containerElement] = i;
                diagramElement->AppendChild(containerElement->ToXml());
            }
            int nr = cast<int>(relationshipElements.Count());
            for (int i = 0; i < nr; ++i)
            {
                RelationshipElement* relationshipElement = relationshipElements[i];
                auto result = relationshipElement->SetContainerElementIndeces(containerElementIndexMap);
                if (result.Error()) return result;
                diagramElement->AppendChild(relationshipElement->ToXml());
            }
            diagramDoc.AppendChild(diagramElement);
            auto result = diagramDoc.Write(formatter);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Load(const string& filePath)
        {
            List<RelationshipElement*> relationshipElements;
            Result<UniquePtr<System.Xml.Document>> diagramDocResult = System.Xml.ParseXmlDocument(filePath, fileMap);
            if (diagramDocResult.Error()) return Result<bool>(ErrorId(diagramDocResult.GetErrorId()));
            System.Xml.Document* diagramDoc = diagramDocResult.Value().Get();
            Result<UniquePtr<System.XPath.NodeSet>> nodeSetResult = System.XPath.EvaluateToNodeSet("/diagram/*", diagramDoc);
            if (nodeSetResult.Error()) return Result<bool>(ErrorId(nodeSetResult.GetErrorId()));
            System.XPath.NodeSet* nodeSet = nodeSetResult.Value().Get();
            int n = nodeSet->Count();
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* element = cast<System.Xml.Element*>(node);
                    Result<DiagramElement*> diagramElementResult = CreateDiagramElement(element->Name());
                    if (diagramElementResult.Error()) return Result<bool>(ErrorId(diagramElementResult.GetErrorId()));
                    DiagramElement* diagramElement = diagramElementResult.Value();
                    auto result = diagramElement->FromXml(element);
                    if (result.Error()) return result;
                    if (diagramElement->IsRelationshipElement())
                    {
                        relationshipElements.Add(cast<RelationshipElement*>(diagramElement));
                    }
                    result = AddElement(diagramElement);
                    if (result.Error()) return result;
                }
            }
            for (RelationshipElement* relationshipElement : relationshipElements)
            {
                auto result = relationshipElement->Resolve(this);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public inline bool Changed() const
        {
            return (flags & DiagramFlags.changed) != DiagramFlags.none;
        }
        [nodiscard]
        public Result<bool> SetChanged()
        {
            if (!Changed())
            {
                flags = cast<DiagramFlags>(flags | DiagramFlags.changed);
                auto result = SetModified();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public void ResetChanged()
        {
            flags = cast<DiagramFlags>(flags & ~DiagramFlags.changed);
        }
        public inline bool IsModified() const
        {
            return (flags & DiagramFlags.modified) != DiagramFlags.none;
        }
        [nodiscard]
        public Result<bool> SetModified()
        {
            flags = cast<DiagramFlags>(flags | DiagramFlags.modified);
            if (canvas != null)
            {
                StatusBarItem* modifiedStatusBarItem = canvas->ModifiedStatusBarItem();
                if (modifiedStatusBarItem != null)
                {
                    auto result = modifiedStatusBarItem->SetText("*");
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> ResetModified()
        {
            if (IsModified())
            {
                flags = cast<DiagramFlags>(flags & ~DiagramFlags.modified);
                if (canvas != null)
                {
                    StatusBarItem* modifiedStatusBarItem = canvas->ModifiedStatusBarItem();
                    if (modifiedStatusBarItem != null)
                    {
                        auto result = modifiedStatusBarItem->SetText(" ");
                        if (result.Error()) return result;
                    }
                }
            }
            return Result<bool>(true);
        }
        public inline bool Invalidated() const
        {
            return (flags & DiagramFlags.invalidated) != DiagramFlags.none;
        }
        [nodiscard]
        public Result<bool> Invalidate()
        {
            if (!Invalidated())
            {
                flags = cast<DiagramFlags>(flags | DiagramFlags.invalidated);
                if (canvas != null)
                {
                    auto result = canvas->Invalidate();
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
        public void ResetInvalidated()
        {
            flags = cast<DiagramFlags>(flags & ~DiagramFlags.invalidated);
        }
        public void SetCanvas(Canvas* canvas_)
        {
            canvas = canvas_;
        }
        public inline Canvas* GetCanvas() const
        {
            return canvas;
        }
        public inline CommandList& GetCommandList()
        {
            return commandList;
        }
        [nodiscard]
        public Result<bool> SetMenuItems(MenuItem* undoMenuItem, MenuItem* redoMenuItem)
        {
            auto result = commandList.SetMenuItems(undoMenuItem, redoMenuItem);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public inline Selection* GetSelection() const
        {
            return selection.Get();
        }
        [nodiscard]
        public Result<bool> SetSelection(Selection* selection_)
        {
            auto result = selection->Clear();
            if (result.Error()) return result;
            selection.Reset(selection_);
            if (!selection->IsEmpty())
            {
                auto result = EnableCopy();
                if (result.Error()) return result;
                result = EnableCut();
                if (result.Error()) return result;
            }
            else
            {
                auto result = DisableCopy();
                if (result.Error()) return result;
                result = DisableCut();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> ResetSelection()
        {
            auto result = selection->Clear();
            if (result.Error()) return result;
            result = DisposeContextMenu();
            if (result.Error()) return result;
            selection.Reset(new EmptySelection(this));
            result = DisableCopy();
            if (result.Error()) return result;
            result = DisableCut();
            if (result.Error()) return result;
            result = SetChanged();
            if (result.Error()) return result;
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DeleteSelection()
        {
            if (!selection->IsEmpty())
            {
                auto result = selection->Delete();
                if (result.Error()) return result;
                result = ResetSelection();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public inline Operation* GetOperation() const
        {
            return operation.Get();
        }
        public void SetOperation(Operation* operation_)
        {
            operation.Reset(operation_);
        }
        public void ResetOperation()
        {
            operation.Reset(new EmptyOperation(this));
        }
        [nodiscard]
        public Result<bool> EnableCopy()
        {
            Canvas* canvas = GetCanvas();
            if (canvas != null)
            {
                auto result = canvas->EnableCopy();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EnableCut()
        {
            Canvas* canvas = GetCanvas();
            if (canvas != null)
            {
                auto result = canvas->EnableCut();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DisableCopy()
        {
            Canvas* canvas = GetCanvas();
            if (canvas != null)
            {
                auto result = canvas->DisableCopy();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DisableCut()
        {
            Canvas* canvas = GetCanvas();
            if (canvas != null)
            {
                auto result = canvas->DisableCut();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Paste(const ustring& clipboardData)
        {
            auto utf8Result = ToUtf8(clipboardData);
            if (utf8Result.Error()) return Result<bool>(ErrorId(utf8Result.GetErrorId()));
            const string& cbdata = utf8Result.Value();
            UniquePtr<AddElementsCommand> addElementsCommand(new AddElementsCommand(this));
            Result<UniquePtr<System.Xml.Document>> diagramElementDocResult(System.Xml.ParseXmlDocumentContent(cbdata, "clipboard", fileMap));
            if (diagramElementDocResult.Error()) return Result<bool>(ErrorId(diagramElementDocResult.GetErrorId()));
            System.Xml.Document* diagramElementDoc = diagramElementDocResult.Value().Get();
            Result<UniquePtr<System.XPath.NodeSet>> nodeSetResult = System.XPath.EvaluateToNodeSet("/spring.diagram.elements/*", diagramElementDoc);
            if (nodeSetResult.Error()) return Result<bool>(ErrorId(nodeSetResult.GetErrorId()));
            System.XPath.NodeSet* nodeSet = nodeSetResult.Value().Get();
            UniquePtr<ElementSelection> elementSelection(new ElementSelection(this));
            List<RelationshipElement*> relationshipElements;
            Map<int, int> indexMap;
            int n = cast<int>(nodeSet->Count());
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* xmlElement = cast<System.Xml.Element*>(node);
                    string xmlElementName = xmlElement->Name();
                    auto diagramElementResult = CreateDiagramElement(xmlElementName);
                    if (diagramElementResult.Error()) return Result<bool>(ErrorId(diagramElementResult.GetErrorId()));
                    UniquePtr<DiagramElement> diagramElement(diagramElementResult.Value());
                    auto result = diagramElement->FromXml(xmlElement);
                    if (result.Error()) return result;
                    int index = cast<int>(elements.Count());
                    if (diagramElement->IsRelationshipElement())
                    {
                        relationshipElements.Add(cast<RelationshipElement*>(diagramElement.Get()));
                    }
                    result = AddElement(diagramElement.Release());
                    if (result.Error()) return result;
                    indexMap[i] = index;
                    result = elementSelection->Add(index);
                    if (result.Error()) return result;
                    addElementsCommand->AddIndex(index);
                }
            }
            for (RelationshipElement* relationship : relationshipElements)
            {
                auto result = relationship->MapIndeces(indexMap);
                if (result.Error()) return result;
                result = relationship->Resolve(this);
                if (result.Error()) return result;
            }
            auto result = SetSelection(elementSelection.Release());
            if (result.Error()) return result;
            result = commandList.AddCommand(addElementsCommand.Release());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> AdvanceOperation(MouseArgs& mouseArgs)
        {
            if (operation->IsEmptyOperation()) return Result<bool>(true);
            auto result = operation->AdvanceTo(mouseArgs);
            if (result.Error()) return result;
            result = SetChanged();
            if (result.Error()) return result;
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> CommitOperation(MouseArgs& mouseArgs)
        {
            auto result = operation->Commit(mouseArgs);
            if (result.Error()) return result;
            ResetOperation();
            result = SetChanged();
            if (result.Error()) return result;
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> CancelOperation()
        {
            operation->Cancel();
            ResetOperation();
            auto result = Tools.Instance().SetCurrent(Tools.Instance().GetSelectTool());
            if (result.Error()) return result;
            result = SetChanged();
            if (result.Error()) return result;
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DisposeContextMenu()
        {
            Window* window = canvas->GetWindow();
            auto result = window->RemoveContextMenu();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> HideContextMenu()
        {
            Window* window = canvas->GetWindow();
            auto result = window->HideContextMenu();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Undo()
        {
            if (commandList.CanUndo())
            {
                auto result = commandList.Undo();
                if (result.Error()) return result;
                result = SetChanged();
                if (result.Error()) return result;
                result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Redo()
        {
            if (commandList.CanRedo())
            {
                auto result = commandList.Redo();
                if (result.Error()) return result;
                result = SetChanged();
                if (result.Error()) return result;
                result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public int NextIndex() const
        {
            return cast<int>(elements.Count());
        }
        public DiagramElement* GetElementByIndex(int index) const
        {
            return elements.Get(index);
        }
        public void SetElementByIndex(DiagramElement* element, int index)
        {
            elements.Set(index, element);
        }
        public int GetIndexOfElement(DiagramElement* element) const
        {
            int n = cast<int>(elements.Count());
            for (int i = 0; i < n; ++i)
            {
                if (elements.Get(i) == element)
                {
                    return i;
                }
            }
            return -1;
        }
        public int GetIndexOfElementAt(const PointF& location) const
        {
            spring.Contains<DiagramElement> pred(location);
            return IndexOf(elements, pred);
        }
        public bool HasIntersectingContainerElements(const RectF& rect) const
        {
            for (const auto& element : elements)
            {
                if (element->IsContainerElement())
                {
                    ContainerElement* containerElement = cast<ContainerElement*>(element.Get());
                    if (containerElement->IntersectsWith(rect)) return true;
                }
            }
            return false;
        }
        public int GetNumberOfIntersectingContainerElements(const RectF& rect) const
        {
            int count = 0;
            for (const auto& element : elements)
            {
                if (element->IsContainerElement())
                {
                    ContainerElement* containerElement = cast<ContainerElement*>(element.Get());
                    if (containerElement->IntersectsWith(rect))
                    {
                        ++count;
                    }
                }
            }
            return count;
        }
        public List<int> GetIntersectingContainerElementIndeces(const RectF& rect) const
        {
            List<int> indeces;
            int n = cast<int>(elements.Count());
            for (int i = 0; i < n; ++i)
            {
                DiagramElement* element = GetElementByIndex(i);
                if (element->IsContainerElement())
                {
                    ContainerElement* containerElement = cast<ContainerElement*>(element);
                    if (containerElement->IntersectsWith(rect))
                    {
                        indeces.Add(i);
                    }
                }
            }
            return indeces;
        }
        [nodiscard]
        public Result<bool> AddElement(DiagramElement* element)
        {
            elements.Add(element);
            element->SetDiagram(this);
            auto result = SetChanged();
            if (result.Error()) return result;
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public UniquePtr<DiagramElement> RemoveElementByIndex(int index)
        {
            return elements.Remove(index);
        }
        public void InsertElement(DiagramElement* element, int index)
        {
            elements.Insert(index, element);
        }
        public DiagramElement* ReleaseElementByIndex(int index)
        {
            return elements.Release(index);
        }
        public void Offset(float dx, float dy)
        {
            for (auto& element : elements)
            {
                element->Offset(dx, dy);
            }
        }
        public RectF CalculateBounds() const
        {
            List<DiagramElement*> diagramElements;
            for (const auto& element : elements)
            {
                diagramElements.Add(element.Get());
            }
            return spring.CalculateBounds(diagramElements);
        }
        [nodiscard]
        public Result<bool> SaveImage(const string& fileName, const PaddingF& margins, ImageFormat format)
        {
            List<DiagramElement*> diagramElements;
            for (const auto& element : elements)
            {
                diagramElements.Add(element.Get());
            }
            Result<Graphics> graphicsResult = Graphics.FromWindowHandle(canvas->Handle());
            if (graphicsResult.Error()) return Result<bool>(ErrorId(graphicsResult.GetErrorId()));
            Graphics* graphics = &graphicsResult.Value();
            auto result = spring.SaveImage(fileName, margins, canvas, diagramElements, graphics, format);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public inline bool Error() const
        {
            return errorId != 0;
        }
        public inline int GetErrorId() const
        {
            return errorId;
        }
        public void SetErrorId(int errorId_)
        {
            errorId = errorId_;
        }
        public void ResetError()
        {
            errorId = 0;
        }
        private static System.Lex.FileMap fileMap;
        private DiagramFlags flags;
        private Canvas* canvas;
        private CommandList commandList;
        private UniquePtr<Operation> operation;
        private UniquePtr<Selection> selection;
        private IndexList<DiagramElement> elements;
        private int errorId;
    }
}

