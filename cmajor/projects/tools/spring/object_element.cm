// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;

namespace spring
{
    class ObjectElement : ContainerElement
    {
        public ObjectElement() : base(DiagramElementKind.objectElement)
        {
        }
        public ObjectElement(const string& name_) : base(DiagramElementKind.objectElement, name_)
        {
        }
        public override DiagramElement* Clone() const
        {
            ObjectElement* clone = new ObjectElement();
            clone->SetName(Name());
            clone->SetBounds(Bounds());
            int na = attributes.Count();
            for (int i = 0; i < na; ++i)
            {
                AttributeElement* attributeElement = attributes.Get(i);
                AttributeElement* clonedAttribute = cast<AttributeElement*>(attributeElement->Clone());
                clonedAttribute->SetContainerElement(clone);
                clone->attributes.Add(clonedAttribute);
            }
            return clone;
        }
        public override Result<bool> AddActions(Diagram* diagram, int elementIndex, ContextMenu* contextMenu) const
        {
            auto result = base->AddActions(diagram, elementIndex, contextMenu);
            if (result.Error()) return result;
            MenuItem* propertiesMenuItem = new MenuItem("Properties...");
            result = contextMenu->AddMenuItemAction(propertiesMenuItem, new ObjectElementPropertiesAction(diagram, elementIndex, propertiesMenuItem));
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public const IndexList<AttributeElement>& Attributes() const
        {
            return attributes;
        }
        public IndexList<AttributeElement>& Attributes()
        {
            return attributes;
        }
        public void SetAttributes(IndexList<AttributeElement>&& attributes_)
        {
            attributes = attributes_;
            for (auto& attribute : attributes)
            {
                attribute->SetContainerElement(this);
            }
        }
        public override Result<AttributeElement*> GetAttribute(int attributeIndex) const
        {
            return Result<AttributeElement*>(attributes.Get(attributeIndex));
        }
        public override Result<int> GetIndexOfAttributeElement(AttributeElement* attributeElement) const
        {
            int n = attributes.Count();
            for (int i = 0; i < n; ++i)
            {
                if (attributes.Get(i) == attributeElement) return i;
            }
            int errorId = AllocateError("attribute '" + attributeElement->Name() + "' not found from object '" + Name() + "'");
            return Result<int>(ErrorId(errorId));
        }
        public override List<RelationshipElement*> GetAllRelationships() const
        {
            List<RelationshipElement*> relationships = Relationships();
            int na = attributes.Count();
            for (int i = 0; i < na; ++i)
            {
                AttributeElement* attribute = attributes.Get(i);
                RelationshipElement* relationship = attribute->Relationship();
                if (relationship != null)
                {
                    relationships.Add(relationship);
                }
            }
            return relationships;
        }
        public override void MapChildObjects(ContainerElement* from,
            Map<DiagramElement*, DiagramElement*>& cloneMap,
            Map<DiagramElement*, DiagramElement*>& reverseCloneMap)
        {
            if (from->IsObjectElement())
            {
                ObjectElement* fromObject = cast<ObjectElement*>(from);
                int na = fromObject->attributes.Count();
                for (int i = 0; i < na; ++i)
                {
                    AttributeElement* newAttr = attributes.Get(i);
                    AttributeElement* oldAttr = fromObject->attributes.Get(i);
                    cloneMap[oldAttr] = newAttr;
                    reverseCloneMap[newAttr] = oldAttr;
                }
            }
        }
        public override List<EndPoint> GetEndPoints(EndPointKind endPointKind, Tool* tool) const
        {
            if (endPointKind == EndPointKind.source && tool->IsReferenceTool())
            {
                List<EndPoint> endPoints;
                int na = attributes.Count();
                for (int i = 0; i < na; ++i)
                {
                    AttributeElement* attribute = attributes.Get(i);
                    endPoints.Add(attribute->GetEndPoint(Connector(Connector.Attribute(i))));
                }
                return endPoints;
            }
            else
            {
                return base->GetEndPoints(endPointKind, tool);
            }
        }
        public override float GetMaxChildElementWidth() const
        {
            return maxChildElementWidth;
        }
        public override System.Xml.Element* ToXml() const
        {
            System.Xml.Element* xmlElement = System.Xml.MakeElement("objectElement");
            SetName(xmlElement);
            xmlElement->AppendChild(BoundsXmlElement());
            for (const auto& attribute : attributes)
            {
                System.Xml.Element* attributeElement = attribute->ToXml();
                xmlElement->AppendChild(attributeElement);
            }
            return xmlElement;
        }
        public override Result<bool> FromXml(System.Xml.Element* xmlElement, bool setName)
        {
            Result<bool> result = base->FromXml(xmlElement, setName);
            if (result.Error()) return result;
            Result<UniquePtr<System.XPath.NodeSet>> attributeNodeSetResult = System.XPath.EvaluateToNodeSet("attribute", xmlElement);
            if (attributeNodeSetResult.Error())
            {
                return Result<bool>(ErrorId(attributeNodeSetResult.GetErrorId()));
            }
            System.XPath.NodeSet* attributeNodeSet = attributeNodeSetResult.Value().Get();
            int na = attributeNodeSet->Count();
            for (int i = 0; i < na; ++i)
            {
                System.Xml.Node* node = attributeNodeSet->GetNode(i);
                if (node->IsElementNode())
                {
                    System.Xml.Element* attributeXmlElement = cast<System.Xml.Element*>(node);
                    AttributeElement* attributeElement = new AttributeElement();
                    attributeElement->SetContainerElement(this);
                    auto result = attributeElement->FromXml(attributeXmlElement);
                    if (result.Error()) return result;
                    attributes.Add(attributeElement);
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Measure(Graphics& graphics)
        {
            auto result = base->Measure(graphics);
            if (result.Error()) return result;
            Layout* layout = Configuration.Instance().GetLayout();
            ObjectLayoutElement* objectLayout = layout->GetObjectLayoutElement();
            RelationshipLayoutElement* relationshipLayout = layout->GetRelationshipLayoutElement();
            PaddingElement* paddingElement = objectLayout->GetPaddingElement();
            Result<Font*> nameFontResult = objectLayout->GetCaptionElement()->GetNameFontElement()->GetFont();
            if (nameFontResult.Error()) return Result<bool>(ErrorId(nameFontResult.GetErrorId()));
            Font* nameFont = nameFontResult.Value();
            auto measureResult = graphics.MeasureStringRectF(Name(), *nameFont, PointF(0, 0), layout->GetStringFormat());
            if (measureResult.Error()) return Result<bool>(ErrorId(measureResult.GetErrorId()));
            RectF r = measureResult.Value();
            SizeF sz = r.size;
            captionTextHeight = sz.h;
            float captionRectX = Location().x;
            float captionRectY = Location().y;
            float captionRectWidth = paddingElement->GetPadding().Horizontal() + sz.w;
            float captionRectHeight = paddingElement->GetPadding().Vertical() + sz.h;
            captionRect = RectF(PointF(captionRectX, captionRectY), SizeF(captionRectWidth, captionRectHeight));
            maxChildElementWidth = 0.0f;
            bool hasRelationship = false;
            result = MeasureAttributes(graphics, objectLayout, hasRelationship);
            if (result.Error()) return result;
            if (hasRelationship)
            {
                float w = GetRelationshipSymbolFieldWidth(relationshipLayout->RelationshipSymbolRadius(), relationshipLayout->GetPaddingElement()->GetPadding().Horizontal());
                captionRect.size.w = captionRect.size.w + w;
                attributeRect.size.w = attributeRect.size.w + w;
                SetRelationshipPoints();
            }
            SetSize();
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Draw(Graphics& graphics)
        {
            Layout* layout = Configuration.Instance().GetLayout();
            ObjectLayoutElement* objectLayout = layout->GetObjectLayoutElement();
            auto result = base->Draw(graphics);
            if (result.Error()) return result;
            result = DrawFrame(graphics, objectLayout);
            if (result.Error()) return result;
            result = DrawCaption(graphics, objectLayout);
            if (result.Error()) return result;
            result = DrawAttributes(graphics, objectLayout);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        private Result<bool> MeasureAttributes(Graphics& graphics, ObjectLayoutElement* objectLayout, bool hasRelationship)
        {
            PaddingElement* paddingElement = objectLayout->GetPaddingElement();
            attributeRect = RectF();
            PointF location = Location();
            attributeRect.location.x = location.x;
            attributeRect.location.y = captionRect.location.y + captionRect.size.h;
            attributeRect.size.w = captionRect.size.w;
            attributeRect.size.h = paddingElement->GetPadding().top;
            PointF origin;
            origin.x = attributeRect.location.x + paddingElement->GetPadding().left;
            origin.y = attributeRect.location.y + paddingElement->GetPadding().top;
            int n = attributes.Count();
            for (int i = 0; i < n; ++i)
            {
                AttributeElement* attribute = attributes.Get(i);
                auto result = attribute->Measure(graphics);
                if (result.Error()) return result;
                SizeF attributeSize = attribute->Size();
                float w = attributeSize.w + paddingElement->GetPadding().Horizontal();
                float h = attributeSize.h;
                maxChildElementWidth = Max(maxChildElementWidth, w);
                if (attribute->Relationship() != null)
                {
                    hasRelationship = true;
                }
                attribute->SetLocation(origin);
                attributeRect.size.w = Max(attributeRect.size.w, w);
                origin.y = origin.y + h;
                attributeRect.size.h = attributeRect.size.h + h;
            }
            attributeRect.size.h = attributeRect.size.h + paddingElement->GetPadding().bottom;
            return Result<bool>(true);
        }
        [nodiscard]
        private Result<bool> DrawFrame(Graphics& graphics, ObjectLayoutElement* objectLayout)
        {
            PaddingElement* paddingElement = objectLayout->GetPaddingElement();
            Result<Pen*> framePenResult = objectLayout->FramePen();
            if (framePenResult.Error()) return Result<bool>(ErrorId(framePenResult.GetErrorId()));
            Pen* framePen = framePenResult.Value();
            float frameWidth = objectLayout->FrameWidth();
            float roundingRadius = objectLayout->FrameRoundingRadius();
            PointF loc = Location();
            SizeF size = Size();
            PointF topStart(loc.x + roundingRadius - 1.0f - frameWidth, loc.y);
            PointF topEnd(loc.x + size.w - roundingRadius + 1.0f + frameWidth, loc.y);
            auto result = graphics.DrawLine(*framePen, topStart, topEnd);
            if (result.Error()) return result;
            RectF topLeftRoundingRect(PointF(loc.x, loc.y), SizeF(roundingRadius, roundingRadius));
            float topLeftRoundingStartAngle = 180.0f;
            float topLeftRoudingSweepAngle = 90.0f;
            result = graphics.DrawArc(*framePen, topLeftRoundingRect, topLeftRoundingStartAngle, topLeftRoudingSweepAngle);
            if (result.Error()) return result;
            PointF rightStart(loc.x + size.w, loc.y + roundingRadius - 1.0f - 2.0f * frameWidth);
            PointF rightEnd(loc.x + size.w, loc.y + size.h - roundingRadius + 1.0f + 2.0f * frameWidth);
            result = graphics.DrawLine(*framePen, rightStart, rightEnd);
            if (result.Error()) return result;
            RectF topRightRoundingRect(PointF(loc.x + size.w - roundingRadius, loc.y), SizeF(roundingRadius, roundingRadius));
            float topRightRoundingStartAngle = 0.0f;
            float topRightRoudingSweepAngle = -90.0f;
            result = graphics.DrawArc(*framePen, topRightRoundingRect, topRightRoundingStartAngle, topRightRoudingSweepAngle);
            if (result.Error()) return result;
            RectF rightBottomRoundingRect(PointF(loc.x + size.w - roundingRadius, loc.y + size.h - roundingRadius), SizeF(roundingRadius, roundingRadius));
            float rightBottomRoundingStartAngle = 0.0f;
            float rightBottomRoudingSweepAngle = 90.0f;
            result = graphics.DrawArc(*framePen, rightBottomRoundingRect, rightBottomRoundingStartAngle, rightBottomRoudingSweepAngle);
            if (result.Error()) return result;
            PointF bottomStart(loc.x + roundingRadius - 1.0f - 2.0f * frameWidth, loc.y + size.h);
            PointF bottomEnd(loc.x + size.w - roundingRadius + 1.0f + 2.0f * frameWidth, loc.y + size.h);
            result = graphics.DrawLine(*framePen, bottomStart, bottomEnd);
            if (result.Error()) return result;
            RectF leftBottomRoundingRect(PointF(loc.x, loc.y + size.h - roundingRadius), SizeF(roundingRadius, roundingRadius));
            float leftBottomRoundingStartAngle = 180.0f;
            float leftBottomRoudingSweepAngle = -90.0f;
            result = graphics.DrawArc(*framePen, leftBottomRoundingRect, leftBottomRoundingStartAngle, leftBottomRoudingSweepAngle);
            if (result.Error()) return result;
            PointF leftStart(loc.x, loc.y + roundingRadius - 1.0f - frameWidth);
            PointF leftEnd(loc.x, loc.y + size.h - roundingRadius + 1.0f + frameWidth);
            result = graphics.DrawLine(*framePen, leftStart, leftEnd);
            if (result.Error()) return result;
            if (!attributes.IsEmpty())
            {
                float captionY = paddingElement->GetPadding().Vertical() + captionTextHeight;
                PointF location = Location();
                PointF captionLineStart(location.x, location.y + captionY);
                PointF captionLineEnd(location.x + Size().w, location.y + captionY);
                result = graphics.DrawLine(*framePen, captionLineStart, captionLineEnd);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        private Result<bool> DrawCaption(Graphics& graphics, ObjectLayoutElement* objectLayout)
        {
            PaddingElement* paddingElement = objectLayout->GetPaddingElement();
            CaptionElement* captionElement = objectLayout->GetCaptionElement();
            FontElement* nameFontElement = captionElement->GetNameFontElement();
            PointF location = Location();
            PointF origin(location.x + paddingElement->GetPadding().left, location.y + paddingElement->GetPadding().top);
            Result<Font*> nameFontResult = nameFontElement->GetFont();
            if (nameFontResult.Error()) return Result<bool>(ErrorId(nameFontResult.GetErrorId()));
            Font* nameFont = nameFontResult.Value();
            Brush* brush = objectLayout->GetTextColorElement()->GetBrush();
            auto result = graphics.DrawString(Name(), *nameFont, origin, *brush);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        private Result<bool> DrawAttributes(Graphics& graphics, ObjectLayoutElement* objectLayout)
        {
            int n = attributes.Count();
            for (int i = 0; i < n; ++i)
            {
                AttributeElement* attribute = attributes.Get(i);
                auto result = attribute->Draw(graphics);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        private void SetRelationshipPoints()
        {
            int na = attributes.Count();
            for (int i = 0; i < na; ++i)
            {
                AttributeElement* attribute = attributes.Get(i);
                attribute->SetRelationshipPoint();
            }
        }
        private void SetSize()
        {
            SizeF size;
            size.w = Max(size.w, captionRect.size.w);
            float h = captionRect.size.h;
            if (!attributes.IsEmpty())
            {
                size.w = Max(size.w, attributeRect.size.w);
                h = h + attributeRect.size.h;
            }
            size.h = Max(size.h, h);
            base->SetSize(size);
        }
        private IndexList<AttributeElement> attributes;
        private float captionTextHeight;
        private RectF captionRect;
        private RectF attributeRect;
        private float maxChildElementWidth;
    }
}

