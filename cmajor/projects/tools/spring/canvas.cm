// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows;

namespace spring
{
    public const long clickThresholdMs = 250;

    class CanvasCreateParams
    {
        public CanvasCreateParams& Defaults()
        {
            SetWindowClassName("spring.canvas");
            SetWindowClassStyle(DoubleClickWindowClassStyle());
            SetWindowStyle(DefaultChildWindowStyle());
            SetWindowClassBackgroundColor(SystemColor.COLOR_WINDOW);
            SetBackgroundColor(System.Windows.Color.White());
            SetText("canvas");
            SetLocation(Point.Default());
            SetSize(Size.Default());
            SetAnchors(cast<Anchors>(Anchors.left | Anchors.top));
            SetDock(Dock.fill);
            return *this;
        }
        public CanvasCreateParams& SetWindowClassName(const string& windowClassName_)
        {
            controlCreateParams.SetWindowClassName(windowClassName_);
            return *this;
        }
        public CanvasCreateParams& SetWindowClassStyle(WindowClassStyle windowClassStyle_)
        {
            controlCreateParams.SetWindowClassStyle(windowClassStyle_);
            return *this;
        }
        public CanvasCreateParams& SetWindowStyle(WindowStyle windowStyle_)
        {
            controlCreateParams.SetWindowStyle(windowStyle_);
            return *this;
        }
        public CanvasCreateParams& SetWindowClassBackgroundColor(SystemColor windowClassBackgroundColor_)
        {
            controlCreateParams.SetWindowClassBackgroundColor(windowClassBackgroundColor_);
            return *this;
        }
        public CanvasCreateParams& SetBackgroundColor(const System.Windows.Color& backgroundColor_)
        {
            controlCreateParams.SetBackgroundColor(backgroundColor_);
            return *this;
        }
        public CanvasCreateParams& SetText(const string& text_)
        {
            controlCreateParams.SetText(text_);
            return *this;
        }
        public CanvasCreateParams& SetLocation(const Point& location_)
        {
            controlCreateParams.SetLocation(location_);
            return *this;
        }
        public CanvasCreateParams& SetSize(const Size& size_)
        {
            controlCreateParams.SetSize(size_);
            return *this;
        }
        public CanvasCreateParams& SetAnchors(Anchors anchors_)
        {
            controlCreateParams.SetAnchors(anchors_);
            return *this;
        }
        public CanvasCreateParams& SetDock(Dock dock_)
        {
            controlCreateParams.SetDock(dock_);
            return *this;
        }
        public ControlCreateParams controlCreateParams;
    }

    class CanvasHolder
    {
        static CanvasHolder() : instance(new CanvasHolder())
        {
        }
        public static CanvasHolder& Instance()
        {
            return *instance;
        }
        public void SetCanvas(Canvas* canvas_)
        {
            canvas = canvas_;
        }
        public Canvas* GetCanvas() const
        {
            return canvas;
        }
        private static UniquePtr<CanvasHolder> instance;
        private Canvas* canvas;
    }

    class Canvas : Control
    {
        public Canvas(CanvasCreateParams& createParams) :
            base(createParams.controlCreateParams),
            noteCornerBitmap(null),
            modifiedStatusBarItem(null),
            copyMenuItem(null),
            cutMenuItem(null),
            pasteMenuItem(null),
            undoMenuItem(null),
            redoMenuItem(null),
            operationCreated(false),
            buttonPressed(false)
        {
            SetDoubleBuffered();
            diagram.Reset(new Diagram());
            diagram->SetCanvas(this);
        }
        public inline Diagram* GetDiagram() const
        {
            return diagram.Get();
        }
        [nodiscard]
        public Result<bool> SetDiagram(Diagram* diagram_)
        {
            if (diagram != null)
            {
                diagram->GetCommandList().Clear();
            }
            diagram.Reset(diagram_);
            auto result = diagram->SetMenuItems(undoMenuItem, redoMenuItem);
            if (result.Error()) return result;
            diagram->SetCanvas(this);
            result = diagram->SetChanged();
            if (result.Error()) return result;
            result = diagram->Invalidate();
            if (result.Error()) return result;
            result = diagram->ResetModified();
            if (result.Error()) return result;
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public void SetNoteCornerBitmap(Bitmap* noteCornerBitmap_)
        {
            noteCornerBitmap = noteCornerBitmap_;
        }
        public inline Bitmap* NoteCornerBitmap() const
        {
            return noteCornerBitmap;
        }
        public void SetModifiedStatusBarItem(StatusBarItem* modifiedStatusBarItem_)
        {
            modifiedStatusBarItem = modifiedStatusBarItem_;
        }
        public inline StatusBarItem* ModifiedStatusBarItem() const
        {
            return modifiedStatusBarItem;
        }
        public void SetCopyMenuItem(MenuItem* copyMenuItem_)
        {
            copyMenuItem = copyMenuItem_;
        }
        public void SetCutMenuItem(MenuItem* cutMenuItem_)
        {
            cutMenuItem = cutMenuItem_;
        }
        public void SetPasteMenuItem(MenuItem* pasteMenuItem_)
        {
            pasteMenuItem = pasteMenuItem_;
        }
        public void SetUndoMenuItem(MenuItem* undoMenuItem_)
        {
            undoMenuItem = undoMenuItem_;
        }
        public void SetRedoMenuItem(MenuItem* redoMenuItem_)
        {
            redoMenuItem = redoMenuItem_;
        }
        public inline const PointF& ViewOrigin() const
        {
            return viewOrigin;
        }
        [nodiscard]
        public Result<bool> SetViewOrigin(const PointF& viewOrigin_)
        {
            viewOrigin = viewOrigin_;
            auto result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> SetCursor()
        {
            return SetCursor(PointF());
        }
        [nodiscard]
        public Result<bool> SetCursor(const PointF& location)
        {
            Tool* currentTool = Tools.Instance().Current();
            if (currentTool->IsSelectTool())
            {
                if (diagram->GetOperation()->IsResizeRectangleSelectionOperation())
                {
                    ResizeRectangleSelectionOperation* operation = cast<ResizeRectangleSelectionOperation*>(diagram->GetOperation());
                    Cursor* operationCursor = operation->GetCursor();
                    if (operationCursor != null)
                    {
                        SetCursor(operationCursor);
                        return Result<bool>(true);
                    }
                }
                else if (diagram->GetSelection()->IsRectangleSelection())
                {
                    RectangleSelection* selection = cast<RectangleSelection*>(diagram->GetSelection());
                    Cursor* selectionCursor = selection->GetCursor(location);
                    if (selectionCursor != null)
                    {
                        SetCursor(selectionCursor);
                        return Result<bool>(true);
                    }
                }
            }
            if (buttonPressed)
            {
                System.Windows.SetCursor(currentTool->GetPressedCursor());
            }
            else
            {
                System.Windows.SetCursor(currentTool->GetCursor());
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> KeyDown(KeyEventArgs& args)
        {
            switch (args.key)
            {
                case Keys.delete_:
                {
                    auto result = DeleteSelection();
                    if (result.Error()) return result;
                    break;
                }
                case Keys.escape:
                {
                    auto result = diagram->CancelOperation();
                    if (result.Error()) return result;
                    break;
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EnableCopy()
        {
            if (copyMenuItem != null)
            {
                auto result = copyMenuItem->Enable();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EnableCut()
        {
            if (cutMenuItem != null)
            {
                auto result = cutMenuItem->Enable();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EnablePaste()
        {
            if (pasteMenuItem != null)
            {
                auto result = pasteMenuItem->Enable();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DisableCopy()
        {
            if (copyMenuItem != null)
            {
                auto result = copyMenuItem->Disable();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DisableCut()
        {
            if (cutMenuItem != null)
            {
                auto result = cutMenuItem->Disable();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DisablePaste()
        {
            if (pasteMenuItem != null)
            {
                auto result = pasteMenuItem->Disable();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> DeleteSelection()
        {
            auto result = diagram->DeleteSelection();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public PointF ToDiagramLocation(const Point& controlLocation) const
        {
            float x = ScreenMetrics.Get().HorizontalPixelsToMM(controlLocation.x);
            float y = ScreenMetrics.Get().VerticalPixelsToMM(controlLocation.y);
            PointF loc(x, y);
            loc.Offset(viewOrigin.x, viewOrigin.y);
            return loc;
        }
        public Point ToControlLocation(const PointF& diagramLocation) const
        {
            PointF loc(diagramLocation);
            loc.Offset(-viewOrigin.x, -viewOrigin.y);
            int x = ScreenMetrics.Get().MMToHorizontalPixels(loc.x);
            int y = ScreenMetrics.Get().MMToVerticalPixels(loc.y);
            return Point(x, y);
        }
        protected override Result<bool> OnPaint(PaintEventArgs& args)
        {
            auto result = SetCursor();
            if (result.Error()) return result;
            Graphics& graphics = args.graphics;
            Result<Unit> prevUnit = graphics.GetPageUnit();
            if (prevUnit.Error()) return Result<bool>(ErrorId(prevUnit.GetErrorId()));
            TextRenderingHint prevTextRenderingHint = graphics.GetTextRenderingHint();
            result = graphics.SetTextRenderingHint(TextRenderingHint.clearTypeGridFit);
            if (result.Error()) return result;
            Result<SmoothingMode> prevSmoothingMode = graphics.GetSmoothingMode();
            if (prevSmoothingMode.Error()) return Result<bool>(ErrorId(prevSmoothingMode.GetErrorId()));
            result = graphics.SetSmoothingMode(SmoothingMode.highQuality);
            if (result.Error()) return result;
            result = graphics.SetPageUnit(Unit.millimeter);
            if (result.Error()) return result;
            result = graphics.Clear(BackgroundColor());
            if (result.Error()) return result;
            result = graphics.TranslateTransform(-viewOrigin.x, -viewOrigin.y);
            if (result.Error()) return result;
            result = diagram->Draw(graphics);
            if (result.Error()) return result;
            result = graphics.SetSmoothingMode(prevSmoothingMode.Value());
            if (result.Error()) return result;
            result = graphics.SetTextRenderingHint(prevTextRenderingHint);
            if (result.Error()) return result;
            result = graphics.SetPageUnit(prevUnit.Value());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        protected override Result<bool> OnMouseDown(MouseEventArgs& args)
        {
            auto result = base->OnMouseDown(args);
            if (result.Error()) return result;
            PointF location = ToDiagramLocation(args.location);
            DiagramElement* element = null;
            int index = diagram->GetIndexOfElementAt(location);
            if (index != -1)
            {
                element = diagram->GetElementByIndex(index);
            }
            mouseDownArgs = MouseArgs(location, index, element, args);
            operationCreated = false;
            if ((args.buttons & MouseButtons.lbutton) != MouseButtons.none)
            {
                buttonPressed = true;
            }
            result = SetCursor(location);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        protected override Result<bool> OnMouseMove(MouseEventArgs& args)
        {
            auto result = base->OnMouseMove(args);
            if (result.Error()) return result;
            PointF location = ToDiagramLocation(args.location);
            DiagramElement* element = null;
            int index = -1;
            if ((args.buttons & (MouseButtons.lbutton | MouseButtons.rbutton)) != MouseButtons.none)
            {
                index = diagram->GetIndexOfElementAt(location);
                if (index != -1)
                {
                    element = diagram->GetElementByIndex(index);
                }
            }
            mouseMoveArgs = MouseArgs(location, index, element, args);
            Tool* currentTool = Tools.Instance().Current();
            if (currentTool->CanMove())
            {
                if (args.buttons == MouseButtons.lbutton)
                {
                    if (!operationCreated)
                    {
                        operationCreated = true;
                        currentTool->CreateOperation(mouseDownArgs);
                    }
                    result = currentTool->ContinueOperation(mouseMoveArgs);
                    if (result.Error()) return result;
                }
            }
            else if (currentTool->IsRelationshipTool())
            {
                result = diagram->AdvanceOperation(mouseMoveArgs);
                if (result.Error()) return result;
            }
            result = SetCursor(location);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        protected override Result<bool> OnMouseUp(MouseEventArgs& args)
        {
            auto result = base->OnMouseUp(args);
            if (result.Error()) return result;
            PointF location = ToDiagramLocation(args.location);
            DiagramElement* element = null;
            int index = diagram->GetIndexOfElementAt(location);
            if (index != -1)
            {
                element = diagram->GetElementByIndex(index);
            }
            mouseUpArgs = MouseArgs(location, index, element, args);
            Tool* currentTool = Tools.Instance().Current();
            if (currentTool->CanMove())
            {
                Duration duration = mouseUpArgs.time - mouseDownArgs.time;
                long ms = duration.Milliseconds();
                if (ms < clickThresholdMs)
                {
                    if (currentTool->IsSelectTool())
                    {
                        if (operationCreated)
                        {
                            operationCreated = false;
                            result = currentTool->CancelOperation(mouseUpArgs);
                            if (result.Error()) return result;
                        }
                        result = currentTool->MouseClick(mouseUpArgs);
                        if (result.Error()) return result;
                    }
                }
                else
                {
                    if (operationCreated)
                    {
                        operationCreated = false;
                        result = currentTool->CommitOperation(mouseUpArgs);
                        if (result.Error()) return result;
                    }
                }
            }
            else if (currentTool->IsClickTool())
            {
                result = currentTool->MouseClick(mouseUpArgs);
                if (result.Error()) return result;
            }
            buttonPressed = false;
            result = SetCursor(location);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnMouseDoubleClick(MouseEventArgs& args)
        {
            auto result = base->OnMouseDoubleClick(args);
            if (result.Error()) return result;
            PointF location = ToDiagramLocation(args.location);
            DiagramElement* element = null;
            int index = diagram->GetIndexOfElementAt(location);
            if (index != -1)
            {
                element = diagram->GetElementByIndex(index);
            }
            MouseArgs mouseDoubleClickArgs(location, index, element, args);
            Tool* currentTool = Tools.Instance().Current();
            result = currentTool->MouseDoubleClick(mouseDoubleClickArgs);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private UniquePtr<Diagram> diagram;
        private Bitmap* noteCornerBitmap;
        private StatusBarItem* modifiedStatusBarItem;
        private MenuItem* copyMenuItem;
        private MenuItem* cutMenuItem;
        private MenuItem* pasteMenuItem;
        private MenuItem* undoMenuItem;
        private MenuItem* redoMenuItem;
        private PointF viewOrigin;
        private MouseArgs mouseDownArgs;
        private MouseArgs mouseMoveArgs;
        private MouseArgs mouseUpArgs;
        private bool operationCreated;
        private bool buttonPressed;
    }

    void SetCanvas(Canvas* canvas)
    {
        CanvasHolder.Instance().SetCanvas(canvas);
    }

    Canvas* GetCanvas()
    {
        return CanvasHolder.Instance().GetCanvas();
    }

    Diagram* GetDiagram()
    {
        return GetCanvas()->GetDiagram();
    }
}

