// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows;

namespace spring
{
    class AttributeElement : DiagramElement
    {
        public AttributeElement() : base(DiagramElementKind.attributeElement)
        {
        }
        [nodiscard]
        public override Result<bool> Measure(Graphics& graphics)
        {
            Layout* layout = Configuration.Instance().GetLayout();
            RelationshipLayoutElement* relationshipLayoutElement = layout->GetRelationshipLayoutElement();
            PaddingElement* paddingElement = relationshipLayoutElement->GetPaddingElement();
            float relationshipSymbolRadius = relationshipLayoutElement->RelationshipSymbolRadius();
            AttributeLayoutElement* attributeLayout = layout->GetAttributeLayoutElement();
            Result<Font*> fontResult = attributeLayout->GetFontElement()->GetFont();
            if (fontResult.Error()) return Result<bool>(ErrorId(fontResult.GetErrorId()));
            Font* font = fontResult.Value();
            auto measureResult = graphics.MeasureStringRectF(Name(), *font, PointF(0, 0), layout->GetStringFormat());
            if (measureResult.Error()) return Result<bool>(ErrorId(measureResult.GetErrorId()));
            RectF r = measureResult.Value();
            SizeF sz = r.size;
            if (relationship != null)
            {
                sz.w = sz.w + GetRelationshipSymbolFieldWidth(relationshipSymbolRadius, paddingElement->GetPadding().Horizontal());
            }
            SetSize(sz);
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Draw(Graphics& graphics)
        {
            Layout* layout = Configuration.Instance().GetLayout();
            AttributeLayoutElement* attributeLayout = layout->GetAttributeLayoutElement();
            Result<Font*> fontResult = attributeLayout->GetFontElement()->GetFont();
            if (fontResult.Error()) return Result<bool>(ErrorId(fontResult.GetErrorId()));
            Font* font = fontResult.Value();
            Brush* brush = attributeLayout->TextColorElement()->GetBrush();
            auto result = graphics.DrawString(Name(), *font, Location(), *brush);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public override System.Xml.Element* ToXml() const
        {
            System.Xml.Element* xmlElement = System.Xml.MakeElement("attribute");
            SetName(xmlElement);
            xmlElement->AppendChild(BoundsXmlElement());
            return xmlElement;
        }
        public override Result<bool> FromXml(System.Xml.Element* xmlElement, bool setName)
        {
            Result<bool> result = base->FromXml(xmlElement, setName);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        public override DiagramElement* Clone() const
        {
            AttributeElement* clone = new AttributeElement();
            clone->SetName(Name());
            clone->SetBounds(Bounds());
            clone->SetContainerElement(containerElement);
            return clone;
        }
        public void SetContainerElement(ContainerElement* containerElement_)
        {
            containerElement = containerElement_;
        }
        public override ContainerElement* GetContainerElement() const
        {
            return containerElement;
        }
        public inline RelationshipElement* Relationship() const
        {
            return relationship;
        }
        public void SetRelationshipPoint()
        {
            if (relationship != null)
            {
                relationship->Source().SetElement(this);
                relationship->Source().SetPoint(GetRelationshipPoint());
                for (auto& sourceEndPoint : relationship->SourceEndPoints())
                {
                    sourceEndPoint.SetElement(this);
                    sourceEndPoint.SetPoint(GetRelationshipPoint());
                }
            }
        }
        public PointF GetRelationshipPoint() const
        {
            Layout* layout = Configuration.Instance().GetLayout();
            RelationshipLayoutElement* relationshipLayoutElement = layout->GetRelationshipLayoutElement();
            PaddingElement* paddingElement = relationshipLayoutElement->GetPaddingElement();
            float relationshipSymbolRadius = relationshipLayoutElement->RelationshipSymbolRadius();
            PointF loc = Location();
            SizeF size = Size();
            float symbolLeft = 0.0f;
            if (containerElement != null)
            {
                size.w = containerElement->GetMaxChildElementWidth();
                size.w = size.w - GetRelationshipSymbolFieldWidth(relationshipSymbolRadius, paddingElement->GetPadding().Horizontal());
                symbolLeft = paddingElement->GetPadding().left + relationshipSymbolRadius;
            }
            PointF point(loc.x + size.w + symbolLeft, loc.y + size.h / 2);
            return point;
        }
        private ContainerElement* containerElement;
        private RelationshipElement* relationship;
    }
}
