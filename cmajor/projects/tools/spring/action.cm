// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;

namespace spring
{
    class ExecuteGuard
    {
        public ExecuteGuard(Diagram* diagram_) : diagram(diagram_)
        {
        }
        public ~ExecuteGuard()
        {
            auto result = diagram->HideContextMenu();
            if (result.Error())
            {
                diagram->SetErrorId(result.GetErrorId());
                return;
            }
            result = diagram->SetChanged();
            if (result.Error())
            {
                diagram->SetErrorId(result.GetErrorId());
                return;
            }
            result = diagram->Invalidate();
            if (result.Error())
            {
                diagram->SetErrorId(result.GetErrorId());
                return;
            }
        }
        private Diagram* diagram;
    }

    abstract class DiagramAction : ClickAction
    {
        public DiagramAction(Diagram* diagram_, MenuItem* menuItem) : base(), diagram(diagram_)
        {
            if (menuItem != null)
            {
                AddHandlerTo(*menuItem);
            }
        }
        public override Result<bool> Execute()
        {
            ExecuteGuard guard(diagram);
            return Execute(diagram);
        }
        [nodiscard]
        public abstract Result<bool> Execute(Diagram* diagram);
        private Diagram* diagram;
    }

    abstract class DiagramElementAction : ClickAction
    {
        public DiagramElementAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(), diagram(diagram_), elementIndex(elementIndex_)
        {
            if (menuItem != null)
            {
                AddHandlerTo(*menuItem);
            }
        }
        public override Result<bool> Execute()
        {
            ExecuteGuard guard(diagram);
            return Execute(diagram, elementIndex);
        }
        [nodiscard]
        public abstract Result<bool> Execute(Diagram* diagram, int elementIndex);
        private Diagram* diagram;
        private int elementIndex;
    }

    class SaveSelectionAsImageAction : DiagramAction
    {
        public SaveSelectionAsImageAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            Canvas* canvas = GetCanvas();
            Window* window = canvas->GetWindow();
            auto result = diagram->HideContextMenu();
            if (result.Error()) return result;
            string diagramFileName;
            SaveImageDialog dialog(diagramFileName);
            Result<DialogResult> dialogResultResult = dialog.ShowDialog(*window);
            if (dialogResultResult.Error())
            {
                return Result<bool>(ErrorId(dialogResultResult.GetErrorId()));
            }
            DialogResult dialogResult = dialogResultResult.Value();
            if (dialogResult == DialogResult.ok)
            {
                auto selection = diagram->GetSelection();
                auto result = selection->SaveImage(dialog.FileName(), dialog.Margins(), dialog.Format());
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
    }

    class AlignTopAction : DiagramAction
    {
        public AlignTopAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.AlignTop();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class AlignBottomAction : DiagramAction
    {
        public AlignBottomAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.AlignBottom();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class AlignVerticalCenterAction : DiagramAction
    {
        public AlignVerticalCenterAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.AlignVerticalCenter();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class AlignLeftSideAction : DiagramAction
    {
        public AlignLeftSideAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.AlignLeftSide();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class AlignRightSideAction : DiagramAction
    {
        public AlignRightSideAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.AlignRightSide();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class AlignHorizontalCenterAction : DiagramAction
    {
        public AlignHorizontalCenterAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.AlignHorizontalCenter();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class SpaceEvenlyVerticallyAction : DiagramAction
    {
        public SpaceEvenlyVerticallyAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.SpaceEvenlyVertically();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class SpaceEvenlyHorizontallyAction : DiagramAction
    {
        public SpaceEvenlyHorizontallyAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            ElementSelection elementSelection(diagram);
            List<int> containerElementIndeces = selection->GetContainerElementIndeces();
            for (auto index : containerElementIndeces)
            {
                auto result = elementSelection.Add(index);
                if (result.Error()) return result;
            }
            auto result = elementSelection.SpaceEvenlyHorizontally();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class CombineInheritancesAction : DiagramAction
    {
        public CombineInheritancesAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto selection = diagram->GetSelection();
            if (selection->IsElementSelection())
            {
                ElementSelection* elementSelection = cast<ElementSelection*>(selection);
                auto result = elementSelection->CombineInheritanceRelationships();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
    }

    class DeleteSelectionAction : DiagramAction
    {
        public DeleteSelectionAction(Diagram* diagram_, MenuItem* menuItem) : base(diagram_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram)
        {
            auto result = diagram->GetSelection()->Delete();
            if (result.Error()) return result;
            result = diagram->ResetSelection();
            if (result.Error()) return result;
            result = diagram->SetChanged();
            if (result.Error()) return result;
            result = diagram->Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class DeleteDiagramElementAction : DiagramElementAction
    {
        public DeleteDiagramElementAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            auto result = diagram->GetSelection()->Remove(elementIndex);
            if (result.Error()) return result;
            UniquePtr<DeleteElementsCommand> deleteElementsCommand(new DeleteElementsCommand(diagram));
            UniquePtr<DiagramElement> element = diagram->RemoveElementByIndex(elementIndex);
            if (element->IsContainerElement())
            {
                ContainerElement* containerElement = cast<ContainerElement*>(element.Get());
                List<RelationshipElement*> containerElementRelationships = containerElement->GetAllRelationships();
                List<RelationshipElement*> relationships;
                for (RelationshipElement* relationship : containerElementRelationships)
                {
                    if (Find(relationships.Begin(), relationships.End(), relationship) == relationships.End())
                    {
                        relationships.Add(relationship);
                    }
                }
                List<int> relationshipIndeces;
                for (RelationshipElement* relationship : relationships)
                {
                    int index = diagram->GetIndexOfElement(relationship);
                    if (index != -1)
                    {
                        if (Find(relationshipIndeces.Begin(), relationshipIndeces.End(), index) == relationshipIndeces.End())
                        {
                            relationshipIndeces.Add(index);
                        }
                    }
                }
                Sort(relationshipIndeces);
                int m = cast<int>(relationshipIndeces.Count());
                for (int i = m - 1; i >= 0; --i)
                {
                    int index = relationshipIndeces[i];
                    UniquePtr<DiagramElement> element = diagram->RemoveElementByIndex(index);
                    deleteElementsCommand->AddDeletedElement(element.Release(), index);
                }
            }
            deleteElementsCommand->AddDeletedElement(element.Release(), elementIndex);
            result = diagram->GetCommandList().AddCommand(deleteElementsCommand.Release());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    class ClassElementPropertiesAction : DiagramElementAction
    {
        public ClassElementPropertiesAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            DiagramElement* element = diagram->GetElementByIndex(elementIndex);
            if (element->IsClassElement())
            {
                ClassElement* classElement = cast<ClassElement*>(element);
                UniquePtr<ClassElement> clone(cast<ClassElement*>(classElement->Clone()));
                Map<DiagramElement*, DiagramElement*> cloneMap;
                Map<DiagramElement*, DiagramElement*> reverseCloneMap;
                cloneMap[classElement] = clone.Get();
                reverseCloneMap[clone.Get()] = classElement;
                clone->MapChildObjects(classElement, cloneMap, reverseCloneMap);
                UniquePtr<ClassPropertiesDialog> classPropertiesDialog(new ClassPropertiesDialog(clone.Get(), cloneMap, reverseCloneMap));
                Canvas* canvas = GetCanvas();
                Window* window = canvas->GetWindow();
                auto result = diagram->HideContextMenu();
                if (result.Error()) return result;
                Result<DialogResult> dialogResultResult = classPropertiesDialog->ShowDialog(*window);
                if (dialogResultResult.Error()) return Result<bool>(ErrorId(dialogResultResult.GetErrorId()));
                DialogResult dialogResult = dialogResultResult.Value();
                if (dialogResult == DialogResult.ok)
                {
                    if (!clone->IsAbstract())
                    {
                        clone->ResetAbstractOperations();
                    }
                    UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                    List<RelationshipElement*> orphanRelationships;
                    List<RelationshipElement*> relationships = classElement->GetAllRelationships();
                    for (RelationshipElement* relationship : relationships)
                    {
                        bool orphan = false;
                        relationship->MapContainerElements(cloneMap, orphan);
                        if (orphan)
                        {
                            orphanRelationships.Add(relationship);
                        }
                        relationship->AddToElements();
                    }
                    result = DeleteRelationships(diagram, orphanRelationships);
                    if (result.Error()) return result;
                    diagram->SetElementByIndex(clone.Release(), elementIndex);
                    result = diagram->SetChanged();
                    if (result.Error()) return result;
                    result = diagram->Invalidate();
                    if (result.Error()) return result;
                    result = diagram->GetCommandList().AddCommand(replaceElementCommand.Release());
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
    }

    class ObjectElementPropertiesAction : DiagramElementAction
    {
        public ObjectElementPropertiesAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            DiagramElement* element = diagram->GetElementByIndex(elementIndex);
            if (element->IsObjectElement())
            {
                ObjectElement* objectElement = cast<ObjectElement*>(element);
                UniquePtr<ObjectElement> clone(cast<ObjectElement*>(objectElement->Clone()));
                Map<DiagramElement*, DiagramElement*> cloneMap;
                Map<DiagramElement*, DiagramElement*> reverseCloneMap;
                cloneMap[objectElement] = clone.Get();
                reverseCloneMap[clone.Get()] = objectElement;
                clone->MapChildObjects(objectElement, cloneMap, reverseCloneMap);
                UniquePtr<ObjectPropertiesDialog> objectPropertiesDialog(new ObjectPropertiesDialog(clone.Get(), cloneMap, reverseCloneMap));
                Canvas* canvas = GetCanvas();
                Window* window = canvas->GetWindow();
                auto result = diagram->HideContextMenu();
                if (result.Error()) return result;
                Result<DialogResult> dialogResultResult = objectPropertiesDialog->ShowDialog(*window);
                if (dialogResultResult.Error()) return Result<bool>(ErrorId(dialogResultResult.GetErrorId()));
                DialogResult dialogResult = dialogResultResult.Value();
                if (dialogResult == DialogResult.ok)
                {
                    UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                    List<RelationshipElement*> orphanRelationships;
                    List<RelationshipElement*> relationships = objectElement->GetAllRelationships();
                    for (RelationshipElement* relationship : relationships)
                    {
                        bool orphan = false;
                        relationship->MapContainerElements(cloneMap, orphan);
                        if (orphan)
                        {
                            orphanRelationships.Add(relationship);
                        }
                        relationship->AddToElements();
                    }
                    result = DeleteRelationships(diagram, orphanRelationships);
                    if (result.Error()) return result;
                    diagram->SetElementByIndex(clone.Release(), elementIndex);
                    result = diagram->SetChanged();
                    if (result.Error()) return result;
                    result = diagram->Invalidate();
                    if (result.Error()) return result;
                    result = diagram->GetCommandList().AddCommand(replaceElementCommand.Release());
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
    }

    class NoteElementPropertiesAction : DiagramElementAction
    {
        public NoteElementPropertiesAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            DiagramElement* element = diagram->GetElementByIndex(elementIndex);
            if (element->IsNoteElement())
            {
                NoteElement* noteElement = cast<NoteElement*>(element);
                UniquePtr<NoteElement> clone(cast<NoteElement*>(noteElement->Clone()));
                Map<DiagramElement*, DiagramElement*> cloneMap;
                Map<DiagramElement*, DiagramElement*> reverseCloneMap;
                cloneMap[noteElement] = clone.Get();
                reverseCloneMap[clone.Get()] = noteElement;
                clone->MapChildObjects(noteElement, cloneMap, reverseCloneMap);
                UniquePtr<NotePropertiesDialog> notePropertiesDialog(new NotePropertiesDialog(clone.Get()));
                Canvas* canvas = diagram->GetCanvas();
                Window* window = canvas->GetWindow();
                auto result = diagram->HideContextMenu();
                if (result.Error()) return result;
                auto dialogResultResult = notePropertiesDialog->ShowDialog(*window);
                if (dialogResultResult.Error()) return Result<bool>(ErrorId(dialogResultResult.GetErrorId()));
                DialogResult dialogResult = dialogResultResult.Value();
                if (dialogResult == DialogResult.ok)
                {
                    UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                    List<RelationshipElement*> orphanRelationships;
                    List<RelationshipElement*> relationships = noteElement->GetAllRelationships();
                    for (RelationshipElement* relationship : relationships)
                    {
                        bool orphan = false;
                        relationship->MapContainerElements(cloneMap, orphan);
                        if (orphan)
                        {
                            orphanRelationships.Add(relationship);
                        }
                        relationship->AddToElements();
                    }
                    result = DeleteRelationships(diagram, orphanRelationships);
                    if (result.Error()) return result;
                    diagram->SetElementByIndex(clone.Release(), elementIndex);
                    result = diagram->SetChanged();
                    if (result.Error()) return result;
                    result = diagram->Invalidate();
                    if (result.Error()) return result;
                    result = diagram->GetCommandList().AddCommand(replaceElementCommand.Release());
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
    }

    class RelationshipElementPropertiesAction : DiagramElementAction
    {
        public RelationshipElementPropertiesAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            DiagramElement* element = diagram->GetElementByIndex(elementIndex);
            if (element->IsRelationshipElement())
            {
                RelationshipElement* relationshipElement = cast<RelationshipElement*>(element);
                DiagramElement* sourceElement = relationshipElement->Source().Element();
                Connector sourceConnector = relationshipElement->Source().GetConnector();
                DiagramElement* targetElement = relationshipElement->Target().Element();
                Connector targetConnector = relationshipElement->Target().GetConnector();
                UniquePtr<RelationshipElement> clone(cast<RelationshipElement*>(relationshipElement->Clone()));
                UniquePtr<RelationshipPropertiesDialog> relationshipPropertiesDialog(new RelationshipPropertiesDialog(clone.Get()));
                Canvas* canvas = diagram->GetCanvas();
                Window* window = canvas->GetWindow();
                auto result = diagram->HideContextMenu();
                if (result.Error()) return result;
                auto shorDialogResult = relationshipPropertiesDialog->ShowDialog(*window);
                if (shorDialogResult.Error())
                {
                    return Result<bool>(ErrorId(shorDialogResult.GetErrorId()));
                }
                DialogResult dialogResult = shorDialogResult.Value();
                if (dialogResult == DialogResult.ok)
                {
                    UniquePtr<ReplaceElementCommand> replaceElementCommand(new ReplaceElementCommand(diagram, elementIndex));
                    if (relationshipElement->Source().Element() != null)
                    {
                        relationshipElement->Source().Element()->RemoveRelationship(relationshipElement);
                        relationshipElement->Source().Element()->AddRelationship(clone.Get());
                        EndPoint endPoint = relationshipElement->Source().Element()->GetEndPoint(clone->Source().GetConnector());
                        clone->Source().SetPoint(endPoint.Point());
                    }
                    for (EndPoint& sourceEndPoint : relationshipElement->SourceEndPoints())
                    {
                        if (sourceEndPoint.Element() != null)
                        {
                            sourceEndPoint.Element()->RemoveRelationship(relationshipElement);
                            sourceEndPoint.Element()->AddRelationship(clone.Get());
                            EndPoint endPoint = sourceEndPoint.Element()->GetEndPoint(clone->Source().GetConnector());
                            clone->Source().SetPoint(endPoint.Point());
                        }
                    }
                    if (relationshipElement->Target().Element() != null)
                    {
                        relationshipElement->Target().Element()->RemoveRelationship(relationshipElement);
                        relationshipElement->Target().Element()->AddRelationship(clone.Get());
                        EndPoint endPoint = relationshipElement->Target().Element()->GetEndPoint(clone->Target().GetConnector());
                        clone->Target().SetPoint(endPoint.Point());
                    }
                    diagram->SetElementByIndex(clone.Release(), elementIndex);
                    result = diagram->SetChanged();
                    if (result.Error()) return result;
                    result = diagram->Invalidate();
                    if (result.Error()) return result;
                    result = diagram->GetCommandList().AddCommand(replaceElementCommand.Release());
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
    }

    class StraightenRelationshipElementAction : DiagramElementAction
    {
        public StraightenRelationshipElementAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            DiagramElement* diagramElement = diagram->GetElementByIndex(elementIndex);
            if (diagramElement->IsRelationshipElement())
            {
                RelationshipElement* relationship = cast<RelationshipElement*>(diagramElement);
                relationship->Straighten();
            }
            return Result<bool>(true);
        }
    }

    class SetCenterConnectorsRelationshipElementAction : DiagramElementAction
    {
        public SetCenterConnectorsRelationshipElementAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            DiagramElement* diagramElement = diagram->GetElementByIndex(elementIndex);
            if (diagramElement->IsRelationshipElement())
            {
                RelationshipElement* relationship = cast<RelationshipElement*>(diagramElement);
                relationship->SetCenterConnectors();
            }
            return Result<bool>(true);
        }
    }

    class SplitRelationshipElementAction : DiagramElementAction
    {
        public SplitRelationshipElementAction(Diagram* diagram_, int elementIndex_, MenuItem* menuItem) : base(diagram_, elementIndex_, menuItem)
        {
        }
        public override Result<bool> Execute(Diagram* diagram, int elementIndex)
        {
            DiagramElement* diagramElement = diagram->GetElementByIndex(elementIndex);
            if (diagramElement->IsRelationshipElement())
            {
                RelationshipElement* relationship = cast<RelationshipElement*>(diagramElement);
                if (relationship->IsCombinedInheritance())
                {
                    List<UniquePtr<RelationshipElement>> relationships = SplitCombinedInheritanceRelationship(relationship);
                    UniquePtr<DeleteElementsCommand> deleteCommand(new DeleteElementsCommand(diagram));
                    UniquePtr<DiagramElement> element(diagram->RemoveElementByIndex(elementIndex));
                    deleteCommand->AddDeletedElement(element.Release(), elementIndex);
                    auto result = diagram->GetCommandList().AddCommand(deleteCommand.Release());
                    if (result.Error()) return result;
                    UniquePtr<AddElementsCommand> addElementsCommand(new AddElementsCommand(diagram));
                    for (UniquePtr<RelationshipElement>& relationship : relationships)
                    {
                        int addIndex = diagram->NextIndex();
                        addElementsCommand->AddIndex(addIndex);
                        result = diagram->AddElement(relationship.Release());
                        if (result.Error()) return result;
                    }
                    result = diagram->GetCommandList().AddCommand(addElementsCommand.Release());
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
    }
}

