// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;

namespace spring
{
    class NotePropertiesDialog : Window
    {
        public NotePropertiesDialog(NoteElement* noteElement_) :
            base(WindowCreateParams(
                WindowControlCreateParams(
                    ControlCreateParams().Defaults(), "System.Windows.Window", "Class Properties", Point.Default(),
                        Size(ScreenMetrics.Get().MMToHorizontalPixels(100), ScreenMetrics.Get().MMToVerticalPixels(70))))),
            noteElement(noteElement_)
        {
            Size s = GetSize();
            Size defaultButtonSize = ScreenMetrics.Get().DefaultButtonSize();
            Size defaultControlSpacing = ScreenMetrics.Get().DefaultControlSpacing();
            Size defaultLabelSize = ScreenMetrics.Get().DefaultLabelSize();
            Size defaultTextBoxSize = ScreenMetrics.Get().DefaultTextBoxSize();
            Point textBoxLoc(defaultControlSpacing.w, defaultControlSpacing.h);
            Size textBoxSize(ScreenMetrics.Get().MMToHorizontalPixels(80), ScreenMetrics.Get().MMToVerticalPixels(30));
            string noteText;
            bool first = true;
            for (const string& line : noteElement->Lines())
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    noteText.Append("\r\n");
                }
                noteText.Append(line);
            }
            UniquePtr<TextBox> textBoxPtr(new TextBox(
                TextBoxCreateParams(
                    TextBoxControlCreateParams(ControlCreateParams().Defaults().SetText(noteText).
                    SetLocation(textBoxLoc).SetSize(textBoxSize).
                    SetAnchors(cast<Anchors>(Anchors.top | Anchors.left)),
                    cast<TextBoxStyle>(TextBoxStyle.ES_LEFT | TextBoxStyle.ES_AUTOHSCROLL | TextBoxStyle.ES_AUTOVSCROLL | TextBoxStyle.ES_MULTILINE))).Defaults()));
            textBox = textBoxPtr.Get();
            textBox->TextChangedEvent().AddHandler(NoteTextChanged);
            textBox->SelectAll();
            UniquePtr<PaddedControl> paddedTextBox(new PaddedControl(PaddedControlCreateParams(
                PaddedControlControlCreateParams(ControlCreateParams().Defaults(), textBox), textBoxPtr.Release())));
            UniquePtr<BorderedControl> borderedPaddedTextBox(new BorderedControl(BorderedControlCreateParams(
                BorderedControlControlCreateParams(ControlCreateParams().Defaults().SetLocation(textBoxLoc).SetSize(textBoxSize).
                SetAnchors(cast<Anchors>(Anchors.top | Anchors.left)), paddedTextBox.Get()), paddedTextBox.Release()).Defaults().SetBorderStyle(BorderStyle.style3D)));
            auto result = AddChild(borderedPaddedTextBox.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            int x = s.w - defaultButtonSize.w - defaultControlSpacing.w;
            int y = s.h - defaultButtonSize.h - defaultControlSpacing.h;
            UniquePtr<Button> cancelButtonPtr(new Button(ButtonControlCreateParams(ControlCreateParams().Defaults().SetText("Cancel").SetLocation(Point(x, y)).
                SetSize(defaultButtonSize).SetDock(Dock.none).SetAnchors(cast<Anchors>(Anchors.bottom | Anchors.right)), false)));
            cancelButton = cancelButtonPtr.Get();
            cancelButton->SetDialogResult(DialogResult.cancel);
            x = x - defaultButtonSize.w - defaultControlSpacing.w;

            UniquePtr<Button> okButtonPtr(new Button(ButtonControlCreateParams(ControlCreateParams().Defaults().SetText("OK").SetLocation(Point(x, y)).
                SetSize(defaultButtonSize).SetDock(Dock.none).SetAnchors(cast<Anchors>(Anchors.bottom | Anchors.right)), true)));
            okButton = okButtonPtr.Get();
            okButton->SetDialogResult(DialogResult.ok);
            result = AddChild(okButtonPtr.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = AddChild(cancelButtonPtr.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            SetDefaultButton(okButton);
            SetCancelButton(cancelButton);
            textBox->SetFocus();
        }
        private void NoteTextChanged()
        {
            auto utf32Result = ToUtf32(textBox->Text());
            if (utf32Result.Error())
            {
                SetErrorId(utf32Result.GetErrorId());
                return;
            }
            ustring utext = Rvalue(utf32Result.Value());
            List<ustring> ulines = System.Windows.SplitTextIntoLines(utext);
            List<string> lines;
            for (const auto& uline : ulines)
            {
                auto utf8Result = ToUtf8(uline);
                if (utf8Result.Error())
                {
                    SetErrorId(utf8Result.GetErrorId());
                    return;
                }
                lines.Add(Rvalue(utf8Result.Value()));
            }
            noteElement->SetLines(Rvalue(lines));
        }
        private NoteElement* noteElement;
        private TextBox* textBox;
        private Button* cancelButton;
        private Button* okButton;
    }
}

