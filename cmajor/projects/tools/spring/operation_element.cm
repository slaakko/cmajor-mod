// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows;

namespace spring
{
    class OperationElement : DiagramElement
    {
        public OperationElement() :
            base(DiagramElementKind.operationElement),
            isAbstract(false),
            rep(new ConcreteOperation(this)),
            containerElement(null),
            relationship(null)
        {
        }
        [nodiscard]
        public override Result<bool> Measure(Graphics& graphics)
        {
            return rep->Measure(graphics);
        }
        [nodiscard]
        public override Result<bool> Draw(Graphics& graphics)
        {
            return rep->Draw(graphics);
        }
        public override System.Xml.Element* ToXml() const
        {
            System.Xml.Element* xmlElement = System.Xml.MakeElement("operation");
            SetName(xmlElement);
            xmlElement->AppendChild(BoundsXmlElement());
            if (isAbstract)
            {
                xmlElement->SetAttribute("abstract", "true");
            }
            else
            {
                xmlElement->SetAttribute("abstract", "false");
            }
            return xmlElement;
        }
        public override Result<bool> FromXml(System.Xml.Element* xmlElement, bool setName)
        {
            Result<bool> result = base->FromXml(xmlElement, setName);
            if (result.Error()) return result;
            auto abstractResult = ParseBool(xmlElement->GetAttribute("abstract"));
            if (abstractResult.Error()) return Result<bool>(ErrorId(abstractResult.GetErrorId()));
            bool abstractValue = abstractResult.Value();
            if (abstractValue)
            {
                SetAbstract();
            }
            return Result<bool>(true);
        }
        public override DiagramElement* Clone() const
        {
            OperationElement* clone = new OperationElement();
            clone->SetName(Name());
            clone->SetBounds(Bounds());
            if (isAbstract)
            {
                clone->SetAbstract();
            }
            clone->SetContainerElement(containerElement);
            return clone;
        }
        public inline bool IsAbstract() const
        {
            return isAbstract;
        }
        public void SetAbstract()
        {
            if (!IsAbstract())
            {
                isAbstract = true;
                rep.Reset(new AbstractOperation(this));
            }
        }
        public void ResetAbstract()
        {
            if (IsAbstract())
            {
                isAbstract = false;
                rep.Reset(new ConcreteOperation(this));
            }
        }
        public void SetContainerElement(ContainerElement* containerElement_)
        {
            containerElement = containerElement_;
        }
        public override ContainerElement* GetContainerElement() const
        {
            return containerElement;
        }
        public inline RelationshipElement* Relationship() const
        {
            return relationship;
        }
        public void SetRelationshipPoint()
        {
            if (relationship != null)
            {
                relationship->Source().SetElement(this);
                relationship->Source().SetPoint(GetRelationshipPoint());
                for (auto& sourceEndPoint : relationship->SourceEndPoints())
                {
                    sourceEndPoint.SetElement(this);
                    sourceEndPoint.SetPoint(GetRelationshipPoint());
                }
            }
        }
        public PointF GetRelationshipPoint() const
        {
            Layout* layout = Configuration.Instance().GetLayout();
            RelationshipLayoutElement* relationshipLayoutElement = layout->GetRelationshipLayoutElement();
            PaddingElement* paddingElement = relationshipLayoutElement->GetPaddingElement();
            float relationshipSymbolRadius = relationshipLayoutElement->RelationshipSymbolRadius();
            PointF loc = Location();
            SizeF size = Size();
            float symbolLeft = 0.0f;
            if (containerElement != null)
            {
                size.w = containerElement->GetMaxChildElementWidth();
                size.w = size.w - GetRelationshipSymbolFieldWidth(relationshipSymbolRadius, paddingElement->GetPadding().Horizontal());
                symbolLeft = paddingElement->GetPadding().left + relationshipSymbolRadius;
            }
            PointF point(loc.x + size.w + symbolLeft, loc.y + size.h / 2);
            return point;
        }
        private bool isAbstract;
        private UniquePtr<OperationElementRep> rep;
        private ContainerElement* containerElement;
        private RelationshipElement* relationship;
    }
}

