// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows;

namespace spring
{
    class MainWindow : Window
    {
        public MainWindow() : base("Spring Software Diagram Designer")
        {
            auto arrowCursorResult = LoadStandardCursor(StandardCursorId.IDC_ARROW);
            if (arrowCursorResult.Error())
            {
                SetErrorId(arrowCursorResult.GetErrorId());
                return;
            }
            arrowCursor = Rvalue(arrowCursorResult.Value());
            auto cursorResult = Application.GetResourceManager().GetCursor("grab.open.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            grabOpenCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("grab.closed.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            grabClosedCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("class.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            classToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("object.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            objectToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("note.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            noteToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("inheritance.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            inheritanceToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("composition.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            compositionToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("aggregation.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            aggregationToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("reference.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            referenceToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("create.instance.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            createInstanceToolCursor = cursorResult.Value();
            cursorResult = Application.GetResourceManager().GetCursor("attach.note.tool.spring.cursor");
            if (cursorResult.Error())
            {
                SetErrorId(cursorResult.GetErrorId());
                return;
            }
            attachNoteToolCursor = cursorResult.Value();
            Result<Bitmap> noteCornerBitmapResult = Bitmap.FromResource("note.corner.spring.bitmap");
            if (noteCornerBitmapResult.Error())
            {
                SetErrorId(noteCornerBitmapResult.GetErrorId());
                return;
            }
            noteCornerBitmap.Reset(new Bitmap(Rvalue(noteCornerBitmapResult.Value())));
            UniquePtr<MenuBar> menuBar(new MenuBar());
            MenuItem* fileMenuItem = new MenuItem("&File");
            MenuItem* newMenuItem = new MenuItem("&New");
            newMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.n));
            newMenuItem->ClickEvent().AddHandler(NewClick);
            auto result = fileMenuItem->AddMenuItem(newMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* openMenuItem = new MenuItem("&Open...");
            openMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.o));
            openMenuItem->ClickEvent().AddHandler(OpenClick);
            result = fileMenuItem->AddMenuItem(openMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* saveMenuItem = new MenuItem("&Save");
            saveMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.s));
            saveMenuItem->ClickEvent().AddHandler(SaveClick);
            result = fileMenuItem->AddMenuItem(saveMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* saveAsMenuItem = new MenuItem("Save &As...");
            saveAsMenuItem->ClickEvent().AddHandler(SaveAsClick);
            result = fileMenuItem->AddMenuItem(saveAsMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* saveImageMenuItem = new MenuItem("Save &Image...");
            saveImageMenuItem->ClickEvent().AddHandler(SaveImageClick);
            result = fileMenuItem->AddMenuItem(saveImageMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* exitMenuItem = new MenuItem("E&xit");
            exitMenuItem->ClickEvent().AddHandler(ExitClick);
            result = fileMenuItem->AddMenuItem(exitMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = menuBar->AddMenuItem(fileMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* editMenuItem = new MenuItem("&Edit");
            cutMenuItem = new MenuItem("Cu&t");
            result = cutMenuItem->Disable();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            cutMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.x));
            cutMenuItem->ClickEvent().AddHandler(CutClick);
            result = editMenuItem->AddMenuItem(cutMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            copyMenuItem = new MenuItem("&Copy");
            result = copyMenuItem->Disable();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            copyMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.c));
            copyMenuItem->ClickEvent().AddHandler(CopyClick);
            result = editMenuItem->AddMenuItem(copyMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            pasteMenuItem = new MenuItem("&Paste");
            result = pasteMenuItem->Disable();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            pasteMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.v));
            pasteMenuItem->ClickEvent().AddHandler(PasteClick);
            result = editMenuItem->AddMenuItem(pasteMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            undoMenuItem = new MenuItem("&Undo");
            result = undoMenuItem->Disable();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            undoMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.z));
            undoMenuItem->ClickEvent().AddHandler(UndoClick);
            result = editMenuItem->AddMenuItem(undoMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            redoMenuItem = new MenuItem("&Redo");
            result = redoMenuItem->Disable();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            redoMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.y));
            redoMenuItem->ClickEvent().AddHandler(RedoClick);
            result = editMenuItem->AddMenuItem(redoMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* selectAllMenuItem = new MenuItem("Select &All");
            selectAllMenuItem->SetShortcut(cast<Keys>(Keys.controlModifier | Keys.a));
            selectAllMenuItem->ClickEvent().AddHandler(SelectAllClick);
            result = editMenuItem->AddMenuItem(selectAllMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = menuBar->AddMenuItem(editMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* helpMenuItem = new MenuItem("&Help");
            MenuItem* userGuideMenuItem = new MenuItem("&User Guide");
            userGuideMenuItem->ClickEvent().AddHandler(UserGuideClick);
            result = helpMenuItem->AddMenuItem(userGuideMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* indexMenuItem = new MenuItem("&Index");
            indexMenuItem->ClickEvent().AddHandler(IndexClick);
            result = helpMenuItem->AddMenuItem(indexMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            MenuItem* aboutMenuItem = new MenuItem("&About...");
            aboutMenuItem->ClickEvent().AddHandler(AboutClick);
            result = helpMenuItem->AddMenuItem(aboutMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = menuBar->AddMenuItem(helpMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = AddChild(menuBar.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            UniquePtr<ToolBar> toolBar(new ToolBar(ToolBarCreateParams(ToolBarControlCreateParams(ControlCreateParams().Defaults())).Defaults().
                SetStyle(ToolBar.Style.radioButtonGroup)));
            ToolButton* selectToolButton = new ToolButton("arrow.system.windows.bitmap", ToolButton.Style.manual);
            result = selectToolButton->SetToolTip("Select");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetSelectTool()->SetToolButton(selectToolButton);
            Tools.Instance().GetSelectTool()->SetCursor(&arrowCursor);
            result = toolBar->AddToolButton(selectToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* grabToolButton = new ToolButton("grab.tool.spring.bitmap", ToolButton.Style.manual);
            result = grabToolButton->SetToolTip("Grab");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetGrabTool()->SetToolButton(grabToolButton);
            Tools.Instance().GetGrabTool()->SetCursor(grabOpenCursor);
            Tools.Instance().GetGrabTool()->SetPressedCursor(grabClosedCursor);
            result = toolBar->AddToolButton(grabToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* classToolButton = new ToolButton("class.tool.spring.bitmap", ToolButton.Style.manual);
            result = classToolButton->SetToolTip("Add new class");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetClassTool()->SetToolButton(classToolButton);
            Tools.Instance().GetClassTool()->SetCursor(classToolCursor);
            result = toolBar->AddToolButton(classToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* objectToolButton = new ToolButton("object.tool.spring.bitmap", ToolButton.Style.manual);
            result = objectToolButton->SetToolTip("Add new object");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetObjectTool()->SetToolButton(objectToolButton);
            Tools.Instance().GetObjectTool()->SetCursor(objectToolCursor);
            result = toolBar->AddToolButton(objectToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* noteToolButton = new ToolButton("note.tool.spring.bitmap", ToolButton.Style.manual);
            result = noteToolButton->SetToolTip("Add new note");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetNoteTool()->SetToolButton(noteToolButton);
            Tools.Instance().GetNoteTool()->SetCursor(noteToolCursor);
            result = toolBar->AddToolButton(noteToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* inheritanceToolButton = new ToolButton("inheritance.tool.spring.bitmap", ToolButton.Style.manual);
            result = inheritanceToolButton->SetToolTip("Add inheritance relationship");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetInheritanceTool()->SetToolButton(inheritanceToolButton);
            Tools.Instance().GetInheritanceTool()->SetCursor(inheritanceToolCursor);
            result = toolBar->AddToolButton(inheritanceToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* compositionToolButton = new ToolButton("composition.tool.spring.bitmap", ToolButton.Style.manual);
            result = compositionToolButton->SetToolTip("Add composition relationship");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetCompositionTool()->SetToolButton(compositionToolButton);
            Tools.Instance().GetCompositionTool()->SetCursor(compositionToolCursor);
            result = toolBar->AddToolButton(compositionToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* aggregationToolButton = new ToolButton("aggregation.tool.spring.bitmap", ToolButton.Style.manual);
            result = aggregationToolButton->SetToolTip("Add aggregation relationship");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetAggregationTool()->SetToolButton(aggregationToolButton);
            Tools.Instance().GetAggregationTool()->SetCursor(aggregationToolCursor);
            result = toolBar->AddToolButton(aggregationToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* referenceToolButton = new ToolButton("reference.tool.spring.bitmap", ToolButton.Style.manual);
            result = referenceToolButton->SetToolTip("Add reference relationship");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetReferenceTool()->SetToolButton(referenceToolButton);
            Tools.Instance().GetReferenceTool()->SetCursor(referenceToolCursor);
            result = toolBar->AddToolButton(referenceToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* createInstanceToolButton = new ToolButton("create.instance.tool.spring.bitmap", ToolButton.Style.manual);
            result = createInstanceToolButton->SetToolTip("Add create instance relationship");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetCreateInstanceTool()->SetToolButton(createInstanceToolButton);
            Tools.Instance().GetCreateInstanceTool()->SetCursor(createInstanceToolCursor);
            result = toolBar->AddToolButton(createInstanceToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            ToolButton* attachNoteToolButton = new ToolButton("attach.note.tool.spring.bitmap", ToolButton.Style.manual);
            result = attachNoteToolButton->SetToolTip("Attach note");
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Tools.Instance().GetAttachNoteTool()->SetToolButton(attachNoteToolButton);
            Tools.Instance().GetAttachNoteTool()->SetCursor(attachNoteToolCursor);
            result = toolBar->AddToolButton(attachNoteToolButton);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            Size toolBarSize = toolBar->GetSize();
            toolBarSize.w = toolBarSize.w + 3;
            toolBarSize.h = toolBarSize.h + 3;
            UniquePtr<PaddedControl> paddedToolBar(new PaddedControl(PaddedControlCreateParams(
                PaddedControlControlCreateParams(ControlCreateParams().Defaults(), toolBar.Get()),
                toolBar.Release()).Defaults()));
            Size paddedToolBarSize = toolBarSize;
            paddedToolBarSize.w = paddedToolBarSize.w + DefaultPadding().Horizontal();
            paddedToolBarSize.h = paddedToolBarSize.h + DefaultPadding().Vertical() + 7;
            UniquePtr<BorderedControl> borderedToolBar(new BorderedControl(
                BorderedControlCreateParams(BorderedControlControlCreateParams(ControlCreateParams().Defaults(), paddedToolBar.Get()).Defaults().
                SetSize(paddedToolBarSize).SetDock(Dock.top), paddedToolBar.Release()).
                SetBorderStyle(BorderStyle.single)));
            result = AddChild(borderedToolBar.Release());
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            canvas = new Canvas(CanvasCreateParams().Defaults());
            result = AddChild(canvas);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            spring.SetCanvas(canvas);
            canvas->SetNoteCornerBitmap(noteCornerBitmap.Get());
            canvas->SetCopyMenuItem(copyMenuItem);
            canvas->SetCutMenuItem(cutMenuItem);
            canvas->SetPasteMenuItem(pasteMenuItem);
            canvas->SetUndoMenuItem(undoMenuItem);
            canvas->SetRedoMenuItem(redoMenuItem);
            result = canvas->GetDiagram()->SetMenuItems(undoMenuItem, redoMenuItem);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            canvas->MouseEnterEvent().AddHandler(CanvasMouseEnter);
            canvas->MouseLeaveEvent().AddHandler(CanvasMouseLeave);
            canvas->MouseMoveEvent().AddHandler(CanvasMouseMove);
            statusBar = new StatusBar();
            statusBar->SetDoubleBuffered();
            filePathStatusBarItem = new StatusBarItem(string(), StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(filePathStatusBarItem);
            modifiedStatusBarItem = new StatusBarItem(" ", StatusBarItem.BorderStyle.sunken);
            canvas->SetModifiedStatusBarItem(modifiedStatusBarItem);
            statusBar->AddItem(modifiedStatusBarItem);
            StatusBarItem* springItem = new StatusBarItem(string(), StatusBarItem.BorderStyle.flat, true);
            statusBar->AddItem(springItem);
            StatusBarItem* viewXItem = new StatusBarItem("view X:", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(viewXItem);
            viewXCoordStatusBarItem = new StatusBarItem("      ", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(viewXCoordStatusBarItem);
            StatusBarItem* viewYItem = new StatusBarItem("view Y:", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(viewYItem);
            viewYCoordStatusBarItem = new StatusBarItem("      ", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(viewYCoordStatusBarItem);
            StatusBarItem* xItem = new StatusBarItem("X:", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(xItem);
            xCoordStatusBarItem = new StatusBarItem("      ", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(xCoordStatusBarItem);
            StatusBarItem* yItem = new StatusBarItem("Y:", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(yItem);
            yCoordStatusBarItem = new StatusBarItem("      ", StatusBarItem.BorderStyle.sunken);
            statusBar->AddItem(yCoordStatusBarItem);
            result = AddChild(statusBar);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
        }
        public override ~MainWindow()
        {
            Configuration.Instance().Reset();
        }
        private void NewClick(ClickEventArgs& args)
        {
            // todo
            // filePathStatusBarItem->SetText(std::string());
        }
        private void OpenClick(ClickEventArgs& args)
        {
            // todo
            // diagramFilePath = filePath;
            // filePathStatusBarItem->SetText(diagramFilePath);
            // modifiedStatusBarItem->SetText(" ");
        }
        private void SaveClick(ClickEventArgs& args)
        {
            // todo
        }
        private void SaveAsClick(ClickEventArgs& args)
        {
            // filePathStatusBarItem->SetText(diagramFilePath);
            // diagram->ResetModified();
            // todo
        }
        private void SaveImageClick(ClickEventArgs& args)
        {
            // todo
        }
        private void ExitClick(ClickEventArgs& args)
        {
            // todo
        }
        private void CutClick(ClickEventArgs& args)
        {
            // todo
        }
        private void CopyClick(ClickEventArgs& args)
        {
            // todo
        }
        private void PasteClick(ClickEventArgs& args)
        {
            // todo
        }
        private void UndoClick(ClickEventArgs& args)
        {
            // todo
        }
        private void RedoClick(ClickEventArgs& args)
        {
            // todo
        }
        private void SelectAllClick(ClickEventArgs& args)
        {
            // todo
        }
        private void UserGuideClick(ClickEventArgs& args)
        {
            // todo
        }
        private void IndexClick(ClickEventArgs& args)
        {
            // todo
        }
        private void AboutClick(ClickEventArgs& args)
        {
            // todo
        }
        private void CanvasMouseEnter(EnterLeaveEventArgs& args)
        {
            auto result = xCoordStatusBarItem->SetText(string(' ', 6));
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
            result = yCoordStatusBarItem->SetText(string(' ', 6));
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
        }
        private void CanvasMouseLeave(EnterLeaveEventArgs& args)
        {
            auto result = xCoordStatusBarItem->SetText(string(' ', 6));
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
            result = yCoordStatusBarItem->SetText(string(' ', 6));
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
        }
        private void CanvasMouseMove(MouseEventArgs& args)
        {
            string viewXCoordText = Format(System.ToString(canvas->ViewOrigin().x), 6, FormatJustify.right);
            auto result = viewXCoordStatusBarItem->SetText(viewXCoordText);
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
            string viewYCoordText = Format(System.ToString(canvas->ViewOrigin().y), 6, FormatJustify.right);
            result = viewYCoordStatusBarItem->SetText(viewYCoordText);
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
            string xCoordText = Format(System.ToString(canvas->ViewOrigin().x + PixelsToMM(args.location.x, ScreenMetrics.Get().DpiX())), 6, FormatJustify.right);
            result = xCoordStatusBarItem->SetText(xCoordText);
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
            string yCoordText = Format(System.ToString(canvas->ViewOrigin().y + PixelsToMM(args.location.y, ScreenMetrics.Get().DpiY())), 6, FormatJustify.right);
            result = yCoordStatusBarItem->SetText(yCoordText);
            if (result.Error())
            {
                args.errorId = result.GetErrorId();
                return;
            }
        }
        private Cursor arrowCursor;
        private Cursor* grabOpenCursor;
        private Cursor* grabClosedCursor;
        private Cursor* classToolCursor;
        private Cursor* objectToolCursor;
        private Cursor* noteToolCursor;
        private Cursor* inheritanceToolCursor;
        private Cursor* compositionToolCursor;
        private Cursor* aggregationToolCursor;
        private Cursor* referenceToolCursor;
        private Cursor* createInstanceToolCursor;
        private Cursor* attachNoteToolCursor;
        private UniquePtr<Bitmap> noteCornerBitmap;
        private MenuItem* cutMenuItem;
        private MenuItem* copyMenuItem;
        private MenuItem* pasteMenuItem;
        private MenuItem* undoMenuItem;
        private MenuItem* redoMenuItem;
        private Canvas* canvas;
        private StatusBarItem* filePathStatusBarItem;
        private StatusBarItem* modifiedStatusBarItem;
        private StatusBarItem* viewXCoordStatusBarItem;
        private StatusBarItem* viewYCoordStatusBarItem;
        private StatusBarItem* xCoordStatusBarItem;
        private StatusBarItem* yCoordStatusBarItem;
        private string diagramFilePath;
        private UniquePtr<ClipboardFormat> springDiagramElementsFormat;
        private ustring clipboardData;
        private UniquePtr<ClipboardListener> clipboardListener;
        private StatusBar* statusBar;
    }
}

