using System;

namespace System.Windows
{
    public const int CW_USEDEFAULT = cast<int>(2147483648u);

    public enum ShowCommand : int
    {
        SW_HIDE = 0, SW_SHOWNORMAL = 1, SW_SHOWMINIMIZED = 2, SW_MAXIMIZE = 3, SW_SHOWNOACTIVATE = 4, SW_SHOW = 5, SW_MINIMIZE = 6, SW_SHOWMINNOACTIVE = 7, SW_SHOWNA = 8, SW_RESTORE = 9, SW_SHOWDEFAULT = 10, SW_FORCEMINIMIZE = 11
    }

    public enum SystemColor : int
    {
        COLOR_3DDKSHADOW = 21, COLOR_3DFACE = 15, COLOR_3DHIGHLIGHT = 20, COLOR_3DHILIGHT = 20, COLOR_3DLIGHT = 22, COLOR_3DSHADOW = 16, COLOR_ACTIVEBORDER = 10, COLOR_ACTIVECAPTION = 2, COLOR_APPWORKSPACE = 12, COLOR_BACKGROUND = 1, COLOR_BTNFACE = 15, COLOR_BTNHIGHLIGHT = 20, COLOR_BTNHILIGHT = 20, COLOR_BTNSHADOW = 16, COLOR_BTNTEXT = 18, COLOR_CAPTIONTEXT = 9, COLOR_DESKTOP = 1, COLOR_GRADIENTACTIVECAPTION = 27, COLOR_GRADIENTINACTIVECAPTION = 28, COLOR_GRAYTEXT = 17, COLOR_HIGHLIGHT = 13, COLOR_HIGHLIGHTTEXT = 14, COLOR_HOTLIGHT = 26, COLOR_INACTIVEBORDER = 11, COLOR_INACTIVECAPTION = 3, COLOR_INACTIVECAPTIONTEXT = 19, COLOR_INFOBK = 24, COLOR_INFOTEXT = 23, COLOR_MENU = 4, COLOR_MENUHILIGHT = 29, COLOR_MENUBAR = 30, COLOR_MENUTEXT = 7, COLOR_SCROLLBAR = 0, COLOR_WINDOW = 5, COLOR_WINDOWFRAME = 6, COLOR_WINDOWTEXT = 8
    }

    public enum WindowClassStyle : uint
    {
        CS_DEFAULT = 0u, CS_VREDRAW = 1u, CS_HREDRAW = 2u, CS_DBLCLKS = 8u, CS_OWNDC = 32u, CS_CLASSDC = 64u, CS_PARENTDC = 128u, CS_NOCLOSE = 512u, CS_SAVEBITS = 2048u, CS_BYTEALIGNCLIENT = 4096u, CS_BYTEALIGNWINDOW = 8192u, CS_GLOBALCLASS = 16384u, CS_DROPSHADOW = 131072u
    }

    public enum WindowStyle : long
    {
        WS_BORDER = 8388608, WS_CAPTION = 12582912, WS_CHILD = 1073741824, WS_CHILDWINDOW = 1073741824, WS_CLIPCHILDREN = 33554432, WS_CLIPSIBLINGS = 67108864, WS_DISABLED = 134217728, WS_DLGFRAME = 4194304, WS_GROUP = 131072, WS_HSCROLL = 1048576, WS_ICONIC = 536870912, WS_MAXIMIZE = 16777216, WS_MAXIMIZEBOX = 65536, WS_MINIMIZE = 536870912, WS_MINIMIZEBOX = 131072, WS_OVERLAPPED = 0, WS_POPUP = 2147483648u, WS_SIZEBOX = 262144, WS_SYSMENU = 524288, WS_TABSTOP = 65536, WS_THICKFRAME = 262144, WS_TILED = 0, WS_VISIBLE = 268435456, WS_VSCROLL = 2097152, WS_POPUPWINDOW = (WS_POPUP | WS_BORDER | WS_SYSMENU), WS_OVERLAPPEDWINDOW = (WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX), WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW
    }

    public enum ExtendedWindowStyle : long
    {
        WS_EX_DEFAULT = 0, WS_EX_ACCEPTFILES = 16, WS_EX_APPWINDOW = 262144, WS_EX_CLIENTEDGE = 512, WS_EX_COMPOSITED = 33554432, WS_EX_CONTEXTHELP = 1024, WS_EX_CONTROLPARENT = 65536, WS_EX_DLGMODALFRAME = 1, WS_EX_LAYERED = 524288, WS_EX_LAYOUTRTL = 4194304, WS_EX_LEFT = 0, WS_EX_LEFTSCROLLBAR = 16384, WS_EX_LTRREADING = 0, WS_EX_MDICHILD = 64, WS_EX_NOACTIVATE = 134217728, WS_EX_NOINHERITLAYOUT = 1048576, WS_EX_NOPARENTNOTIFY = 4, WS_EX_NOREDIRECTIONBITMAP = 2097152, WS_EX_RIGHT = 4096, WS_EX_RIGHTSCROLLBAR = 0, WS_EX_RTLREADING = 8192, WS_EX_STATICEDGE = 131072, WS_EX_TOOLWINDOW = 128u, WS_EX_TOPMOST = 8, WS_EX_TRANSPARENT = 32, WS_EX_WINDOWEDGE = 256, WS_EX_PALETTEWINDOW = (WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST), WS_EX_OVERLAPPEDWINDOW = (WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE)
    }

    public class WinRect
    {
        public nothrow WinRect() :
            left(0), top(0), right(0), bottom(0)
        {
        }
        public nothrow WinRect(int left_, int top_, int right_, int bottom_) :
            left(left_), top(top_), right(right_), bottom(bottom_)
        {
        }
        public int left;
        public int top;
        public int right;
        public int bottom;
    }

    public enum WindowState : sbyte
    {
        normal, minimized, maximized
    }

    public enum DialogResult : int
    {
        none = 0, ok = 1, cancel = 2, abort = 3, retry = 4, ignore = 5, yes = 6, no = 7
    }

    public nothrow string ToString(DialogResult dialogResult)
    {
        switch (dialogResult)
        {
            case DialogResult.none: return "DialogResult.none";
            case DialogResult.ok: return "DialogResult.ok";
            case DialogResult.cancel: return "DialogResult.cancel";
            case DialogResult.abort: return "DialogResult.abort";
            case DialogResult.retry: return "DialogResult.retry";
            case DialogResult.ignore: return "DialogResult.ignore";
            case DialogResult.yes: return "DialogResult.yes";
            case DialogResult.no: return "DialogResult.no";
        }
        return string();
    }

    public enum Anchors : sbyte
    {
        none = 0, top = 1 << 0, bottom = 1 << 1, left = 1 << 2, right = 1 << 3
    }

    public enum Dock : sbyte
    {
        none = 0, top = 1, bottom = 2, left = 3, right = 4, fill = 5
    }

    public class Padding
    {
        public nothrow Padding() :
            left(0), top(0), right(0), bottom(0)
        {
        }
        public nothrow Padding(int left_, int top_, int right_, int bottom_) :
            left(left_), top(top_), right(right_), bottom(bottom_)
        {
        }
        public inline nothrow int Vertical() const
        {
            return top + bottom;
        }
        public inline nothrow int Horizontal() const
        {
            return left + right;
        }
        public int left;
        public int top;
        public int right;
        public int bottom;
    }

    public bool operator==(const Padding& left, const Padding& right)
    {
        return left.left == right.left && left.top == right.top && left.right == right.right && left.bottom == right.bottom;
    }

} // namespace System.Windows
