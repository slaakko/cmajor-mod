using System;
using System.Collections;

namespace System.Windows
{
    public enum ButtonStyle : long
    {
        BS_PUSHBUTTON = 0, BS_DEFPUSHBUTTON = 1, BS_3STATE = 5, BS_AUTO3STATE = 6, BS_AUTOCHECKBOX = 3, BS_AUTORADIOBUTTON = 9, BS_BITMAP = 128u, BS_BOTTOM = 2048, BS_CENTER = 768, BS_CHECKBOX = 2, BS_GROUPBOX = 7, BS_ICON = 64, BS_FLAT = 32768u, BS_LEFT = 256, BS_LEFTTEXT = 32, BS_MULTILINE = 8192, BS_NOTIFY = 16384, BS_OWNERDRAW = 11, BS_PUSHLIKE = 4096, BS_RADIOBUTTON = 4, BS_RIGHT = 512, BS_TOP = 1024, BS_TYPEMASK = 15, BS_VCENTER = 3072
    }

    public abstract class ButtonBase : Control
    {
        public ButtonBase(const string& windowClassName, WindowClassStyle windowClassStyle, WindowStyle style, ExtendedWindowStyle exStyle, const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base(windowClassName, windowClassStyle, style, exStyle, backgroundColor, text, location, size, dock, anchors)
        {
        }
        public ButtonBase(ControlCreateParams& controlCreateParams) :
            base(controlCreateParams)
        {
        }
        internal void OnClickInternal()
        {
            OnClick();
        }
        public void DoClick()
        {
            OnClick();
        }
    }

    public nothrow ControlCreateParams& ButtonControlCreateParams(ControlCreateParams& controlCreateParams, ButtonStyle buttonStyle)
    {
        controlCreateParams.SetWindowClassName("BUTTON");
        controlCreateParams.SetWindowStyle(cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | buttonStyle));
        controlCreateParams.SetWindowClassBackgroundColor(SystemColor.COLOR_BTNFACE);
        controlCreateParams.SetBackgroundColor(GetSystemColor(SystemColor.COLOR_BTNFACE));
        return controlCreateParams;
    }

    public nothrow ControlCreateParams& ButtonControlCreateParams(ControlCreateParams& controlCreateParams, bool setDefault)
    {
        ButtonStyle buttonStyle = ButtonStyle();
        if (setDefault)
        {
            buttonStyle = cast<ButtonStyle>(buttonStyle | ButtonStyle.BS_DEFPUSHBUTTON | ButtonStyle.BS_NOTIFY);
        }
        else
        {
            buttonStyle = cast<ButtonStyle>(buttonStyle | ButtonStyle.BS_PUSHBUTTON | ButtonStyle.BS_NOTIFY);
        }
        return ButtonControlCreateParams(controlCreateParams, buttonStyle);
    }

    public nothrow ControlCreateParams& ButtonControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return ButtonControlCreateParams(controlCreateParams, false);
    }

    public class ButtonCreateParams
    {
        public ButtonCreateParams(ControlCreateParams& controlCreateParams_) :
            controlCreateParams(controlCreateParams_)
        {
        }
        public nothrow ButtonCreateParams& Defaults()
        {
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
    }

    public class Button : ButtonBase
    {
        private enum Flags : sbyte
        {
            none = 0, defaultButton = 1 << 0
        }
        public Button(ButtonStyle buttonStyle, const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("BUTTON", DefaultWindowClassStyle(), cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | buttonStyle), DefaultExtendedWindowStyle(), backgroundColor, text, location, size, dock, anchors), flags(Flags.none), dialogResult(DialogResult.none)
        {
            SetFlagsFromButtonStyle(buttonStyle);
        }
        public Button(const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(cast<ButtonStyle>(ButtonStyle.BS_PUSHBUTTON | ButtonStyle.BS_NOTIFY), GetSystemColor(SystemColor.COLOR_BTNFACE), text, location, size, dock, anchors)
        {
        }
        public Button(ButtonStyle buttonStyle, const string& text, const Point& location, const Size& size) :
            this(buttonStyle, GetSystemColor(SystemColor.COLOR_BTNFACE), text, location, size, Dock.none, cast<Anchors>(Anchors.top | Anchors.left))
        {
        }
        public Button(const string& text, const Point& location, const Size& size) :
            this(cast<ButtonStyle>(ButtonStyle.BS_PUSHBUTTON | ButtonStyle.BS_NOTIFY), text, location, size)
        {
        }
        public Button(ButtonCreateParams& createParams) :
            base(createParams.controlCreateParams), flags(Flags.none), dialogResult(DialogResult.none)
        {
            SetFlagsFromButtonStyle(cast<ButtonStyle>(cast<long>(createParams.controlCreateParams.windowStyle)));
        }
        protected override void OnCreated()
        {
            base->OnCreated();
            Graphics graphics = Graphics.FromWindowHandle(Handle());
            const FontHandle& fontHandle = GetFontHandle(graphics);
            if (!fontHandle.IsNull())
            {
                SendSetFontMessage(fontHandle);
            }
        }
        protected override void OnGotFocus()
        {
            base->OnGotFocus();
            if (!IsDefault())
            {
                Window* window = GetWindow();
                if (window != null)
                {
                    Button* defaultButton = window->DefaultButton();
                    if (defaultButton != null)
                    {
                        defaultButton->ResetDefaultButtonStyle();
                    }
                }
                SetDefaultButtonStyle();
            }
        }
        protected override void OnLostFocus()
        {
            base->OnLostFocus();
            if (!IsDefault())
            {
                ResetDefaultButtonStyle();
                Window* window = GetWindow();
                if (window != null)
                {
                    Button* defaultButton = window->DefaultButton();
                    if (defaultButton != null)
                    {
                        defaultButton->SetDefaultButtonStyle();
                    }
                }
            }
        }
        protected override void OnClick()
        {
            base->OnClick();
            if (dialogResult != DialogResult.none)
            {
                Window* window = GetWindow();
                if (window != null)
                {
                    window->SetDialogResult(dialogResult);
                }
            }
        }
        protected override void OnKeyDown(KeyEventArgs& args)
        {
            base->OnKeyDown(args);
            if (!args.handled)
            {
                switch (args.key)
                {
                    case Keys.enter: 
                    {
                        OnClick();
                        break;
                    }
                }
            }
        }
        public override void PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                log->WriteLine(string(' ', level) + "Button." + Text() + ".handle=" + ToHexString(cast<ulong>(Handle())) + " " + ParentText() + "[" + Rect(Point(), GetSize()).ToString() + "]");
            }
        }
        public inline nothrow DialogResult GetDialogResult() const
        {
            return dialogResult;
        }
        public inline nothrow void SetDialogResult(DialogResult dialogResult_)
        {
            dialogResult = dialogResult_;
        }
        private nothrow void SetFlagsFromButtonStyle(ButtonStyle buttonStyle)
        {
            if ((buttonStyle & ButtonStyle.BS_DEFPUSHBUTTON) != 0)
            {
                flags = cast<Flags>(flags | Flags.defaultButton);
            }
        }
        public inline nothrow bool IsDefault() const
        {
            return (flags & Flags.defaultButton) != Flags.none;
        }
        public void SetDefault()
        {
            flags = cast<Flags>(flags | Flags.defaultButton);
            SetDefaultButtonStyle();
        }
        public void ResetDefault()
        {
            flags = cast<Flags>(flags & ~Flags.defaultButton);
            ResetDefaultButtonStyle();
        }
        private void SetDefaultButtonStyle()
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), BM_SETSTYLE, cast<uint>(GetWindowStyle() | ButtonStyle.BS_DEFPUSHBUTTON), cast<long>(true));
            }
        }
        private void ResetDefaultButtonStyle()
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), BM_SETSTYLE, cast<uint>(GetWindowStyle() & ~ButtonStyle.BS_DEFPUSHBUTTON), cast<long>(true));
            }
        }
        private Flags flags;
        private DialogResult dialogResult;
    }

} // namespace System.Windows
