using System;
using System.Collections;
using System.IO;

namespace System.Windows.API
{
    public const long ERROR_DUPLICATE_CODE_MAPPING = -2;

    public const long ERROR_CODE_NOT_FOUND = -1;

    public const long ERROR_OUT_OF_RESOURCES = 0;

    public const long ERROR_FILE_NOT_FOUND = 1;

    public const long ERROR_PATH_NOT_FOUND = 2;

    public const long ERROR_BAD_FORMAT = 3;

    public const long SE_ERR_ACCESSDENIED = 4;

    public const long SE_ERR_ASSOCINCOMPLETE = 5;

    public const long SE_ERR_DDEBUSY = 6;

    public const long SE_ERR_DDEFAIL = 7;

    public const long SE_ERR_DDETIMEOUT = 8;

    public const long SE_ERR_DLLNOTFOUND = 9;

    public const long SE_ERR_FNF = 10;

    public const long SE_ERR_NOASSOC = 11;

    public const long SE_ERR_OOM = 12;

    public const long SE_ERR_PNF = 13;

    public const long SE_ERR_SHARE = 14;

    public string GetWindowsAPIErrorMessage(ulong errorCode)
    {
        wchar[4096] buffer;
        WinFormatMessage(errorCode, &buffer[0]);
        return ToUtf8(wstring(&buffer[0]));
    }

    public class WindowsAPIException : Exception
    {
        public WindowsAPIException(ulong errorCode_) :
            base(GetWindowsAPIErrorMessage(errorCode_)), errorCode(errorCode_)
        {
        }
        public ulong ErrorCode() const
        {
            return errorCode;
        }
        private ulong errorCode;
    }

    public class CommonDialogError : Exception
    {
        public CommonDialogError(uint errorCode, const string& errorStr) :
            base("Common dialog error " + ToString(errorCode) + ": " + errorStr)
        {
        }
        private uint errorCode;
    }

    public void* FindFirstChangeNotification(const string& directoryPath)
    {
        void* notificationHandle = WinFindFirstChangeNotification(directoryPath.Chars());
        if (notificationHandle == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return notificationHandle;
    }

    public void FindNextChangeNotification(void* notificationHandle)
    {
        bool result = WinFindNextChangeNotification(notificationHandle);
        if (!result)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void FindCloseChangeNotification(void* notificationHandle)
    {
        bool result = WinFindCloseChangeNotification(notificationHandle);
        if (!result)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void* CreateEvent()
    {
        void* eventHandle = WinCreateEvent();
        if (eventHandle == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return eventHandle;
    }

    public void SetEvent(void* eventHandle)
    {
        bool result = WinSetEvent(eventHandle);
        if (!result)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void ResetEvent(void* eventHandle)
    {
        bool result = WinResetEvent(eventHandle);
        if (!result)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void WaitEvent(void* eventHandle)
    {
        bool result = WinWaitEvent(eventHandle);
        if (!result)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void CloseHandle(void* handle)
    {
        bool result = WinCloseHandle(handle);
        if (!result)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void CloseEvent(void* eventHandle)
    {
        CloseHandle(eventHandle);
    }

    public int WaitForMultipleObjects(const List<void*>& handles)
    {
        int result = WinWaitForMultipleObjects(cast<uint>(handles.Count()), handles.Begin().Ptr());
        if (result >= 0 && result <= handles.Count())
        {
            return result;
        }
        else
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void ShellExecute(const string& filePath)
    {
        long errorCode = 0;
        bool succeeded = WinShellExecute(filePath.Chars(), errorCode);
        if (!succeeded)
        {
            string errorMessage = "shell execution error for file \'" + filePath + "\': ";
            string error = "out of resources";
            switch (errorCode)
            {
                case ERROR_DUPLICATE_CODE_MAPPING: 
                {
                    error = "duplicate code mapping detected";
                    break;
                }
                case ERROR_CODE_NOT_FOUND: 
                {
                    error = "code not found";
                    break;
                }
                case ERROR_OUT_OF_RESOURCES: 
                {
                    error = "out of resources";
                    break;
                }
                case ERROR_FILE_NOT_FOUND: 
                {
                    error = "file not found";
                    break;
                }
                case ERROR_PATH_NOT_FOUND: 
                {
                    error = "path not found";
                    break;
                }
                case ERROR_BAD_FORMAT: 
                {
                    error = "invalid executable";
                    break;
                }
                case SE_ERR_ACCESSDENIED: 
                {
                    error = "access denied";
                    break;
                }
                case SE_ERR_ASSOCINCOMPLETE: 
                {
                    error = "invalid file association";
                    break;
                }
                case SE_ERR_DDEBUSY: 
                {
                    error = "DDE busy";
                    break;
                }
                case SE_ERR_DDEFAIL: 
                {
                    error = "DDE failed";
                    break;
                }
                case SE_ERR_DDETIMEOUT: 
                {
                    error = "DDE timeout";
                    break;
                }
                case SE_ERR_DLLNOTFOUND: 
                {
                    error = "DLL not found";
                    break;
                }
                case SE_ERR_FNF: 
                {
                    error = "file not found";
                    break;
                }
                case SE_ERR_NOASSOC: 
                {
                    error = "no association for this type of file";
                    break;
                }
                case SE_ERR_OOM: 
                {
                    error = "not enough memory";
                    break;
                }
                case SE_ERR_PNF: 
                {
                    error = "path not found";
                    break;
                }
                case SE_ERR_SHARE: 
                {
                    error = "sharing violation";
                    break;
                }
            }
            errorMessage.Append(error);
            throw Exception(errorMessage);
        }
    }

    public ushort RegisterWindowClass(const char* windowClassName, uint style, int backgroundColor)
    {
        ushort windowClass = WinRegisterWindowClass(windowClassName, style, backgroundColor);
        if (windowClass == 0u)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return windowClass;
    }

    public void* CreateWindowByClassAtom(ushort windowClass, const char* windowName, long style, long exStyle, Point location, Size size, Control* parent)
    {
        void* parentHandle = null;
        if (parent != null)
        {
            parentHandle = parent->Handle();
        }
        void* result = WinCreateWindowByClassAtom(windowClass, windowName, style, exStyle, location.x, location.y, size.w, size.h, parentHandle);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        else
        {
            return result;
        }
    }

    public void* CreateWindowByClassName(const char* windowClass, const char* windowName, long style, long exStyle, Point location, Size size, Control* parent)
    {
        void* parentHandle = null;
        if (parent != null)
        {
            parentHandle = parent->Handle();
        }
        void* result = WinCreateWindowByClassName(windowClass, windowName, style, exStyle, location.x, location.y, size.w, size.h, parentHandle);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        else
        {
            return result;
        }
    }

    public void MoveWindow(void* windowHandle, const Point& location, const Size& size, bool repaint)
    {
        bool succeeded = WinMoveWindow(windowHandle, location.x, location.y, size.w, size.h, repaint);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public WinRect GetClientRect(void* windowHandle)
    {
        WinRect rect;
        bool succeeded = WinGetClientRect(windowHandle, &rect);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return rect;
    }

    public WinRect GetWindowRect(void* windowHandle)
    {
        WinRect rect;
        bool succeeded = WinGetWindowRect(windowHandle, &rect);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return rect;
    }

    public Point ClientToScreen(void* windowHandle, const Point& point)
    {
        Point pt(point);
        bool succeeded = WinClientToScreen(windowHandle, &pt);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return pt;
    }

    public Point ScreenToClient(void* windowHandle, const Point& point)
    {
        Point pt(point);
        bool succeeded = WinScreenToClient(windowHandle, &pt);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return pt;
    }

    public nothrow bool PtInRect(const Point& point, const WinRect& rect)
    {
        return WinPtInRect(&rect, &point);
    }

    public void SetWindowText(void* windowHandle, const string& text)
    {
        bool succeeded = WinSetWindowText(windowHandle, text.Chars());
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public int GetWindowTextLength(void* windowHandle)
    {
        int result = WinGetWindowTextLength(windowHandle);
        if (result == 0)
        {
            ulong errorCode = WinGetLastError();
            if (errorCode != 0u)
            {
                throw WindowsAPIException(errorCode);
            }
        }
        return result;
    }

    public string GetWindowText(void* windowHandle)
    {
        int length = GetWindowTextLength(windowHandle);
        UniquePtr<wchar> buffer(cast<wchar*>(MemAlloc(sizeof(wchar) * (length + 1))));
        int result = WinGetWindowText(windowHandle, buffer.Get(), length + 1);
        if (result == 0)
        {
            ulong errorCode = WinGetLastError();
            if (errorCode != 0u)
            {
                throw WindowsAPIException(errorCode);
            }
        }
        return ToUtf8(buffer.Get());
    }

    public void SetParentWindow(void* childWindowHandle, void* parentWindowHandle)
    {
        void* result = WinSetParent(childWindowHandle, parentWindowHandle);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void* BeginPaint(void* windowHandle, void*& paintStruct)
    {
        void* result = WinBeginPaint(windowHandle, paintStruct);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return result;
    }

    public void EndPaint(void* windowHandle, void* paintStruct)
    {
        WinEndPaint(windowHandle, paintStruct);
    }

    public void InvalidateRect(void* windowHandle, WinRect* rect, bool eraseBackground)
    {
        bool succeeded = WinInvalidateRect(windowHandle, rect, eraseBackground);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public nothrow bool MessageBeep(uint beepType)
    {
        return WinMessageBeep(beepType);
    }

    public void MessageBeepChecked(uint beepType)
    {
        bool succeeded = WinMessageBeep(beepType);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void* GetDC(void* windowHandle)
    {
        return WinGetDC(windowHandle);
    }

    public void PostMessage(void* windowHandle, uint msg, uint wparam, long lparam)
    {
        bool succeeded = WinPostMessage(windowHandle, msg, wparam, lparam);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void ThrowCommonDialogError(uint errorCode)
    {
        string errorStr;
        switch (errorCode)
        {
            case 65535u: 
            {
                errorStr = "CDERR_DIALOGFAILURE";
                break;
            }
            case 6u: 
            {
                errorStr = "CDERR_FINDRESFAILURE";
                break;
            }
            case 2u: 
            {
                errorStr = "CDERR_INITIALIZATION";
                break;
            }
            case 7u: 
            {
                errorStr = "CDERR_LOADRESFAILURE";
                break;
            }
            case 5u: 
            {
                errorStr = "CDERR_LOADSTRFAILURE";
                break;
            }
            case 8u: 
            {
                errorStr = "CDERR_LOCKRESFAILURE";
                break;
            }
            case 9u: 
            {
                errorStr = "CDERR_MEMALLOCFAILURE";
                break;
            }
            case 10u: 
            {
                errorStr = "CDERR_MEMLOCKFAILURE";
                break;
            }
            case 4u: 
            {
                errorStr = "CDERR_NOHINSTANCE";
                break;
            }
            case 11u: 
            {
                errorStr = "CDERR_NOHOOK";
                break;
            }
            case 3u: 
            {
                errorStr = "CDERR_NOTEMPLATE";
                break;
            }
            case 12u: 
            {
                errorStr = "CDERR_REGISTERMSGFAIL";
                break;
            }
            case 1u: 
            {
                errorStr = "CDERR_STRUCTSIZE";
                break;
            }
            case 4106u: 
            {
                errorStr = "PDERR_CREATEICFAILURE";
                break;
            }
            case 4108u: 
            {
                errorStr = "PDERR_DEFAULTDIFFERENT";
                break;
            }
            case 4105u: 
            {
                errorStr = "PDERR_DNDMMISMATCH";
                break;
            }
            case 4101u: 
            {
                errorStr = "PDERR_GETDEVMODEFAIL";
                break;
            }
            case 4102u: 
            {
                errorStr = "PDERR_INITFAILURE";
                break;
            }
            case 4100u: 
            {
                errorStr = "PDERR_LOADDRVFAILURE";
                break;
            }
            case 4104u: 
            {
                errorStr = "PDERR_NODEFAULTPRN";
                break;
            }
            case 4103u: 
            {
                errorStr = "PDERR_NODEVICES";
                break;
            }
            case 4098u: 
            {
                errorStr = "PDERR_PARSEFAILURE";
                break;
            }
            case 4107u: 
            {
                errorStr = "PDERR_PRINTERNOTFOUND";
                break;
            }
            case 4099u: 
            {
                errorStr = "PDERR_RETDEFFAILURE";
                break;
            }
            case 4097u: 
            {
                errorStr = "PDERR_SETUPFAILURE";
                break;
            }
            case 8194u: 
            {
                errorStr = "CFERR_MAXLESSTHANMIN";
                break;
            }
            case 8193u: 
            {
                errorStr = "CFERR_NOFONTS";
                break;
            }
            case 12291u: 
            {
                errorStr = "FNERR_BUFFERTOOSMALL";
                break;
            }
            case 12290u: 
            {
                errorStr = "FNERR_INVALIDFILENAME";
                break;
            }
            case 12289u: 
            {
                errorStr = "FNERR_SUBCLASSFAILURE";
                break;
            }
            case 16385u: 
            {
                errorStr = "FRERR_BUFFERLENGTHZERO";
                break;
            }
            default: 
            {
                errorStr = "generic error";
                break;
            }
        }
        MessageBox.Show(errorStr);
    }

    public const uint OFN_READONLY = 1u;

    public const uint OFN_OVERWRITEPROMPT = 2u;

    public const uint OFN_HIDEREADONLY = 4u;

    public const uint OFN_NOCHANGEDIR = 8u;

    public const uint OFN_SHOWHELP = 16u;

    public const uint OFN_ENABLEHOOK = 32u;

    public const uint OFN_ENABLETEMPLATE = 64u;

    public const uint OFN_ENABLETEMPLATEHANDLE = 128u;

    public const uint OFN_NOVALIDATE = 256u;

    public const uint OFN_ALLOWMULTISELECT = 512u;

    public const uint OFN_EXTENSIONDIFFERENT = 1024u;

    public const uint OFN_PATHMUSTEXIST = 2048u;

    public const uint OFN_FILEMUSTEXIST = 4096u;

    public const uint OFN_CREATEPROMPT = 8192u;

    public const uint OFN_SHAREAWARE = 16384u;

    public const uint OFN_NOREADONLYRETURN = 32768u;

    public const uint OFN_NOTESTFILECREATE = 65536u;

    public const uint OFN_NONETWORKBUTTON = 131072u;

    public const uint OFN_NOLONGNAMES = 262144u;

    public const uint OFN_EXPLORER = 524288u;

    public const uint OFN_NODEREFERENCELINKS = 1048576u;

    public const uint OFN_LONGNAMES = 2097152u;

    public bool GetOpenFileName(void* windowHandle, const List<Pair<string, string>>& descriptionFilterPairs, const string& initialDirectory, const string& defaultFilePath, const string& defaultExtension, uint flags, string& currentDirectory, List<string>& fileNames)
    {
        long filterBufferSize = 0;
        for (const Pair<string, string>& descriptionFilterPair : descriptionFilterPairs)
        {
            wstring description = ToUtf16(descriptionFilterPair.first);
            wstring filter = ToUtf16(descriptionFilterPair.second);
            filterBufferSize = filterBufferSize + description.Length() + 1 + filter.Length() + 1;
        }
        filterBufferSize = filterBufferSize + 1 + 1;
        UniquePtr<wchar> filterBuffer = cast<wchar*>(MemAlloc(sizeof(wchar) * filterBufferSize));
        wchar* filterBufferPtr = filterBuffer.Get();
        for (const Pair<string, string>& descriptionFilterPair : descriptionFilterPairs)
        {
            wstring description = ToUtf16(descriptionFilterPair.first);
            long descLen = StrCopy(filterBufferPtr, description.Chars(), description.Length());
            filterBufferPtr = filterBufferPtr + descLen + 1;
            wstring filter = ToUtf16(descriptionFilterPair.second);
            long filterLen = StrCopy(filterBufferPtr, filter.Chars(), filter.Length());
            filterBufferPtr = filterBufferPtr + filterLen + 1;
        }
        *filterBufferPtr++ = '\0';
        *filterBufferPtr++ = '\0';
        long fileNameBufferSize = 16 * 1024;
        UniquePtr<wchar> fileNameBuffer = cast<wchar*>(MemAlloc(sizeof(wchar) * fileNameBufferSize));
        wstring defFilePath = ToUtf16(defaultFilePath);
        if (defaultFilePath.IsEmpty())
        {
            *fileNameBuffer.Get() = '\0';
        }
        else
        {
            StrCopy(fileNameBuffer.Get(), defFilePath.Chars(), defFilePath.Length());
        }
        wstring initialDir = ToUtf16(initialDirectory);
        wstring defExt = ToUtf16(defaultExtension);
        bool success = WinGetOpenFileName(windowHandle, filterBuffer.Get(), initialDir.Chars(), fileNameBuffer.Get(), cast<uint>(fileNameBufferSize), flags, defExt.Chars());
        if (success)
        {
            long firstPathLength = StrLen(fileNameBuffer.Get());
            string firstPath = ToUtf8(wstring(fileNameBuffer.Get(), firstPathLength));
            if ((flags & OFN_ALLOWMULTISELECT) == 0)
            {
                currentDirectory = Path.GetDirectoryName(firstPath);
                fileNames.Add(Path.GetFileName(firstPath));
            }
            else
            {
                currentDirectory = firstPath;
                long pathStart = firstPathLength + 1;
                wchar* wpath = fileNameBuffer.Get() + pathStart;
                while (*wpath != '\0')
                {
                    long pathLength = StrLen(wpath);
                    string path = ToUtf8(wstring(wpath, pathLength));
                    fileNames.Add(path);
                    wpath = wpath + pathLength + 1;
                }
            }
            return true;
        }
        else
        {
            uint errorCode = WinCommDlgExtendedError();
            if (errorCode == 0u)
            {
                return false;
            }
            else
            {
                ThrowCommonDialogError(errorCode);
            }
        }
        return false;
    }

    public bool GetSaveFileName(void* windowHandle, const List<Pair<string, string>>& descriptionFilterPairs, const string& initialDirectory, const string& defaultFilePath, const string& defaultExtension, uint flags, string& currentDirectory, string& filePath)
    {
        long filterBufferSize = 0;
        for (const Pair<string, string>& descriptionFilterPair : descriptionFilterPairs)
        {
            wstring description = ToUtf16(descriptionFilterPair.first);
            wstring filter = ToUtf16(descriptionFilterPair.second);
            filterBufferSize = filterBufferSize + description.Length() + 1 + filter.Length() + 1;
        }
        filterBufferSize = filterBufferSize + 1 + 1;
        UniquePtr<wchar> filterBuffer = cast<wchar*>(MemAlloc(sizeof(wchar) * filterBufferSize));
        wchar* filterBufferPtr = filterBuffer.Get();
        for (const Pair<string, string>& descriptionFilterPair : descriptionFilterPairs)
        {
            wstring description = ToUtf16(descriptionFilterPair.first);
            long descLen = StrCopy(filterBufferPtr, description.Chars(), description.Length());
            filterBufferPtr = filterBufferPtr + descLen + 1;
            wstring filter = ToUtf16(descriptionFilterPair.second);
            long filterLen = StrCopy(filterBufferPtr, filter.Chars(), filter.Length());
            filterBufferPtr = filterBufferPtr + filterLen + 1;
        }
        *filterBufferPtr++ = '\0';
        *filterBufferPtr++ = '\0';
        long fileNameBufferSize = 1024;
        UniquePtr<wchar> fileNameBuffer = cast<wchar*>(MemAlloc(sizeof(wchar) * fileNameBufferSize));
        wstring defFilePath = ToUtf16(defaultFilePath);
        if (defaultFilePath.IsEmpty())
        {
            *fileNameBuffer.Get() = '\0';
        }
        else
        {
            StrCopy(fileNameBuffer.Get(), defFilePath.Chars(), defFilePath.Length());
        }
        wstring initialDir = ToUtf16(initialDirectory);
        wstring defExt = ToUtf16(defaultExtension);
        bool success = WinGetSaveFileName(windowHandle, filterBuffer.Get(), initialDir.Chars(), fileNameBuffer.Get(), cast<uint>(fileNameBufferSize), flags, defExt.Chars());
        if (success)
        {
            long firstPathLength = StrLen(fileNameBuffer.Get());
            filePath = ToUtf8(wstring(fileNameBuffer.Get(), firstPathLength));
            return true;
        }
        else
        {
            uint errorCode = WinCommDlgExtendedError();
            if (errorCode == 0u)
            {
                return false;
            }
            else
            {
                ThrowCommonDialogError(errorCode);
            }
        }
        return false;
    }

    public void* LoadImage(const char* name, uint type, int cx, int cy)
    {
        void* result = WinLoadImage(name, type, cx, cy);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return result;
    }

    public void* LoadCursor(const char* name)
    {
        void* result = WinLoadCursor(name);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return result;
    }

    public void* LoadIcon(const char* name)
    {
        void* result = WinLoadIcon(name);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return result;
    }

    public void* LoadBitmap(const char* name)
    {
        void* result = WinLoadBitmap(name);
        if (result == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return result;
    }

    public int GetSystemMetrics(int index)
    {
        int result = WinGetSystemMetrics(index);
        if (result == 0)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return result;
    }

    public void* GetTopWindow(void* windowHandle)
    {
        return WinGetTopWindow(windowHandle);
    }

    public void BringWindowToTop(void* windowHandle)
    {
        bool succeeded = WinBringWindowToTop(windowHandle);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public enum WindowPos : int
    {
        top = 0, bottom = 1, topmost = -1, noTopmost = -2
    }

    public nothrow void* WindowPosHandle(WindowPos pos)
    {
        return cast<void*>(cast<ulong>(cast<int>(pos)));
    }

    public enum SetWindowPosFlags : uint
    {
        SWP_ASYNCWINDOWPOS = 16384u, SWP_DEFERERASE = 8192u, SWP_DRAWFRAME = 32u, SWP_FRAMECHANGED = 32u, SWP_HIDEWINDOW = 128u, SWP_NOACTIVATE = 16u, SWP_NOCOPYBITS = 256u, SWP_NOMOVE = 2u, SWP_NOOWNERZORDER = 512u, SWP_NOREDRAW = 8u, SWP_NOREPOSITION = 512u, SWP_NOSENDCHANGING = 1024u, SWP_NOSIZE = 1u, SWP_NOZORDER = 4u, SWP_SHOWWINDOW = 64u
    }

    public void SetWindowPos(void* windowHandle, void* insertAfterWindowHandle, int x, int y, int cx, int cy, SetWindowPosFlags flags)
    {
        bool succeeded = WinSetWindowPos(windowHandle, insertAfterWindowHandle, x, y, cx, cy, cast<uint>(flags));
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public enum ClassLongIndex : int
    {
        GCL_CBCLSEXTRA = -20, GCL_CBWNDEXTRA = -18, GCL_HBRBACKGROUND = -10, GCL_HCURSOR = -12, GCL_HICON = -14, GCL_HICONSM = -34, GCL_HMODULE = -16, GCL_MENUNAME = -8, GCL_STYLE = -26, GCL_WNDPROC = -24
    }

    public long GetClassLong(void* windowHandle, ClassLongIndex index)
    {
        long value = WinGetClassLong(windowHandle, cast<int>(index));
        if (value == 0)
        {
            ulong errorCode = WinGetLastError();
            if (errorCode != 0u)
            {
                throw WindowsAPIException(errorCode);
            }
        }
        return value;
    }

    public void SetClassLong(void* windowHandle, ClassLongIndex index, long newValue)
    {
        long value = WinSetClassLong(windowHandle, cast<int>(index), newValue);
        if (value == 0)
        {
            ulong errorCode = WinGetLastError();
            if (errorCode != 0u)
            {
                throw WindowsAPIException(errorCode);
            }
        }
    }

    public enum WindowLongIndex : int
    {
        GWL_EXSTYLE = -20, GWLP_HINSTANCE = -6, GWLP_ID = -12, GWL_STYLE = -16, GWLP_USERDATA = -21, GWLP_WNDPROC = -4
    }

    public long GetWindowLong(void* windowHandle, WindowLongIndex index)
    {
        long value = WinGetWindowLong(windowHandle, cast<int>(index));
        if (value == 0)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return value;
    }

    public void SetWindowLong(void* windowHandle, WindowLongIndex index, long newValue)
    {
        bool succeeded = WinSetWindowLong(windowHandle, cast<int>(index), newValue);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void ScrollWindow(void* windowHandle, int xAmount, int yAmount, const Rect* clientRect, const Rect* clipRect)
    {
        int clientLocX = 0;
        int clientLocY = 0;
        int clientSizeW = 0;
        int clientSizeH = 0;
        if (clientRect != null)
        {
            clientLocX = clientRect->location.x;
            clientLocY = clientRect->location.y;
            clientSizeW = clientRect->size.w;
            clientSizeH = clientRect->size.h;
        }
        int clipLocX = 0;
        int clipLocY = 0;
        int clipSizeW = 0;
        int clipSizeH = 0;
        if (clipRect != null)
        {
            clipLocX = clipRect->location.x;
            clipLocY = clipRect->location.y;
            clipSizeW = clipRect->size.w;
            clipSizeH = clipRect->size.h;
        }
        bool succeeded = WinScrollWindow(windowHandle, xAmount, yAmount, clientLocX, clientLocY, clientSizeW, clientSizeH, clipLocX, clipLocY, clipSizeW, clipSizeH);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void ScrollWindowEx(void* windowHandle, int dx, int dy, const Rect* clientRect, const Rect* clipRect, const Rect& updateRect)
    {
        int clientLocX = 0;
        int clientLocY = 0;
        int clientSizeW = 0;
        int clientSizeH = 0;
        if (clientRect != null)
        {
            clientLocX = clientRect->location.x;
            clientLocY = clientRect->location.y;
            clientSizeW = clientRect->size.w;
            clientSizeH = clientRect->size.h;
        }
        int clipLocX = 0;
        int clipLocY = 0;
        int clipSizeW = 0;
        int clipSizeH = 0;
        if (clipRect != null)
        {
            clipLocX = clipRect->location.x;
            clipLocY = clipRect->location.y;
            clipSizeW = clipRect->size.w;
            clipSizeH = clipRect->size.h;
        }
        int x1 = updateRect.location.x;
        int y1 = updateRect.location.y;
        int x2 = updateRect.location.x + updateRect.size.w;
        int y2 = updateRect.location.y + updateRect.size.h;
        bool succeeded = WinScrollWindowEx(windowHandle, dx, dy, clientLocX, clientLocY, clientSizeW, clientSizeH, clipLocX, clipLocY, clipSizeW, clipSizeH, x1, y1, x2, y2);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public enum ScrollBar : int
    {
        SB_BOTH = 3, SB_CTL = 2, SB_HORZ = 0, SB_VERT = 1
    }

    public void GetScrollInfo(void* windowHandle, ScrollBar scrollBar, uint& nPage, int& nPos, int& nMin, int& nMax, int& nTrackPos)
    {
        bool succeeded = WinGetScrollInfo(windowHandle, cast<int>(scrollBar), nPage, nPos, nMin, nMax, nTrackPos);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public enum ScrollInfoMask : uint
    {
        SIF_DISABLENOSCROLL = 8u, SIF_PAGE = 2u, SIF_POS = 4u, SIF_RANGE = 1u
    }

    public int SetScrollInfo(void* windowHandle, ScrollBar scrollBar, ScrollInfoMask mask, bool redraw, uint nPage, int nPos, int nMin, int nMax)
    {
        return WinSetScrollInfo(windowHandle, cast<int>(scrollBar), cast<uint>(mask), redraw, nPage, nPos, nMin, nMax);
    }

    public void ShowScrollBar(void* windowHandle, ScrollBar scrollBar, bool show)
    {
        bool succeeded = WinShowScrollBar(windowHandle, cast<int>(scrollBar), show);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void CreateCaret(void* windowHandle, void* bitmapHandle, int width, int height)
    {
        bool succeeded = WinCreateCaret(windowHandle, bitmapHandle, width, height);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void DestroyCaret()
    {
        bool succeeded = WinDestroyCaret();
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void ShowCaret(void* windowHandle)
    {
        bool succeeded = WinShowCaret(windowHandle);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void HideCaret(void* windowHandle)
    {
        bool succeeded = WinHideCaret(windowHandle);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public Point GetCaretPos()
    {
        Point caretPos;
        bool succeeded = WinGetCaretPos(caretPos.x, caretPos.y);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return caretPos;
    }

    public void SetCaretPos(const Point& caretPos)
    {
        bool succeeded = WinSetCaretPos(caretPos.x, caretPos.y);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void SetTimer(void* windowHandle, uint timerId, uint elapseMs)
    {
        bool succeeded = WinSetTimer(windowHandle, timerId, elapseMs);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void KillTimer(void* windowHandle, uint timerId)
    {
        bool succeeded = WinKillTimer(windowHandle, timerId);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public uint RegisterClipboardFormat(const char* formatName)
    {
        uint format = WinRegisterClipboardFormat(formatName);
        if (format == 0u)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return format;
    }

    public void OpenClipboard(void* windowHandle)
    {
        int maxWait = 100;
        for (int i = 0; i < 5; ++i)
        {
            bool succeeded = WinOpenClipboard(windowHandle);
            if (succeeded)
            {
                return;
            }
            else if (i < 4)
            {
                Sleep(Duration.FromMilliseconds(Random() % maxWait));
                maxWait = maxWait * 2;
            }
        }
        throw WindowsAPIException(WinGetLastError());
    }

    public void CloseClipboard()
    {
        bool succeeded = WinCloseClipboard();
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void EmptyClipboard()
    {
        bool succeeded = WinEmptyClipboard();
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void* SetClipboardData(uint format, void* mem)
    {
        void* retval = WinSetClipboardData(format, mem);
        if (retval == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return retval;
    }

    public void* GetClipboardData(uint format)
    {
        void* retval = WinGetClipboardData(format);
        if (retval == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return retval;
    }

    public bool IsClipboardFormatAvailable(uint format)
    {
        return WinIsClipboardFormatAvailable(format);
    }

    public void AddClipboardFormatListener(void* windowHandle)
    {
        bool succeeded = WinAddClipboardFormatListener(windowHandle);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public void RemoveClipboardFormatListener(void* windowHandle)
    {
        bool succeeded = WinRemoveClipboardFormatListener(windowHandle);
        if (!succeeded)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public enum GlobalAllocFlags : uint
    {
        GMEM_FIXED = 0u, GHND = 66u, GMEM_MOVEABLE = 2u, GMEM_ZEROINIT = 64u, GPTR = 64u
    }

    public void* GlobalAlloc(GlobalAllocFlags flags, ulong size)
    {
        void* retval = WinGlobalAlloc(cast<uint>(flags), size);
        if (retval == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return retval;
    }

    public void* GlobalLock(void* memHandle)
    {
        void* retval = WinGlobalLock(memHandle);
        if (retval == null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return retval;
    }

    public void GlobalUnlock(void* memHandle)
    {
        bool retval = WinGlobalUnlock(memHandle);
        if (!retval)
        {
            ulong error = WinGetLastError();
            if (error != 0u)
            {
                throw WindowsAPIException(error);
            }
        }
    }

    public void GlobalFree(void* memHandle)
    {
        void* retval = WinGlobalFree(memHandle);
        if (retval != null)
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public ulong GlobalSize(void* memHandle)
    {
        ulong size = WinGlobalSize(memHandle);
        if (size == 0u)
        {
            throw WindowsAPIException(WinGetLastError());
        }
        return size;
    }

    public void GetCursorPos(int& x, int& y)
    {
        if (!WinGetCursorPos(x, y))
        {
            throw WindowsAPIException(WinGetLastError());
        }
    }

    public string GetFolder(void* windowHandle, const string& defaultDirectory)
    {
        wstring defaultDir = ToUtf16(defaultDirectory);
        long folderNameBufferSize = 1024;
        UniquePtr<wchar> folderNameBuffer = cast<wchar*>(MemAlloc(sizeof(wchar) * folderNameBufferSize));
        bool success = WinGetFolder(windowHandle, defaultDir.Chars(), folderNameBuffer.Get(), cast<uint>(folderNameBufferSize));
        if (success)
        {
            wstring folderName(folderNameBuffer.Get());
            return ToUtf8(folderName);
        }
        else
        {
            return string();
        }
    }

} // namespace System.Windows.API
