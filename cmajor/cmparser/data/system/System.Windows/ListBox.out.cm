using System;

namespace System.Windows
{
    public class delegate void SelectedIndexChangedEventHandler();

    public enum ListBoxStyle : long
    {
        LBS_COMBOBOX = 32768u, LBS_DISABLENOSCROLL = 4096, LBS_EXTENDEDSEL = 2048, LBS_HASSTRINGS = 64, LBS_MULTICOLUMN = 512, LBS_MULTIPLESEL = 8, LBS_NODATA = 8192, LBS_NOINTEGRALHEIGHT = 256, LBS_NOREDRAW = 4, LBS_NOSEL = 16384, LBS_NOTIFY = 1, LBS_OWNERDRAWFIXED = 16, LBS_OWNERDRAWVARIABLE = 32, LBS_SORT = 2, LBS_STANDARD = LBS_NOTIFY | LBS_SORT | WindowStyle.WS_VSCROLL | WindowStyle.WS_BORDER, LBS_USETABSTOPS = 128u, LBS_WANTKEYBOARDINPUT = 1024
    }

    public nothrow ControlCreateParams& ListBoxControlCreateParams(ControlCreateParams& controlCreateParams, ListBoxStyle listBoxStyle)
    {
        return controlCreateParams.SetWindowClassName("LISTBOX").SetWindowClassBackgroundColor(SystemColor.COLOR_WINDOW).SetBackgroundColor(Color.White()).SetWindowStyle(cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | WindowStyle.WS_VSCROLL | listBoxStyle));
    }

    public nothrow ControlCreateParams& ListBoxControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return ListBoxControlCreateParams(controlCreateParams, cast<ListBoxStyle>(ListBoxStyle.LBS_NOTIFY | ListBoxStyle.LBS_HASSTRINGS));
    }

    public class ListBoxCreateParams
    {
        public nothrow ListBoxCreateParams(ControlCreateParams& controlCreateParams_) :
            controlCreateParams(controlCreateParams_)
        {
        }
        public nothrow ListBoxCreateParams& Defaults()
        {
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
    }

    public class ListBox : Control
    {
        public ListBox(ListBoxStyle listBoxStyle, const Color& backgroundColor, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("LISTBOX", DefaultWindowClassStyle(), cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP | listBoxStyle), DefaultExtendedWindowStyle(), backgroundColor, text, location, size, dock, anchors)
        {
        }
        public ListBox(const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(cast<ListBoxStyle>(ListBoxStyle.LBS_NOTIFY | ListBoxStyle.LBS_HASSTRINGS | WindowStyle.WS_VSCROLL), Color.White(), string(), location, size, dock, anchors)
        {
        }
        public ListBox(ListBoxCreateParams& createParams) :
            base(createParams.controlCreateParams)
        {
        }
        public void AddItem(const string& item)
        {
            if (Handle() != null)
            {
                wstring wstr(ToUtf16(item));
                WinSendMessage(Handle(), LB_ADDSTRING, 0u, cast<long>(cast<ulong>(cast<void*>(wstr.Chars()))));
            }
        }
        public void DeleteItem(int itemIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_DELETESTRING, cast<uint>(itemIndex), 0);
            }
        }
        public void InsertItem(int index, const string& item)
        {
            if (Handle() != null)
            {
                wstring wstr(ToUtf16(item));
                WinSendMessage(Handle(), LB_INSERTSTRING, cast<uint>(index), cast<long>(cast<ulong>(cast<void*>(wstr.Chars()))));
            }
        }
        public string GetItem(int index)
        {
            if (Handle() != null)
            {
                int size = cast<int>(WinSendMessage(Handle(), LB_GETTEXTLEN, cast<uint>(index), 0));
                UniquePtr<wchar> buf(cast<wchar*>(MemAlloc(size * sizeof(wchar))));
                WinSendMessage(Handle(), LB_GETTEXT, cast<uint>(index), cast<long>(cast<ulong>(cast<void*>(buf.Get()))));
                return ToUtf8(buf.Get());
            }
            return string();
        }
        public void SetItem(int index, const string& item)
        {
            DeleteItem(index);
            InsertItem(index, item);
        }
        public int GetItemCount() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETCOUNT, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public int GetTopIndex() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETTOPINDEX, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public void SetTopIndex(int topIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_SETTOPINDEX, cast<uint>(topIndex), 0);
            }
        }
        public int GetSelectedIndex() const
        {
            if (Handle() != null)
            {
                return cast<int>(WinSendMessage(Handle(), LB_GETCURSEL, 0u, 0));
            }
            else
            {
                return -1;
            }
        }
        public void SetSelectedIndex(int selectedIndex)
        {
            if (Handle() != null)
            {
                WinSendMessage(Handle(), LB_SETCURSEL, cast<uint>(selectedIndex), 0);
            }
        }
        protected override void OnCreated()
        {
            base->OnCreated();
            Graphics graphics = Graphics.FromWindowHandle(Handle());
            const FontHandle& fontHandle = GetFontHandle(graphics);
            if (!fontHandle.IsNull())
            {
                SendSetFontMessage(fontHandle);
            }
        }
        internal void SelectedIndexChangedInternal()
        {
            OnSelectedIndexChanged();
        }
        protected virtual void OnSelectedIndexChanged()
        {
            selectedIndexChangedEvent.Fire();
        }
        public nothrow Event<SelectedIndexChangedEventHandler>& SelectedIndexChangedEvent() const
        {
            return selectedIndexChangedEvent;
        }
        private Event<SelectedIndexChangedEventHandler> selectedIndexChangedEvent;
    }

} // namespace System.Windows
