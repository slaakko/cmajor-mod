using System;
using System.Collections;
using System.Windows;

namespace spring
{
    public concept ElementPredicate<T>
    {
        typename T.ElementType;
        bool operator()(T.ElementType*);
    }

    public concept Cloneable<T>
    {
        T* Clone();
    }

    public class IndexList<T>
    {
        typedef List<UniquePtr<T>>.Iterator Iterator;
        typedef List<UniquePtr<T>>.ConstIterator ConstIterator;
        suppress IndexList(const IndexList&);
        suppress void operator=(const IndexList&);
        public inline nothrow Iterator Begin()
        {
            return elements.Begin();
        }
        public inline nothrow ConstIterator CBegin() const
        {
            return elements.CBegin();
        }
        public inline nothrow Iterator End()
        {
            return elements.End();
        }
        public inline nothrow ConstIterator CEnd() const
        {
            return elements.CEnd();
        }
        public inline nothrow const List<UniquePtr<T>>& Elements() const
        {
            return elements;
        }
        public IndexList<T> Clone()
        {
            IndexList<T> clone;
            for (UniquePtr<T>& element : elements)
            {
                clone.Add(cast<T*>(element->Clone()));
            }
            return clone;
        }
        public inline nothrow T* Get(int index) const
        {
            return elements[index].Get();
        }
        public inline nothrow void Set(int index, T* element)
        {
            elements[index].Reset(element);
        }
        public inline nothrow void Add(T* element)
        {
            elements.Add(UniquePtr<T>(element));
        }
        public inline nothrow T* Remove(int index)
        {
            UniquePtr<T> element = elements.Remove(elements.Begin() + index);
            return element.Release();
        }
        public inline nothrow void Insert(int index, T* element)
        {
            if (index < elements.Count())
            {
                elements.Insert(elements.Begin() + index, UniquePtr<T>(element));
            }
            else
            {
                elements.Add(UniquePtr<T>(element));
            }
        }
        public inline nothrow T* Release(int index)
        {
            return elements[index].Release();
        }
        public void Clear()
        {
            elements.Clear();
        }
        public inline nothrow bool IsEmpty() const
        {
            return elements.IsEmpty();
        }
        public inline nothrow int Count() const
        {
            return cast<int>(elements.Count());
        }
        public void MoveUp(int index)
        {
            if (index <= 0) throw Exception("invalid index");
            T* element = Remove(index);
            --index;
            Insert(index, element);
        }
        public void MoveDown(int index)
        {
            if (index >= Count()) throw Exception("invalid index");
            T* element = Remove(index);
            ++index;
            if (index == Count())
            {
                Add(element);
            }
            else
            {
                Insert(index, element);
            }
        }
        private List<UniquePtr<T>> elements;
    }

    public nothrow int IndexOf<T, P>(const IndexList<T>& list, const P& pred) where P is ElementPredicate
    {
        int n = list.Count();
        for (int i = 0; i < n; ++i)
        {
            T* element = list.Get(i);
            if (pred(element))
            {
                return i;
            }
        }
        return -1;
    }

} // namespace spring
