using System;
using System.Threading;

namespace cmsx.machine
{
    public const ulong trapXMask = 16711680u;

    public const byte trapXShift = 16u;

    public const ulong trapYMask = 65280u;

    public const byte trapYShift = 8u;

    public const ulong trapZMask = 255u;

    public const byte trapZShift = 0u;

    public const byte regAX = 255u;

    public const byte regBX = 254u;

    public const byte regCX = 253u;

    public const byte regDX = 252u;

    public const byte regEX = 251u;

    public const byte regSP = 250u;

    public const byte regFP = 249u;

    public const byte regIX = 248u;

    public const byte firstGlobalReg = 248u;

    public class Registers
    {
        public const byte rA = 0u;
        public const byte rB = 1u;
        public const byte rC = 2u;
        public const byte rD = 3u;
        public const byte rE = 4u;
        public const byte rF = 5u;
        public const byte rG = 6u;
        public const byte rH = 7u;
        public const byte rI = 8u;
        public const byte rJ = 9u;
        public const byte rK = 10u;
        public const byte rL = 11u;
        public const byte rM = 12u;
        public const byte rN = 13u;
        public const byte rO = 14u;
        public const byte rP = 15u;
        public const byte rQ = 16u;
        public const byte rR = 17u;
        public const byte rS = 18u;
        public const byte rT = 19u;
        public const byte rU = 20u;
        public const byte rV = 21u;
        public const byte rW = 22u;
        public const byte rX = 23u;
        public const byte rY = 24u;
        public const byte rZ = 25u;
        public const byte rBB = 26u;
        public const byte rTT = 27u;
        public const byte rWW = 28u;
        public const byte rXX = 29u;
        public const byte rYY = 30u;
        public const byte rZZ = 31u;
        public nothrow Registers()
        {
            specialRegMap[rA] = "rA";
            specialRegMap[rB] = "rB";
            specialRegMap[rC] = "rC";
            specialRegMap[rD] = "rD";
            specialRegMap[rE] = "rE";
            specialRegMap[rF] = "rF";
            specialRegMap[rG] = "rG";
            specialRegMap[rH] = "rH";
            specialRegMap[rI] = "rI";
            specialRegMap[rJ] = "rJ";
            specialRegMap[rK] = "rK";
            specialRegMap[rL] = "rL";
            specialRegMap[rM] = "rM";
            specialRegMap[rN] = "rN";
            specialRegMap[rO] = "rO";
            specialRegMap[rP] = "rP";
            specialRegMap[rQ] = "rQ";
            specialRegMap[rR] = "rR";
            specialRegMap[rS] = "rS";
            specialRegMap[rT] = "rT";
            specialRegMap[rU] = "rU";
            specialRegMap[rV] = "rV";
            specialRegMap[rW] = "rW";
            specialRegMap[rX] = "rX";
            specialRegMap[rY] = "rY";
            specialRegMap[rZ] = "rZ";
            specialRegMap[rBB] = "rBB";
            specialRegMap[rTT] = "rTT";
            specialRegMap[rWW] = "rWW";
            specialRegMap[rXX] = "rXX";
            specialRegMap[rYY] = "rYY";
            specialRegMap[rZZ] = "rZZ";
        }
        public ulong Get(byte regNum)
        {
            ulong rg = GetSpecial(rG);
            if (regNum >= rg)
            {
                return globalRegs[regNum];
            }
            else
            {
                ulong rl = GetSpecial(rL);
                if (regNum >= rl)
                {
                    SetSpecial(rL, regNum + 1u);
                }
                return localRegs[regNum];
            }
        }
        public void Set(byte regNum, ulong value)
        {
            ulong rg = GetSpecial(rG);
            if (regNum >= rg)
            {
                globalRegs[regNum] = value;
            }
            else
            {
                ulong rl = GetSpecial(rL);
                if (regNum >= rl)
                {
                    SetSpecial(rL, regNum + 1u);
                }
                localRegs[regNum] = value;
            }
        }
        public ulong GetSpecial(byte regNum)
        {
            #assert (regNum >= 0u && regNum < 32u);
            return globalRegs[regNum];
        }
        public void SetSpecial(byte regNum, ulong value)
        {
            #assert (regNum >= 0u && regNum < 32u);
            globalRegs[regNum] = value;
        }
        public string GetSpecialRegName(byte specialReg) const
        {
            Map<byte, string>.ConstIterator it = specialRegMap.CFind(specialReg);
            if (it != specialRegMap.CEnd())
            {
                return it->second;
            }
            else
            {
                return string();
            }
        }
        public void SetInterrupt(ulong interruptBit)
        {
            LockGuard<Mutex> lock(interruptMutex);
            ulong rq = GetSpecial(Registers.rQ);
            rq = rq | interruptBit;
            SetSpecial(Registers.rQ, rq);
        }
        public void ResetInterrupt(ulong interruptBit)
        {
            LockGuard<Mutex> lock(interruptMutex);
            ulong rq = GetSpecial(Registers.rQ);
            rq = rq & ~interruptBit;
            SetSpecial(Registers.rQ, rq);
        }
        public ulong GetInterruptBits()
        {
            LockGuard<Mutex> lock(interruptMutex);
            ulong rq = GetSpecial(Registers.rQ);
            ulong rk = GetSpecial(Registers.rK);
            SetSpecial(Registers.rQ, rq & ~rk);
            return rq & rk;
        }
        public nothrow Mutex& GetInterruptMutex()
        {
            return interruptMutex;
        }
        public inline nothrow ulong GetPC() const
        {
            return pc;
        }
        public inline nothrow void SetPC(ulong pc_)
        {
            pc = pc_;
        }
        public nothrow string ToString() const
        {
            string s;
            s.Append("pc=").Append(ToHexString(pc)).Append("\n");
            s.Append("sp=").Append(ToHexString(Get(regSP))).Append("\n");
            s.Append("fp=").Append(ToHexString(Get(regFP))).Append("\n");
            s.Append("ix=").Append(ToHexString(Get(regIX))).Append("\n");
            s.Append("ax=").Append(ToHexString(Get(regAX))).Append("\n");
            s.Append("bx=").Append(ToHexString(Get(regBX))).Append("\n");
            s.Append("cx=").Append(ToHexString(Get(regCX))).Append("\n");
            s.Append("dx=").Append(ToHexString(Get(regDX))).Append("\n");
            s.Append("ex=").Append(ToHexString(Get(regEX))).Append("\n");
            return s;
        }
        private ulong[256] localRegs;
        private ulong[256] globalRegs;
        private ulong pc;
        private Map<byte, string> specialRegMap;
        private Mutex interruptMutex;
    }

} // namespace cmsx.machine
