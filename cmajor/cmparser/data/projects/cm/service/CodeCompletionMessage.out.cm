using System;
using System.Collections;
using System.Concepts;
using System.Xml.Serialization;

namespace Cm.Service.CodeCompletion
{
    [xml="true"]
    public abstract class CodeCompletionRequest
    {
        public nothrow CodeCompletionRequest() :
            created(Now()), received()
        {
        }
        public virtual default ~CodeCompletionRequest();
        public abstract void Accept(Visitor& visitor);
        public TimePoint created;
        public TimePoint received;
    }

    [xml="true"]
    public abstract class CodeCompletionReply
    {
        public nothrow CodeCompletionReply() :
            requestCreated(), requestReceived(), created(Now())
        {
        }
        public virtual default ~CodeCompletionReply();
        public TimePoint requestCreated;
        public TimePoint requestReceived;
        public TimePoint created;
    }

    [xml="true"]
    public class LoadEditModuleRequest : CodeCompletionRequest
    {
        public nothrow LoadEditModuleRequest() :
            base(), projectFilePath(), backend(), config()
        {
        }
        public nothrow LoadEditModuleRequest(const string& projectFilePath_, const string& backend_, const string& config_) :
            base(), projectFilePath(projectFilePath_), backend(backend_), config(config_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public string projectFilePath;
        public string backend;
        public string config;
    }

    [xml="true"]
    public class LoadEditModuleReply : CodeCompletionReply
    {
        public nothrow LoadEditModuleReply() :
            base(), key(), result(), startLoading(), startParsing(), endLoading()
        {
        }
        public string key;
        public string result;
        public string error;
        public TimePoint startLoading;
        public TimePoint startParsing;
        public TimePoint endLoading;
    }

    [xml="true"]
    public class ParseSourceRequest : CodeCompletionRequest
    {
        public nothrow ParseSourceRequest() :
            base(), projectFilePath(), backend(), config(), sourceFilePath(), sourceCode()
        {
        }
        public nothrow ParseSourceRequest(const string& projectFilePath_, const string& backend_, const string& config_, const string& sourceFilePath_) :
            base(), projectFilePath(projectFilePath_), backend(backend_), config(config_), sourceFilePath(sourceFilePath_), sourceCode()
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public string projectFilePath;
        public string backend;
        public string config;
        public string sourceFilePath;
        public ustring sourceCode;
    }

    [xml="true"]
    public class ParseSourceReply : CodeCompletionReply
    {
        public nothrow ParseSourceReply() :
            base(), ok(false), error(), errors(), synchronized(false), cursorContainer(), startParsing(), endParsing()
        {
        }
        public bool ok;
        public string error;
        public List<string> errors;
        public bool synchronized;
        public string cursorContainer;
        public TimePoint startParsing;
        public TimePoint endParsing;
    }

    [xml="true"]
    public class GetCCListRequest : CodeCompletionRequest
    {
        public nothrow GetCCListRequest() :
            base(), projectFilePath(), backend(), config(), sourceFilePath(), ccText()
        {
        }
        public nothrow GetCCListRequest(const string& projectFilePath_, const string& backend_, const string& config_, const string& sourceFilePath_, const string& ccText_) :
            base(), projectFilePath(projectFilePath_), backend(backend_), config(config_), sourceFilePath(sourceFilePath_), ccText(ccText_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public string projectFilePath;
        public string backend;
        public string config;
        public string sourceFilePath;
        public string ccText;
    }

    [xml="true"]
    public class GetCCListReply : CodeCompletionReply
    {
        public nothrow GetCCListReply() :
            ok(false), error(), ccList(), startGetCCList(), endGetCCList()
        {
        }
        public bool ok;
        public string error;
        public string ccList;
        public TimePoint startGetCCList;
        public TimePoint endGetCCList;
    }

    [xml="true"]
    public class GetOverloadListRequest : CodeCompletionRequest
    {
        public nothrow GetOverloadListRequest() :
            base(), projectFilePath(), backend(), config(), functionGroup()
        {
        }
        public nothrow GetOverloadListRequest(const string& projectFilePath_, const string& backend_, const string& config_, const string& functionGroup_) :
            base(), projectFilePath(projectFilePath_), backend(backend_), config(config_), functionGroup(functionGroup_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public string projectFilePath;
        public string backend;
        public string config;
        public string functionGroup;
    }

    [xml="true"]
    public class GetOverloadListReply : CodeCompletionReply
    {
        public nothrow GetOverloadListReply() :
            base(), ok(false), error(), overloadList(), startGetOverloadList(), endGetOverloadList()
        {
        }
        public bool ok;
        public string error;
        public string overloadList;
        public TimePoint startGetOverloadList;
        public TimePoint endGetOverloadList;
    }

    [xml="true"]
    public class ResetEditModuleCacheRequest : CodeCompletionRequest
    {
        public nothrow ResetEditModuleCacheRequest() :
            base()
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    [xml="true"]
    public class ResetEditModuleCacheReply : CodeCompletionReply
    {
        public nothrow ResetEditModuleCacheReply() :
            base()
        {
        }
        public string result;
        public string error;
    }

    [xml="true"]
    public class StopCCRequest : CodeCompletionRequest
    {
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    [xml="true"]
    public class StopCCReply : CodeCompletionReply
    {
    }

    [xml="true"]
    public class KeepAliveCCRequest
    {
    }

    [xml="true"]
    public class KeepAliveCCReply
    {
    }

    public class Visitor
    {
        public virtual default ~Visitor();
        public virtual void Visit(LoadEditModuleRequest& request)
        {
        }
        public virtual void Visit(ResetEditModuleCacheRequest& request)
        {
        }
        public virtual void Visit(ParseSourceRequest& request)
        {
        }
        public virtual void Visit(GetCCListRequest& request)
        {
        }
        public virtual void Visit(GetOverloadListRequest& request)
        {
        }
        public virtual void Visit(StopCCRequest& request)
        {
        }
    }

} // namespace Cm.Service.CodeCompletion
