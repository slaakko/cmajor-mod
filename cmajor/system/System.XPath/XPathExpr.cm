// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Xml;

namespace System.XPath
{
    public enum Operator
    {
        or_, and_, equal, notEqual, less, greater, lessOrEqual, greaterOrEqual, plus, minus, mul, div, mod, union, slash, slashSlash, parens
    }

    public string OperatorStr(Operator op)
    {
        switch (op)
        {
            case Operator.or_: return "or";
            case Operator.and_: return "and";
            case Operator.equal: return "equal";
            case Operator.notEqual: return "not-equal";
            case Operator.less: return "less";
            case Operator.greater: return "greater";
            case Operator.lessOrEqual: return "less-or-equal";
            case Operator.greaterOrEqual: return "greater-or-equal";
            case Operator.plus: return "plus";
            case Operator.minus: return "minus";
            case Operator.mul: return "mul";
            case Operator.div: return "div";
            case Operator.mod: return "mod";
            case Operator.union: return "union";
            case Operator.slash: return "slash";
            case Operator.slashSlash: return "slash-slash";
            case Operator.parens: return "parens";
        }
        return "<unknown operator>";
    }

    public enum ExprKind
    {
        unaryExpr, binaryExpr, root, filterExpr, locationStepExpr, variableReference, literal, numberExpr, functionCall
    }

    public string ExprKindStr(ExprKind kind)
    {
        switch (kind)
        {
            case ExprKind.unaryExpr:  return "unary-expr";
            case ExprKind.binaryExpr:  return "binary-expr";
            case ExprKind.root:  return "root";
            case ExprKind.filterExpr:  return "filter";
            case ExprKind.locationStepExpr:  return "location-step";
            case ExprKind.variableReference:  return "variable-reference";
            case ExprKind.literal:  return "literal";
            case ExprKind.numberExpr:  return "number";
            case ExprKind.functionCall:  return "function-call";
        }
        return "<unknown expression>";
    }

    public abstract class Expr
    {
        public Expr(ExprKind kind_) : kind(kind_)
        {
        }
        public default virtual ~Expr();
        public inline ExprKind Kind() const
        {
            return kind;
        }
        public inline const string& GetString() const
        {
            return str;
        }
        public void SetString(const string& str_)
        {
            str = str_;
        }
        public abstract Result<UniquePtr<Object>> Evaluate(Context& context);
        public virtual System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = System.Xml.MakeElement("expr");
            element->SetAttribute("kind", ExprKindStr(kind));
            return element;
        }
        private ExprKind kind;
        private string str;
    }

    public class UnaryExpr : Expr
    {
        public UnaryExpr(Operator op_, Expr* operand_) : base(ExprKind.unaryExpr), op(op_), operand(operand_)
        {
        }
        public inline Operator Op() const
        {
            return op;
        }
        public inline Expr* Operand() const
        {
            return operand.Get();
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context)
        {
            switch (op)
            {
                case Operator.minus:
                {
                    return EvaluateUnaryMinusExpr(operand.Get(), context);
                }
                case Operator.parens:
                {
                    return EvaluateParenExpr(operand.Get(), context);
                }
            }
            int errorId = AllocateError("unary minus or parenthesis operator expected");
            return Result<UniquePtr<Object>>(ErrorId(errorId));
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            element->SetAttribute("operator", OperatorStr(op));
            System.Xml.Element* child = operand->ToXmlElement();
            element->AppendChild(child);
            return element;
        }
        private Operator op;
        private UniquePtr<Expr> operand;
    }

    public class BinaryExpr : Expr
    {
        public BinaryExpr(Operator op_, Expr* left_, Expr* right_) : base(ExprKind.binaryExpr), op(op_), left(left_), right(right_)
        {
        }
        public inline Operator Op() const
        {
            return op;
        }
        public inline Expr* Left() const
        {
            return left.Get();
        }
        public inline Expr* Right() const
        {
            return right.Get();
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context)
        {
            switch (op)
            {
                case Operator.or_:
                {
                    return EvaluateOrExpr(left.Get(), right.Get(), context);
                }
                case Operator.and_:
                {
                    return EvaluateAndExpr(left.Get(), right.Get(), context);
                }
                case Operator.equal:
                case Operator.notEqual:
                case Operator.less:
                case Operator.greater:
                case Operator.lessOrEqual:
                case Operator.greaterOrEqual:
                {
                    return Compare(left.Get(), right.Get(), op, context);
                }
                case Operator.plus:
                case Operator.minus:
                case Operator.mul:
                case Operator.div:
                case Operator.mod:
                {
                    return EvaluateArithmeticOp(left.Get(), right.Get(), op, context);
                }
                case Operator.union:
                {
                    return EvaluateUnionExpr(left.Get(), right.Get(), context);
                }
                case Operator.slash:
                {
                    return EvaluateCombineStepExpr(left.Get(), right.Get(), context);
                }
            }
            int errorId = AllocateError("binary operator expected");
            return Result<UniquePtr<Object>>(ErrorId(errorId));
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            element->SetAttribute("operator", OperatorStr(op));
            System.Xml.Element* leftElement = left->ToXmlElement();
            element->AppendChild(leftElement);
            System.Xml.Element* rightElement = right->ToXmlElement();
            element->AppendChild(rightElement);
            return element;
        }
        private Operator op;
        private UniquePtr<Expr> left;
        private UniquePtr<Expr> right;
    }

    public class Root : Expr
    {
        public Root() : base(ExprKind.root)
        {
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context) const
        {
            UniquePtr<NodeSet> nodeSet = new NodeSet();
            if (context.Node()->IsDocumentNode())
            {
                nodeSet->Add(context.Node());
            }
            else if (context.Node()->OwnerDocument() != null)
            {
                nodeSet->Add(context.Node()->OwnerDocument());
            }
            return Result<UniquePtr<Object>>(UniquePtr<Object>(nodeSet.Release()));
        }
    }

    public class FilterExpr : Expr
    {
        public FilterExpr(Expr* subject_, Expr* predicate_) : base(ExprKind.filterExpr), subject(subject_), predicate(predicate_)
        {
        }
        public inline Expr* Subject() const
        {
            return subject.Get();
        }
        public inline Expr* Predicate() const
        {
            return predicate.Get();
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context) const
        {
            auto subjectResult = subject->Evaluate(context);
            if (subjectResult.Error())
            {
                return subjectResult;
            }
            UniquePtr<Object> subjectObject = Rvalue(subjectResult.Value());
            if (subjectObject->IsNodeSet())
            {
                UniquePtr<NodeSet> nodeSet = cast<NodeSet*>(subjectObject.Release());
                UniquePtr<NodeSet> filteredNodeSet = new NodeSet();
                int n = nodeSet->Count();
                for (int i = 0; i < n; ++i)
                {
                    System.Xml.Node* node = nodeSet->GetNode(i);
                    Context filterContext(node, i + 1, n);
                    auto result = predicate->Evaluate(filterContext);
                    if (result.Error())
                    {
                        return result;
                    }
                    Object* resultObject = result.Value().Get();
                    bool include = false;
                    if (resultObject->IsNumber())
                    {
                        Number* number = cast<Number*>(resultObject);
                        if (number->Value() == filterContext.Pos())
                        {
                            include = true;
                        }
                    }
                    else
                    {
                        auto booleanResult = ToBoolean(resultObject, filterContext);
                        if (booleanResult.Error())
                        {
                            return booleanResult;
                        }
                        auto booleanCastResult = BooleanCast(booleanResult.Value().Get());
                        if (booleanCastResult.Error())
                        {
                            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
                        }
                        Boolean* boolean = booleanCastResult.Value();
                        include = boolean->Value();
                    }
                    if (include)
                    {
                        filteredNodeSet->Add(node);
                    }
                }
                Swap(nodeSet, filteredNodeSet);
                return Result<UniquePtr<Object>>(UniquePtr<Object>(nodeSet.Release()));
            }
            else
            {
                int errorId = AllocateError("node-set expected");
                return Result<UniquePtr<Object>>(ErrorId(errorId));
            }
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            System.Xml.Element* subjectElement = subject->ToXmlElement();
            element->AppendChild(subjectElement);
            System.Xml.Element* predicateElement = predicate->ToXmlElement();
            element->AppendChild(predicateElement);
            return element;
        }
        private UniquePtr<Expr> subject;
        private UniquePtr<Expr> predicate;
    }

    public class LocationStepExpr : Expr
    {
        public LocationStepExpr(System.Xml.Axis axis_, NodeTest* nodeTest_) : base(ExprKind.locationStepExpr), axis(axis_), nodeTest(nodeTest_)
        {
        }
        public inline NodeTest* GetNodeTest() const
        {
            return nodeTest.Get();
        }
        public void AddPredicate(Expr* predicate)
        {
            predicates.Add(UniquePtr<Expr>(predicate));
        }
        public inline const List<UniquePtr<Expr>>& Predicates() const
        {
            return predicates;
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context) const
        {
            UniquePtr<NodeSet> nodeSet(new NodeSet());
            NodeSelectionOperation selectNodes(nodeTest.Get(), *nodeSet, axis);
            context.Node()->Walk(selectNodes, axis);
            for (const auto& predicate : predicates)
            {
                UniquePtr<NodeSet> filteredNodeSet(new NodeSet());
                int n = nodeSet->Count();
                for (int i = 0; i < n; ++i)
                {
                    System.Xml.Node* node = nodeSet->GetNode(i);
                    Context filterContext(node, i + 1, n);
                    auto predicateEvaluationResult = predicate->Evaluate(filterContext);
                    if (predicateEvaluationResult.Error())
                    {
                        return Result<UniquePtr<Object>>(ErrorId(predicateEvaluationResult.GetErrorId()));
                    }
                    bool include = false;
                    Object* predicateResult = predicateEvaluationResult.Value().Get();
                    if (predicateResult->IsNumber())
                    {
                        Number* number = cast<Number*>(predicateResult);
                        if (number->Value() == filterContext.Pos())
                        {
                            include = true;
                        }
                    }
                    else
                    {
                        auto booleanResult = ToBoolean(predicateResult, filterContext);
                        if (booleanResult.Error())
                        {
                            return booleanResult;
                        }
                        auto booleanCastResult = BooleanCast(booleanResult.Value().Get());
                        if (booleanCastResult.Error())
                        {
                            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
                        }
                        Boolean* boolean = booleanCastResult.Value();
                        include = boolean->Value();
                    }
                    if (include)
                    {
                        filteredNodeSet->Add(node);
                    }
                }
                Swap(nodeSet, filteredNodeSet);
            }
            return Result<UniquePtr<Object>>(UniquePtr<Object>(nodeSet.Release()));
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            element->SetAttribute("axis", System.Xml.AxisName(axis));
            element->AppendChild(nodeTest->ToXmlElement());
            System.Xml.Element* predicatesElement = System.Xml.MakeElement("predicates");
            for (const auto& predicate : predicates)
            {
                predicatesElement->AppendChild(predicate->ToXmlElement());
            }
            element->AppendChild(predicatesElement);
            return element;
        }
        private System.Xml.Axis axis;
        private UniquePtr<NodeTest> nodeTest;
        private List<UniquePtr<Expr>> predicates;
    }

    public class VariableReference : Expr
    {
        public VariableReference(const string& variableName_) : base(ExprKind.variableReference), variableName(variableName_)
        {
        }
        public inline const string& VariableName() const
        {
            return variableName;
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context) const
        {
            #assert(false); // todo: variable references not implemented
            return Result<UniquePtr<Object>>();
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            element->SetAttribute("variable-name", variableName);
            return element;
        }
        private string variableName;
    }

    public class Literal : Expr
    {
        public Literal(const string& value_) : base(ExprKind.literal), value(value_)
        {
        }
        public inline const string& Value() const
        {
            return value;
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context) const
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Str(value)));
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            element->SetAttribute("value", value);
            return element;
        }
        private string value;
    }

    public class NumberExpr : Expr
    {
        public NumberExpr(double value_) : base(ExprKind.numberExpr), value(value_)
        {
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context) const
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(value)));
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            element->SetAttribute("value", ToString(value));
            return element;
        }
        private double value;
    }

    public class FunctionCall : Expr
    {
        public FunctionCall(const string& functionName_) : base(ExprKind.functionCall), functionName(functionName_)
        {
        }
        public inline const string& FunctionName() const
        {
            return functionName;
        }
        public void AddArgument(Expr* argument)
        {
            arguments.Add(UniquePtr<Expr>(argument));
        }
        [nodiscard]
        public override Result<UniquePtr<Object>> Evaluate(Context& context) const
        {
            auto functionResult = GetFunction(functionName);
            if (functionResult.Error())
            {
                return Result<UniquePtr<Object>>(ErrorId(functionResult.GetErrorId()));
            }
            Function* function = functionResult.Value();
            List<UniquePtr<Object>> ownedArgs;
            List<Object*> args;
            for (const auto& arg : arguments)
            {
                auto argResult = arg->Evaluate(context);
                if (argResult.Error())
                {
                    return Result<UniquePtr<Object>>(ErrorId(argResult.GetErrorId()));
                }
                UniquePtr<Object> ownedArg = Rvalue(argResult.Value());
                args.Add(ownedArg.Get());
                ownedArgs.Add(Rvalue(ownedArg));
            }
            return function->Evaluate(context, args);
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = base->ToXmlElement();
            element->SetAttribute("function-name", functionName);
            System.Xml.Element* argumentsElement = System.Xml.MakeElement("arguments");
            for (const auto& arg : arguments)
            {
                argumentsElement->AppendChild(arg->ToXmlElement());
            }
            element->AppendChild(argumentsElement);
            return element;
        }
        private string functionName;
        private List<UniquePtr<Expr>> arguments;
    }

    public Expr* MakeSlashSlashExpr(Expr* left, Expr* right)
    {
        return new BinaryExpr(Operator.slash, left,
            new BinaryExpr(Operator.slash,
                new LocationStepExpr(System.Xml.Axis.descendantOrSelf, new NodeTest(NodeTestKind.anyNodeTest)),
                right));
    }
}
