// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Xml;

namespace System.XPath
{
    public class StringValueComputerVisitor : System.Xml.Visitor
    {
        public StringValueComputerVisitor() : stringValue()
        {
        }
        public override void Visit(System.Xml.Text& text)
        {
            stringValue.Append(text.Data());
        }
        public string GetStringValue()
        {
            return Rvalue(stringValue);
        }
        private string stringValue;
    }

    public string GetStringValue(System.Xml.ParentNode* node)
    {
        StringValueComputerVisitor visitor;
        node->Accept(visitor);
        return visitor.GetStringValue();
    }

    public inline string StringValue(System.Xml.AttributeNode* attributeNode)
    {
        return attributeNode->Value();
    }

    public inline string StringValue(System.Xml.Document* documentNode)
    {
        return GetStringValue(documentNode);
    }

    public inline string StringValue(System.Xml.Element* elementNode)
    {
        return GetStringValue(elementNode);
    }

    public inline string StringValue(System.Xml.ProcessingInstruction* piNode)
    {
        return piNode->Data();
    }

    public inline string StringValue(System.Xml.Text* textNode)
    {
        return textNode->Data();
    }

    public inline string StringValue(System.Xml.CDataSection* cdataSectionNode)
    {
        return cdataSectionNode->Data();
    }

    public inline string StringValue(System.Xml.Comment* commentNode)
    {
        return commentNode->Data();
    }

    public string StringValue(System.Xml.Node* node)
    {
        switch (node->Kind())
        {
            case System.Xml.NodeKind.attributeNode:
            {
                System.Xml.AttributeNode* attributeNode = cast<System.Xml.AttributeNode*>(node);
                return StringValue(attributeNode);
            }
            case System.Xml.NodeKind.documentNode:
            {
                System.Xml.Document* documentNode = cast<System.Xml.Document*>(node);
                return StringValue(documentNode);
            }
            case System.Xml.NodeKind.elementNode:
            {
                System.Xml.Element* elementNode = cast<System.Xml.Element*>(node);
                return StringValue(elementNode);
            }
            case System.Xml.NodeKind.processingInstructionNode:
            {
                System.Xml.ProcessingInstruction* processingInstructionNode = cast<System.Xml.ProcessingInstruction*>(node);
                return StringValue(processingInstructionNode);
            }
            case System.Xml.NodeKind.textNode:
            {
                System.Xml.Text* textNode = cast<System.Xml.Text*>(node);
                return StringValue(textNode);
            }
            case System.Xml.NodeKind.cdataSectionNode:
            {
                System.Xml.CDataSection* cdataSectionNode = cast<System.Xml.CDataSection*>(node);
                return StringValue(cdataSectionNode);
            }
            case System.Xml.NodeKind.commentNode:
            {
                System.Xml.Comment* commentNode = cast<System.Xml.Comment*>(node);
                return StringValue(commentNode);
            }
        }
        return string();
    }

    [nodiscard]
    public Result<UniquePtr<Object>> ToNumber(Object* object, Context& context)
    {
        auto numberFunctionResult = GetFunction(FunctionKind.number);
        if (numberFunctionResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(numberFunctionResult.GetErrorId()));
        }
        Function* numberFunction = numberFunctionResult.Value();
        List<Object*> args(1, object);
        return numberFunction->Evaluate(context, args);
    }

    [nodiscard]
    public Result<UniquePtr<Object>> ToNumber(System.Xml.Node* node, Context& context)
    {
        UniquePtr<Object> stringValue(new Str(StringValue(node)));
        return ToNumber(stringValue.Get(), context);
    }

    [nodiscard]
    public Result<Number*> NumberCast(Object* object)
    {
        if (object->IsNumber())
        {
            return Result<Number*>(cast<Number*>(object));
        }
        else
        {
            int errorId = AllocateError("number object expected");
            return Result<Number*>(ErrorId(errorId));
        }
    }

    [nodiscard]
    public Result<UniquePtr<Object>> ToBoolean(Object* object, Context& context)
    {
        auto booleanFunctionResult = GetFunction(FunctionKind.boolean);
        if (booleanFunctionResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanFunctionResult.GetErrorId()));
        }
        Function* booleanFunction = booleanFunctionResult.Value();
        List<Object*> args(1, object);
        return booleanFunction->Evaluate(context, args);
    }

    [nodiscard]
    public Result<Boolean*> BooleanCast(Object* object)
    {
        if (object->IsBoolean())
        {
            return Result<Boolean*>(cast<Boolean*>(object));
        }
        else
        {
            int errorId = AllocateError("Boolean object expected");
            return Result<Boolean*>(ErrorId(errorId));
        }
    }

    [nodiscard]
    public Result<NodeSet*> NodeSetCast(Object* object)
    {
        if (object->IsNodeSet())
        {
            return Result<NodeSet*>(cast<NodeSet*>(object));
        }
        else
        {
            int errorId = AllocateError("node-set object expected");
            return Result<NodeSet*>(ErrorId(errorId));
        }
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateUnaryMinusExpr(Expr* operand, Context& context)
    {
        auto operandResult = operand->Evaluate(context);
        if (operandResult.Error())
        {
            return operandResult;
        }
        Result<UniquePtr<Object>> numberResult = ToNumber(operandResult.Value().Get(), context);
        if (numberResult.Error())
        {
            return numberResult;
        }
        auto numberCastResult = NumberCast(numberResult.Value().Get());
        if (numberCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(numberCastResult.GetErrorId()));
        }
        Number* number = numberCastResult.Value();
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(-number->Value())));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateParenExpr(Expr* operand, Context& context)
    {
        return operand->Evaluate(context);
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateOrExpr(Expr* left, Expr* right, Context& context)
    {
        auto booleanFunctionResult = GetFunction(FunctionKind.boolean);
        if (booleanFunctionResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanFunctionResult.GetErrorId()));
        }
        Function* booleanFunction = booleanFunctionResult.Value();
        Result<UniquePtr<Object>> leftResult = left->Evaluate(context);
        if (leftResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftResult.GetErrorId()));
        }
        List<Object*> leftArgs(1, leftResult.Value().Get());
        Result<UniquePtr<Object>> leftBooleanResult = booleanFunction->Evaluate(context, leftArgs);
        if (leftBooleanResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftBooleanResult.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(leftBooleanResult.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* leftAsBoolean = booleanCastResult.Value();
        if (leftAsBoolean->Value())
        {
            return leftBooleanResult;
        }
        Result<UniquePtr<Object>> rightResult = right->Evaluate(context);
        if (rightResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightResult.GetErrorId()));
        }
        List<Object*> rightArgs(1, rightResult.Value().Get());
        return booleanFunction->Evaluate(context, rightArgs);
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateAndExpr(Expr* left, Expr* right, Context& context)
    {
        auto booleanFunctionResult = GetFunction(FunctionKind.boolean);
        if (booleanFunctionResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanFunctionResult.GetErrorId()));
        }
        Function* booleanFunction = booleanFunctionResult.Value();
        Result<UniquePtr<Object>> leftResult = left->Evaluate(context);
        if (leftResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftResult.GetErrorId()));
        }
        List<Object*> leftArgs(1, leftResult.Value().Get());
        Result<UniquePtr<Object>> leftBooleanResult = booleanFunction->Evaluate(context, leftArgs);
        if (leftBooleanResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftBooleanResult.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(leftBooleanResult.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* leftAsBoolean = booleanCastResult.Value();
        if (!leftAsBoolean->Value())
        {
            return leftBooleanResult;
        }
        Result<UniquePtr<Object>> rightResult = right->Evaluate(context);
        if (rightResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightResult.GetErrorId()));
        }
        List<Object*> rightArgs(1, rightResult.Value().Get());
        return booleanFunction->Evaluate(context, rightArgs);
    }

    bool CompareStrings(const string& leftStr, const string& rightStr, Operator op)
    {
        switch (op)
        {
            case Operator.equal:
            {
                return leftStr == rightStr;
            }
            case Operator.notEqual:
            {
                return leftStr != rightStr;
            }
            case Operator.less:
            {
                return leftStr < rightStr;
            }
            case Operator.greater:
            {
                return leftStr > rightStr;
            }
            case Operator.lessOrEqual:
            {
                return leftStr <= rightStr;
            }
            case Operator.greaterOrEqual:
            {
                return leftStr >= rightStr;
            }
        }
        return false;
    }

    public bool CompareNumbers(double left, double right, Operator op)
    {
        switch (op)
        {
            case Operator.equal:
            {
                return left == right;
            }
            case Operator.notEqual:
            {
                return left != right;
            }
            case Operator.less:
            {
                return left < right;
            }
            case Operator.greater:
            {
                return left > right;
            }
            case Operator.lessOrEqual:
            {
                return left <= right;
            }
            case Operator.greaterOrEqual:
            {
                return left >= right;
            }
        }
        return false;
    }

    public bool CompareBooleans(bool left, bool right, Operator op)
    {
        switch (op)
        {
            case Operator.equal:
            {
                return left == right;
            }
            case Operator.notEqual:
            {
                return left != right;
            }
            case Operator.less:
            {
                return cast<int>(left) < cast<int>(right);
            }
            case Operator.greater:
            {
                return cast<int>(left) > cast<int>(right);
            }
            case Operator.lessOrEqual:
            {
                return cast<int>(left) <= cast<int>(right);
            }
            case Operator.greaterOrEqual:
            {
                return cast<int>(left) >= cast<int>(right);
            }
        }
        return false;
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(NodeSet* left, NodeSet* right, Operator op)
    {
        int n = left->Count();
        for (int i = 0; i < n; ++i)
        {
            System.Xml.Node* leftNode = left->GetNode(i);
            string leftStringValue = StringValue(leftNode);
            int m = right->Count();
            for (int j = 0; j < m; ++j)
            {
                System.Xml.Node* rightNode = right->GetNode(j);
                string rightStringValue = StringValue(rightNode);
                if (CompareStrings(leftStringValue, rightStringValue, op))
                {
                    return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(true)));
                }
            }
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(false)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(NodeSet* left, Boolean* right, Operator op, Context& context)
    {
        auto leftAsBoolean = ToBoolean(left, context);
        if (leftAsBoolean.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftAsBoolean.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(leftAsBoolean.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* leftBoolean = booleanCastResult.Value();
        return Compare(leftBoolean, right, op);
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Boolean* left, NodeSet* right, Operator op, Context& context)
    {
        auto rightAsBoolean = ToBoolean(right, context);
        if (rightAsBoolean.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightAsBoolean.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(rightAsBoolean.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* rightBoolean = booleanCastResult.Value();
        return Compare(left, rightBoolean, op);
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(NodeSet* left, Number* right, Operator op, Context& context)
    {
        int n = left->Count();
        for (int i = 0; i < n; ++i)
        {
            System.Xml.Node* leftNode = left->GetNode(i);
            auto leftAsNumberResult = ToNumber(leftNode, context);
            if (leftAsNumberResult.Error())
            {
                return leftAsNumberResult;
            }
            auto numberCastResult = NumberCast(leftAsNumberResult.Value().Get());
            if (numberCastResult.Error())
            {
                return Result<UniquePtr<Object>>(ErrorId(numberCastResult.GetErrorId()));
            }
            Number* leftNumber = numberCastResult.Value();
            if (CompareNumbers(leftNumber->Value(), right->Value(), op))
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(true)));
            }
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(false)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(NodeSet* left, Str* right, Operator op, Context& context)
    {
        int n = left->Count();
        for (int i = 0; i < n; ++i)
        {
            System.Xml.Node* leftNode = left->GetNode(i);
            string leftString = StringValue(leftNode);
            if (CompareStrings(leftString, right->Value(), op))
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(true)));
            }
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(false)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Str* left, NodeSet* right, Operator op, Context& context)
    {
        int n = right->Count();
        for (int i = 0; i < n; ++i)
        {
            System.Xml.Node* rightNode = right->GetNode(i);
            string rightString = StringValue(rightNode);
            if (CompareStrings(left->Value(), rightString, op))
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(true)));
            }
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(false)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Number* left, NodeSet* right, Operator op, Context& context)
    {
        int n = right->Count();
        for (int i = 0; i < n; ++i)
        {
            System.Xml.Node* rightNode = right->GetNode(i);
            auto rightAsNumberResult = ToNumber(rightNode, context);
            if (rightAsNumberResult.Error())
            {
                return rightAsNumberResult;
            }
            auto numberCastResult = NumberCast(rightAsNumberResult.Value().Get());
            if (numberCastResult.Error())
            {
                return Result<UniquePtr<Object>>(ErrorId(numberCastResult.GetErrorId()));
            }
            Number* rightNumber = numberCastResult.Value();
            if (CompareNumbers(left->Value(), rightNumber->Value(), op))
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(true)));
            }
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(false)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Boolean* left, Boolean* right, Operator op)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareBooleans(left->Value(), right->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Boolean* left, Number* right, Operator op, Context& context)
    {
        auto rightAsBoolean = ToBoolean(right, context);
        if (rightAsBoolean.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightAsBoolean.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(rightAsBoolean.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* rightBoolean = booleanCastResult.Value();
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareBooleans(left->Value(), rightBoolean->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Number* left, Boolean* right, Operator op, Context& context)
    {
        auto leftAsBoolean = ToBoolean(left, context);
        if (leftAsBoolean.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftAsBoolean.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(leftAsBoolean.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* leftBoolean = booleanCastResult.Value();
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareBooleans(leftBoolean->Value(), right->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Boolean* left, Str* right, Operator op, Context& context)
    {
        auto rightAsBoolean = ToBoolean(right, context);
        if (rightAsBoolean.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightAsBoolean.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(rightAsBoolean.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* rightBoolean = booleanCastResult.Value();
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareBooleans(left->Value(), rightBoolean->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Str* left, Boolean* right, Operator op, Context& context)
    {
        auto leftAsBoolean = ToBoolean(left, context);
        if (leftAsBoolean.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftAsBoolean.GetErrorId()));
        }
        auto booleanCastResult = BooleanCast(leftAsBoolean.Value().Get());
        if (booleanCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(booleanCastResult.GetErrorId()));
        }
        Boolean* leftBoolean = booleanCastResult.Value();
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareBooleans(leftBoolean->Value(), right->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Number* left, Number* right, Operator op)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareNumbers(left->Value(), right->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Number* left, Str* right, Operator op, Context& context)
    {
        auto rightAsNumber = ToNumber(right, context);
        if (rightAsNumber.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightAsNumber.GetErrorId()));
        }
        auto numberCastResult = NumberCast(rightAsNumber.Value().Get());
        if (numberCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(numberCastResult.GetErrorId()));
        }
        Number* rightNumber = numberCastResult.Value();
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareNumbers(left->Value(), rightNumber->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Str* left, Number* right, Operator op, Context& context)
    {
        auto leftAsNumber = ToNumber(left, context);
        if (leftAsNumber.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftAsNumber.GetErrorId()));
        }
        auto numberCastResult = NumberCast(leftAsNumber.Value().Get());
        if (numberCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(numberCastResult.GetErrorId()));
        }
        Number* leftNumber = numberCastResult.Value();
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareNumbers(leftNumber->Value(), right->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Str* left, Str* right, Operator op)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(CompareStrings(left->Value(), right->Value(), op))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> Compare(Expr* left, Expr* right, Operator op, Context& context)
    {
        Result<UniquePtr<Object>> leftOperand = left->Evaluate(context);
        if (leftOperand.Error())
        {
            return leftOperand;
        }
        Result<UniquePtr<Object>> rightOperand = right->Evaluate(context);
        if (rightOperand.Error())
        {
            return rightOperand;
        }
        Object* leftObject = leftOperand.Value().Get();
        Object* rightObject = rightOperand.Value().Get();
        switch (leftObject->Kind())
        {
            case ObjectKind.nodeSet:
            {
                NodeSet* leftNodeSet = cast<NodeSet*>(leftObject);
                switch (rightObject->Kind())
                {
                    case ObjectKind.nodeSet:
                    {
                        NodeSet* rightNodeSet = cast<NodeSet*>(rightObject);
                        return Compare(leftNodeSet, rightNodeSet, op);
                    }
                    case ObjectKind.boolean:
                    {
                        Boolean* rightBoolean = cast<Boolean*>(rightObject);
                        return Compare(leftNodeSet, rightBoolean, op, context);
                    }
                    case ObjectKind.number:
                    {
                        Number* rightNumber = cast<Number*>(rightObject);
                        return Compare(leftNodeSet, rightNumber, op, context);
                    }
                    case ObjectKind.string:
                    {
                        Str* rightString = cast<Str*>(rightObject);
                        return Compare(leftNodeSet, rightString, op, context);
                    }
                }
                break;
            }
            case ObjectKind.boolean:
            {
                Boolean* leftBoolean = cast<Boolean*>(leftObject);
                switch (rightObject->Kind())
                {
                    case ObjectKind.boolean:
                    {
                        Boolean* rightBoolean = cast<Boolean*>(rightObject);
                        return Compare(leftBoolean, rightBoolean, op);
                    }
                    case ObjectKind.nodeSet:
                    {
                        NodeSet* rightNodeSet = cast<NodeSet*>(rightObject);
                        return Compare(leftBoolean, rightNodeSet, op, context);
                    }
                    case ObjectKind.number:
                    {
                        Number* rightNumber = cast<Number*>(rightObject);
                        return Compare(leftBoolean, rightNumber, op, context);
                    }
                    case ObjectKind.string:
                    {
                        Str* rightString = cast<Str*>(rightObject);
                        return Compare(leftBoolean, rightString, op, context);
                    }
                }
                break;
            }
            case ObjectKind.number:
            {
                Number* leftNumber = cast<Number*>(leftObject);
                switch (rightObject->Kind())
                {
                    case ObjectKind.number:
                    {
                        Number* rightNumber = cast<Number*>(rightObject);
                        return Compare(leftNumber, rightNumber, op);
                    }
                    case ObjectKind.nodeSet:
                    {
                        NodeSet* rightNodeSet = cast<NodeSet*>(rightObject);
                        return Compare(leftNumber, rightNodeSet, op, context);
                    }
                    case ObjectKind.boolean:
                    {
                        Boolean* rightBoolean = cast<Boolean*>(rightObject);
                        return Compare(leftNumber, rightBoolean, op, context);
                    }
                    case ObjectKind.string:
                    {
                        Str* rightString = cast<Str*>(rightObject);
                        return Compare(leftNumber, rightString, op, context);
                    }
                }
                break;
            }
            case ObjectKind.string:
            {
                Str* leftString = cast<Str*>(leftObject);
                switch (rightObject->Kind())
                {
                    case ObjectKind.string:
                    {
                        Str* rightString = cast<Str*>(rightObject);
                        return Compare(leftString, rightString, op);
                    }
                    case ObjectKind.nodeSet:
                    {
                        NodeSet* rightNodeSet = cast<NodeSet*>(rightObject);
                        return Compare(leftString, rightNodeSet, op, context);
                    }
                    case ObjectKind.boolean:
                    {
                        Boolean* rightBoolean = cast<Boolean*>(rightObject);
                        return Compare(leftString, rightBoolean, op, context);
                    }
                    case ObjectKind.number:
                    {
                        Number* rightNumber = cast<Number*>(rightObject);
                        return Compare(leftString, rightNumber, op, context);
                    }
                }
                break;
            }
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(false)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateArithmeticOp(Expr* left, Expr* right, Operator op, Context& context)
    {
        Result<UniquePtr<Object>> leftOperand = left->Evaluate(context);
        if (leftOperand.Error())
        {
            return leftOperand;
        }
        Result<UniquePtr<Object>> rightOperand = right->Evaluate(context);
        if (rightOperand.Error())
        {
            return rightOperand;
        }
        Object* leftObject = leftOperand.Value().Get();
        Object* rightObject = rightOperand.Value().Get();
        Result<UniquePtr<Object>> leftAsNumber = ToNumber(leftObject, context);
        if (leftAsNumber.Error())
        {
            return leftAsNumber;
        }
        Result<Number*> leftNumberCastResult = NumberCast(leftAsNumber.Value().Get());
        if (leftNumberCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftNumberCastResult.GetErrorId()));
        }
        Number* leftNumber = leftNumberCastResult.Value();
        Result<UniquePtr<Object>> rightAsNumber = ToNumber(rightObject, context);
        if (rightAsNumber.Error())
        {
            return rightAsNumber;
        }
        Result<Number*> rightNumberCastResult = NumberCast(rightAsNumber.Value().Get());
        if (rightNumberCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightNumberCastResult.GetErrorId()));
        }
        Number* rightNumber = rightNumberCastResult.Value();
        switch (op)
        {
            case Operator.plus:
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(leftNumber->Value() + rightNumber->Value())));
            }
            case Operator.minus:
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(leftNumber->Value() - rightNumber->Value())));
            }
            case Operator.mul:
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(leftNumber->Value() * rightNumber->Value())));
            }
            case Operator.div:
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(leftNumber->Value() / rightNumber->Value())));
            }
            case Operator.mod:
            {
                return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(RtmRemainder(leftNumber->Value(), rightNumber->Value()))));
            }
        }
        int errorId = AllocateError("arithmetic binary operator expected");
        return Result<UniquePtr<Object>>(ErrorId(errorId));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateUnionExpr(Expr* left, Expr* right, Context& context)
    {
        Result<UniquePtr<Object>> leftOperand = left->Evaluate(context);
        if (leftOperand.Error())
        {
            return leftOperand;
        }
        Result<UniquePtr<Object>> rightOperand = right->Evaluate(context);
        if (rightOperand.Error())
        {
            return rightOperand;
        }
        Object* leftObject = leftOperand.Value().Get();
        Object* rightObject = rightOperand.Value().Get();
        Result<NodeSet*> leftNodeSetCastResult = NodeSetCast(leftObject);
        if (leftNodeSetCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftNodeSetCastResult.GetErrorId()));
        }
        NodeSet* leftNodeSet = leftNodeSetCastResult.Value();
        Result<NodeSet*> rightNodeSetCastResult = NodeSetCast(rightObject);
        if (rightNodeSetCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(rightNodeSetCastResult.GetErrorId()));
        }
        NodeSet* rightNodeSet = rightNodeSetCastResult.Value();
        UniquePtr<NodeSet> nodeSet(new NodeSet());
        int n = leftNodeSet->Count();
        for (int i = 0; i < n; ++i)
        {
            nodeSet->Add(leftNodeSet->GetNode(i));
        }
        int m = rightNodeSet->Count();
        for (int i = 0; i < m; ++i)
        {
            nodeSet->Add(rightNodeSet->GetNode(i));
        }
        Result<UniquePtr<Object>> result(UniquePtr<Object>(nodeSet.Release()));
        return result;
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateCombineStepExpr(Expr* left, Expr* right, Context& context)
    {
        Result<UniquePtr<Object>> leftOperand = left->Evaluate(context);
        if (leftOperand.Error())
        {
            return leftOperand;
        }
        Result<NodeSet*> leftNodeSetCastResult = NodeSetCast(leftOperand.Value().Get());
        if (leftNodeSetCastResult.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(leftNodeSetCastResult.GetErrorId()));
        }
        NodeSet* leftNodeSet = leftNodeSetCastResult.Value();
        UniquePtr<NodeSet> result(new NodeSet());
        int n = leftNodeSet->Count();
        for (int i = 0; i < n; ++i)
        {
            System.Xml.Node* leftNode = leftNodeSet->GetNode(i);
            Context rightContext(leftNode, i + 1, n);
            Result<UniquePtr<Object>> rightOperand = right->Evaluate(rightContext);
            Result<NodeSet*> rightNodeSetCastResult = NodeSetCast(rightOperand.Value().Get());
            if (rightNodeSetCastResult.Error())
            {
                return Result<UniquePtr<Object>>(ErrorId(rightNodeSetCastResult.GetErrorId()));
            }
            NodeSet* rightNodeSet = rightNodeSetCastResult.Value();
            int m = rightNodeSet->Count();
            for (int j = 0; j < m; ++j)
            {
                System.Xml.Node* rightNode = rightNodeSet->GetNode(j);
                result->Add(rightNode);
            }
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(result.Release()));
    }

}
