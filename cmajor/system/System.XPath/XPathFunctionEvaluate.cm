// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.XPath
{
    [nodiscard]
    public Result<NodeSet*> NodeSetCast(Object* object, Function* function)
    {
        if (object->IsNodeSet())
        {
            return cast<NodeSet*>(object);
        }
        else
        {
            int errorId = AllocateError("'" + function->Name() + "()' function requires a node-set, " + ObjectKindStr(object->Kind()) + " provided");
            return Result<NodeSet*>(ErrorId(errorId));
        }
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToString(NodeSet* nodeSet)
    {
        if (nodeSet->Count() == 0)
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Str()));
        }
        else
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Str(StringValue(nodeSet->GetNode(0)))));
        }
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToString(Boolean* boolean)
    {
        if (boolean->Value())
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Str("true")));
        }
        else
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Str("false")));
        }
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToString(Number* number)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Str(ToString(number->Value()))));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToString(Str* string)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Str(string->Value())));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToBoolean(NodeSet* nodeSet)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(nodeSet->Count() != 0)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToBoolean(Boolean* boolean)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(boolean->Value())));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToBoolean(Number* number)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(number->Value() != 0)));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToBoolean(Str* string)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Boolean(!string->Value().IsEmpty())));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToNumber(NodeSet* nodeSet)
    {
        Result<UniquePtr<Object>> stringResult = EvaluateToString(nodeSet);
        if (stringResult.Value()->IsString())
        {
            Str* string = cast<Str*>(stringResult.Value().Get());
            return EvaluateToNumber(string);
        }
        else
        {
            int errorId = AllocateError("string expected");
            return Result<UniquePtr<Object>>(ErrorId(errorId));
        }
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToNumber(Boolean* boolean)
    {
        if (boolean->Value())
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(1)));
        }
        else
        {
            return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(0)));
        }
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToNumber(Number* number)
    {
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(number->Value())));
    }

    [nodiscard]
    public Result<UniquePtr<Object>> EvaluateToNumber(Str* string)
    {
        Result<double> result = ParseDouble(string->Value());
        if (result.Error())
        {
            return Result<UniquePtr<Object>>(ErrorId(result.GetErrorId()));
        }
        return Result<UniquePtr<Object>>(UniquePtr<Object>(new Number(result.Value())));
    }
}

