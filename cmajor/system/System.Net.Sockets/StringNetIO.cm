// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Net.Sockets
{
    [nodiscard]
    public Result<bool> SendString(TcpSocket& socket, const string& s)
    {
        int length = cast<int>(s.Length());
        byte[4] lengthBuffer;
        MemoryWriter writer(&lengthBuffer[0], 4);
        Result<bool> result = writer.Write(length);
        if (result.Error()) return result;
        result = socket.SendAll(&lengthBuffer[0], 4);
        if (result.Error()) return result;
        byte* p = cast<byte*>(cast<void*>(s.Chars()));
        result = socket.SendAll(p, length);
        if (result.Error()) return result;
        return Result<bool>(true);
    }

    [nodiscard]
    public Result<string> ReceiveString(TcpSocket& socket)
    {
        byte[4] lengthBuffer;
        int bytesToReceive = 4;
        int offset = 0;
        while (bytesToReceive > 0)
        {
            Result<int> bytesReceivedResult = socket.Receive(&lengthBuffer[offset], bytesToReceive);
            if (bytesReceivedResult.Error())
            {
                return Result<string>(ErrorId(bytesReceivedResult.GetErrorId()));
            }
            int bytesReceived = bytesReceivedResult.Value();
            bytesToReceive = bytesToReceive - bytesReceived;
            offset = offset + bytesReceived;
        }
        MemoryReader reader(&lengthBuffer[0], 4);
        Result<int> lengthResult = reader.ReadInt();
        if (lengthResult.Error())
        {
            return Result<string>(ErrorId(lengthResult.GetErrorId()));
        }
        int length = lengthResult.Value();
        if (length == 0)
        {
            return Result<string>(string());
        }
        UniquePtr<byte> mem(cast<byte*>(MemAlloc(length)));
        offset = 0;
        bytesToReceive = length;
        while (bytesToReceive > 0)
        {
            Result<int> bytesReceivedResult = socket.Receive(mem.Get() + offset, bytesToReceive);
            if (bytesReceivedResult.Error())
            {
                return Result<string>(ErrorId(bytesReceivedResult.GetErrorId()));
            }
            int bytesReceived = bytesReceivedResult.Value();
            bytesToReceive = bytesToReceive - bytesReceived;
            offset = offset + bytesReceived;
        }
        string s(cast<const char*>(cast<void*>(mem.Get())), length);
        return Result<string>(s);
    }
}
