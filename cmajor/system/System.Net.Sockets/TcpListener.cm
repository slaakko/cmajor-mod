// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Net.Sockets
{
    public class TcpListener : IOBase
    {
        public TcpListener(int port_) : socket(), port(port_)
        {
            auto result = socket.Bind(port);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        [nodiscard]
        public Result<bool> Start()
        {
            if (Error())
            {
                return Result<bool>(ErrorId(GetErrorId()));
            }
            return Start(256);
        }
        [nodiscard]
        public Result<bool> Start(int backlog)
        {
            if (Error())
            {
                return Result<bool>(ErrorId(GetErrorId()));
            }
            auto listenResult = socket.Listen(backlog);
            if (listenResult.Error())
            {
                SetErrorId(listenResult.GetErrorId());
            }
            return listenResult;
        }
        [nodiscard]
        public Result<bool> Stop()
        {
            if (Error())
            {
                return Result<bool>(ErrorId(GetErrorId()));
            }
            auto result = socket.Close();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            socket = TcpSocket();
            result = socket.Bind(port);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return result;
        }
        [nodiscard]
        public Result<TcpSocket> AcceptSocket()
        {
            if (Error())
            {
                return Result<TcpSocket>(ErrorId(GetErrorId()));
            }
            auto result = socket.Accept();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<TcpSocket>(ErrorId(result.GetErrorId()));
            }
            return result;
        }
        public TcpSocket& Socket()
        {
            return socket;
        }
        private TcpSocket socket;
        private int port;
    }
}
