// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

public extern cdecl void RtmInit();
public extern cdecl void RtmDone();
public extern cdecl void RtmEnqueueDestruction(void*, void*);
public extern cdecl void RtmBeginStaticInitCriticalSection();
public extern cdecl void RtmEndtaticInitCriticalSection();
public extern cdecl const char* RtmClassName(void* typeId);
public extern cdecl bool RtmIs(void* typeId, void* baseTypeId);
public extern cdecl void RtmPushFunction(void* traceInfo);
public extern cdecl void RtmPopFunction(void* traceInfo);
public extern cdecl void* RtmMemAlloc(long size);
public extern cdecl void RtmMemFree(void* ptr);
public extern cdecl void RtmPrintInteger(long x);
public extern cdecl void RtmPrintFloat(float x);
public extern cdecl void RtmPrintDouble(double x);
public extern cdecl void RtmPrintString(const char* s);
public extern cdecl void RtmBeginUnitTest(int numAssertions, const char* unitTestFilePath);
public extern cdecl void RtmEndUnitTest(const char* testName, int exitCode);
public extern cdecl void RtmSetUnitTestAssertionResult(int assertionIndex, bool assertionResult, int line);
public extern cdecl long RtmEvaluateUnaryOp(long operand, int type, int operation);
public extern cdecl long RtmEvaluateBinOp(long left, long right, int type, int operation);
public extern cdecl float RtmEvaluateFloatUnaryOp(float operand, int operation);
public extern cdecl float RtmEvaluateFloatBinaryOp(float left, float right, int operation);
public extern cdecl double RtmEvaluateDoubleUnaryOp(double operand, int operation);
public extern cdecl double RtmEvaluateDoubleBinaryOp(double left, double right, int operation);
public extern cdecl void RtmPanic(const char* message);
public extern cdecl void RtmFailAssertion(const char* assertion, const char* function, const char* sourceFilePath, int lineNumber);
public extern cdecl int RtmAllocateError(const char* errorMessage);
public extern cdecl const char* RtmGetErrorMessage(int errorId);
public extern cdecl const char* RtmGetErrorMessageWithoutStackTrace(int errorId);
public extern cdecl int RtmGetErrno();
public extern cdecl void RtmDisposeError(int errorId);
public extern cdecl void RtmInitRand(uint seed);
public extern cdecl uint RtmRandom();
public extern cdecl ulong RtmRandom64();
public extern cdecl void* RtmOpenFile(const char* filePath, byte openMode, int& errorId);
public extern cdecl void* RtmOpenStdFile(int handle, int& errorId);
public extern cdecl bool RtmClose(void* fileHandle, int& errorId);
public extern cdecl bool RtmDisposeFile(void* fileHandle, int& errorId);
public extern cdecl long RtmWrite(void* fileHandle, const byte* buffer, long count, int& errorId);
public extern cdecl bool RtmWriteByte(void* fileHandle, byte x, int& errorId);
public extern cdecl long RtmRead(void* fileHandle, byte* buffer, long bufferSize, int& errorId);
public extern cdecl int RtmReadByte(void* fileHandle, int& errorId);
public extern cdecl bool RtmEof(void* fileHandle);
public extern cdecl bool RtmGetFileError(void* fileHandle, int& errorId);
public extern cdecl bool RtmSeek(void* fileHandle, long pos, byte origin, int& errorId);
public extern cdecl long RtmTell(void* fileHandle, int& errorId);
public extern cdecl bool RtmFlush(void* fileHandle, int& errorId);
public extern cdecl bool RtmFileExists(const char* filePath, int& errorId);
public extern cdecl bool RtmLastWriteTimeLess(const char* filePath1, const char* filePath2, int& errorId);
public extern cdecl long RtmGetFileSize(const char* filePath, int& errorId);
public extern cdecl bool RtmRemoveFile(const char* filePath, int& errorId);
public extern cdecl bool RtmCopyFile(const char* sourceFilePath, const char* targetFilePath, int& errorId);
public extern cdecl bool RtmMoveFile(const char* sourceFilePath, const char* targetFilePath, int& errorId);
public extern cdecl bool RtmIsConsoleHandle(int handle);
public extern cdecl long RtmNow();
public extern cdecl void RtmSleep(long nanoSeconds);
public extern cdecl bool RtmGetCurrentDate(short* year, sbyte* month, sbyte* day);
public extern cdecl bool RtmGetCurrentDateTime(short* year, sbyte* month, sbyte* day, int* secs);
public extern cdecl double RtmPow(double x, int exponent);
public extern cdecl double Pow(double x, double y);
public extern cdecl double RtmSqrt(double x);
public extern cdecl double RtmPi();
public extern cdecl double RtmCos(double angleRad);
public extern cdecl double RtmSin(double angleRad);
public extern cdecl double RtmArcCos(double x);
public extern cdecl double RtmArcSin(double x);
public extern cdecl double RtmAtan2(double y, double x);
public extern cdecl double RtmEpsilon();
public extern cdecl double RtmRemainder(double x, double y);
public extern cdecl int RtmGetCurrentWorkingDirectoryHandle(int& errorId);
public extern cdecl const char* RtmGetCurrentWorkingDirectory(int handle);
public extern cdecl void RtmFreeCurrentWorkingDirectoryHandle(int handle);
public extern cdecl int RtmAllocateString(const char* s);
public extern cdecl void RtmFreeString(int stringHandle);
public extern cdecl const char* RtmGetString(int stringHandle);
public extern cdecl char RtmAsciiToUpper(char c);
public extern cdecl char RtmAsciiToLower(char c);
public extern cdecl int RtmBeginGetPathToExecutable();
public extern cdecl const char* RtmGetPathToExecutable(int pathHandle);
public extern cdecl void RtmEndGetPathToExecutable(int pathHandle);
public extern cdecl int RtmGetEnvironmentVariable(const char* envVarName);
public extern cdecl void* RtmAllocateMutex();
public extern cdecl void RtmFreeMutex(void* mutexHandle);
public extern cdecl void* RtmAllocateRecursiveMutex();
public extern cdecl void RtmFreeRecursiveMutex(void* recursiveMutexHandle);
public extern cdecl void RtmLockMutex(void* mutexHandle);
public extern cdecl void RtmUnlockMutex(void* mutexHandle);
public extern cdecl void RtmLockRecursiveMutex(void* recursiveMutexHandle);
public extern cdecl void RtmUnlockRecursiveMutex(void* recursiveMutexHandle);
public extern cdecl void* RtmAllocateConditionVariable();
public extern cdecl void RtmFreeConditionVariable(void* nativeHandle);
public extern cdecl bool RtmNotifyOne(void* nativeHandle, int& errorId);
public extern cdecl bool RtmNotifyAll(void* nativeHandle, int& errorId);
public extern cdecl bool RtmWaitConditionVariable(void* nativeHandle, void* recursiveMutexHandle, int& errorId);
public extern cdecl int RtmWaitConditionVariableDuration(void* nativeHandle, void* recursiveMutexHandle, long nanoseconds, int& errorId);
public extern cdecl bool RtmDirectoryExists(const char* directoryPath);
public extern cdecl void RtmCreateDirectories(const char* directoryPath);
public extern cdecl int RtmBeginIterateDirectory(const char* directoryPath);
public extern cdecl const char* RtmGetNextFilePath(int directoryIterationHandle);
public extern cdecl const char* RtmGetNextDirectoryPath(int directoryIterationHandle);
public extern cdecl void RtmEndIterateDirectory(int directoryIterationHandle);
public extern cdecl int RtmExecute(const char* command);
public extern cdecl int RtmBeginExec(const char* command);
public extern cdecl void RtmAddRedirection(int execHandle, int handle, const char* file);
public extern cdecl int RtmEndExec(int execHandle);
public extern cdecl void* RtmConvertThreadToFiber(void* param);
public extern cdecl void* RtmCreateFiber(ulong stackSize, void* startAddress, void* param);
public extern cdecl void RtmSwitchToFiber(void* fiber);
public extern cdecl void* RtmGetFiberData();
public extern cdecl void RtmDeleteFiber(void* fiber);
public extern cdecl void* RtmCreateProcess(const char* command, int redirections, int& errorId);
public extern cdecl void RtmDeleteProcess(void* process);
public extern cdecl bool RtmProcessRunning(void* process, int& errorId);
public extern cdecl bool RtmProcessWaitForExit(void* process, int& errorId);
public extern cdecl int RtmProcessExitCode(void* process, int& errorId);
public extern cdecl bool RtmProcessTerminate(void* process, int& errorId);
public extern cdecl bool RtmProcessEof(void* process, int handle, int& errorId);
public extern cdecl int RtmProcessReadLine(void* process, int handle, int& errorId);
public extern cdecl int RtmProcessReadToEnd(void* process, int handle, int& errorId);
public extern cdecl bool RtmProcessWriteLine(void* process, const char* line, int& errorId);
public extern cdecl int* RtmGetClassMap(const char* classMapName, int& errorId);
public extern cdecl void RtmInitZlib(int mode, int level, void** handle, int& errorId);
public extern cdecl void RtmDoneZlib(int mode, void* handle);
public extern cdecl void RtmSetInputZlib(void* inChunk, uint inAvail, void* handle);
public extern cdecl int RtmInflateZlib(void* outChunk, uint outChunkSize, uint* have, uint* outAvail, uint* inAvail, void* handle, int& errorId);
public extern cdecl int RtmDeflateZlib(void* outChunk, uint outChunkSize, uint* have, uint* outAvail, void* handle, int flush, int& errorId);
public extern cdecl void* RtmCreateSocket(int& errorId);
public extern cdecl void RtmBindSocket(void* socketHandle, int port, int& errorId);
public extern cdecl void RtmListenSocket(void* socketHandle, int backlog, int& errorId);
public extern cdecl void* RtmAcceptSocket(void* socketHandle, int& errorId);
public extern cdecl void RtmCloseSocket(void* socketHandle, int& errorId);
public extern cdecl void RtmShutdownSocket(void* socketHandle, int mode, int& errorId);
public extern cdecl void* RtmConnectSocket(const char* node, const char* service, int& errorId);
public extern cdecl int RtmSendSocket(void* socketHandle, byte* buf, int len, int flags, int& errorId);
public extern cdecl int RtmReceiveSocket(void* socketHandle, byte* buf, int len, int flags, int& errorId);
public extern cdecl void RtmDestroySocket(void* socketHandle);
public extern cdecl void WinSetInstance();
public extern cdecl int WinInit(void* messageProcessorFunctionAddress, void* keyPreviewFunctionAddress);
public extern cdecl int WinRun();
public extern cdecl int WinApplicationMessageLoop();
public extern cdecl void WinRunModal();
public extern cdecl void* WinGetForegroundWindow();
public extern cdecl bool WinEnableWindow(void* windowHandle, bool enable);
public extern cdecl int WinDialogWindowMessageLoop(void* windowHandle, void* parentWindowHandle, void* getDialogResultFunc, void* keyPreviewFunc, void* dialogWindowPtr);
public extern cdecl void* WinSubClassCommandWndProc(void* windowHandle);
public extern cdecl void WinRestoreOriginalWndProc(void* windowHandle, void* originalWndProc);
public extern cdecl void WinDone();
public extern cdecl int WinShowMessageBox(const char* text, const char* caption);
public extern cdecl int WinShowMessageBoxWithType(const char* text, const char* caption, void* ownerWindowHandle, uint type);
public extern cdecl ulong WinGetLastError();
public extern cdecl int WinAllocateWindowsError(const char* errorMessage, ulong errorCode);
public extern cdecl int WinAllocateGdiPlusError(const char* errorMessage, int gdiplusStatus);
public extern cdecl void WinFormatMessage(ulong errorCode, wchar* buffer);
public extern cdecl void WinFatalWindowsError(ulong errorCode);
public extern cdecl void WinFatalError(const char* errorMessage);
public extern cdecl void WinFatalGdiplusError(int gdiplusStatus);
public extern cdecl void* WinCreateEvent();
public extern cdecl bool WinSetEvent(void* eventHandle);
public extern cdecl bool WinResetEvent(void* eventHandle);
public extern cdecl bool WinWaitEvent(void* eventHandle);
public extern cdecl bool WinCloseHandle(void* handle);
public extern cdecl bool WinKeyPressed(int keyCode);
public extern cdecl int WinWaitForMultipleObjects(uint count, void** handles);
public extern cdecl void* WinFindFirstChangeNotification(const char* directoryPath);
public extern cdecl bool WinFindNextChangeNotification(void* handle);
public extern cdecl bool WinFindCloseChangeNotification(void* handle);
public extern cdecl bool WinShellExecute(const char* filePath, long& errorCode);
public extern cdecl ushort WinRegisterWindowClass(const char* windowClassName, uint style, int backgroundColor);
public extern cdecl bool WinMessageBeep(uint messageBeepType);
public extern cdecl void* WinCreateWindowByClassAtom(ushort windowClass, const char* windowName, long style, long exStyle, int x, int y, int w, int h, void* parentHandle);
public extern cdecl void* WinCreateWindowByClassName(const char* windowClass, const char* windowName, long style, long exStyle, int x, int y, int w, int h, void* parentHandle);
public extern cdecl void WinDestroyWindow(void* windowHandle);
public extern cdecl void WinPostQuitMessage(int exitCode);
public extern cdecl bool WinPostMessage(void* windowHandle, uint msg, ulong wparam, long lparam);
public extern cdecl long WinSendMessage(void* windowHandle, uint msg, ulong wparam, long lparam);
public extern cdecl bool WinShowWindow(void* windowHandle, int commandShow);
public extern cdecl bool WinUpdateWindow(void* windowHandle);
public extern cdecl bool WinMoveWindow(void* windowHandle, int x, int y, int w, int h, bool repaint);
public extern cdecl bool WinGetClientRect(void* windowHandle, void* rect);
public extern cdecl bool WinGetWindowRect(void* windowHandle, void* rect);
public extern cdecl bool WinClientToScreen(void* windowHandle, void* point);
public extern cdecl bool WinScreenToClient(void* windowHandle, void* point);
public extern cdecl bool WinPtInRect(void* rect, void* point);
public extern cdecl bool WinSetWindowText(void* windowHandle, const char* text);
public extern cdecl int WinGetWindowTextLength(void* windowHandle);
public extern cdecl int WinGetWindowText(void* windowHandle, wchar* textBuffer, int maxCount);
public extern cdecl void* WinGetDC(void* windowHandle);
public extern cdecl int WinReleaseHDC(void* windowHandle, void* hdc);
public extern cdecl bool WinTrackMouseEvent(void* windowHandle, uint flags, uint hoverTimeMs);
public extern cdecl void* WinSetParent(void* childWindowHandle, void* parentWindowHandle);
public extern cdecl bool WinInvalidateRect(void* windowHandle, void* rect, bool eraseBackground);
public extern cdecl void* WinBeginPaint(void* windowHandle, void*& paintStruct);
public extern cdecl void WinEndPaint(void* windowHandle, void* paintStruct);
public extern cdecl void WinGetClipRect(void* paintStruct, int& x, int& y, int& w, int& h);
public extern cdecl void WinGetSysColor(int index, byte& red, byte& green, byte& blue);
public extern cdecl bool WinSetBkColor(void* hdc, byte red, byte green, byte blue);
public extern cdecl void WinGetMessagePos(int& x, int& y);
public extern cdecl void* WinGetFocus();
public extern cdecl void* WinSetFocus(void* windowHandle);
public extern cdecl void* WinGetTopWindow(void* windowHandle);
public extern cdecl bool WinBringWindowToTop(void* windowHandle);
public extern cdecl bool WinSetWindowPos(void* windowHandle, void* insertAfterWindowHandle, int x, int y, int cx, int cy, uint flags);
public extern cdecl bool WinGetOpenFileName(void* windowHandle, const wchar* filter, const wchar* initialDirectory, wchar* fileNameBuffer, uint fileNameBufferSize,
    uint flags, const wchar* defaultExtension);
public extern cdecl bool WinGetSaveFileName(void* windowHandle, const wchar* filter, const wchar* initialDirectory, wchar* fileNameBuffer, uint fileNameBufferSize,
    uint flags, const wchar* defaultExtension);
public extern cdecl uint WinCommDlgExtendedError();
public extern cdecl void* WinLoadImage(const char* name, uint type, int cx, int cy);
public extern cdecl void* WinLoadStandardCursor(int cursorId);
public extern cdecl void* WinLoadCursor(const char* cursorName);
public extern cdecl void* WinGetCursor();
public extern cdecl void* WinSetCursor(void* cursorHandle);
public extern cdecl bool WinDestroyCursor(void* cursorHandle);
public extern cdecl void* WinLoadStandardIcon(int iconId);
public extern cdecl void* WinLoadIcon(const char* iconName);
public extern cdecl bool WinDestroyIcon(void* iconHandle);
public extern cdecl void* WinLoadStandardBitmap(int bitmapId);
public extern cdecl void* WinLoadBitmap(const char* bitmapName);
public extern cdecl bool WinDestroyBitmap(void* bitmapHandle);
public extern cdecl bool WinDeleteObject(void* handle);
public extern cdecl int WinGetSystemMetrics(int index);
public extern cdecl void* WinSetCapture(void* windowHandle);
public extern cdecl bool WinReleaseCapture();
public extern cdecl long WinGetClassLong(void* windowHandle, int index);
public extern cdecl long WinSetClassLong(void* windowHandle, int index, long value);
public extern cdecl long WinGetWindowLong(void* windowHandle, int index);
public extern cdecl bool WinSetWindowLong(void* windowHandle, int index, long newValue);
public extern cdecl bool WinScrollWindow(void* windowHandle, int xAmount, int yAmount, int clientLocX, int clientLocY, int clientSizeW, int clientSizeH,
    int clipLocX, int clipLocY, int clipSizeW, int clipSizeH);
public extern cdecl bool WinScrollWindowEx(void* windowHandle, int dx, int dy, int clientLocX, int clientLocY, int clientSizeW, int clientSizeH,
    int clipLocX, int clipLocY, int clipSizeW, int clipSizeH, int x1, int y1, int x2, int y2);
public extern cdecl bool WinGetScrollInfo(void* windowHandle, int nBar, uint& nPage, int& nPos, int& nMin, int& nMax, int& nTrackPos);
public extern cdecl int WinSetScrollInfo(void* windowHandle, int nBar, uint fMask, bool redraw, uint nPage, int nPos, int nMin, int nMax);
public extern cdecl int WinGetScrollPos(void* windowHandle, int nBar);
public extern cdecl bool WinShowScrollBar(void* windowHandle, int nBar, bool show);
public extern cdecl bool WinCreateCaret(void* windowHandle, void* bitmapHandle, int width, int height);
public extern cdecl bool WinDestroyCaret();
public extern cdecl bool WinShowCaret(void* windowHandle);
public extern cdecl bool WinHideCaret(void* windowHandle);
public extern cdecl bool WinGetCaretPos(int& x, int& y);
public extern cdecl bool WinSetCaretPos(int x, int y);
public extern cdecl bool WinSetTimer(void* windowHandle, uint timerId, uint elapse);
public extern cdecl bool WinKillTimer(void* windowHandle, uint timerId);
public extern cdecl bool WinRegOpenCurrentUser(void** result);
public extern cdecl bool WinRegCloseKey(void* key);
public extern cdecl bool WinRegGetDWordValue(void* key, const char* subKey, const char* valueName, uint& value);
public extern cdecl uint WinRegisterClipboardFormat(const char* formatName);
public extern cdecl bool WinOpenClipboard(void* windowHandle);
public extern cdecl bool WinCloseClipboard();
public extern cdecl bool WinEmptyClipboard();
public extern cdecl void* WinSetClipboardData(uint format, void* mem);
public extern cdecl void* WinGetClipboardData(uint format);
public extern cdecl bool WinIsClipboardFormatAvailable(uint format);
public extern cdecl bool WinAddClipboardFormatListener(void* windowHandle);
public extern cdecl bool WinRemoveClipboardFormatListener(void* windowHandle);
public extern cdecl void* WinGlobalAlloc(uint flags, ulong size);
public extern cdecl void* WinGlobalLock(void* memHandle);
public extern cdecl bool WinGlobalUnlock(void* memHandle);
public extern cdecl void* WinGlobalFree(void* memHandle);
public extern cdecl ulong WinGlobalSize(void* memHandle);
public extern cdecl bool WinGetCursorPos(int& x, int& y);
public extern cdecl bool WinGetFolder(void* windowHandle, const wchar* defaultDirectory, wchar* folderNameBuffer, uint folderNameBufferSize);
public extern cdecl int WinGetLogicalDrives();
public extern cdecl void* WinCreateGraphics(void* hdc);
public extern cdecl void WinDeleteGraphics(void* nativeGraphics);
public extern cdecl void* WinCreateGraphicsFromWindowHandle(void* hwnd);
public extern cdecl void* WinCreateGraphicsFromImage(void* image);
public extern cdecl int WinGraphicsGetLastStatus(void* graphics);
public extern cdecl int WinGraphicsFontGetLastStatus(void* font);
public extern cdecl void* WinGraphicsGetHDC(void* nativeGraphics);
public extern cdecl void* WinGraphicsCreatePen(byte alpha, byte red, byte green, byte blue, float width);
public extern cdecl void WinGraphicsDeletePen(void* pen);
public extern cdecl void* WinGraphicsClonePen(void* pen);
public extern cdecl int WinGraphicsPenGetLastStatus(void* pen);
public extern cdecl int WinGraphicsPenGetAlignment(void* pen);
public extern cdecl int WinGraphicsPenSetAlignment(void* pen, int alignment);
public extern cdecl void* WinGraphicsPenGetBrush(void* pen);
public extern cdecl int WinGraphicsPenSetBrush(void* pen, void* brush);
public extern cdecl int WinGraphicsPenGetColor(void* pen, byte& alpha, byte& red, byte& green, byte& blue);
public extern cdecl int WinGraphicsPenSetColor(void* pen, byte alpha, byte red, byte green, byte blue);
public extern cdecl int WinGraphicsPenGetStartCap(void* pen);
public extern cdecl int WinGraphicsPenSetStartCap(void* pen, int startCap);
public extern cdecl int WinGraphicsPenGetEndCap(void* pen);
public extern cdecl int WinGraphicsPenSetEndCap(void* pen, int endCap);
public extern cdecl int WinGraphicsPenGetDashCap(void* pen);
public extern cdecl int WinGraphicsPenSetDashCap(void* pen, int dashCap);
public extern cdecl float WinGraphicsPenGetDashOffset(void* pen);
public extern cdecl int WinGraphicsPenSetDashOffset(void* pen, float dashOffset);
public extern cdecl int WinGraphicsPenGetDashStyle(void* pen);
public extern cdecl int WinGraphicsPenSetDashStyle(void* pen, int dashStyle);
public extern cdecl int WinGraphicsPenGetLineJoin(void* pen);
public extern cdecl int WinGraphicsPenSetLineJoin(void* pen, int lineJoin);
public extern cdecl void* WinGraphicsCreateSolidBrush(byte alpha, byte red, byte green, byte blue);
public extern cdecl void* WinGraphicsCloneSolidBrush(void* solidBrush);
public extern cdecl void WinGraphicsDeleteSolidBrush(void* solidBrush);
public extern cdecl int WinGraphicsBrushGetLastStatus(void* brush);
public extern cdecl void* WinGraphicsCreateEmptyFontFamily();
public extern cdecl void* WinGraphicsCreateFontFamily(const char* familyName);
public extern cdecl void* WinGraphicsCloneFontFamily(void* fontFamily);
public extern cdecl void WinGraphicsDeleteFontFamily(void* fontFamily);
public extern cdecl int WinGraphicsGetFontFamilyName(void* fontFamily, void*& str);
public extern cdecl const void* WinGraphicsGetGenericMonospaceFontFamily();
public extern cdecl const void* WinGraphicsGetGenericSansSerifFontFamily();
public extern cdecl const void* WinGraphicsGetGenericSerifFontFamily();
public extern cdecl int WinGraphicsFontFamilyGetLastStatus(void* fontFamily);
public extern cdecl void* WinGraphicsCreateFont(const void* fontFamily, float emSize, int style, int unit);
public extern cdecl void* WinGraphicsCreateFontFromHFont(void* hdc, void* hfont);
public extern cdecl void* WinGraphicsCloneFont(void* font);
public extern cdecl void WinGraphicsDeleteFont(void* font);
public extern cdecl int WinGraphicsGetFontFamily(void* font, void* fontFamily);
public extern cdecl float WinGraphicsGetFontSize(void* font);
public extern cdecl float WinGraphicsGetFontHeight(void* font, const void* graphics);
public extern cdecl int WinGraphicsGetFontStyle(void* font);
public extern cdecl int WinGraphicsFontToHFont(void* font, void* graphics, void*& hfont);
public extern cdecl void* WinGraphicsCreateDefaultStringFormat();
public extern cdecl const void* WinGraphicsGetGenericDefaultStringFormat();
public extern cdecl const void* WinGraphicsGetGenericTypographicStringFormat();
public extern cdecl void* WinGraphicsCreateStringFormat(int formatFlags, ushort languageId);
public extern cdecl void* WinGraphicsCloneStringFormat(void* stringFormat);
public extern cdecl void WinGraphicsDeleteStringFormat(void* stringFormat);
public extern cdecl int WinGraphicsStringFormatGetLastStatus(void* stringFormat);
public extern cdecl int WinGraphicsStringFormatSetAlignment(void* stringFormat, int alignment);
public extern cdecl int WinGraphicsStringFormatSetLineAlignment(void* stringFormat, int alignment);
public extern cdecl int WinGraphicsStringFormatSetHotKeyPrefix(void* stringFormat, int hotKeyPrefix);
public extern cdecl int WinGraphicsDrawLine(void* graphics, void* pen, int startX, int startY, int endX, int endY);
public extern cdecl int WinGraphicsDrawLineF(void* graphics, void* pen, float startX, float startY, float endX, float endY);
public extern cdecl int WinGraphicsDrawLines(void* graphics, void* pen, int count, void* points);
public extern cdecl int WinGraphicsDrawLinesF(void* graphics, void* pen, int count, void* points);
public extern cdecl int WinGraphicsDrawString(void* graphics, const char* str, void* font, float x, float y, void* brush);
public extern cdecl int WinGraphicsDrawStringFormatPoint(void* graphics, const char* str, void* font, float x, float y, void* format, void* brush);
public extern cdecl int WinGraphicsDrawStringFormatRect(void* graphics, const char* str, void* font, float x, float y, float w, float h, void* format, void* brush);
public extern cdecl int WinGraphicsMeasureStringFormatSize(void* graphics, const char* str, void* font, float w, float h, void* format,
    float& outSizeW, float& outSizeH, int* codePointsFitted, int* linesFilled);
public extern cdecl int WinGraphicsMeasureStringFormatRect(void* graphics, const char* str, void* font, float x, float y, float w, float h, void* format,
    float& outX, float& outY, float& outW, float& outH, int* codePointsFitted, int* linesFilled);
public extern cdecl int WinGraphicsMeasureStringFormatPoint(void* graphics, const char* str, void* font, float x, float y, void* format,
    float& outX, float& outY, float& outW, float& outH);
public extern cdecl int WinGraphicsGetTextRenderingHint(void* graphics);
public extern cdecl int WinGraphicsSetTextRenderingHint(void* graphics, int textRenderingHint);
public extern cdecl int WinGraphicsClear(void* graphics, byte alpha, byte red, byte green, byte blue);
public extern cdecl int WinGraphicsDrawRectangle(void* graphics, void* pen, int x, int y, int w, int h);
public extern cdecl int WinGraphicsDrawRectangleF(void* graphics, void* pen, float x, float y, float w, float h);
public extern cdecl int WinGraphicsFillRectangle(void* graphics, void* brush, int x, int y, int w, int h);
public extern cdecl int WinGraphicsFillRectangleF(void* graphics, void* brush, float x, float y, float w, float h);
public extern cdecl int WinGraphicsFillPolygon(void* graphics, void* brush, int count, void* points);
public extern cdecl int WinGraphicsFillPolygonF(void* graphics, void* brush, int count, void* points);
public extern cdecl int WinGraphicsDrawArc(void* graphics, void* pen, float x, float y, float w, float h, float startAngle, float sweepAngle);
public extern cdecl int WinGraphicsDrawEllipse(void* graphics, void* pen, float x, float y, float w, float h);
public extern cdecl int WinGraphicsFillEllipse(void* graphics, void* brush, float x, float y, float w, float h);
public extern cdecl void* WinGraphicsCreateRegion();
public extern cdecl void* WinGraphicsCloneRegion(void* region);
public extern cdecl void WinGraphicsDeleteRegion(void* region);
public extern cdecl int WinGraphicsRegionGetLastStatus(void* region);
public extern cdecl int WinGraphicsGetClip(void* graphics, void* region);
public extern cdecl int WinGraphicsSetClipRect(void* graphics, int x, int y, int w, int h, int combineMode);
public extern cdecl int WinGraphicsSetClipRegion(void* graphics, void* region);
public extern cdecl void* WinGraphicsCreateImage(const char* fileName, bool useEmbeddedColorManagement);
public extern cdecl int WinGraphicsImageGetLastStatus(void* image);
public extern cdecl void* WinGraphicsCloneImage(void* image);
public extern cdecl void WinGraphicsDeleteImage(void* image);
public extern cdecl int WinGraphicsImageGetHeight(void* image);
public extern cdecl int WinGraphicsImageGetWidth(void* image);
public extern cdecl void* WinGraphicsCreateBitmap(const char* fileName, bool useEmbeddedColorManagement);
public extern cdecl void* WinGraphicsCreateBitmapWidthHeight(int w, int h, void* graphics);
public extern cdecl void* WinGraphicsCreateBitmapWinBitmap(void* winBitmap, void* palette);
public extern cdecl void* WinGraphicsCreateBitmapIcon(void* icon);
public extern cdecl void* WinGraphicsCreateBitmapResource(const char* resourceName);
public extern cdecl void* WinGraphicsCloneBitmap(void* nativeBitmap, int x, int y, int w, int h, int pixelFormat);
public extern cdecl int WinGraphicsBitmapGetPixel(void* nativeBitmap, int x, int y, byte& alpha, byte& red, byte& green, byte& blue);
public extern cdecl int WinGraphicsBitmapSetPixel(void* nativeBitmap, int x, int y, byte alpha, byte red, byte green, byte blue);
public extern cdecl uint WinGraphicsSave(void* graphics);
public extern cdecl int WinGraphicsRestore(void* graphics, uint graphicsState);
public extern cdecl void* WinGraphicsCreateDefaultImageAttributes();
public extern cdecl int WinGraphicsImageAttributesGetLastStatus(void* imageAttributes);
public extern cdecl void* WinGraphicsCloneImageAttributes(void* imageAttributes);
public extern cdecl void WinGraphicsDeleteImageAttributes(void* imageAttributes);
public extern cdecl int WinGraphicsImageAttributesSetColorKey(void* imageAttributes, byte colorLowAlpha, byte colorLowRed, byte colorLowGreen, byte colorLowBlue,
    byte colorHighAlpha, byte colorHighRed, byte colorHighGreen, byte colorHighBlue, int colorAdjustType);
public extern cdecl int WinGraphicsDrawImagePoint(void* graphics, void* image, float x, float y);
public extern cdecl int WinGraphicsDrawImageRect(void* graphics, void* image, float x, float y, float w, float h);
public extern cdecl int WinGraphicsDrawImageWithAttributes(void* graphics, void* image, int destRectX, int destRectY, int destRectW, int destRectH, int srcX, int srcY, int srcW, int srcH,
    int srcUnit, void* imageAttributes);
public extern cdecl int WinGraphicsDrawImageWithAttributesF(void* graphics, void* image, float destRectX, float destRectY, float destRectW, float destRectH,
    float srcX, float srcY, float srcW, float srcH, int srcUnit, void* imageAttributes);
public extern cdecl int WinGraphicsGetTransform(void* graphics, void* matrix);
public extern cdecl int WinGraphicsSetTransform(void* graphics, void* matrix);
public extern cdecl int WinGraphicsMultiplyTransform(void* graphics, void* matrix, int order);
public extern cdecl int WinGraphicsResetTransform(void* graphics);
public extern cdecl int WinGraphicsRotateTransform(void* graphics, float angle, int order);
public extern cdecl int WinGraphicsScaleTransform(void* graphics, float scaleX, float scaleY, int order);
public extern cdecl int WinGraphicsTranslateTransform(void* graphics, float offsetX, float offsetY, int order);
public extern cdecl void* WinGraphicsCreateMatrixFromElements(float m11, float m12, float m21, float m22, float dx, float dy);
public extern cdecl void* WinGraphicsCreateMatrix();
public extern cdecl void* WinGraphicsCreateMatrixRectFPointF(float rectX, float rectY, float rectW, float rectH, float ptX, float ptY);
public extern cdecl void* WinGraphicsCreateMatrixRectPoint(int rectX, int rectY, int rectW, int rectH, int ptX, int ptY);
public extern cdecl int WinGraphicsMatrixGetLastStatus(void* matrix);
public extern cdecl void* WinGraphicsCloneMatrix(void* matrix);
public extern cdecl void WinGraphicsDeleteMatrix(void* matrix);
public extern cdecl int WinGraphicsMultiplyMatrix(void* matrix, void* factorMatrix, int order);
public extern cdecl int WinGraphicsResetMatrix(void* matrix);
public extern cdecl int WinGraphicsInvertMatrix(void* matrix);
public extern cdecl float WinGraphicsMatrixOffsetX(void* matrix);
public extern cdecl float WinGraphicsMatrixOffsetY(void* matrix);
public extern cdecl int WinGraphicsMatrixRotate(void* matrix, float angle, int order);
public extern cdecl int WinGraphicsMatrixRotateAt(void* matrix, float angle, float centerX, float centerY, int order);
public extern cdecl int WinGraphicsMatrixScale(void* matrix, float scaleX, float scaleY, int order);
public extern cdecl int WinGraphicsMatrixSetElements(void* matrix, float m11, float m12, float m21, float m22, float dx, float dy);
public extern cdecl int WinGraphicsMatrixShear(void* matrix, float shearX, float shearY, int order);
public extern cdecl int WinGraphicsMatrixTranslate(void* matrix, float offsetX, float offsetY, int order);
public extern cdecl int WinGraphicsMatrixTransformPoints(void* matrix, void* points, int numPoints);
public extern cdecl int WinGraphicsMatrixTransformPointsF(void* matrix, void* points, int numPoints);
public extern cdecl int WinGraphicsGetPageUnit(void* graphics);
public extern cdecl int WinGraphicsSetPageUnit(void* graphics, int unit);
public extern cdecl float WinGraphicsGetPageScale(void* graphics);
public extern cdecl int WinGraphicsSetPageScale(void* graphics, float scale);
public extern cdecl float WinGraphicsGetDpiX(void* graphics);
public extern cdecl float WinGraphicsGetDpiY(void* graphics);
public extern cdecl int WinGraphicsGetSmoothingMode(void* graphics);
public extern cdecl int WinGraphicsSetSmoothingMode(void* graphics, int smoothingMode);
public extern cdecl int WinGraphicsGetEncoderClsId(const char* imageFormat, void* clsid);
public extern cdecl int WinGraphicsImageSave(void* image, const char* fileName, const void* encoderClsId);
