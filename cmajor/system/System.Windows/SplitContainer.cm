// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public class delegate void SplitterEventHandler();

    public enum Orientation
    {
        horizontal, vertical
    }

    public Dock SplitDock(Orientation orientation)
    {
        switch (orientation)
        {
            case Orientation.horizontal: return Dock.left;
            case Orientation.vertical: return Dock.top;
        }
        return Dock.none;
    }

    public Size SplitSize(Orientation orientation, int width)
    {
        switch (orientation)
        {
            case Orientation.horizontal: return Size(width, 0);
            case Orientation.vertical: return Size(0, width);
        }
        return Size();
    }

    public Color DefaultSplitterEdgeColor()
    {
        return Color(204u, 206u, 219u);
    }

    public const int defaultSplitterWidth = 5;

    public ControlCreateParams& SplitterControlCreateParams(ControlCreateParams& controlCreateParams, Orientation orientation, int width)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.Splitter").SetSize(SplitSize(orientation, width)).SetDock(SplitDock(orientation));
    }

    public class SplitterCreateParams
    {
        public SplitterCreateParams(ControlCreateParams& controlCreateParams_) :
            controlCreateParams(controlCreateParams_),
            orientation(Orientation.horizontal),
            edgeColor(DefaultSplitterEdgeColor())
        {
        }
        public SplitterCreateParams& Defaults()
        {
            return *this;
        }
        public SplitterCreateParams& SetOrientation(Orientation orientation_)
        {
            orientation = orientation_;
            return *this;
        }
        public SplitterCreateParams& SetEdgeColor(const Color& edgeColor_)
        {
            edgeColor = edgeColor_;
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
        public Orientation orientation;
        public Color edgeColor;
    }

    public class Splitter : Control
    {
        private enum Flags : sbyte
        {
            none = 0, moveSplitter = 1 << 0
        }
        public Splitter(Orientation orientation_, const Color& backgroundColor, const Color& edgeColor_, const Point& location, int width) :
            base("System.Windows.Splitter", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            backgroundColor, "splitter", location, SplitSize(orientation_, width), SplitDock(orientation_), Anchors.none),
            orientation(orientation_), horizontalSplitterCursor(), verticalSplitterCursor(), flags(), container(null),
            edgeColor(edgeColor_), edgePen(edgeColor)
        {
            auto result = LoadCursors();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        public Splitter(Orientation orientation, const Point& location) :
            this(orientation, DefaultControlBackgroundColor(), DefaultSplitterEdgeColor(), location, defaultSplitterWidth)
        {
        }
        public Splitter(SplitterCreateParams& createParams) :
            base(createParams.controlCreateParams),
            orientation(createParams.orientation), horizontalSplitterCursor(), verticalSplitterCursor(), flags(), container(null),
            edgeColor(createParams.edgeColor), edgePen(edgeColor)
        {
            auto result = LoadCursors();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        private Result<bool> LoadCursors()
        {
            auto result = Application.GetResourceManager().GetCursor("horizontal.splitter.system.windows.cursor");
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            horizontalSplitterCursor = result.Value();
            result = Application.GetResourceManager().GetCursor("vertical.splitter.system.windows.cursor");
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            verticalSplitterCursor = result.Value();
            return Result<bool>(true);
        }
        public void SetContainer(SplitContainer* container_)
        {
            container = container_;
        }
        [nodiscard]
        public override Result<bool> PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                auto hexStringResult = ToHexString(cast<ulong>(Handle()));
                if (hexStringResult.Error())
                {
                    return Result<bool>(ErrorId(hexStringResult.GetErrorId()));
                }
                auto parentTextResult = ParentText();
                if (parentTextResult.Error())
                {
                    return Result<bool>(ErrorId(parentTextResult.GetErrorId()));
                }
                auto result = log->WriteLine(string(' ', level) + "Splitter." + Text() + ".handle=" + hexStringResult.Value() + " " +
                    parentTextResult.Value() + "[" + Rect(Point(), GetSize()).ToString() + "]");
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnPaint(PaintEventArgs& args)
        {
            if (Debug.Paint())
            {
                Rect r(Point(), GetSize());
                LogView* log = Application.GetLogView();
                if (log != null)
                {
                    auto result = log->WriteLine("Splitter.OnPaint: " + r.ToString());
                    if (result.Error()) return result;
                }
            }
            auto result = args.graphics.Clear(BackgroundColor());
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            Size size = GetSize();
            LogView* log = Application.GetLogView();
            switch (orientation)
            {
                case Orientation.horizontal:
                {
                    auto result = args.graphics.DrawLine(edgePen, Point(0, 0), Point(0, size.h - 1));
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    result = args.graphics.DrawLine(edgePen, Point(size.w - 1, 0), Point(size.w - 1, size.h - 1));
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    break;
                }
                case Orientation.vertical:
                {
                    auto result = args.graphics.DrawLine(edgePen, Point(0, 0), Point(size.w - 1, 0));
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    result = args.graphics.DrawLine(edgePen, Point(0, size.h - 1), Point(size.w - 1, size.h - 1));
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    break;
                }
            }
            return base->OnPaint(args);
        }
        protected override Result<bool> SetCursor()
        {
            switch (orientation)
            {
                case Orientation.horizontal: SetCursor(horizontalSplitterCursor); break;
                case Orientation.vertical: SetCursor(verticalSplitterCursor); break;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnMouseDown(MouseEventArgs& args)
        {
            auto result = base->OnMouseDown(args);
            if (result.Error()) return result;
            if (args.buttons == MouseButtons.lbutton)
            {
                SetFlag(Flags.moveSplitter);
                switch (orientation)
                {
                    case Orientation.horizontal:
                    {
                        x = args.location.x;
                        break;
                    }
                    case Orientation.vertical:
                    {
                        y = args.location.y;
                        break;
                    }
                }
                WinSetCapture(Handle());
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnMouseMove(MouseEventArgs& args)
        {
            if (GetFlag(Flags.moveSplitter))
            {
                switch (orientation)
                {
                    case Orientation.horizontal:
                    {
                        int dx = args.location.x - x;
                        auto result = container->SetSplitterDistance(container->SplitterDistance() + dx);
                        if (result.Error()) return result;
                        break;
                    }
                    case Orientation.vertical:
                    {
                        int dy = args.location.y - y;
                        auto result = container->SetSplitterDistance(container->SplitterDistance() + dy);
                        if (result.Error()) return result;
                        break;
                    }
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnMouseUp(MouseEventArgs& args)
        {
            auto result = base->OnMouseUp(args);
            if (result.Error()) return result;
            if (GetFlag(Flags.moveSplitter))
            {
                ResetFlag(Flags.moveSplitter);
                WinReleaseCapture();
                switch (orientation)
                {
                    case Orientation.horizontal:
                    {
                        int dx = args.location.x - x;
                        auto result = container->SetSplitterDistance(container->SplitterDistance() + dx);
                        if (result.Error()) return result;
                        break;
                    }
                    case Orientation.vertical:
                    {
                        int dy = args.location.y - y;
                        auto result = container->SetSplitterDistance(container->SplitterDistance() + dy);
                        if (result.Error()) return result;
                        break;
                    }
                }
            }
            return Result<bool>(true);
        }
        private inline void SetFlag(Flags flag)
        {
            flags = cast<Flags>(flags | flag);
        }
        private inline void ResetFlag(Flags flag)
        {
            flags = cast<Flags>(flags & ~flag);
        }
        private inline bool GetFlag(Flags flag) const
        {
            return (flags & flag) != 0;
        }
        private Orientation orientation;
        private Cursor* horizontalSplitterCursor;
        private Cursor* verticalSplitterCursor;
        private Flags flags;
        private int x;
        private int y;
        private SplitContainer* container;
        private Color edgeColor;
        private Pen edgePen;
    }

    public ControlCreateParams& SplitContainerControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.SplitContainer");
    }

    public class SplitContainerCreateParams
    {
        public SplitContainerCreateParams(ControlCreateParams& controlCreateParams_,
            Orientation orientation_, Control* pane1_, Splitter* splitter_, Control* pane2_, int splitterDistance_) :
            controlCreateParams(controlCreateParams_), orientation(orientation_), pane1(pane1_), splitter(splitter_), pane2(pane2_),
            splitterWidth(defaultSplitterWidth), splitterDistance(splitterDistance_)
        {
        }
        public SplitContainerCreateParams& Defaults()
        {
            return *this;
        }
        public SplitContainerCreateParams& SetSplitterWidth(int splitterWidth_)
        {
            splitterWidth = splitterWidth_;
            return *this;
        }
        public SplitContainerCreateParams& SetSplitterDistance(int splitterDistance_)
        {
            splitterDistance = splitterDistance_;
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
        public Orientation orientation;
        public Control* pane1;
        public Splitter* splitter;
        public Control* pane2;
        public int splitterWidth;
        public int splitterDistance;
    }

    public class SplitContainer : ContainerControl
    {
        public SplitContainer(Orientation orientation_, Control* pane1_, Splitter* splitter_, Control* pane2_, int splitterWidth, int splitterDistance_,
            const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("System.Windows.SplitContainer", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
                DefaultControlBackgroundColor(), "splitContainer", location, size, dock, anchors),
                orientation(orientation_), pane1(pane1_), splitter(splitter_), pane2(pane2_), splitterDistance(splitterDistance_)
        {
            Init();
        }
        public SplitContainer(Orientation orientation, int splitterDistance, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(orientation,
                new Panel(location, SplitSize(orientation, splitterDistance), SplitDock(orientation), Anchors.none),
                new Splitter(orientation, location),
                new Panel(location, SplitSize(orientation, splitterDistance), SplitDock(orientation), Anchors.none),
                defaultSplitterWidth, splitterDistance, location, size, dock, anchors)
        {
        }
        public SplitContainer(SplitContainerCreateParams& createParams) :
            base(createParams.controlCreateParams),
            orientation(createParams.orientation),
            pane1(createParams.pane1), splitter(createParams.splitter), pane2(createParams.pane2), splitterDistance(createParams.splitterDistance)
        {
            Init();
        }
        private void Init()
        {
            auto result = pane1->SetSize(SplitSize(orientation, splitterDistance));
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = pane1->SetDock(SplitDock(orientation));
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = AddChild(pane1);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            splitter->SetContainer(this);
            result = AddChild(splitter);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            auto locationResult = Location();
            if (locationResult.Error())
            {
                SetErrorId(locationResult.GetErrorId());
                return;
            }
            Point location = locationResult.Value();
            result = pane2->SetLocation(location);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = pane2->SetDock(Dock.fill);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = AddChild(pane2);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
        }
        [nodiscard]
        public override Result<bool> OnPaint(PaintEventArgs& args)
        {
            Size size = GetSize();
            if (splitterDistance == 0)
            {
                int s = 0;
                switch (orientation)
                {
                    case Orientation.horizontal: s = size.w; break;
                    case Orientation.vertical: s = size.h; break;
                }
                int d = cast<int>((2.0 / 3.0) * s);
                auto result = SetSplitterDistance(d);
                if (result.Error()) return result;
            }
            return base->OnPaint(args);
        }
        [nodiscard]
        public override Result<bool> PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                auto hexStringResult = ToHexString(cast<ulong>(Handle()));
                if (hexStringResult.Error())
                {
                    return Result<bool>(ErrorId(hexStringResult.GetErrorId()));
                }
                auto parentTextResult = ParentText();
                if (parentTextResult.Error())
                {
                    return Result<bool>(ErrorId(parentTextResult.GetErrorId()));
                }
                auto result = log->WriteLine(string(' ', level) + "SplitContainer." + Text() + ".handle=" + hexStringResult.Value() + " " + parentTextResult.Value() +
                    "[" + Rect(Point(), GetSize()).ToString() + "]");
                if (result.Error()) return result;
            }
            Component* child = Children().FirstChild();
            while (child != null)
            {
                if (child is Control*)
                {
                    Control* childControl = cast<Control*>(child);
                    auto result = childControl->PrintWindowTree(level + 1);
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                }
                child = child->NextSibling();
            }
            return Result<bool>(true);
        }
        public inline Orientation GetOrientation() const
        {
            return orientation;
        }
        public inline ContainerControl* Pane1Container() const
        {
            return pane1->GetContainerControl();
        }
        public inline Splitter* GetSplitter() const
        {
            return splitter;
        }
        public inline ContainerControl* Pane2Container() const
        {
            return pane2->GetContainerControl();
        }
        public inline int SplitterDistance() const
        {
            return splitterDistance;
        }
        [nodiscard]
        public Result<bool> SetSplitterDistance(int splitterDistance_)
        {
            int prevSplitterDistance = splitterDistance;
            splitterDistance = splitterDistance_;
            switch (orientation)
            {
                case Orientation.horizontal:
                {
                    auto result = pane1->SetSize(Size(splitterDistance, pane1->GetSize().h));
                    if (result.Error()) return result;
                    break;
                }
                case Orientation.vertical:
                {
                    auto result = pane1->SetSize(Size(pane1->GetSize().w, splitterDistance));
                    if (result.Error()) return result;
                    break;
                }
            }
            auto result = DockChildren();
            if (result.Error()) return result;
            result = Invalidate();
            if (result.Error()) return result;
            if (prevSplitterDistance != splitterDistance)
            {
                OnSplitterDistanceChanged();
            }
            return Result<bool>(true);
        }
        public virtual void OnSplitterDistanceChanged()
        {
            splitterDistanceChangedEvent.Fire();
        }
        public Control* Pane1() const
        {
            return pane1;
        }
        public Control* Pane2() const
        {
            return pane2;
        }
        public Event<SplitterEventHandler>& SplitterDistanceChangedEvent() const
        {
            return splitterDistanceChangedEvent;
        }
        private Orientation orientation;
        private int splitterDistance;
        private Control* pane1;
        private Splitter* splitter;
        private Control* pane2;
        private Event<SplitterEventHandler> splitterDistanceChangedEvent;
    }
}
