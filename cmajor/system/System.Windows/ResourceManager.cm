// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public abstract class Resource
    {
        public default virtual ~Resource();
    }

    public class ResourceManager
    {
        public Resource* GetResource(const string& resourceName)
        {
            auto it = resourceMap.CFind(resourceName);
            if (it != resourceMap.CEnd())
            {
                return it->second;
            }
            return null;
        }
        [nodiscard]
        public Result<Cursor*> GetCursor(const string& cursorName)
        {
            Cursor* cursor = null;
            Resource* result = GetResource(cursorName);
            if (result != null && result is Cursor*)
            {
                return Result<Cursor*>(cast<Cursor*>(result));
            }
            auto cursorResult = LoadCursor(cursorName);
            if (cursorResult.Error())
            {
                return Result<Cursor*>(ErrorId(cursorResult.GetErrorId()));
            }
            UniquePtr<Resource> resource(new Cursor(Rvalue(cursorResult.Value())));
            cursor = cast<Cursor*>(resource.Get());
            resources.Add(Rvalue(resource));
            return Result<Cursor*>(cursor);
        }
        [nodiscard]
        public Result<Icon*> GetIcon(const string& iconName)
        {
            Icon* icon = null;
            Resource* result = GetResource(iconName);
            if (result != null && result is Icon*)
            {
                return Result<Icon*>(cast<Icon*>(result));
            }
            auto iconResult = LoadIcon(iconName);
            if (iconResult.Error())
            {
                return Result<Icon*>(ErrorId(iconResult.GetErrorId()));
            }
            UniquePtr<Resource> resource(new Icon(Rvalue(iconResult.Value())));
            icon = cast<Icon*>(resource.Get());
            resources.Add(Rvalue(resource));
            return Result<Icon*>(icon);
        }
        [nodiscard]
        public Result<WinBitmap*> GetBitmap(const string& bitmapName)
        {
            WinBitmap* bitmap = null;
            Resource* result = GetResource(bitmapName);
            if (result != null && result is WinBitmap*)
            {
                return Result<WinBitmap*>(cast<WinBitmap*>(result));
            }
            auto bitmapResult = LoadBitmap(bitmapName);
            if (bitmapResult.Error())
            {
                return Result<WinBitmap*>(ErrorId(bitmapResult.GetErrorId()));
            }
            UniquePtr<Resource> resource(new WinBitmap(Rvalue(bitmapResult.Value())));
            bitmap = cast<WinBitmap*>(resource.Get());
            resources.Add(Rvalue(resource));
            return Result<WinBitmap*>(bitmap);
        }
        private HashMap<string, Resource*> resourceMap;
        private List<UniquePtr<Resource>> resources;
    }
}
