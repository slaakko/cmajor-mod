// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows.API;

namespace System.Windows
{
    public class ClipboardFormat : GraphicsObject
    {
        public enum Format : uint
        {
            text = 1u, unicodeText = 13u
        }
        public ClipboardFormat(Format format) : formatName(), formatNumber(format)
        {
        }
        public ClipboardFormat(const string& formatName_) : formatName(formatName_), formatNumber(0u)
        {
            auto registerResult = RegisterClipboardFormat(formatName.Chars());
            if (registerResult.Error())
            {
                SetErrorId(registerResult.GetErrorId());
            }
            formatNumber = registerResult.Value();
        }
        public inline uint Number() const
        {
            return formatNumber;
        }
        private string formatName;
        private uint formatNumber;
    }

    public class MemoryHandle : GraphicsObject
    {
        public MemoryHandle() : base(), handle(null)
        {
        }
        public MemoryHandle(void* handle_) : base(), handle(handle_), memory(null)
        {
            auto result = GlobalLock(handle);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
            memory = result.Value();
        }
        suppress MemoryHandle(const MemoryHandle&);
        suppress void operator=(const MemoryHandle&);
        public MemoryHandle(MemoryHandle&& that) : handle(that.handle)
        {
            that.handle = null;
        }
        public default void operator=(MemoryHandle&&);
        public ~MemoryHandle()
        {
            if (handle != null)
            {
                auto result = GlobalUnlock(handle);
            }
        }
        public static Result<MemoryHandle> AllocateMemory(ulong size)
        {
            auto result = GlobalAlloc(GlobalAllocFlags.GHND, size);
            if (result.Error())
            {
                return Result<MemoryHandle>(ErrorId(result.GetErrorId()));
            }
            MemoryHandle memoryHandle(result.Value());
            if (memoryHandle.Error())
            {
                return Result<MemoryHandle>(ErrorId(memoryHandle.GetErrorId()));
            }
            return Result<MemoryHandle>(Rvalue(memoryHandle));
        }
        public void* Memory() const
        {
            return memory;
        }
        [nodiscard]
        public Result<ulong> Size() const
        {
            return GlobalSize(handle);
        }
        public void* Handle() const
        {
            return handle;
        }
        private void* handle;
        private void* memory;
    }

    public class ClipboardListener : GraphicsObject
    {
        public ClipboardListener(void* windowHandle_) : windowHandle(windowHandle_)
        {
            auto result = AddClipboardFormatListener(windowHandle);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        public ~ClipboardListener()
        {
            auto result = RemoveClipboardFormatListener(windowHandle);
        }
        private void* windowHandle;
    }

    public class Clipboard : GraphicsObject
    {
        public Clipboard(void* windowHandle_) : windowHandle(windowHandle_)
        {
            auto result = OpenClipboard(windowHandle);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        public ~Clipboard()
        {
            auto result = CloseClipboard();
        }
        public bool IsClipboardFormatAvailable(const ClipboardFormat& clipboardFormat) const
        {
            return IsClipboardFormatAvailable(clipboardFormat.Number());
        }
        [nodiscard]
        public Result<bool> SetEmpty()
        {
            return EmptyClipboard();
        }
        [nodiscard]
        public Result<MemoryHandle> GetData(const ClipboardFormat& clipboardFormat)
        {
            auto result = GetClipboardData(clipboardFormat.Number());
            if (result.Error())
            {
                return Result<MemoryHandle>(ErrorId(result.GetErrorId()));
            }
            return Result<MemoryHandle>(MemoryHandle(result.Value()));
        }
        [nodiscard]
        public Result<bool> SetData(const ClipboardFormat& clipboardFormat, const MemoryHandle& memoryHandle)
        {
            auto result = SetEmpty();
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            auto setResult = SetClipboardData(clipboardFormat.Number(), memoryHandle.Handle());
            if (setResult.Error())
            {
                return Result<bool>(ErrorId(setResult.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<ustring> GetStringData(const ClipboardFormat& clipboardFormat)
        {
            Result<MemoryHandle> memoryHandleResult = GetData(clipboardFormat);
            if (memoryHandleResult.Error())
            {
                return Result<ustring>(ErrorId(memoryHandleResult.GetErrorId()));
            }
            MemoryHandle& memoryHandle = memoryHandleResult.Value();
            Result<ulong> sizeResult = memoryHandle.Size();
            if (sizeResult.Error())
            {
                return Result<ustring>(ErrorId(sizeResult.GetErrorId()));
            }
            ulong size = sizeResult.Value();
            if (clipboardFormat.Number() == ClipboardFormat.Format.text)
            {
                UniquePtr<char> ptr(cast<char*>(MemAlloc(cast<long>(size))));
                StrCopy(ptr.Get(), cast<char*>(memoryHandle.Memory()));
                string str(ptr.Get());
                auto utf32Result = ToUtf32(str);
                if (utf32Result.Error())
                {
                    return Result<ustring>(ErrorId(utf32Result.GetErrorId()));
                }
                return Result<ustring>(Rvalue(utf32Result.Value()));
            }
            else if (clipboardFormat.Number() == ClipboardFormat.Format.unicodeText)
            {
                UniquePtr<wchar> ptr(cast<wchar*>(MemAlloc(cast<long>(size))));
                StrCopy(ptr.Get(), cast<wchar*>(memoryHandle.Memory()));
                wstring str(ptr.Get());
                auto utf32Result = ToUtf32(str);
                if (utf32Result.Error())
                {
                    return Result<ustring>(ErrorId(utf32Result.GetErrorId()));
                }
                return Result<ustring>(Rvalue(utf32Result.Value()));
            }
            else
            {
                UniquePtr<uchar> ptr(cast<uchar*>(MemAlloc(cast<long>(size))));
                StrCopy(ptr.Get(), cast<uchar*>(memoryHandle.Memory()));
                ustring str(ptr.Get());
                return Result<ustring>(Rvalue(str));;
            }
        }
        [nodiscard]
        public Result<bool> SetStringData(const ClipboardFormat& clipboardFormat, const ustring& str)
        {
            if (clipboardFormat.Number() == ClipboardFormat.Format.text)
            {
                auto utf8Result = ToUtf8(str);
                if (utf8Result.Error())
                {
                    return Result<bool>(ErrorId(utf8Result.GetErrorId()));
                }
                string s = Rvalue(utf8Result.Value());
                Result<MemoryHandle> memoryHandleResult = MemoryHandle.AllocateMemory(cast<ulong>((s.Length() + 1) * sizeof(char)));
                if (memoryHandleResult.Error())
                {
                    return Result<bool>(ErrorId(memoryHandleResult.GetErrorId()));
                }
                MemoryHandle& memoryHandle = memoryHandleResult.Value();
                StrCopy(cast<char*>(memoryHandle.Memory()), s.Chars());
                auto result = SetData(clipboardFormat, memoryHandle);
                return result;
            }
            else if (clipboardFormat.Number() == ClipboardFormat.Format.unicodeText)
            {
                auto utf16Result = ToUtf16(str);
                if (utf16Result.Error())
                {
                    return Result<bool>(ErrorId(utf16Result.GetErrorId()));
                }
                wstring s = Rvalue(utf16Result.Value());
                Result<MemoryHandle> memoryHandleResult = MemoryHandle.AllocateMemory(cast<ulong>((s.Length() + 1) * sizeof(wchar)));
                if (memoryHandleResult.Error())
                {
                    return Result<bool>(ErrorId(memoryHandleResult.GetErrorId()));
                }
                MemoryHandle& memoryHandle = memoryHandleResult.Value();
                StrCopy(cast<wchar*>(memoryHandle.Memory()), s.Chars());
                auto result = SetData(clipboardFormat, memoryHandle);
                return result;
            }
            else
            {
                Result<MemoryHandle> memoryHandleResult = MemoryHandle.AllocateMemory(cast<ulong>((str.Length() + 1) * sizeof(uchar)));
                if (memoryHandleResult.Error())
                {
                    return Result<bool>(ErrorId(memoryHandleResult.GetErrorId()));
                }
                MemoryHandle& memoryHandle = memoryHandleResult.Value();
                StrCopy(cast<uchar*>(memoryHandle.Memory()), str.Chars());
                auto result = SetData(clipboardFormat, memoryHandle);
                return result;
            }
        }
        private void* windowHandle;
    }
}
