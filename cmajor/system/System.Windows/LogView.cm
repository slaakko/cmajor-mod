// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows.API;

namespace System.Windows
{
    public ControlCreateParams& LogViewControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.LogView").SetWindowClassStyle(DoubleClickWindowClassStyle()).
            SetWindowStyle(cast<WindowStyle>(DefaultChildWindowStyle() | WindowStyle.WS_TABSTOP)).
            SetWindowClassBackgroundColor(SystemColor.COLOR_WINDOW).SetBackgroundColor(Color.White());
    }

    public TextViewCreateParams& LogViewTextViewCreateParams(TextViewCreateParams& textViewCreateParams)
    {
        return textViewCreateParams.SetFontSize(9.0f);
    }

    public class LogViewCreateParams
    {
        public LogViewCreateParams(TextViewCreateParams& textViewCreateParams_) : textViewCreateParams(textViewCreateParams_)
        {
        }
        public LogViewCreateParams& Defaults()
        {
            return *this;
        }
        public TextViewCreateParams& textViewCreateParams;
    }

    public class LogView : TextView
    {
        public LogView(const FontFamily& fontFamily, float fontSize, const Color& backgroundColor, const Color& textColor, const Point& location,
            const Size& size, Dock dock, Anchors anchors) :
            base(fontFamily, fontSize, backgroundColor, textColor, location, size, dock, anchors)
        {
            SetReadOnly();
        }
        public LogView(const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(FontFamily("Consolas"), 9.0f, Color.White(), Color.Black(), location, size, dock, anchors)
        {
        }
        public LogView() : this(Point(0, 0), Size(0, 0), Dock.bottom, Anchors.none)
        {
        }
        public LogView(LogViewCreateParams& createParams) : base(createParams.textViewCreateParams)
        {
            SetReadOnly();
        }
        [nodiscard]
        public virtual Result<bool> WriteLine(const string& text)
        {
            int startLineNumber = cast<int>(Lines().Count() - 1);
            auto utf32Result = ToUtf32(text);
            if (utf32Result.Error())
            {
                return Result<bool>(ErrorId(utf32Result.GetErrorId()));
            }
            List<ustring> lines = SplitTextIntoLines(utf32Result.Value());
            for (const ustring& line : lines)
            {
                AddLine(line);
            }
            auto result = SetCaretLineCol(cast<int>(Lines().Count()), 1);
            if (result.Error()) return result;
            result = SetTextExtent();
            if (result.Error()) return result;
            result = ScrollToCaret();
            if (result.Error()) return result;
            SetChanged();
            result = InvalidateLines(startLineNumber, cast<int>(startLineNumber + lines.Count()));
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnPaint(PaintEventArgs& args)
        {
            return base->OnPaint(args);
        }
        [nodiscard]
        protected override Result<bool> OnMouseDown(MouseEventArgs& args)
        {
            return base->OnMouseDown(args);
        }
        [nodiscard]
        protected override Result<bool> OnKeyDown(KeyEventArgs& args)
        {
            auto result = base->OnKeyDown(args);
            if (result.Error()) return result;
            if (CaretLine() == Lines().Count())
            {
                result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
    }
}
