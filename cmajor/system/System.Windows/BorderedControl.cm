// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.Windows
{
    public enum BorderStyle : sbyte
    {
        single, style3D
    }

    public inline int DefaultSingleBorderWidth()
    {
        return 1;
    }

    public inline int Default3DBorderWidth()
    {
        return 2;
    }

    public int GetBorderWidth(BorderStyle borderStyle)
    {
        switch (borderStyle)
        {
            case BorderStyle.single: return DefaultSingleBorderWidth();
            case BorderStyle.style3D: return Default3DBorderWidth();
        }
        return 0;
    }

    public Color DefaultBorderedControlNormalBorderdColor()
    {
        return Color.Black();
    }

    public Color DefaultBorderedControlFocusedBorderColor()
    {
        return Color.Blue();
    }

    public ControlCreateParams& BorderedControlControlCreateParams(ControlCreateParams& controlCreateParams, Control* child)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.BorderedControl").SetBackgroundColor(child->BackgroundColor());
    }

    public class BorderedControlCreateParams
    {
        public BorderedControlCreateParams(ControlCreateParams& controlCreateParams_, Control* child_) :
            controlCreateParams(controlCreateParams_),
            child(child_),
            borderStyle(BorderStyle.single),
            borderWidth(GetBorderWidth(borderStyle)),
            normalBorderColor(DefaultBorderedControlNormalBorderdColor()),
            focusedBorderColor(DefaultBorderedControlFocusedBorderColor())
        {
        }
        public BorderedControlCreateParams& Defaults()
        {
            return *this;
        }
        public BorderedControlCreateParams& SetBorderStyle(BorderStyle borderStyle_)
        {
            borderStyle = borderStyle_;
            return *this;
        }
        public BorderedControlCreateParams& SetBorderWidth(int borderWidth_)
        {
            borderWidth = borderWidth_;
            return *this;
        }
        public BorderedControlCreateParams& SetNormalBorderColor(const Color& normalBorderColor_)
        {
            normalBorderColor = normalBorderColor_;
            return *this;
        }
        public BorderedControlCreateParams& SetFocusedBorderColor(const Color& focusedBorderColor_)
        {
            focusedBorderColor = focusedBorderColor_;
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
        public Control* child;
        public BorderStyle borderStyle;
        public int borderWidth;
        public Color normalBorderColor;
        public Color focusedBorderColor;
    }

    public class BorderedControl : Control
    {
        private enum Flags : sbyte
        {
            none = 0, childFocused = 1 << 0
        }
        public BorderedControl(Control* child_, BorderStyle borderStyle_, const Color& normalBorderColor_, const Color& focusedBorderColor_,
            const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("System.Windows.BorderedControl", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            child_->BackgroundColor(), "borderedControl", location, size, dock, anchors),
            container(this), borderStyle(borderStyle_), normalBorderColor(normalBorderColor_), focusedBorderColor(focusedBorderColor_),
            borderWidth(GetBorderWidth(borderStyle)), child(child_)
        {
            auto result = container.AddChild(child);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = SetChildPos();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
        }
        public BorderedControl(Control* child, BorderStyle borderStyle, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(child, borderStyle, Color.Black(), Color.Blue(), location, size, dock, anchors)
        {
        }
        public BorderedControl(Control* child, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this(child, BorderStyle.single, location, size, dock, anchors)
        {
        }
        public explicit BorderedControl(Control* child) : this(child, Point(), Size(), Dock.none, Anchors.none)
        {
        }
        public BorderedControl(BorderedControlCreateParams& createParams) :
            base(createParams.controlCreateParams),
            container(this),
            borderStyle(createParams.borderStyle),
            borderWidth(createParams.borderWidth),
            normalBorderColor(createParams.normalBorderColor),
            focusedBorderColor(createParams.focusedBorderColor),
            child(createParams.child),
            flags(Flags.none)
        {
            auto result = container.AddChild(child);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
            result = SetChildPos();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return;
            }
        }
        [nodiscard]
        public Result<bool> SetNormalBorderColor(const Color& normalBorderColor_)
        {
            if (normalBorderColor != normalBorderColor_)
            {
                normalBorderColor = normalBorderColor_;
                auto result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> SetFocusedBorderColor(const Color& focusedBorderColor_)
        {
            if (focusedBorderColor != focusedBorderColor_)
            {
                focusedBorderColor = focusedBorderColor_;
                auto result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> SetBorderWidth(int borderWidth_)
        {
            borderWidth = borderWidth_;
            auto result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        protected override bool IsDecoratorControl() const
        {
            return true;
        }
        public override ContainerControl* GetContainerControl() const
        {
            if (child is ContainerControl*)
            {
                return cast<ContainerControl*>(child);
            }
            return base->GetContainerControl();
        }
        internal override Control* GetFirstEnabledTabStopControl() const
        {
            return child->GetFirstEnabledTabStopControl();
        }
        internal override Control* GetLastEnabledTabStopControl() const
        {
            return child->GetLastEnabledTabStopControl();
        }
        protected override void OnChildContentLocationChanged(ControlEventArgs& args)
        {
            base->OnChildContentLocationChanged(args);
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->OnChildContentLocationChanged(args);
            }
        }
        protected override void OnChildContentChanged(ControlEventArgs& args)
        {
            base->OnChildContentChanged(args);
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                parentControl->OnChildContentChanged(args);
            }
        }
        [nodiscard]
        protected override Result<bool> OnChildContentSizeChanged(ControlEventArgs& args)
        {
            auto result = base->OnChildContentSizeChanged(args);
            if (result.Error()) return result;
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                result = parentControl->OnChildContentSizeChanged(args);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnChildGotFocus(ControlEventArgs& args)
        {
            auto result = base->OnChildGotFocus(args);
            if (result.Error()) return result;
            SetChildFocused();
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                result = parentControl->OnChildGotFocus(args);
                if (result.Error()) return result;
            }
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnChildLostFocus(ControlEventArgs& args)
        {
            auto result = base->OnChildLostFocus(args);
            if (result.Error()) return result;
            ResetChildFocused();
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                result = parentControl->OnChildLostFocus(args);
                if (result.Error()) return result;
            }
            result = Invalidate();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                auto handleResult = ToHexString(cast<ulong>(Handle()));
                if (handleResult.Error())
                {
                    return Result<bool>(ErrorId(handleResult.GetErrorId()));
                }
                auto parentTextResult = ParentText();
                if (parentTextResult.Error())
                {
                    return Result<bool>(ErrorId(parentTextResult.GetErrorId()));
                }
                auto locationResult = Location();
                if (locationResult.Error())
                {
                    return Result<bool>(ErrorId(locationResult.GetErrorId()));
                }
                auto result = log->WriteLine(string(' ', level) + "BorderedControl." + Text() + ".handle=" + handleResult.Value() + " " +
                    parentTextResult.Value() + "[" + Rect(locationResult.Value(), GetSize()).ToString() + "]");
                if (result.Error()) return result;
            }
            Component* child = container.FirstChild();
            while (child != null)
            {
                if (child is Control*)
                {
                    Control* childControl = cast<Control*>(child);
                    auto result = childControl->PrintWindowTree(level + 1);
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                }
                child = child->NextSibling();
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnLocationChanged()
        {
            auto result = base->OnLocationChanged();
            if (result.Error()) return result;
            result = SetChildPos();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnSizeChanged(SizeChangedEventArgs& args)
        {
            auto result = base->OnSizeChanged(args);
            if (result.Error()) return result;
            result = SetChildPos();
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnChildSizeChanged(ControlEventArgs& args)
        {
            auto result = base->OnChildSizeChanged(args);
            if (result.Error()) return result;
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                result = parentControl->FireChildSizeChanged(args);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnPaint(PaintEventArgs& args)
        {
            if (Debug.Paint())
            {
                Rect r(Point(), GetSize());
                LogView* log = Application.GetLogView();
                if (log != null)
                {
                    auto result = log->WriteLine("BorderedControl.OnPaint: " + r.ToString());
                    if (result.Error()) return result;
                }
            }
            auto result = DrawBorder(args.graphics);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return base->OnPaint(args);
        }
        [nodiscard]
        private Result<bool> SetChildPos()
        {
            Point loc;
            Size size = GetSize();
            Rect childRect(loc, size);
            childRect.Inflate(-borderWidth, -borderWidth);
            auto result = child->SetLocation(childRect.location);
            if (result.Error()) return result;
            result = child->SetSize(childRect.size);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private Result<bool> DrawBorder(Graphics& graphics)
        {
            switch (borderStyle)
            {
                case BorderStyle.single:
                {
                    auto result = DrawSingleBorder(graphics);
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    break;
                }
                case BorderStyle.style3D:
                {
                    auto result = Draw3DBorder(graphics);
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    break;
                }
            }
            return Result<bool>(true);
        }
        private Result<bool> DrawSingleBorder(Graphics& graphics)
        {
            Rect r(Point(), GetSize());
            r.size.w = r.size.w - 1;
            r.size.h = r.size.h - 1;
            if (ChildFocused())
            {
                Pen pen(focusedBorderColor, 1);
                if (pen.Error())
                {
                    return Result<bool>(ErrorId(pen.GetErrorId()));
                }
                auto drawResult = graphics.DrawRectangle(pen, r);
                if (drawResult.Error())
                {
                    return Result<bool>(ErrorId(drawResult.GetErrorId()));
                }
            }
            else
            {
                Pen pen(normalBorderColor, 1);
                if (pen.Error())
                {
                    return Result<bool>(ErrorId(pen.GetErrorId()));
                }
                auto drawResult = graphics.DrawRectangle(pen, r);
                if (drawResult.Error())
                {
                    return Result<bool>(ErrorId(drawResult.GetErrorId()));
                }
            }
            return Result<bool>(true);
        }
        private Result<bool> Draw3DBorder(Graphics& graphics)
        {
            Rect r(Point(), GetSize());
            r.size.w = r.size.w - 1;
            r.size.h = r.size.h - 1;
            Pen outerLeftTopEdgePen(Color(160u, 160u, 160u), 1);
            if (outerLeftTopEdgePen.Error())
            {
                return Result<bool>(ErrorId(outerLeftTopEdgePen.GetErrorId()));
            }
            auto drawResult = graphics.DrawLine(outerLeftTopEdgePen, r.location, Point(r.location.x + r.size.w - 1, r.location.y));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            drawResult = graphics.DrawLine(outerLeftTopEdgePen, r.location, Point(r.location.x, r.location.y + r.size.h - 1));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            Pen outerRightBottomEdgePen(Color.White(), 1);
            if (outerRightBottomEdgePen.Error())
            {
                return Result<bool>(ErrorId(outerRightBottomEdgePen.GetErrorId()));
            }
            drawResult = graphics.DrawLine(outerRightBottomEdgePen, Point(r.location.x + r.size.w, r.location.y), Point(r.location.x + r.size.w, r.location.y + r.size.h));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            drawResult = graphics.DrawLine(outerRightBottomEdgePen, Point(r.location.x, r.location.y + r.size.h), Point(r.location.x + r.size.w, r.location.y + r.size.h));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            r.Inflate(-1, -1);
            Pen innerLeftTopEdgePen(Color(105u, 105u, 105u), 1);
            if (innerLeftTopEdgePen.Error())
            {
                return Result<bool>(ErrorId(innerLeftTopEdgePen.GetErrorId()));
            }
            drawResult = graphics.DrawLine(innerLeftTopEdgePen, r.location, Point(r.location.x + r.size.w - 1, r.location.y));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            drawResult = graphics.DrawLine(innerLeftTopEdgePen, r.location, Point(r.location.x, r.location.y + r.size.h - 1));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            Pen innerRightBottomEdgePen(Color(227u, 227u, 227u), 1);
            if (innerRightBottomEdgePen.Error())
            {
                return Result<bool>(ErrorId(innerRightBottomEdgePen.GetErrorId()));
            }
            drawResult = graphics.DrawLine(innerRightBottomEdgePen, Point(r.location.x + r.size.w, r.location.y), Point(r.location.x + r.size.w, r.location.y + r.size.h));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            drawResult = graphics.DrawLine(innerRightBottomEdgePen, Point(r.location.x, r.location.y + r.size.h), Point(r.location.x + r.size.w, r.location.y + r.size.h));
            if (drawResult.Error())
            {
                return Result<bool>(ErrorId(drawResult.GetErrorId()));
            }
            return Result<bool>(true);
        }
        private inline bool ChildFocused() const
        {
            return (flags & Flags.childFocused) != Flags.none;
        }
        private inline void SetChildFocused()
        {
            flags = cast<Flags>(flags | Flags.childFocused);
        }
        private inline void ResetChildFocused()
        {
            flags = cast<Flags>(flags & ~Flags.childFocused);
        }
        private ComponentContainer container;
        private BorderStyle borderStyle;
        private int borderWidth;
        private Color normalBorderColor;
        private Color focusedBorderColor;
        private Control* child;
        private Flags flags;
    }
}
