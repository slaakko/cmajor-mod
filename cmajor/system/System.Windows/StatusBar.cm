// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public class StatusBar : Control
    {
        private enum Flags : sbyte
        {
            none = 0, changed = 1 << 0
        }

        private const int initialHeight = 20;
        private const int topLineWidth = 1;

        public StatusBar(const Font& font_, const Color& backgroundColor, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("System.Windows.StatusBar", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            backgroundColor, "statusBar", location, size, dock, anchors), flags(Flags.none), font(font_), stringFormat(), textColor(Color.Black()),
            textBrush(textColor),
            topLineColor(215u, 215u, 215u), topLinePen(topLineColor, 1.0f),
            sunkenBorderOuterTopLeftColor(160u, 160u,160u), sunkenBorderOuterTopLeftPen(sunkenBorderOuterTopLeftColor, 1.0f),
            sunkenBorderInnerTopLeftColor(105u, 105u, 105u), sunkenBorderInnerTopLeftPen(sunkenBorderInnerTopLeftColor, 1.0f),
            sunkenBorderOuterRightBottomColor(Color.White()), sunkenBorderOuterRightBottomPen(sunkenBorderOuterRightBottomColor, 1.0f),
            sunkenBorderInnerRightBottomColor(227u, 227u, 227u), sunkenBorderInnerRightBottomPen(sunkenBorderInnerRightBottomColor, 1.0f),
            raisedBorderOuterTopLeftColor(227u, 227u, 227u), raisedBorderOuterTopLeftPen(raisedBorderOuterTopLeftColor, 1.0f),
            raisedBorderOuterRightBottomColor(105u, 105u, 105u), raisedBorderOuterRightBottomPen(raisedBorderOuterRightBottomColor, 1.0f),
            raisedBorderInnerTopLeftColor(Color.White()), raisedBorderInnerTopLeftPen(raisedBorderInnerTopLeftColor, 1.0f),
            raisedBorderInnerRightBottomColor(160u, 160u,160u), raisedBorderInnerRightBottomPen(raisedBorderInnerRightBottomColor, 1.0f)
        {
            SetChanged();
            if (topLinePen.Error())
            {
                SetErrorId(topLinePen.GetErrorId());
                return;
            }
            if (sunkenBorderOuterTopLeftPen.Error())
            {
                SetErrorId(sunkenBorderOuterTopLeftPen.GetErrorId());
                return;
            }
            if (sunkenBorderOuterRightBottomPen.Error())
            {
                SetErrorId(sunkenBorderOuterRightBottomPen.GetErrorId());
                return;
            }
            if (sunkenBorderInnerRightBottomPen.Error())
            {
                SetErrorId(sunkenBorderInnerRightBottomPen.GetErrorId());
                return;
            }
            if (raisedBorderOuterTopLeftPen.Error())
            {
                SetErrorId(raisedBorderOuterTopLeftPen.GetErrorId());
                return;
            }
            if (raisedBorderOuterRightBottomPen.Error())
            {
                SetErrorId(raisedBorderOuterRightBottomPen.GetErrorId());
                return;
            }
            if (raisedBorderInnerTopLeftPen.Error())
            {
                SetErrorId(raisedBorderInnerTopLeftPen.GetErrorId());
                return;
            }
            if (raisedBorderInnerRightBottomPen.Error())
            {
                SetErrorId(raisedBorderInnerRightBottomPen.GetErrorId());
                return;
            }
        }
        public StatusBar() : this(Font(FontFamily("Segoe UI"), 9.0f), DefaultControlBackgroundColor(), Point(0, 0), Size(0, initialHeight), Dock.bottom, Anchors.none)
        {
        }
        public void AddItem(StatusBarItem* statusBarItem)
        {
            statusBarItem->SetStatusBar(this);
            statusBarItems.Add(UniquePtr<StatusBarItem>(statusBarItem));
            SetChanged();
        }
        public inline const Color& TextColor() const
        {
            return textColor;
        }
        public void SetTextColor(const Color& textColor_)
        {
            if (textColor != textColor_)
            {
                SetChanged();
                textColor = textColor_;
                textBrush = SolidBrush(textColor);
            }
        }
        internal inline const Brush& TextBrush() const
        {
            return textBrush;
        }
        internal inline const Font& TextFont() const
        {
            return font;
        }
        internal inline const Pen& TopLinePen() const
        {
            return topLinePen;
        }
        public inline const Color& TopLineColor() const
        {
            return topLineColor;
        }
        public void SetTopLineColor(const Color& topLineColor_)
        {
            if (topLineColor != topLineColor_)
            {
                SetChanged();
                topLineColor = topLineColor_;
                topLinePen = Pen(topLineColor, 1.0f);
            }
        }
        public inline const Color& SunkenBorderOuterTopLeftColor() const
        {
            return sunkenBorderOuterTopLeftColor;
        }
        public void SetSunkenBorderOuterTopLeftColor(const Color& sunkenBorderOuterTopLeftColor_)
        {
            if (sunkenBorderOuterTopLeftColor != sunkenBorderOuterTopLeftColor_)
            {
                SetChanged();
                sunkenBorderOuterTopLeftColor = sunkenBorderOuterTopLeftColor_;
                sunkenBorderOuterTopLeftPen = Pen(sunkenBorderOuterTopLeftColor, 1.0f);
            }
        }
        internal inline const Pen& SunkenBorderOuterTopLeftPen() const
        {
            return sunkenBorderOuterTopLeftPen;
        }
        public inline const Color& SunkenBorderInnerTopLeftColor() const
        {
            return sunkenBorderInnerTopLeftColor;
        }
        public void SetSunkenBorderInnerTopLeftColor(const Color& sunkenBorderInnerTopLeftColor_)
        {
            if (sunkenBorderInnerTopLeftColor != sunkenBorderInnerTopLeftColor_)
            {
                SetChanged();
                sunkenBorderInnerTopLeftColor = sunkenBorderInnerTopLeftColor_;
                sunkenBorderInnerTopLeftPen = Pen(sunkenBorderInnerTopLeftColor, 1.0f);
            }
        }
        internal inline const Pen& SunkenBorderInnerTopLeftPen() const
        {
            return sunkenBorderInnerTopLeftPen;
        }
        public inline const Color& SunkenBorderOuterRightBottomColor() const
        {
            return sunkenBorderOuterRightBottomColor;
        }
        public void SetSunkenBorderOuterRightBottomColor(const Color& sunkenBorderOuterRightBottomColor_)
        {
            if (sunkenBorderOuterRightBottomColor != sunkenBorderOuterRightBottomColor_)
            {
                SetChanged();
                sunkenBorderOuterRightBottomColor = sunkenBorderOuterRightBottomColor_;
                sunkenBorderOuterRightBottomPen = Pen(sunkenBorderOuterRightBottomColor, 1.0f);
            }
        }
        internal inline const Pen& SunkenBorderOuterRightBottomPen() const
        {
            return sunkenBorderOuterRightBottomPen;
        }
        public inline const Color& SunkenBorderInnerRightBottomColor() const
        {
            return sunkenBorderInnerRightBottomColor;
        }
        public void SetSunkenBorderInnerRightBottomColor(const Color& sunkenBorderInnerRightBottomColor_)
        {
            if (sunkenBorderInnerRightBottomColor != sunkenBorderInnerRightBottomColor_)
            {
                SetChanged();
                sunkenBorderInnerRightBottomColor = sunkenBorderInnerRightBottomColor_;
                sunkenBorderInnerRightBottomPen = Pen(sunkenBorderInnerRightBottomColor, 1.0f);
            }
        }
        internal inline const Pen& SunkenBorderInnerRightBottomPen() const
        {
            return sunkenBorderInnerRightBottomPen;
        }
        public inline const Color& RaisedBorderOuterTopLeftColor() const
        {
            return raisedBorderOuterTopLeftColor;
        }
        public void SetRaisedBorderOuterTopLeftColor(const Color& raisedBorderOuterTopLeftColor_)
        {
            if (raisedBorderOuterTopLeftColor != raisedBorderOuterTopLeftColor_)
            {
                SetChanged();
                raisedBorderOuterTopLeftColor = raisedBorderOuterTopLeftColor_;
                raisedBorderOuterTopLeftPen = Pen(raisedBorderOuterTopLeftColor, 1.0f);
            }
        }
        internal inline const Pen& RaisedBorderOuterTopLeftPen() const
        {
            return raisedBorderOuterTopLeftPen;
        }
        public inline const Color& RaisedBorderOuterRightBottomColor() const
        {
            return raisedBorderOuterRightBottomColor;
        }
        public void SetRaisedBorderRightBottomColor(const Color& raisedBorderOuterRightBottomColor_)
        {
            if (raisedBorderOuterRightBottomColor != raisedBorderOuterRightBottomColor_)
            {
                SetChanged();
                raisedBorderOuterRightBottomColor = raisedBorderOuterRightBottomColor_;
                raisedBorderOuterRightBottomPen = Pen(raisedBorderOuterRightBottomColor, 1.0f);
            }
        }
        internal inline const Pen& RaisedBorderOuterRightBottomPen() const
        {
            return raisedBorderOuterRightBottomPen;
        }
        public inline const Color& RaisedBorderInnerTopLeftColor() const
        {
            return raisedBorderInnerTopLeftColor;
        }
        public void SetRaisedBorderInnerTopLeftColor(const Color& raisedBorderInnerTopLeftColor_)
        {
            if (raisedBorderInnerTopLeftColor != raisedBorderInnerTopLeftColor_)
            {
                SetChanged();
                raisedBorderInnerTopLeftColor = raisedBorderInnerTopLeftColor_;
                raisedBorderInnerTopLeftPen = Pen(raisedBorderInnerTopLeftColor, 1.0f);
            }
        }
        internal inline const Pen& RaisedBorderInnerTopLeftPen() const
        {
            return raisedBorderInnerTopLeftPen;
        }

        public inline const Color& RaisedBorderInnerRightBottomColor() const
        {
            return raisedBorderInnerRightBottomColor;
        }
        public void SetRaisedBorderInnerRightBottomColor(const Color& raisedBorderInnerRightBottomColor_)
        {
            if (raisedBorderInnerRightBottomColor != raisedBorderInnerRightBottomColor_)
            {
                SetChanged();
                raisedBorderInnerRightBottomColor = raisedBorderInnerRightBottomColor_;
                raisedBorderInnerRightBottomPen = Pen(raisedBorderInnerRightBottomColor, 1.0f);
            }
        }
        internal inline const Pen& RaisedBorderInnerRightBottomPen() const
        {
            return raisedBorderInnerRightBottomPen;
        }
        protected override Padding DefaultPadding() const
        {
            return Padding(4, 4, 4, 4);
        }
        [nodiscard]
        protected override Result<bool> OnPaint(PaintEventArgs& args)
        {
            if (Changed())
            {
                ResetChanged();
                auto result = Measure(args.graphics);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
            }
            auto result = args.graphics.Clear(BackgroundColor());
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            result = DrawTopLine(args.graphics);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            result = DrawItems(args.graphics);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return base->OnPaint(args);
        }
        private Result<bool> DrawTopLine(Graphics& graphics)
        {
            Size size = GetSize();
            Point start(0, 0);
            Point end(size.w - 1, 0);
            auto result = graphics.DrawLine(topLinePen, start, end);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        private Result<bool> DrawItems(Graphics& graphics)
        {
            long n = statusBarItems.Count();
            for (long i = 0; i < n; ++i)
            {
                StatusBarItem* item = statusBarItems[i].Get();
                auto result = item->Draw(graphics);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        private Result<bool> Measure(Graphics& graphics)
        {
            LogView* logView = Application.GetLogView();
            Padding padding = DefaultPadding();
            int statusBarItemBorderWidth = StatusBarItem.BorderWidth();
            int statusBarItemHorizontalPadding = StatusBarItem.HorizontalPadding();
            int textHeight = 0;
            long n = statusBarItems.Count();
            for (long i = 0; i < n; ++i)
            {
                StatusBarItem* item = statusBarItems[i].Get();
                string s = item->Text();
                auto utf32Result = ToUtf32(s);
                if (utf32Result.Error())
                {
                    return Result<bool>(ErrorId(utf32Result.GetErrorId()));
                }
                ustring u(Rvalue(utf32Result.Value()));
                string z('0', u.Length());
                auto result = graphics.MeasureStringRectF(z, font, PointF(0, 0), stringFormat);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
                RectF rect = result.Value();
                textHeight = Max(textHeight, cast<int>(rect.size.h));
                item->SetTextWidth(cast<int>(rect.size.w));
            }
            if (textHeight != 0)
            {
                int height = topLineWidth + padding.Vertical() + 2 * statusBarItemBorderWidth + textHeight;
                Size size = GetSize();
                size.h = height;
                auto result = SetSize(size);
                if (result.Error()) return result;
                result = DockWindow();
                if (result.Error()) return result;
                Point leftOrigin(padding.left, topLineWidth + padding.top);
                long springIndex = -1;
                for (long i = 0; i < n; ++i)
                {
                    StatusBarItem* item = statusBarItems[i].Get();
                    if (item->Spring())
                    {
                        springIndex = i;
                        break;
                    }
                    item->SetLocation(leftOrigin);
                    item->SetSize(Size(2 * statusBarItemBorderWidth + statusBarItemHorizontalPadding + item->TextWidth(), 2 * statusBarItemBorderWidth + textHeight));
                    leftOrigin.x = leftOrigin.x + item->GetSize().w;
                }
                Point rightOrigin(size.w - 1 - padding.right, topLineWidth + padding.top);
                if (springIndex != -1)
                {
                    for (long i = n - 1; i > springIndex; --i)
                    {
                        StatusBarItem* item = statusBarItems[i].Get();
                        if (item->Spring())
                        {
                            break;
                        }
                        item->SetSize(Size(2 * statusBarItemBorderWidth + statusBarItemHorizontalPadding + item->TextWidth(), 2 * statusBarItemBorderWidth + textHeight));
                        rightOrigin.x = rightOrigin.x - item->GetSize().w;
                        item->SetLocation(rightOrigin);
                    }
                    StatusBarItem* springItem = statusBarItems[springIndex].Get();
                    springItem->SetLocation(leftOrigin);
                    springItem->SetSize(Size(rightOrigin.x - leftOrigin.x + 1, 2 * statusBarItemBorderWidth + textHeight));
                }
            }
            return Result<bool>(true);
        }
        private inline bool Changed() const
        {
            return (flags & Flags.changed) != Flags.none;
        }
        public inline void SetChanged()
        {
            flags = cast<Flags>(flags | Flags.changed);
        }
        private inline void ResetChanged()
        {
            flags = cast<Flags>(flags & ~Flags.changed);
        }
        private Flags flags;
        private Font font;
        private StringFormat stringFormat;
        private List<UniquePtr<StatusBarItem>> statusBarItems;
        private Color textColor;
        private SolidBrush textBrush;
        private Color topLineColor;
        private Pen topLinePen;
        private Color sunkenBorderOuterTopLeftColor;
        private Pen sunkenBorderOuterTopLeftPen;
        private Color sunkenBorderInnerTopLeftColor;
        private Pen sunkenBorderInnerTopLeftPen;
        private Color sunkenBorderOuterRightBottomColor;
        private Pen sunkenBorderOuterRightBottomPen;
        private Color sunkenBorderInnerRightBottomColor;
        private Pen sunkenBorderInnerRightBottomPen;
        private Color raisedBorderOuterTopLeftColor;
        private Pen raisedBorderOuterTopLeftPen;
        private Color raisedBorderOuterRightBottomColor;
        private Pen raisedBorderOuterRightBottomPen;
        private Color raisedBorderInnerTopLeftColor;
        private Pen raisedBorderInnerTopLeftPen;
        private Color raisedBorderInnerRightBottomColor;
        private Pen raisedBorderInnerRightBottomPen;
    }

    public class StatusBarItem
    {
        public enum BorderStyle : sbyte
        {
            flat, sunken, raised
        }
        public static int BorderWidth()
        {
            return 2;
        }
        public static int HorizontalPadding()
        {
            return 8;
        }
        public StatusBarItem(const string& text_, BorderStyle borderStyle_, bool spring_) : statusBar(null), text(text_), borderStyle(borderStyle_), spring(spring_)
        {
        }
        public StatusBarItem(const string& text, BorderStyle borderStyle) : this(text, borderStyle, false)
        {
        }
        public StatusBarItem(const string& text) : this(text, BorderStyle.flat)
        {
        }
        public StatusBarItem() : this(string())
        {
        }
        public const Point& Location() const
        {
            return location;
        }
        public void SetLocation(const Point& location_)
        {
            location = location_;
        }
        public const Size& GetSize() const
        {
            return size;
        }
        public void SetSize(const Size& size_)
        {
            size = size_;
        }
        public inline const string& Text() const
        {
            return text;
        }
        [nodiscard]
        public Result<bool> SetText(const string& text_)
        {
            if (text != text_)
            {
                text = text_;
                auto result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public inline int TextWidth() const
        {
            return textWidth;
        }
        public inline void SetTextWidth(int textWidth_)
        {
            textWidth = textWidth_;
        }
        public inline BorderStyle GetBorderStyle() const
        {
            return borderStyle;
        }
        [nodiscard]
        public Result<bool> SetBorderStyle(BorderStyle borderStyle_)
        {
            if (borderStyle != borderStyle_)
            {
                borderStyle = borderStyle_;
                auto result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public inline bool Spring() const
        {
            return spring;
        }
        [nodiscard]
        public Result<bool> SetSpring(bool spring_)
        {
            if (spring != spring_)
            {
                spring = spring_;
                auto result = Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        public default virtual ~StatusBarItem();
        [nodiscard]
        public Result<bool> Draw(Graphics& graphics)
        {
            auto result = DrawBorder(graphics);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            result = DrawText(graphics);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        private Result<bool> DrawText(Graphics& graphics)
        {
            const Brush& brush = statusBar->TextBrush();
            const Font& font = statusBar->TextFont();
            PointF origin(location.x + 2 + HorizontalPadding() / 2, location.y + 2);
            auto result = graphics.DrawString(text, font, origin, brush);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        private Result<bool> DrawBorder(Graphics& graphics)
        {
            switch (borderStyle)
            {
                case BorderStyle.sunken:
                {
                    auto result = DrawSunkenBorder(graphics);
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    break;
                }
                case BorderStyle.raised:
                {
                    auto result = DrawRaisedBorder(graphics);
                    if (result.Error())
                    {
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                    break;
                }
            }
            return Result<bool>(true);
        }
        private Result<bool> DrawSunkenBorder(Graphics& graphics)
        {
            const Pen& outerTopLeftPen = statusBar->SunkenBorderOuterTopLeftPen();
            auto result = graphics.DrawLine(outerTopLeftPen, location, Point(location.x + size.w - 2, location.y));
            if (result.Error()) return result;
            result = graphics.DrawLine(outerTopLeftPen, location, Point(location.x, location.y + size.h - 2));
            if (result.Error()) return result;
            const Pen& outerRightBottomPen = statusBar->SunkenBorderOuterRightBottomPen();
            result = graphics.DrawLine(outerRightBottomPen, Point(location.x + size.w - 1, location.y), Point(location.x + size.w - 1, location.y + size.h - 1));
            if (result.Error()) return result;
            result = graphics.DrawLine(outerRightBottomPen, Point(location.x, location.y + size.h -1), Point(location.x + size.w - 1, location.y + size.h - 1));
            if (result.Error()) return result;
            const Pen& innerTopLeftPen = statusBar->SunkenBorderInnerTopLeftPen();
            result = graphics.DrawLine(innerTopLeftPen, Point(location.x + 1, location.y + 1), Point(location.x + size.w - 3, location.y + 1));
            if (result.Error()) return result;
            result = graphics.DrawLine(innerTopLeftPen, Point(location.x + 1, location.y + 1), Point(location.x + 1, location.y + size.h - 3));
            if (result.Error()) return result;
            const Pen& innerRightBottomPen = statusBar->SunkenBorderInnerRightBottomPen();
            result = graphics.DrawLine(innerRightBottomPen, Point(location.x + size.w - 2, location.y + 1), Point(location.x + size.w - 2, location.y + size.h - 2));
            if (result.Error()) return result;
            result = graphics.DrawLine(innerRightBottomPen, Point(location.x + 1, location.y + size.h - 2), Point(location.x + size.w - 2, location.y + size.h - 2));
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private Result<bool> DrawRaisedBorder(Graphics& graphics)
        {
            const Pen& outerTopLeftPen = statusBar->RaisedBorderOuterTopLeftPen();
            auto result = graphics.DrawLine(outerTopLeftPen, location, Point(location.x + size.w - 2, location.y));
            if (result.Error()) return result;
            result = graphics.DrawLine(outerTopLeftPen, location, Point(location.x, location.y + size.h - 2));
            if (result.Error()) return result;
            const Pen& outerRightBottomPen = statusBar->RaisedBorderOuterRightBottomPen();
            result = graphics.DrawLine(outerRightBottomPen, Point(location.x + size.w - 1, location.y), Point(location.x + size.w - 1, location.y + size.h - 1));
            if (result.Error()) return result;
            result = graphics.DrawLine(outerRightBottomPen, Point(location.x, location.y + size.h - 1), Point(location.x + size.w - 1, location.y + size.h - 1));
            if (result.Error()) return result;
            const Pen& innerTopLeftPen = statusBar->RaisedBorderInnerTopLeftPen();
            result = graphics.DrawLine(innerTopLeftPen, Point(location.x + 1, location.y + 1), Point(location.x + size.w - 3, location.y + 1));
            if (result.Error()) return result;
            result = graphics.DrawLine(innerTopLeftPen, Point(location.x + 1, location.y + 1), Point(location.x + 1, location.y + size.h - 3));
            if (result.Error()) return result;
            const Pen& innerRightBottomPen = statusBar->RaisedBorderInnerRightBottomPen();
            result = graphics.DrawLine(innerRightBottomPen, Point(location.x + size.w - 2, location.y + 1), Point(location.x + size.w - 2, location.y + size.h - 2));
            if (result.Error()) return result;
            result = graphics.DrawLine(innerRightBottomPen, Point(location.x + 1, location.y + size.h - 2), Point(location.x + size.w - 2, location.y + size.h - 2));
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        internal void SetStatusBar(StatusBar* statusBar_)
        {
            statusBar = statusBar_;
        }
        [nodiscard]
        public Result<bool> Invalidate()
        {
            if (statusBar != null)
            {
                statusBar->SetChanged();
                auto result = statusBar->Invalidate();
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        private StatusBar* statusBar;
        private Point location;
        private Size size;
        private int textWidth;
        private string text;
        private BorderStyle borderStyle;
        private bool spring;
    }
}
