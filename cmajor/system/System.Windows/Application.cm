// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Windows.API;

namespace System.Windows
{
    public string CmajorRootDir()
    {
        string cmajorRootDir;
        int stringHandle = RtmGetEnvironmentVariable("CMAJOR_ROOT");
        if (stringHandle != -1)
        {
            cmajorRootDir = RtmGetString(stringHandle);
            RtmFreeString(stringHandle);
        }
        if (cmajorRootDir.IsEmpty())
        {
            WinFatalError("please set 'CMAJOR_ROOT' environment variable to contain /path/to/cmajor directory.");
        }
        return cmajorRootDir;
    }

    public string LogDir()
    {
        string cmajorRootDir = CmajorRootDir();
        string logDir = Path.Combine(cmajorRootDir, "log");
        Directory.CreateDirectories(logDir);
        return logDir;
    }

    public string ApplicationLogFilePath()
    {
        return Path.Combine(LogDir(), "application.log");
    }

    public delegate bool MessageProcessorFunction(void* windowHandle, uint msg, ulong wparam, long lparam, long& result, void*& originalWndProc);

    public class RunModalGuard
    {
        public RunModalGuard()
        {
            Application.SetRunningModal();
        }
        public ~RunModalGuard()
        {
            Application.ResetRunningModal();
        }
    }

    public static class Application
    {
        static Application() : logView(null), activeWindow(null), runningModal(false), errorId(0)
        {
            MessageProcessorFunction messageProcessorFunction = ProcessMessage;
            ModelessWindowKeyPreviewFunction keyPreviewFunction = ModelessWindowKeyPreview;
            void* messageProcessorFunctionAddress = cast<void*>(messageProcessorFunction);
            void* keyPreviewFunctionAddress = cast<void*>(keyPreviewFunction);
            WinInit(messageProcessorFunctionAddress, keyPreviewFunctionAddress);
        }
        public static void Init()
        {
        }
        public static int Run(Window& mainWindow)
        {
            mainWindow.SetAsMainWindow();
            SetMainWindow(&mainWindow);
            switch (mainWindow.GetWindowState())
            {
                case WindowState.normal:
                {
                    auto result = mainWindow.ShowWindow(ShowCommand.SW_SHOWNORMAL);
                    if (result.Error())
                    {
                        errorId = result.GetErrorId();
                        return 1;
                    }
                    break;
                }
                case WindowState.minimized:
                {
                    auto result = mainWindow.ShowWindow(ShowCommand.SW_MINIMIZE);
                    if (result.Error())
                    {
                        errorId = result.GetErrorId();
                        return 1;
                    }
                    break;
                }
                case WindowState.maximized:
                {
                    auto result = mainWindow.ShowWindow(ShowCommand.SW_MAXIMIZE);
                    if (result.Error())
                    {
                        errorId = result.GetErrorId();
                        return 1;
                    }
                    break;
                }
            }
            auto result = mainWindow.Show();
            if (result.Error())
            {
                errorId = result.GetErrorId();
                return 1;
            }
            mainWindow.Update();
            int exitCode = WinRun();
            return exitCode;
        }
        public static void RunModal()
        {
            RunModalGuard guard;
            WinRunModal();
        }
        public static void EndModal()
        {
            WinPostMessage(MainWindow()->Handle(), CM_ENDMODAL, 0u, 0);
        }
        public static void Exit(int exitCode)
        {
            WinPostQuitMessage(exitCode);
        }
        public static void Exit()
        {
            Exit(0);
        }
        public static void ProcessMessages()
        {
            int retval = WinApplicationMessageLoop();
        }
        private static bool ProcessMessage(void* windowHandle, uint msg, ulong wparam, long lparam, long& result, void*& originalWndProc)
        {
            Control* window = windowManager.GetWindow(windowHandle);
            if (window != null)
            {
                if (Debug.Messages())
                {
                    System.IO.LogWriter writer(ApplicationLogFilePath());
                    writer << GetCurrentDateTime().ToString() << endl();
                    auto messageNameResult = MessageNameMap.Instance().GetMessageName(msg);
                    if (!messageNameResult.Error())
                    {
                        writer << ">" << messageNameResult.Value() << endl();
                    }
                }
                Message message(windowHandle, msg, wparam, lparam, result);
                Result<bool> handledResult = window->ProcessMessageInternal(message);
                if (handledResult.Error())
                {
                    #if (DEBUG)
                    auto result = MessageBox.Show(handledResult.GetErrorMessage(), "error");
                    if (result.Error())
                    {
                        System.IO.LogWriter writer(ApplicationLogFilePath());
                        writer << GetCurrentDateTime().ToString() << result.GetErrorMessage() << endl();
                    }
                    #endif
                    return false;
                }
                bool handled = handledResult.Value();
                if (message.originalWndProc != null)
                {
                    originalWndProc = message.originalWndProc;
                }
                if (handled)
                {
                    result = message.result;
                }
                if (Debug.Messages())
                {
                    System.IO.LogWriter writer(ApplicationLogFilePath());
                    auto messageNameResult = MessageNameMap.Instance().GetMessageName(msg);
                    if (!messageNameResult.Error())
                    {
                        writer << "<" << messageNameResult.Value() << endl();
                    }
                }
                return handled;
            }
            return false;
        }
        public static WindowManager& GetWindowManager()
        {
            return windowManager;
        }
        public static ResourceManager& GetResourceManager()
        {
            return resourceManager;
        }
        public static LogView* GetLogView()
        {
            return logView;
        }
        public static void SetLogView(LogView* logView_)
        {
            logView = logView_;
        }
        public static Control* GetFocusedControl() const
        {
            void* focusedWindowHandle = WinGetFocus();
            if (focusedWindowHandle == null)
            {
                return null;
            }
            Control* focusedControl = windowManager.GetWindow(focusedWindowHandle);
            return focusedControl;
        }
        public static Window* GetActiveWindow()
        {
            return activeWindow;
        }
        public static void SetActiveWindow(Window* activeWindow_)
        {
            activeWindow = activeWindow_;
        }
        public static Window* MainWindow()
        {
            return mainWindow;
        }
        public static void SetMainWindow(Window* w)
        {
            mainWindow = w;
        }
        internal static void SetRunningModal()
        {
            runningModal = true;
        }
        internal static void ResetRunningModal()
        {
            runningModal = false;
        }
        public static bool RunningModal()
        {
            return runningModal;
        }
        public static bool Error()
        {
            return errorId != 0;
        }
        public static int ErrorId()
        {
            return errorId;
        }
        private static WindowManager windowManager;
        private static ResourceManager resourceManager;
        private static LogView* logView;
        private static Window* activeWindow;
        private static Window* mainWindow;
        private static bool runningModal;
        private static int errorId;
    }
}
