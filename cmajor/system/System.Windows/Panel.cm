// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Windows
{
    public ControlCreateParams& PanelControlCreateParams(ControlCreateParams& controlCreateParams)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.Panel");
    }

    public class PanelCreateParams
    {
        public PanelCreateParams(ControlCreateParams& controlCreateParams_) : controlCreateParams(controlCreateParams_)
        {
        }
        public PanelCreateParams& Defaults()
        {
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
    }

    public class Panel : ContainerControl
    {
        private enum Flags : sbyte
        {
            none = 0, dontPaint = 1 << 0
        }
        public Panel(const string& windowClassName, const string& text, const Point& location, const Size& size, Dock dock, Anchors anchors,
            const Color& backgroundColor) :
            base(windowClassName, DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            backgroundColor, text, location, size, dock, anchors)
        {
        }
        public Panel(const Point& location, const Size& size, Dock dock, Anchors anchors) :
            this("System.Windows.Panel", "panel", location, size, dock, anchors, DefaultControlBackgroundColor())
        {
        }
        public Panel(PanelCreateParams& createParams) : base(createParams.controlCreateParams)
        {
        }
        [nodiscard]
        public override Result<bool> PrintWindowTree(int level)
        {
            LogView* log = Application.GetLogView();
            if (log != null)
            {
                auto hexStringResult = ToHexString(cast<ulong>(Handle()));
                if (hexStringResult.Error())
                {
                    return Result<bool>(ErrorId(hexStringResult.GetErrorId()));
                }
                auto parentTextResult = ParentText();
                if (parentTextResult.Error())
                {
                    return Result<bool>(ErrorId(parentTextResult.GetErrorId()));
                }
                auto result = log->WriteLine(string(' ', level) + "Panel." + Text() + ".handle=" + hexStringResult.Value() + " " + parentTextResult.Value() +
                    "[" + Rect(Point(), GetSize()).ToString() + "]");
                if (result.Error()) return result;
            }
            Component* child = Children().FirstChild();
            while (child != null)
            {
                if (child is Control*)
                {
                    Control* childControl = cast<Control*>(child);
                    auto result = childControl->PrintWindowTree(level + 1);
                    if (result.Error()) return result;
                }
                child = child->NextSibling();
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnPaint(PaintEventArgs& args)
        {
            if (DontPaint()) return Result<bool>(false);
            if (Debug.Paint())
            {
                auto locationResult = Location();
                if (locationResult.Error())
                {
                    return Result<bool>(ErrorId(locationResult.GetErrorId()));
                }
                Point location = locationResult.Value();
                Rect r(location, GetSize());
                LogView* log = Application.GetLogView();
                if (log != null)
                {
                    auto result = log->WriteLine("Panel.OnPaint: " + r.ToString());
                    if (result.Error()) return result;
                }
            }
            auto clearResult = args.graphics.Clear(BackgroundColor());
            if (clearResult.Error())
            {
                return Result<bool>(ErrorId(clearResult.GetErrorId()));
            }
            return base->OnPaint(args);
        }
        public inline bool DontPaint() const
        {
            return (flags & Flags.dontPaint) != Flags.none;
        }
        public void SetDontPaint()
        {
            flags = cast<Flags>(flags | Flags.dontPaint);
        }
        public void ResetDontPaint()
        {
            flags = cast<Flags>(flags & ~Flags.dontPaint);
        }
        private Flags flags;
    }
}
