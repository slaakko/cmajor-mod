// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Windows.API;

namespace System.Windows
{
    public ControlCreateParams& ScrollableControlControlCreateParams(ControlCreateParams& controlCreateParams, Control* child)
    {
        return controlCreateParams.SetWindowClassName("System.Windows.ScrollableControl").SetBackgroundColor(child->BackgroundColor());
    }

    public class ScrollableControlCreateParams
    {
        public ScrollableControlCreateParams(ControlCreateParams& controlCreateParams_, Control* child_) :
            controlCreateParams(controlCreateParams_), child(child_)
        {
        }
        public ScrollableControlCreateParams& Defaults()
        {
            return *this;
        }
        public ControlCreateParams& controlCreateParams;
        public Control* child;
    }

    public class ScrollableControl : Control
    {
        public ScrollableControl(Control* child_, const Point& location, const Size& size, Dock dock, Anchors anchors) :
            base("System.Windows.ScrollableControl", DefaultWindowClassStyle(), DefaultChildWindowStyle(), DefaultExtendedWindowStyle(),
            child_->BackgroundColor(), "scrollableControl", location, size, dock, anchors), container(this), child(child_),
            verticalScrollUnit(0), horizontalScrollUnit(0), vpage(0u), vpos(0), vmin(0), vmax(0), hpage(0u), hpos(0), hmin(0), hmax(0),
            verticalScrollBarShown(false), horizontalScrollBarShown(false)
        {
            auto result = container.AddChild(child);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        public ScrollableControl(ScrollableControlCreateParams& createParams) :
            base(createParams.controlCreateParams), container(this), child(createParams.child),
            verticalScrollUnit(0), horizontalScrollUnit(0), vpage(0u), vpos(0), vmin(0), vmax(0), hpage(0u), hpos(0), hmin(0), hmax(0),
            verticalScrollBarShown(false), horizontalScrollBarShown(false)
        {
            auto result = container.AddChild(child);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        protected override bool IsDecoratorControl() const
        {
            return true;
        }
        [nodiscard]
        protected override Result<bool> OnLocationChanged()
        {
            auto result = base->OnLocationChanged();
            if (result.Error()) return result;
            result = child->SetLocation(Point());
            if (result.Error()) return result;
            result = child->SetSize(GetSize());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnSizeChanged(SizeChangedEventArgs& args)
        {
            auto result = base->OnSizeChanged(args);
            if (result.Error()) return result;
            result = child->SetLocation(Point());
            if (result.Error()) return result;
            result = child->SetSize(GetSize());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnChildSizeChanged(ControlEventArgs& args)
        {
            auto result = base->OnChildSizeChanged(args);
            if (result.Error()) return result;
            result = ChildSizeOrContentSizeChanged(args);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        protected override void OnChildContentChanged(ControlEventArgs& args)
        {
            base->OnChildContentChanged(args);
            hpos = 0;
            vpos = 0;
        }
        protected override void OnChildContentLocationChanged(ControlEventArgs& args)
        {
            base->OnChildContentLocationChanged(args);
            scrolledChild = args.control;
            Point childContentLocation = scrolledChild->ContentLocation();
            Pair<int, int> scrollUnits = scrolledChild->GetScrollUnits();
            int verticalScrollUnit = scrollUnits.first;
            int horizontalScrollUnit = scrollUnits.second;
            vpos = childContentLocation.y / verticalScrollUnit;
            SetScrollInfo(Handle(), ScrollBar.SB_VERT, ScrollInfoMask.SIF_POS, true, 0u, vpos, 0, 0);
            hpos = childContentLocation.x / horizontalScrollUnit;
            SetScrollInfo(Handle(), ScrollBar.SB_HORZ, ScrollInfoMask.SIF_POS, true, 0u, hpos, 0, 0);
        }
        [nodiscard]
        private Result<bool> ChildSizeOrContentSizeChanged(ControlEventArgs& args)
        {
            scrolledChild = args.control;
            Pair<int, int> scrollUnits = scrolledChild->GetScrollUnits();
            verticalScrollUnit = scrollUnits.first;
            horizontalScrollUnit = scrollUnits.second;
            Size scrolledChildClientSize = scrolledChild->GetSize();
            Size scrolledChildContentSize = scrolledChild->ContentSize();
            if (scrolledChildContentSize.h > scrolledChildClientSize.h)
            {
                vmin = 0;
                vmax = 1;
                vpage = 1u;
                if (verticalScrollUnit > 0)
                {
                    vmax = cast<int>(scrolledChildContentSize.h / verticalScrollUnit);
                    vpage = cast<uint>(scrolledChildClientSize.h / verticalScrollUnit);
                }
                SetScrollInfo(Handle(), ScrollBar.SB_VERT, cast<ScrollInfoMask>(ScrollInfoMask.SIF_POS | ScrollInfoMask.SIF_PAGE | ScrollInfoMask.SIF_RANGE), true,
                    vpage, vpos, vmin, vmax);
                auto result = ShowScrollBar(Handle(), ScrollBar.SB_VERT, true);
                if (result.Error()) return result;
                verticalScrollBarShown = true;
            }
            else
            {
                auto result = ShowScrollBar(Handle(), ScrollBar.SB_VERT, false);
                if (result.Error()) return result;
                verticalScrollBarShown = false;
            }
            if (scrolledChildContentSize.w > scrolledChildClientSize.w)
            {
                hmin = 0;
                hmax = 1;
                hpage = 1u;
                if (horizontalScrollUnit > 0)
                {
                    hmax = cast<int>(scrolledChildContentSize.w / horizontalScrollUnit);
                    hpage = cast<uint>(scrolledChildClientSize.w / horizontalScrollUnit);
                }
                SetScrollInfo(Handle(), ScrollBar.SB_HORZ, cast<ScrollInfoMask>(ScrollInfoMask.SIF_POS | ScrollInfoMask.SIF_PAGE | ScrollInfoMask.SIF_RANGE), true,
                    hpage, hpos, hmin, hmax);
                auto result = ShowScrollBar(Handle(), ScrollBar.SB_HORZ, true);
                if (result.Error()) return result;
                horizontalScrollBarShown = true;
            }
            else
            {
                auto result = ShowScrollBar(Handle(), ScrollBar.SB_HORZ, false);
                if (result.Error()) return result;
                horizontalScrollBarShown = false;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnChildContentSizeChanged(ControlEventArgs& args)
        {
            auto result = base->OnChildContentSizeChanged(args);
            if (result.Error()) return result;
            result = ChildSizeOrContentSizeChanged(args);
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnChildGotFocus(ControlEventArgs& args)
        {
            auto result = base->OnChildGotFocus(args);
            if (result.Error()) return result;
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                result = parentControl->OnChildGotFocus(args);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnChildLostFocus(ControlEventArgs& args)
        {
            auto result = base->OnChildLostFocus(args);
            if (result.Error()) return result;
            Control* parentControl = ParentControl();
            if (parentControl != null)
            {
                result = parentControl->OnChildLostFocus(args);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnHScroll(ScrollEventArgs& args)
        {
            auto result = base->OnHScroll(args);
            if (result.Error()) return result;
            if (args.errorId != 0) return Result<bool>(ErrorId(args.errorId));
            int trackPos;
            result = GetScrollInfo(Handle(), ScrollBar.SB_HORZ, hpage, hpos, hmin, hmax, trackPos);
            if (result.Error()) return result;
            int prevHPos = hpos;
            switch (args.request)
            {
                case SB_LINELEFT:
                {
                    --hpos;
                    break;
                }
                case SB_LINERIGHT:
                {
                    ++hpos;
                    break;
                }
                case SB_PAGELEFT:
                {
                    hpos = hpos - cast<int>(hpage);
                    break;
                }
                case SB_PAGERIGHT:
                {
                    hpos = hpos + cast<int>(hpage);
                    break;
                }
                case SB_THUMBTRACK:
                {
                    hpos = trackPos;
                    break;
                }
            }
            SetScrollInfo(Handle(), ScrollBar.SB_HORZ, ScrollInfoMask.SIF_POS, true, 0u, hpos, 0, 0);
            result = GetScrollInfo(Handle(), ScrollBar.SB_HORZ, hpage, hpos, hmin, hmax, trackPos);
            if (result.Error()) return result;
            if (prevHPos != hpos)
            {
                scrolledChild->SetContentLocationInternal(Point(horizontalScrollUnit * hpos, verticalScrollUnit * vpos));
                int xAmount = horizontalScrollUnit * (prevHPos - hpos);
                Rect updateRect = MakeUpdateRect(xAmount, 0);
                auto result = ScrollWindowEx(scrolledChild->Handle(), xAmount, 0, null, null, updateRect);
                if (result.Error()) return result;
                if (scrolledChild->IsDoubleBuffered())
                {
                    result = scrolledChild->Invalidate();
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> ScrollLineDown()
        {
            int trackPos;
            auto result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
            if (result.Error()) return result;
            int prevVPos = vpos;
            if (vpos != vmax)
            {
                ++vpos;
                SetScrollInfo(Handle(), ScrollBar.SB_VERT, ScrollInfoMask.SIF_POS, true, 0u, vpos, 0, 0);
                result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
                if (result.Error()) return result;
                if (prevVPos != vpos)
                {
                    scrolledChild->SetContentLocationInternal(Point(horizontalScrollUnit * hpos, verticalScrollUnit * vpos));
                    int yAmount = verticalScrollUnit * (prevVPos - vpos);
                    Rect updateRect = MakeUpdateRect(0, yAmount);
                    auto result = ScrollWindowEx(scrolledChild->Handle(), 0, yAmount, null, null, updateRect);
                    if (result.Error()) return result;
                    if (scrolledChild->IsDoubleBuffered())
                    {
                        result = scrolledChild->Invalidate();
                        if (result.Error()) return result;
                    }
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> ScrollLineUp()
        {
            int trackPos;
            auto result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
            if (result.Error()) return result;
            int prevVPos = vpos;
            if (vpos != vmin)
            {
                --vpos;
                SetScrollInfo(Handle(), ScrollBar.SB_VERT, ScrollInfoMask.SIF_POS, true, 0u, vpos, 0, 0);
                result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
                if (result.Error()) return result;
                if (prevVPos != vpos)
                {
                    scrolledChild->SetContentLocationInternal(Point(horizontalScrollUnit * hpos, verticalScrollUnit * vpos));
                    int yAmount = verticalScrollUnit * (prevVPos - vpos);
                    Rect updateRect = MakeUpdateRect(0, yAmount);
                    result = ScrollWindowEx(scrolledChild->Handle(), 0, yAmount, null, null, updateRect);
                    if (result.Error()) return result;
                    if (scrolledChild->IsDoubleBuffered())
                    {
                        result = scrolledChild->Invalidate();
                        if (result.Error()) return result;
                    }
                }
            }
            return Result<bool>(true);
        }
        protected override Result<bool> OnVScroll(ScrollEventArgs& args)
        {
            auto result = base->OnVScroll(args);
            if (result.Error()) return result;
            int trackPos;
            result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
            if (result.Error()) return result;
            int prevVPos = vpos;
            switch (args.request)
            {
                case SB_TOP:
                {
                    vpos = vmin;
                    break;
                }
                case SB_BOTTOM:
                {
                    vpos = vmax;
                    break;
                }
                case SB_LINEUP:
                {
                    --vpos;
                    break;
                }
                case SB_LINEDOWN:
                {
                    ++vpos;
                    break;
                }
                case SB_PAGEUP:
                {
                    vpos = vpos - cast<int>(vpage);
                    break;
                }
                case SB_PAGEDOWN:
                {
                    vpos = vpos + cast<int>(vpage);
                    break;
                }
                case SB_THUMBTRACK:
                {
                    vpos = trackPos;
                    break;
                }
            }
            SetScrollInfo(Handle(), ScrollBar.SB_VERT, ScrollInfoMask.SIF_POS, true, 0u, vpos, 0, 0);
            result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
            if (result.Error()) return result;
            if (prevVPos != vpos)
            {
                scrolledChild->SetContentLocationInternal(Point(horizontalScrollUnit * hpos, verticalScrollUnit * vpos));
                int yAmount = verticalScrollUnit * (prevVPos - vpos);
                Rect updateRect = MakeUpdateRect(0, yAmount);
                result = ScrollWindowEx(scrolledChild->Handle(), 0, yAmount, null, null, updateRect);
                if (result.Error()) return result;
                if (scrolledChild->IsDoubleBuffered())
                {
                    result = scrolledChild->Invalidate();
                    if (result.Error()) return result;
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        protected override Result<bool> OnMouseWheel(MouseWheelEventArgs& args)
        {
            auto result = base->OnMouseWheel(args);
            if (result.Error()) return result;
            if (!args.handled)
            {
                if (verticalScrollBarShown)
                {
                    int trackPos;
                    result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
                    if (result.Error()) return result;
                    int prevVPos = vpos;
                    vpos = cast<int>(vpos - args.distance / (2.0 * verticalScrollUnit));
                    SetScrollInfo(Handle(), ScrollBar.SB_VERT, ScrollInfoMask.SIF_POS, true, 0u, vpos, 0, 0);
                    result = GetScrollInfo(Handle(), ScrollBar.SB_VERT, vpage, vpos, vmin, vmax, trackPos);
                    if (result.Error()) return result;
                    if (prevVPos != vpos)
                    {
                        Point contentLocation(horizontalScrollUnit * hpos, verticalScrollUnit * vpos);
                        scrolledChild->SetContentLocationInternal(contentLocation);
                        int yAmount = verticalScrollUnit * (prevVPos - vpos);
                        Rect updateRect = MakeUpdateRect(0, yAmount);
                        result = ScrollWindowEx(scrolledChild->Handle(), 0, yAmount, null, null, updateRect);
                        if (result.Error()) return result;
                        if (scrolledChild->IsDoubleBuffered())
                        {
                            result = scrolledChild->Invalidate();
                            if (result.Error()) return result;
                        }
                    }
                    args.handled = true;
                }
            }
            return Result<bool>(true);
        }
        protected override Result<bool> TranslateChildGraphics(Graphics& graphics)
        {
            int dx = -hpos * horizontalScrollUnit;
            int dy = -vpos * verticalScrollUnit;
            if (dx != 0 || dy != 0)
            {
                auto result = graphics.TranslateTransform(dx, dy);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
            }
            return Result<bool>(true);
        }
        protected override void TranslateMousePos(Point& location)
        {
            int dx = hpos * horizontalScrollUnit;
            int dy = vpos * verticalScrollUnit;
            location.x = location.x + dx;
            location.y = location.y + dy;
        }
        protected override void TranslateContentLocation(Point& location)
        {
            int dx = hpos * horizontalScrollUnit;
            int dy = vpos * verticalScrollUnit;
            location.x = location.x - dx;
            location.y = location.y - dy;
        }
        internal override Control* GetFirstEnabledTabStopControl() const
        {
            return child->GetFirstEnabledTabStopControl();
        }
        internal override Control* GetLastEnabledTabStopControl() const
        {
            return child->GetLastEnabledTabStopControl();
        }
        private Rect MakeUpdateRect(int xAmount, int yAmount)
        {
            Point loc(0, 0);
            Size size = scrolledChild->GetSize();
            if (xAmount < 0)
            {
                loc.x = size.w + xAmount;
            }
            if (xAmount != 0)
            {
                size.w = Abs(xAmount);
            }
            if (yAmount < 0)
            {
                loc.y = size.h + yAmount;
            }
            if (yAmount != 0)
            {
                size.h = Abs(yAmount);
            }
            Rect updateRect(loc, size);
            updateRect.Inflate(horizontalScrollUnit, verticalScrollUnit);
            return updateRect;
        }
        private ComponentContainer container;
        private Control* child;
        private Control* scrolledChild;
        private int verticalScrollUnit;
        private int horizontalScrollUnit;
        private uint vpage;
        private int vpos;
        private int vmin;
        private int vmax;
        private uint hpage;
        private int hpos;
        private int hmin;
        private int hmax;
        private bool verticalScrollBarShown;
        private bool horizontalScrollBarShown;
    }
}
