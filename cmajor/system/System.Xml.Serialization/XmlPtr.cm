// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Concepts;

namespace System.Xml.Serialization
{
    public abstract class XmlPtrBase
    {
        public XmlPtrBase() : targetObjectId()
        {
        }
        public XmlPtrBase(const Uuid& targetObjectId_) : targetObjectId(targetObjectId_)
        {
        }
        public default virtual ~XmlPtrBase();
        public const Uuid& TargetObjectId() const
        {
            return targetObjectId;
        }
        public void SetTargetObjectId(const Uuid& targetObjectId_)
        {
            targetObjectId = targetObjectId_;
        }
        public abstract void SetPtr(XmlSerializable* s);
        private Uuid targetObjectId;
    }

    public class XmlPtr<T> : XmlPtrBase where Derived<T, XmlSerializable>
    {
        public XmlPtr() : base(), ptr(null)
        {
        }
        public explicit XmlPtr(T* ptr_) : base(ptr_->ObjectId()), ptr(ptr_)
        {
        }
        public void operator=(T* ptr_)
        {
            ptr = ptr_;
            if (ptr != null)
            {
                SetTargetObjectId(ptr->ObjectId());
            }
        }
        public T* Get() const
        {
            return ptr;
        }
        public void Reset()
        {
            ptr = null;
        }
        public void Reset(T* ptr_)
        {
            ptr = ptr_;
            if (ptr != null)
            {
                SetTargetObjectId(ptr->ObjectId());
            }
        }
        public inline bool IsNull() const
        {
            return ptr == null;
        }
        public T* operator->()
        {
            #assert(ptr != null);
            return ptr;
        }
        public inline const T* operator->() const
        {
            #assert(ptr != null);
            return ptr;
        }
        public inline T& operator*()
        {
            #assert(ptr != null);
            return *ptr;
        }
        public inline const T& operator*() const
        {
            #assert(ptr != null);
            return *ptr;
        }
        public override void SetPtr(XmlSerializable* s)
        {
            if (s == null)
            {
                ptr = null;
            }
            else
            {
                if (s is T*)
                {
                    ptr = cast<T*>(s);
                }
            }
        }
        private T* ptr;
    }

    public bool operator==<T>(const XmlPtr<T>& left, const XmlPtr<T>& right)
    {
        return left.Get() == right.Get();
    }

    public bool operator<<T>(const XmlPtr<T>& left, const XmlPtr<T>& right)
    {
        return left.Get() < right.Get();
    }
}

