// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Lex;

namespace System.Json
{
    [nodiscard]
    public Result<bool> ParseHexChar(uchar& value, const uchar*& p, const uchar* e, const System.Lex.Token& token)
    {
        if (p != e)
        {
            switch (cast<uchar>(*p))
            {
                case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
                {
                    value = cast<uchar>(16 * cast<int>(value) + cast<int>(*p) - cast<int>('0'));
                    break;
                }
                case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
                {
                    value = cast<uchar>(16 * cast<int>(value) + 10 + cast<int>(*p) - cast<int>('A'));
                    break;
                }
                case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
                {
                    value = cast<uchar>(16 * cast<int>(value) + 10 + cast<int>(*p) - cast<int>('a'));
                    break;
                }
            }
            ++p;
        }
        else
        {
            auto matchResult = ToUtf8(token.match.ToString());
            string matchStr;
            if (!matchResult.Error()) matchStr = matchResult.Value();
            int errorId = AllocateError("hex character expected at line " + ToString(token.line) + ": " + matchStr);
            return Result<bool>(ErrorId(errorId));
        }
        return Result<bool>(true);
    }
    public Result<uchar> ParseEscape(const uchar*& p, const uchar* e, const System.Lex.Token& token)
    {
        uchar value = '\0';
        if (p != e && (*p == 'x' || *p == 'X'))
        {
            ++p;
            while (p != e && ((*p >= '0' && *p <= '9') || (*p >= 'a' && *p <= 'f') || (*p >= 'A' && *p <= 'F')))
            {
                auto hexResult = ParseHexChar(value, p, e, token);
                if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            }
        }
        else if (p != e && (*p == 'd' || *p == 'D'))
        {
            ++p;
            while (p != e && *p >= '0' && *p <= '9')
            {
                value = cast<uchar>(10 * cast<int>(value) + cast<int>(*p) - cast<int>('0'));
                ++p;
            }
        }
        else if (p != e && (*p >= '0' && *p <= '7'))
        {
            while (p != e && *p >= '0' && *p <= '7')
            {
                value = cast<uchar>(8 * cast<int>(value) + cast<int>(*p) - cast<int>('0'));
                ++p;
            }
        }
        else if (p != e && *p == 'u')
        {
            ++p;
            auto hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
        }
        else if (p != e && *p == 'U')
        {
            ++p;
            auto hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
            hexResult = ParseHexChar(value, p, e, token);
            if (hexResult.Error()) return Result<uchar>(ErrorId(hexResult.GetErrorId()));
        }
        else if (p != e)
        {
            switch (cast<uchar>(*p))
            {
                case 'a': value = '\a';
                break;
                case 'b': value = '\b';
                break;
                case 'f': value = '\f';
                break;
                case 'n': value = '\n';
                break;
                case 'r': value = '\r';
                break;
                case 't': value = '\t';
                break;
                case 'v': value = '\v';
                break;
                default: value = *p;
                break;
            }
            ++p;
        }
        return Result<uchar>(value);
    }
    public Result<ustring> ParseStringLiteral(const Token& token)
    {
        ustring value;
        uchar* p = token.match.begin;
        uchar* e = token.match.end;
        if (p != e && *p == '"')
        {
            ++p;
        }
        while (p != e && *p != '"')
        {
            if (*p == '\\')
            {
                ++p;
                auto escapeResult = ParseEscape(p, e, token);
                if (escapeResult.Error()) return Result<ustring>(ErrorId(escapeResult.GetErrorId()));
                value.Append(escapeResult.Value());
            }
            else
            {
                value.Append(*p);
                ++p;
            }
        }
        if (p != e && *p == '"')
        {
            ++p;
        }
        if (p != e)
        {
            string matchValue;
            auto matchResult = ToUtf8(token.match.ToString());
            if (!matchResult.Error()) matchValue = matchResult.Value();
            int errorId = AllocateError("invalid string literal at line " + ToString(token.line) + ": " + matchValue);
            return Result<ustring>(ErrorId(errorId));
        }
        return Result<ustring>(value);
    }

    public Result<double> ParseNumber(const Token& token)
    {
        auto utf8result = ToUtf8(token.match.ToString());
        if (utf8result.Error()) return Result<double>(ErrorId(utf8result.GetErrorId()));
        return ParseDouble(utf8result.Value());
    }
}
