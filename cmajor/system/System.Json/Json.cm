// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;
using System.Text;

namespace System.Json
{
    public abstract class JsonValue
    {
        public JsonValue()
        {
        }
        public default virtual ~JsonValue();
        [nodiscard]
        public abstract Result<string> ToString() const;
        [nodiscard]
        public virtual Result<bool> Write(CodeFormatter& formatter)
        {
            Result<string> toStringResult = ToString();
            if (toStringResult.Error())
            {
                return Result<bool>(ErrorId(toStringResult.GetErrorId()));
            }
            auto result = formatter.Write(toStringResult.Value());
            if (result.Error()) return result;
            return Result<bool>(true);
        }
    }

    public class JsonNull : JsonValue
    {
        public JsonNull() : base()
        {
        }
        public override Result<string> ToString() const
        {
            return Result<string>("null");
        }
    }

    public class JsonNumber : JsonValue
    {
        public JsonNumber() : base(), value(0.0)
        {
        }
        public explicit JsonNumber(double value_) : value(value_)
        {
        }
        public override Result<string> ToString() const
        {
            if (value == cast<long>(value))
            {
                long x = cast<long>(value);
                return Result<string>(System.ToString(x));
            }
            return Result<string>(System.ToString(value));
        }
        public inline double Value() const
        {
            return value;
        }
        public inline void SetValue(double value_)
        {
            value = value_;
        }
        private double value;
    }

    public class JsonBool : JsonValue
    {
        public JsonBool() : base(), value(false)
        {
        }
        public explicit JsonBool(bool value_) : base(), value(value_)
        {
        }
        public override Result<string> ToString() const
        {
            return Result<string>(System.ToString(value));
        }
        public inline bool Value() const
        {
            return value;
        }
        public inline void SetValue(bool value_)
        {
            value = value_;
        }
        private bool value;
    }

    public class JsonString : JsonValue
    {
        public JsonString() : base(), value()
        {
        }
        public JsonString(const ustring& value_) : base(), value(value_)
        {
        }
        public inline const ustring& Value() const
        {
            return value;
        }
        public inline void SetValue(const ustring& value_)
        {
            value = value_;
        }
        public JsonString& Append(uchar c)
        {
            value.Append(c);
            return *this;
        }
        public JsonString& Append(const uchar* s)
        {
            value.Append(s);
            return *this;
        }
        public JsonString& Append(const ustring& s)
        {
            value.Append(s);
            return *this;
        }
        public override Result<string> ToString() const
        {
            wstring s = w'"';
            for (uchar c : value)
            {
                auto jsonCharStrResult = JsonCharStr(c);
                if (jsonCharStrResult.Error()) return Result<string>(ErrorId(jsonCharStrResult.GetErrorId()));
                s.Append(Rvalue(jsonCharStrResult.Value()));
            }
            s.Append(w'"');
            auto result = ToUtf8(s);
            if (result.Error()) return Result<string>(ErrorId(result.GetErrorId()));
            return Result<string>(Rvalue(result.Value()));
        }
        private Result<wstring> JsonCharStr(uchar c)
        {
            wstring result;
            ustring s(c);
            auto utf16result = ToUtf16(s);
            if (utf16result.Error()) return Result<wstring>(ErrorId(utf16result.GetErrorId()));
            wstring t = utf16result.Value();
            for (wchar x : t)
            {
                switch (x)
                {
                    case '"': result.Append(w"\\\""); break;
                    case '\\': result.Append(w"\\\\"); break;
                    case '\b': result.Append(w"\\b"); break;
                    case '\f': result.Append(w"\\f"); break;
                    case '\n': result.Append(w"\\n"); break;
                    case '\r': result.Append(w"\\r"); break;
                    case '\t': result.Append(w"\\t"); break;
                    default:
                    {
                        if (cast<ushort>(x) >= 32u && cast<ushort>(x) <= 126u)
                        {
                            result.Append(x);
                        }
                        else
                        {
                            auto hexStringResult = ToHexString(cast<ushort>(x));
                            if (hexStringResult.Error())
                            {
                                return Result<wstring>(ErrorId(hexStringResult.GetErrorId()));
                            }
                            auto utf16Result = ToUtf16(hexStringResult.Value());
                            if (utf16Result.Error())
                            {
                                return Result<wstring>(ErrorId(utf16Result.GetErrorId()));
                            }
                            const wstring& s = utf16Result.Value();
                            result.Append(w"\\u").Append(s);
                        }
                        break;
                    }
                }
            }
            return Result<wstring>(result);
        }
        private ustring value;
    }

    public class JsonObject : JsonValue
    {
        public JsonObject() : base(), fieldValues(), fieldMap()
        {
        }
        [nodiscard]
        public Result<bool> AddField(const string& fieldName, UniquePtr<JsonValue>&& fieldValue)
        {
            auto utf32Result = ToUtf32(fieldName);
            if (utf32Result.Error())
            {
                return Result<bool>(ErrorId(utf32Result.GetErrorId()));
            }
            AddField(utf32Result.Value(), Rvalue(fieldValue));
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> AddField(const wstring& fieldName, UniquePtr<JsonValue>&& fieldValue)
        {
            auto utf32Result = ToUtf32(fieldName);
            if (utf32Result.Error())
            {
                return Result<bool>(ErrorId(utf32Result.GetErrorId()));
            }
            AddField(utf32Result.Value(), Rvalue(fieldValue));
            return Result<bool>(true);
        }
        public void AddField(const ustring& fieldName, UniquePtr<JsonValue>&& fieldValue)
        {
            fieldMap[fieldName] = fieldValue.Get();
            fieldValues.Add(Rvalue(fieldValue));
        }
        [nodiscard]
        public Result<bool> AddField(const string& fieldName, JsonValue* fieldValue)
        {
            auto utf32Result = ToUtf32(fieldName);
            if (utf32Result.Error())
            {
                return Result<bool>(ErrorId(utf32Result.GetErrorId()));
            }
            AddField(utf32Result.Value(), fieldValue);
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> AddField(const wstring& fieldName, JsonValue* fieldValue)
        {
            auto utf32Result = ToUtf32(fieldName);
            if (utf32Result.Error())
            {
                return Result<bool>(ErrorId(utf32Result.GetErrorId()));
            }
            AddField(utf32Result.Value(), fieldValue);
            return Result<bool>(true);
        }
        public void AddField(const ustring& fieldName, JsonValue* fieldValue)
        {
            fieldMap[fieldName] = fieldValue;
            fieldValues.Add(UniquePtr<JsonValue>(fieldValue));
        }
        public Result<JsonValue*> GetField(const string& fieldName) const
        {
            auto utf32Result = ToUtf32(fieldName);
            if (utf32Result.Error())
            {
                return Result<JsonValue*>(ErrorId(utf32Result.GetErrorId()));
            }
            ustring ufieldName = Rvalue(utf32Result.Value());
            Result<JsonValue*> fieldValue = GetField(ufieldName);
            return fieldValue;
        }
        public Result<JsonValue*> GetField(const wstring& fieldName) const
        {
            auto utf32Result = ToUtf32(fieldName);
            if (utf32Result.Error())
            {
                return Result<JsonValue*>(ErrorId(utf32Result.GetErrorId()));
            }
            ustring ufieldName = Rvalue(utf32Result.Value());
            Result<JsonValue*> fieldValue = GetField(ufieldName);
            return fieldValue;
        }
        public JsonValue* GetField(const ustring& fieldName) const
        {
            auto i = fieldMap.Find(fieldName);
            if (i != fieldMap.End())
            {
                return i->second;
            }
            return null;
        }
        public const Map<ustring, JsonValue*>& Fields() const
        {
            return fieldMap;
        }
        public Map<ustring, JsonValue*>& Fields()
        {
            return fieldMap;
        }
        public override Result<string> ToString() const
        {
            string s = "{";
            bool first = true;
            for (const Pair<ustring, JsonValue*>& p : fieldMap)
            {
                JsonString fs = p.first;
                JsonValue* fv = p.second;
                if (first)
                {
                    first = false;
                }
                else
                {
                    s.Append(", ");
                }
                auto fsResult = fs.ToString();
                if (fsResult.Error())
                {
                    return Result<string>(ErrorId(fsResult.GetErrorId()));
                }
                auto fvResult = fv->ToString();
                if (fvResult.Error())
                {
                    return Result<string>(ErrorId(fvResult.GetErrorId()));
                }
                s.Append(fsResult.Value()).Append(":").Append(fvResult.Value());
            }
            s.Append("}");
            return Result<string>(s);
        }
        [nodiscard]
        public override Result<bool> Write(CodeFormatter& formatter)
        {
            auto result = formatter.WriteLine("{");
            if (result.Error()) return result;
            formatter.IncIndent();
            bool first = true;
            bool lastWasArrayOrObject = false;
            for (const Pair<ustring, JsonValue*>& p : fieldMap)
            {
                JsonString s = p.first;
                JsonValue* v = p.second;
                if (first)
                {
                    first = false;
                }
                else
                {
                    result = formatter.WriteLine(", ");
                    if (result.Error()) return result;
                }
                result = s.Write(formatter);
                if (result.Error()) return result;
                result = formatter.Write(" : ");
                if (result.Error()) return result;
                if ((v is JsonArray*) || (v is JsonObject*))
                {
                    result = formatter.WriteLine();
                    if (result.Error()) return result;
                    lastWasArrayOrObject = true;
                }
                else
                {
                    lastWasArrayOrObject = false;
                }
                result = v->Write(formatter);
                if (result.Error()) return result;
            }
            formatter.DecIndent();
            if (!lastWasArrayOrObject)
            {
                auto result = formatter.WriteLine();
                if (result.Error()) return result;
            }
            result = formatter.WriteLine("}");
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private List<UniquePtr<JsonValue>> fieldValues;
        private Map<ustring, JsonValue*> fieldMap;
    }

    public class JsonArray : JsonValue
    {
        public JsonArray() : base(), items()
        {
        }
        public void AddItem(UniquePtr<JsonValue>&& item)
        {
            items.Add(Rvalue(item));
        }
        public void AddItem(JsonValue* item)
        {
            items.Add(UniquePtr<JsonValue>(item));
        }
        public JsonValue* GetItem(long index) const
        {
            return items[index].Get();
        }
        public JsonValue* operator[](long index) const
        {
            return items[index].Get();
        }
        public inline long Count() const
        {
            return items.Count();
        }
        public override Result<string> ToString() const
        {
            string s = "[";
            bool first =  true;
            for (const UniquePtr<JsonValue>& item : items)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    s.Append(", ");
                }
                auto itemResult = item->ToString();
                if (itemResult.Error())
                {
                    return Result<string>(ErrorId(itemResult.GetErrorId()));
                }
                s.Append(itemResult.Value());
            }
            s.Append("]");
            return Result<string>(s);
        }
        [nodiscard]
        public override Result<bool> Write(CodeFormatter& formatter)
        {
            auto result = formatter.WriteLine("[");
            if (result.Error()) return result;
            formatter.IncIndent();
            bool first = true;
            bool lastWasArrayOrObject = false;
            for (const UniquePtr<JsonValue>& item : items)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    result = formatter.WriteLine(", ");
                    if (result.Error()) return result;
                }
                result = item->Write(formatter);
                if (result.Error()) return result;
                if ((item.Get() is JsonArray*) || (item.Get() is JsonObject*))
                {
                    lastWasArrayOrObject = true;
                }
                else
                {
                    lastWasArrayOrObject = false;
                }
            }
            formatter.DecIndent();
            if (!lastWasArrayOrObject)
            {
                result = formatter.WriteLine();
                if (result.Error()) return result;
            }
            result = formatter.WriteLine("]");
            if (result.Error()) return result;
            return Result<bool>(true);
        }
        private List<UniquePtr<JsonValue>> items;
    }

    public Result<UniquePtr<JsonValue>> ParseJson(const string& jsonText)
    {
        auto utf32Result = ToUtf32(jsonText);
        if (utf32Result.Error()) return Result<UniquePtr<JsonValue>>(ErrorId(utf32Result.GetErrorId()));
        return ParseJson(utf32Result.Value());
    }

    public Result<UniquePtr<JsonValue>> ParseJson(const wstring& jsonText)
    {
        auto utf32Result = ToUtf32(jsonText);
        if (utf32Result.Error()) return Result<UniquePtr<JsonValue>>(ErrorId(utf32Result.GetErrorId()));
        return ParseJson(utf32Result.Value());
    }

    public Result<UniquePtr<JsonValue>> ParseJson(const ustring& jsonText)
    {
        JsonLexer jsonLexer(jsonText.Chars(), jsonText.Chars() + jsonText.Length(), "json");
        Result<UniquePtr<JsonValue>> jsonValue = JsonParser<JsonLexer>.Parse(jsonLexer);
        return Rvalue(jsonValue);
    }
}
