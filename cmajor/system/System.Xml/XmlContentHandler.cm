// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Xml
{
    public class Attribute
    {
        public Attribute(const System.Lex.Span& span_, const ustring& namespaceUri_, const ustring& localName_, const ustring& qualifiedName_, const ustring& value_) :
            span(span_), namespaceUri(namespaceUri_), localName(localName_), qualifiedName(qualifiedName_), value(value_)
        {
        }
        public const System.Lex.Span& Span() const
        {
            return span;
        }
        public const ustring& NamespaceUri() const
        {
            return namespaceUri;
        }
        public const ustring& LocalName() const
        {
            return localName;
        }
        public const ustring& QualifiedName() const
        {
            return qualifiedName;
        }
        public const ustring& Value() const
        {
            return value;
        }
        private System.Lex.Span span;
        private ustring namespaceUri;
        private ustring localName;
        private ustring qualifiedName;
        private ustring value;
    }

    public class Attributes
    {
        public typedef List<Attribute>.Iterator Iterator;
        public typedef List<Attribute>.ConstIterator ConstIterator;
        public List<Attribute>.Iterator Begin()
        {
            return attributes.Begin();
        }
        public List<Attribute>.Iterator End()
        {
            return attributes.End();
        }
        public List<Attribute>.ConstIterator Begin() const
        {
            return attributes.CBegin();
        }
        public List<Attribute>.ConstIterator End() const
        {
            return attributes.CEnd();
        }
        public List<Attribute>.ConstIterator CBegin() const
        {
            return attributes.CBegin();
        }
        public List<Attribute>.ConstIterator CEnd() const
        {
            return attributes.CEnd();
        }
        public long Count() const
        {
            return attributes.Count();
        }
        public void Add(const Attribute& attribute)
        {
            attributes.Add(attribute);
        }
        public void Clear()
        {
            attributes.Clear();
        }
        public const ustring* GetAttributeValue(const ustring& namespaceUri, const ustring& localName) const
        {
            for (const Attribute& attribute : attributes)
            {
                if (attribute.NamespaceUri() == namespaceUri && attribute.LocalName() == localName)
                {
                    const ustring& value = attribute.Value();
                    return &value;
                }
            }
            return null;
        }
        public const ustring* GetAttributeValue(const ustring& qualifiedName) const
        {
            for (const Attribute& attribute : attributes)
            {
                if (attribute.QualifiedName() == qualifiedName)
                {
                    const ustring& value = attribute.Value();
                    return &value;
                }
            }
            return null;
        }
        private List<Attribute> attributes;
    }

    public class XmlContentHandler
    {
        public default virtual ~XmlContentHandler();
        public virtual Result<bool> StartDocument(const System.Lex.Span& span, int fileIndex)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> EndDocument()
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> Version(const ustring& xmlVersion)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> Standalone(bool standalone)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> Encoding(const ustring& encoding)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> HandleText(const System.Lex.Span& span, int fileIndex, const ustring& text)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> HandleComment(const System.Lex.Span& span, int fileIndex, const ustring& comment)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> HandlePI(const System.Lex.Span& span, int fileIndex, const ustring& target, const ustring& data)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> HandleCDataSection(const System.Lex.Span& span, int fileIndex, const ustring& cdata)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> StartElement(const System.Lex.Span& span, int fileIndex,
            const ustring& namespaceUri, const ustring& localName, const ustring& qualifiedName, const Attributes& attributes)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> EndElement(const ustring& namespaceUri, const ustring& localName, const ustring& qualifiedName)
        {
            return Result<bool>(true);
        }
        public virtual Result<bool> SkippedEntity(const ustring& entityName)
        {
            return Result<bool>(true);
        }
    }

} // namespace System.Xml
