// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

parser System.Xml.XmlParser
{
    lexer System.Lex.TrivialLexer;
    main;

    Document(System.Xml.XmlProcessor* processor) : bool
        ::= empty
            {
                auto result = processor->StartDocument(lexer.GetSpan(pos), lexer.FileIndex());
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
            (
                Prolog(processor):prolog
                Element(processor):element
                (
                    Misc(processor):misc
                )*
            )
            {
                auto result = processor->EndDocument();
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
                return true;
            }
        ;

    Char : uchar
        ::= ("[\x9\xA\xD\x20-\xD7FF\xE000-\xFFFD\x10000-\x10FFFF]"){ Token token = lexer.GetToken(pos); return cast<uchar>(token.id); }
        ;

    S : bool
        ::=
        (
            "[\x20\x9\xD\xA]"+
        )
        {
            return true;
        }
        ;

    NameStartChar : uchar
        ::=
        (
            "[:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\x2FF\x370-\x37D\x37F-\x1FFF\x200C-\x200D\x2070-\x218F\x2C00-\x2FEF\x3001-\xD7FF\xF900-\xFDCF\xFDF0-\xFFFD\x10000-\xEFFFF]"
            {
                return lexer.GetToken(pos).Chr();
            }
        )
        ;

    NameChar : uchar
        ::=
        (
            NameStartChar:nameStartChar
            {
                return nameStartChar;
            }
            |
            "[-.0-9\xB7\x300-\x36F\x203F-\x2040]"
            {
                return lexer.GetToken(pos).Chr();
            }
        )
        ;

    Name(var ustring s) : ustring
        ::=
        (
            NameStartChar:nameStartChar{ s.Append(nameStartChar); }
            (
                NameChar:nameChar{ s.Append(nameChar); }
            )*
        )
        {
            return s;
        }
        ;

    Names : bool
        ::=
        (
            Name:name1 ('\x20' Name:name2)*
        )
        {
            return true;
        }
        ;

    Nmtoken : bool
        ::=
        (
            NameChar:nameChar+
        )
        {
            return true;
        }
        ;

    Nmtokens : bool
        ::=
        (
            Nmtoken:nmToken1 ('\x20' Nmtoken:nmToken2)*
        )
        {
            return true;
        }
        ;

    Prolog(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            XMLDecl(processor):xmlDecl?
            Misc(processor):m1*
            (
                DocTypeDecl(processor):docTypeDecl
                Misc(processor):m2*
            )?
        )
        {
            return true;
        }
        ;

    XMLDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "<?xml"
            VersionInfo(processor):versionInfo
            EncodingDecl(processor):encodingDecl?
            SDDecl(processor):sdDecl?
            S:s?
            "?>"
        )
        {
           return true;
        }
        ;

    VersionInfo(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            S:s
            "version"
            Eq:eq
            VersionNumber(processor):versionNumber
        )
        {
            return true;
        }
        ;

    VersionNum(System.Xml.XmlProcessor* processor, var System.Lex.Lexeme m) : bool
        ::= ('1'{ m = lexer.GetToken(pos).match; } '.' ("[0-9]"{ m.end = lexer.GetToken(pos).match.end; })+)
        {
            auto result = processor->Version(m.ToString());
            if (result.Error())
            {
                return ErrorId(result.GetErrorId());
            }
            return true;
        }
        ;

    VersionNumDQ(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            '"'
            VersionNum(processor):versionNum
            '"'
        )
        {
            return true;
        }
        ;

    VersionNumSQ(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            '\''
            VersionNum(processor):versionNum
            '\''
        )
        {
            return true;
        }
        ;

    VersionNumber(System.Xml.XmlProcessor* processor) : bool
        ::=
        (   VersionNumDQ(processor):versionNumDQ
        |   VersionNumSQ(processor):versionNumSQ
        )
        {
            return true;
        }
        ;

    EncodingDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            S:s
            "encoding"
            Eq:eq
            EncName(processor):encName
        )
        {
            return true;
        }
        ;

    EncodingName(System.Xml.XmlProcessor* processor, var System.Lex.Lexeme m) : bool
        ::= ("[A-Za-z]"{ m = lexer.GetToken(pos).match; } ("[A-Za-z0-9._-]"{ m.end = lexer.GetToken(pos).match.end; })*)
        {
            auto result = processor->Encoding(m.ToString());
            if (result.Error())
            {
                return ErrorId(result.GetErrorId());
            }
            return true;
        }
        ;

    EncNameDQ(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            '"'
            EncodingName(processor):encodingName
            '"'
        )
        {
            return true;
        }
        ;

    EncNameSQ(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            '\''
            EncodingName(processor):encodingName
            '\''
        )
        {
            return true;
        }
        ;

    EncName(System.Xml.XmlProcessor* processor) : bool
        ::=
        (   EncNameDQ(processor):encNameDQ
        |   EncNameSQ(processor):encNameSQ
        )
        {
            return true;
        }
        ;

    SDDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            S:s
            "standalone"
            Eq:eq
            YesNo:yn
            {
                auto result = processor->Standalone(yn);
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
        )
        {
            return true;
        }
        ;

    DocTypeDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "<!DOCTYPE"
            S:s1
            Name:rootElementName
            (
                S:s2
                ExternalID:extID
            )?
            S:s3?
            (
                '['
                IntSubset(processor):intSubset
                ']'
                S:s4?
            )?
            '>'
        )
        {
            return true;
        }
        ;

    ExternalID : bool
        ::=
        (
            ("SYSTEM" S:s1 SystemLiteral:s2)
            |   ("PUBLIC" S:s3 PubidLiteral:p2 S:s4 SystemLiteral:s5)
        )
        {
            return true;
        }
        ;

    SystemLiteral : bool
        ::=
        (
            ('"' ("[^\"]"*) '"') | ('\'' ("[^']"*) '\'')
        )
        {
            return true;
        }
        ;

    PubidLiteral : bool
        ::=
        (
            '"'
            (PubidChar:p1*) '"' | '\'' ((PubidChar:p2 - '\'')*) '\''
        )
        {
            return true;
        }
        ;

    PubidChar : bool
        ::=
        (
            "[\x20\xD\xA]" | "[a-zA-Z0-9]" | "[-'()+,./:=?;!*#@$_%]"
        )
        {
            return true;
        }
        ;

    IntSubset(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            (MarkupDecl(processor):mdecl | DeclSep(processor):declsep)*
        )
        {
            return true;
        }
        ;

    MarkupDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            ElementDecl(processor):elementDecl | AttlistDecl(processor):attlistDecl | EntityDecl(processor):entityDecl | NotationDecl(processor):notationDecl | PI(processor):pi | Comment(processor):comment
        )
        {
            return true;
        }
        ;

    DeclSep(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            PEReference(processor):peref | S:s
        )
        {
            return true;
        }
        ;

    ElementDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "<!ELEMENT" S:s1 Name:elementName S:s2 ContentSpec:contentSpec S:s3? '>'
        )
        {
            return true;
        }
        ;

    ContentSpec : bool
        ::=
        (
            "EMPTY" | "ANY" | Mixed:mixed | Children:children
        )
        {
            return true;
        }
        ;

    Children : bool
        ::=
        (
            (Choice:choice | Seq:seq) ('?' | '*' | '+')?
        )
        {
            return true;
        }
        ;

    CP : bool
        ::=
        (
            (Name:name | Choice:choice | Seq:seq) ('?' | '*' | '+')?
        )
        {
            return true;
        }
        ;

    Choice : bool
        ::=
        (
            '(' S:s1? CP:cp1 (S:s2? '|' S:s3? CP:cp2)+ S:s4? ')'
        )
        {
            return true;
        }
        ;

    Seq : bool
        ::=
        (
            '(' S:s1? CP:cp1 (S:s2? ',' S:s3? CP:cp2)* S:s4? ')'
        )
        {
            return true;
        }
        ;

    Mixed : bool
        ::=
        (
            '(' S:s1? "#PCDATA" (S:s2? '|' S:s3? Name:name)* S:s4? ")*"
            |   '(' S:s5? "#PCDATA" S:s6? ')'
        )
        {
            return true;
        }
        ;

    AttlistDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "<!ATTLIST" S:s1 Name:name AttDef(processor):attdef* S:s2? '>'
        )
        {
            return true;
        }
        ;

    AttDef(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            S:s Name:name S:s2 AttType:attType S:s3 DefaultDecl(processor):defaultDecl
        )
        {
            return true;
        }
        ;

    AttType : bool
        ::=
        (
            StringType:stringType | TokenizedType:tokenizedType | EnumeratedType:enumeratedType
        )
        {
            return true;
        }
        ;

    StringType : bool
        ::=
        (
            "CDATA"
        )
        {
            return true;
        }
        ;

    TokenizedType : bool
        ::=
        (   "ID"
        |   "IDREF"
        |   "IDREFS"
        |   "ENTITY"
        |   "ENTITIES"
        |   "NMTOKEN"
        |   "NMTOKENS"
        )
        {
            return true;
        }
        ;

    EnumeratedType : bool
        ::=
        (
            NotationType:notationType | Enumeration:enumeration
        )
        {
            return true;
        }
        ;

    NotationType : bool
        ::=
        (
            "NOTATION" S:s1 '(' S:s2? Name:f (S:s3? '|' S:s4? Name:n)* S:s5? ')'
        )
        {
            return true;
        }
        ;

    Enumeration : bool
        ::=
        (
            '(' S:s1? Nmtoken:nmtoken (S:s2? '|' S:s3? Nmtoken:nmtoken2)* S:s4? ')'
        )
        {
            return true;
        }
        ;

    DefaultDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "#REQUIRED" | "#IMPLIED" | (("#FIXED" S:s)? AttValue(processor):attVAlue)
        )
        {
            return true;
        }
        ;

    EntityDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            GEDecl(processor):gedecl | PEDecl(processor):pedecl
        )
        {
            return true;
        }
        ;

    GEDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "<!ENTITY" S:s0 Name:entityName S:s1 EntityDef(processor):entityValue S:s2? '>'
        )
        {
            return true;
        }
        ;

    PEDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "<!ENTITY" S:s0 '%' S:s1 Name:peName S:s2 PEDef(processor):peValue S:s3? '>'
        )
        {
            return true;
        }
        ;

    EntityDef(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            EntityValue(processor):entityValue | (ExternalID:extID NDataDecl:notation?)
        )
        {
            return true;
        }
        ;

    PEDef(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            EntityValue(processor):entityValue | ExternalID:extID
        )
        {
            return true;
        }
        ;

    EntityValue(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            '"'
            (   "[^%&\"]"
            |   PEReference(processor):pr1
            |   Reference(processor):ref1
            )* '"'
        |   '\''
            (   "[^%&']"
            |   PEReference(processor):pr2
            |   Reference(processor):ref2
            )* '\''
        )
        {
            return true;
        }
        ;

    NDataDecl : bool
        ::=
        (
            S:s1 "NDATA" S:s2 Name:name
        )
        {
            return true;
        }
        ;

    PEReference(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            '%' Name:name ';'
        )
        {
            return true;
        }
        ;

    NotationDecl(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "<!NOTATION" S:s Name:name S:s2 (ExternalID:extID | PublicID:pubID) S:s3? '>'
        )
        {
            return true;
        }
        ;

    PublicID : bool
        ::=
        (
            "PUBLIC" S:s PubidLiteral:pl
        )
        {
            return true;
        }
        ;

    Element(System.Xml.XmlProcessor* processor, var ustring tagName, var System.Lex.Span span) : bool
        ::=
        (   '<' Name:name
                {
                    span = lexer.GetSpan(pos);
                    tagName = name;
                    auto result = processor->BeginStartTag(tagName);
                    if (result.Error())
                    {
                        return ErrorId(result.GetErrorId());
                    }
                }
                (
                    S:s
                    Attribute(processor):attribute
                )*
                S:s?
            (   "/>"
                {
                    auto result = processor->EndStartTag(span, lexer.FileIndex(), lexer.FileName(), pos);
                    if (result.Error())
                    {
                        return ErrorId(result.GetErrorId());
                    }
                    result = processor->EndTag(tagName, span, lexer.FileName(), pos);
                    if (result.Error())
                    {
                        return ErrorId(result.GetErrorId());
                    }
                }
            |   '>'
                {
                    auto result = processor->EndStartTag(span, lexer.FileIndex(), lexer.FileName(), pos);
                    if (result.Error())
                    {
                        return ErrorId(result.GetErrorId());
                    }
                }
                Content(processor):content
                ETag(processor):etag
            )
        )
        {
            return true;
        }
        ;

    ETag(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            "</" Name:name
            {
                auto result = processor->EndTag(name, lexer.GetSpan(pos), lexer.FileName(), pos);
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
            S:s?
            '>'
        )
        {
            return true;
        }
        ;

    Content(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            CharData(processor):cd1? ((Element(processor):element | Reference(processor):reference | CDSect(processor):cdsect | PI(processor):pi | Comment(processor):comment) CharData(processor):cd2?)*
        )
        {
            return true;
        }
        ;

    CharDataChar : uchar
        ::= "[^<&]"{ Token token = lexer.GetToken(pos); return cast<uchar>(token.id); }
        ;

    CharData(System.Xml.XmlProcessor* processor, var ustring s, var System.Lex.Span span) : bool
        ::=
        (
            ((CharDataChar:chr{ span = lexer.GetSpan(pos); s.Append(chr); })* - ("[^<&]"* "]]>" "[^<&]"*))
            {
                auto result = processor->Text(span, lexer.FileIndex(), s);
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
        )
        {
            return true;
        }
        ;

    CDSect(System.Xml.XmlProcessor* processor, var ustring s, var System.Lex.Span span) : bool
        ::= ("<![CDATA[" ((Char:chr - "]]>"){ if (!span.IsValid()) span = lexer.GetSpan(pos); s.Append(chr); })* "]]>")
        {
            auto result = processor->CDataSection(span, lexer.FileIndex(), s);
            if (result.Error())
            {
                return ErrorId(result.GetErrorId());
            }
            return true;
        }
        ;

    Attribute(System.Xml.XmlProcessor* processor, var System.Lex.Span span) : bool
        ::=
        (
            Name:attName{ span = lexer.GetSpan(pos); }
            Eq:eq
            AttValue(processor):attValue
            {
                auto result = processor->AddAttribute(attName, attValue, span, lexer.FileName(), pos);
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
        )
        {
            return true;
        }
        ;

    AttValueDQ(System.Xml.XmlProcessor* processor) : ustring
        ::= '"'
            {
                auto result = processor->BeginAttributeValue();
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
            (   "[^<&\"]"{ processor->AttValue().Append(lexer.GetToken(pos).ToString()); }
            |   Reference(processor):reference)* '"'
            {
                ustring value = processor->AttValue();
                auto result = processor->EndAttributeValue();
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
                return value;
            }
        ;

    AttValueSQ(System.Xml.XmlProcessor* processor) : ustring
        ::= '\''
            {
                auto result = processor->BeginAttributeValue();
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
            (   "[^<&\']"{ processor->AttValue().Append(lexer.GetToken(pos).ToString()); }
            |   Reference(processor):reference)* '\''
            {
                ustring value = processor->AttValue();
                auto result = processor->EndAttributeValue();
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
                return value;
            }
        ;

    AttValue(System.Xml.XmlProcessor* processor) : ustring
        ::= AttValueDQ(processor):attValueDQ{ return attValueDQ; }
        |   AttValueSQ(processor):attValueSQ{ return attValueSQ; }
        ;

    EntityRef(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            ('&' Name:name ';')
            {
                auto result = processor->EntityRef(name, lexer.GetSpan(pos), lexer.FileIndex(), lexer.FileName());
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
        )
        {
            return true;
        }
        ;

    DecCodePoint(var uint val) : uint
        ::= (("[0-9]"{ Token token = lexer.GetToken(pos); val = 10u * val + cast<uint>(token.id) - cast<uint>('0'); })+)
        {
            return val;
        }
        ;

    HexCodePoint(var uint val) : uint
        ::=
        (   ("[0-9a-fA-F]"
                {
                    Token token = lexer.GetToken(pos);
                    if (token.id >= cast<int>('0') && token.id <= cast<int>('9')) val = 16u * val + cast<uint>(token.id) - cast<uint>('0');
                    else if (token.id >= cast<int>('a') && token.id <= cast<int>('f')) val = 16u * val + 10u + cast<uint>(token.id) - cast<uint>('a');
                    else if (token.id >= cast<int>('A') && token.id <= cast<int>('F')) val = 16u * val + 10u + cast<uint>(token.id) - cast<uint>('A');
                }
            )+
        )
        {
            return val;
        }
        ;

    CharRef(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            ("&#" DecCodePoint:decCodePoint ';')
            {
                auto result = processor->Text(lexer.GetSpan(pos), lexer.FileIndex(), ustring(cast<uchar>(decCodePoint)));
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
            |   ("&#x" HexCodePoint:hexCodePoint ';')
                {
                    auto result = processor->Text(lexer.GetSpan(pos), lexer.FileIndex(), ustring(cast<uchar>(hexCodePoint)));
                    if (result.Error())
                    {
                        return ErrorId(result.GetErrorId());
                    }
                }
        )
        {
            return true;
        }
        ;

    Reference(System.Xml.XmlProcessor* processor) : bool
        ::=
        (   EntityRef(processor):entityRef
        |   CharRef(processor):charRef
        )
        {
            return true;
        }
        ;

    Misc(System.Xml.XmlProcessor* processor) : bool
        ::=
        (
            Comment(processor):comment | PI(processor):pi | S:s
        )
        {
            return true;
        }
        ;

    Comment(System.Xml.XmlProcessor* processor, var ustring s, var System.Lex.Span span) : bool
        ::=
        (
            "<!--" ((Char:chr - '-'){ span = lexer.GetSpan(pos); s.Append(chr); } | '-' (Char:chr - '-'){ span.Union(lexer.GetSpan(pos)); s.Append('-').Append(chr); })* "-->"
        )
        {
            auto result = processor->Comment(span, lexer.FileIndex(), s);
            if (result.Error())
            {
                return ErrorId(result.GetErrorId());
            }
            return true;
        }
        ;

    PI(System.Xml.XmlProcessor* processor, var ustring data, var System.Lex.Span span) : bool
        ::=
        (
            ("<?" PITarget:target{ span = lexer.GetSpan(pos); } S:s ((Char:chr - "?>"){ data.Append(chr); })* "?>")
            {
                auto result = processor->PI(span, lexer.FileIndex(), target, data);
                if (result.Error())
                {
                    return ErrorId(result.GetErrorId());
                }
            }
        )
        {
            return true;
        }
        ;

    PITarget : ustring
        ::= (Name:name - Xml:xml){ return name; }
        ;

    Xml : bool
        ::=
        (
            "[xX]" "[mM]" "[lL]"
        )
        {
            return true;
        }
        ;

    Eq : bool
        ::=
        (
            S:s? '=' S:s?
        )
        {
            return true;
        }
        ;

    YesNo : bool
        ::= "\"yes\""{ return true; }
        |   "\"no\""{ return false; }
        ;
}
