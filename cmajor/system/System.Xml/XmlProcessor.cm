// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Xml
{
    public class Entity
    {
        public virtual ~Entity()
        {
        }
        public virtual bool IsInternalEntity() const
        {
            return false;
        }
    }

    public class InternalEntity : Entity
    {
        public InternalEntity(const ustring& value_) :
            value(value_)
        {
        }
        public const ustring& Value() const
        {
            return value;
        }
        public override bool IsInternalEntity() const
        {
            return true;
        }
        private ustring value;
    }

    public class XmlProcessor
    {
        public XmlProcessor(System.Lex.TrivialLexer& lexer_, XmlContentHandler* contentHandler_) :
            lexer(lexer_), lineStarts(lexer.GetLineStartIndeces()), contentHandler(contentHandler_), attValue(), errorId(0)
        {
            InternalEntity* quot = new InternalEntity(u"\"");
            entityMap[u"quot"] = quot;
            InternalEntity* amp = new InternalEntity(u"&");
            entityMap[u"amp"] = amp;
            InternalEntity* apos = new InternalEntity(u"\'");
            entityMap[u"apos"] = apos;
            InternalEntity* lt = new InternalEntity(u"<");
            entityMap[u"lt"] = lt;
            InternalEntity* gt = new InternalEntity(u">");
            entityMap[u"gt"] = gt;
            entities.Add(UniquePtr<Entity>(quot));
            entities.Add(UniquePtr<Entity>(amp));
            entities.Add(UniquePtr<Entity>(apos));
            entities.Add(UniquePtr<Entity>(lt));
            entities.Add(UniquePtr<Entity>(gt));
        }
        public inline bool Error() const
        {
            return errorId != 0;
        }
        public inline int GetErrorId() const
        {
            return errorId;
        }
        public const ustring& AttValue() const
        {
            return attValue;
        }
        public ustring& AttValue()
        {
            return attValue;
        }
        public System.Lex.TrivialLexer& Lexer() const
        {
            return lexer;
        }
        [nodiscard]
        public Result<bool> StartDocument(const System.Lex.Span& span, int fileIndex)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->StartDocument(span, fileIndex);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EndDocument()
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->EndDocument();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Text(const System.Lex.Span& span, int fileIndex, const ustring& text)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->HandleText(span, fileIndex, text);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Comment(const System.Lex.Span& span, int fileIndex, const ustring& text)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->HandleComment(span, fileIndex, text);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> PI(const System.Lex.Span& span, int fileIndex, const ustring& target, const ustring& data)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->HandlePI(span, fileIndex, target, data);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> CDataSection(const System.Lex.Span& span, int fileIndex, const ustring& cdata)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->HandleCDataSection(span, fileIndex, cdata);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Version(const ustring& version)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->Version(version);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Standalone(bool standalone)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->Standalone(standalone);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Encoding(const ustring& encoding)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto result = contentHandler->Encoding(encoding);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> BeginStartTag(const ustring& tagName)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            tagStack.Push(currentTagName);
            currentTagName = tagName;
            namespaceUriStack.Push(currentNamespaceUri);
            namespacePrefixStack.Push(currentNamespacePrefix);
            attributes.Clear();
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EndStartTag(const System.Lex.Span& span, int fileIndex, const string& systemId, long pos)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            ustring localName;
            ustring prefix;
            auto parseResult = ParseQualifiedName(currentTagName, localName, prefix, span, systemId, pos);
            if (parseResult.Error())
            {
                SetErrorId(parseResult.GetErrorId());
                return Result<bool>(ErrorId(parseResult.GetErrorId()));
            }
            if (prefix == u"xmlns")
            {
                string errorMessage = MakeErrorMessage("\'xmlns\' prefix cannot be declared for an element", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            auto uriResult = GetNamespaceUri(prefix, span, systemId, pos);
            if (uriResult.Error())
            {
                SetErrorId(uriResult.GetErrorId());
                return Result<bool>(ErrorId(uriResult.GetErrorId()));
            }
            auto result = contentHandler->StartElement(span, fileIndex, uriResult.Value(), localName, currentTagName, attributes);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EndTag(const ustring& tagName, const System.Lex.Span& span, const string& systemId, long pos)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            if (tagStack.IsEmpty())
            {
                auto tagNameResult = ToUtf8(tagName);
                if (tagNameResult.Error())
                {
                    SetErrorId(tagNameResult.GetErrorId());
                    return Result<bool>(ErrorId(tagNameResult.GetErrorId()));
                }
                string errorMessage = MakeErrorMessage("end tag \'" + tagNameResult.Value() + "\' has no corresponding start tag", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            if (tagName != currentTagName)
            {
                auto tagNameResult = ToUtf8(tagName);
                if (tagNameResult.Error())
                {
                    SetErrorId(tagNameResult.GetErrorId());
                    return Result<bool>(ErrorId(tagNameResult.GetErrorId()));
                }
                auto currentTagNameResult = ToUtf8(currentTagName);
                if (currentTagNameResult.Error())
                {
                    SetErrorId(currentTagNameResult.GetErrorId());
                    return Result<bool>(ErrorId(currentTagNameResult.GetErrorId()));
                }
                string errorMessage = MakeErrorMessage("end tag \'" + tagNameResult.Value() + "\' does not match start tag \'" + currentTagNameResult.Value() + "\'",
                    systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            ustring localName;
            ustring prefix;
            auto parseResult = ParseQualifiedName(currentTagName, localName, prefix, span, systemId, pos);
            if (parseResult.Error())
            {
                SetErrorId(parseResult.GetErrorId());
                return Result<bool>(ErrorId(parseResult.GetErrorId()));
            }
            if (prefix == u"xmlns")
            {
                string errorMessage = MakeErrorMessage("\'xmlns\' prefix cannot be declared for an element", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            auto uriResult = GetNamespaceUri(prefix, span, systemId, pos);
            if (uriResult.Error())
            {
                SetErrorId(uriResult.GetErrorId());
                return Result<bool>(ErrorId(uriResult.GetErrorId()));
            }
            auto result = contentHandler->EndElement(uriResult.Value(), localName, currentTagName);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            if (namespaceUriStack.IsEmpty())
            {
                string errorMessage = MakeErrorMessage("namespace URI stack is empty", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            currentNamespaceUri = namespaceUriStack.Pop();
            namespacePrefixMap.Remove(currentNamespacePrefix);
            if (namespacePrefixStack.IsEmpty())
            {
                string errorMessage = MakeErrorMessage("namespace prefix stack is empty", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            currentNamespacePrefix = namespacePrefixStack.Pop();
            namespacePrefixMap[currentNamespacePrefix] = currentNamespaceUri;
            if (tagStack.IsEmpty())
            {
                string errorMessage = MakeErrorMessage("tag stack is empty", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            currentTagName = tagStack.Pop();
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> AddAttribute(const ustring& attName, const ustring& attValue, const System.Lex.Span& span, const string& systemId, long pos)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            ustring localName;
            ustring prefix;
            auto parseResult = ParseQualifiedName(attName, localName, prefix, span, systemId, pos);
            if (parseResult.Error())
            {
                SetErrorId(parseResult.GetErrorId());
                return Result<bool>(ErrorId(parseResult.GetErrorId()));
            }
            if (prefix == u"xmlns")
            {
                currentNamespacePrefix = localName;
                currentNamespaceUri = attValue;
                namespacePrefixMap[currentNamespacePrefix] = currentNamespaceUri;
            }
            else if (localName == u"xmlns")
            {
                currentNamespacePrefix.Clear();
                currentNamespaceUri = attValue;
            }
            else
            {
                auto uriResult = GetNamespaceUri(prefix, span, systemId, pos);
                if (uriResult.Error())
                {
                    SetErrorId(uriResult.GetErrorId());
                    return Result<bool>(ErrorId(uriResult.GetErrorId()));
                }
                attributes.Add(Attribute(span, uriResult.Value(), localName, attName, attValue));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EntityRef(const ustring& entityName, const System.Lex.Span& span, int fileIndex, const string& systemId)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            auto it = entityMap.CFind(entityName);
            if (it != entityMap.CEnd())
            {
                Entity* entity = it->second;
                if (entity->IsInternalEntity())
                {
                    InternalEntity* internalEntity = cast<InternalEntity*>(entity);
                    const ustring& entityValue = internalEntity->Value();
                    if (!attValueStack.IsEmpty())
                    {
                        attValue.Append(entityValue);
                    }
                    else
                    {
                        return Text(span, fileIndex, entityValue);
                    }
                }
                else
                {
                    auto result = contentHandler->SkippedEntity(entityName);
                    if (result.Error())
                    {
                        SetErrorId(result.GetErrorId());
                        return Result<bool>(ErrorId(result.GetErrorId()));
                    }
                }
            }
            else
            {
                auto result = contentHandler->SkippedEntity(entityName);
                if (result.Error())
                {
                    SetErrorId(result.GetErrorId());
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> BeginAttributeValue()
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            attValueStack.Push(attValue);
            attValue.Clear();
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> EndAttributeValue()
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            #assert(!attValueStack.IsEmpty());
            attValue = attValueStack.Top();
            attValueStack.Pop();
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<ustring> GetNamespaceUri(const ustring& namespacePrefix, const System.Lex.Span& span, const string& systemId, long pos)
        {
            if (Error())
            {
                return Result<ustring>(GetErrorId());
            }
            if (namespacePrefix.IsEmpty())
            {
                return Result<ustring>(currentNamespaceUri);
            }
            auto it = namespacePrefixMap.CFind(namespacePrefix);
            if (it != namespacePrefixMap.CEnd())
            {
                return Result<ustring>(it->second);
            }
            else
            {
                auto namespacePrefixResult = ToUtf8(namespacePrefix);
                if (namespacePrefixResult.Error())
                {
                    SetErrorId(namespacePrefixResult.GetErrorId());
                    return Result<ustring>(ErrorId(namespacePrefixResult.GetErrorId()));
                }
                string errorMessage = MakeErrorMessage("namespace prefix \'" + namespacePrefixResult.Value() + "\' not bound to any namespace URI", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                return Result<ustring>(ErrorId(errorId));
            }
            return Result<ustring>(ustring());
        }
        [nodiscard]
        public Result<bool> ParseQualifiedName(const ustring& qualifiedName, ustring& localName, ustring& prefix,
            const System.Lex.Span& span, const string& systemId, long pos)
        {
            if (Error())
            {
                return Result<bool>(GetErrorId());
            }
            List<ustring> parts = qualifiedName.Split(':');
            if (parts.Count() > 2)
            {
                auto qualifiedNameResult = ToUtf8(qualifiedName);
                if (qualifiedNameResult.Error())
                {
                    SetErrorId(qualifiedNameResult.GetErrorId());
                    return Result<bool>(ErrorId(qualifiedNameResult.GetErrorId()));
                }
                string errorMessage = MakeErrorMessage("qualified name \'" + qualifiedNameResult.Value() + "\' has more than one \':\' character", systemId, span, pos);
                int errorId = AllocateError(errorMessage);
                SetErrorId(errorId);
                return Result<bool>(ErrorId(errorId));
            }
            else if (parts.Count() == 2)
            {
                prefix = parts[0];
                localName = parts[1];
            }
            else
            {
                prefix.Clear();
                localName = qualifiedName;
            }
            return Result<bool>(true);
        }
        public string MakeErrorMessage(const string& message, const string& systemId, const System.Lex.Span& span, long pos) const
        {
            System.Lex.LineColLen lineColLen = System.Lex.SpanToLineColLen(span, lineStarts);
            ustring errorLines = lexer.ErrorLines(pos);
            auto utf8Result = ToUtf8(errorLines);
            if (!utf8Result.Error())
            {
                return "error: " + message + " in \'" + systemId + "\' at line " + ToString(lineColLen.line) + ":\n" + utf8Result.Value();
            }
            return "error: " + message + " in \'" + systemId + "\' at line " + ToString(lineColLen.line);
        }
        public void SetErrorId(int errorId_)
        {
            errorId = errorId_;
        }
        private System.Lex.TrivialLexer& lexer;
        private List<int> lineStarts;
        private XmlContentHandler* contentHandler;
        private Stack<ustring> tagStack;
        private ustring currentTagName;
        private Stack<ustring> attValueStack;
        private ustring attValue;
        private Stack<ustring> namespaceUriStack;
        private ustring currentNamespaceUri;
        private Stack<ustring> namespacePrefixStack;
        private ustring currentNamespacePrefix;
        private Map<ustring, ustring> namespacePrefixMap;
        private Attributes attributes;
        private Map<ustring, Entity*> entityMap;
        private List<UniquePtr<Entity>> entities;
        private int errorId;
    }

} // namespace System.Xml
