// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.XPath
{
    public enum ObjectKind
    {
        nodeSet, boolean, number, string
    }

    public string ObjectKindStr(ObjectKind kind)
    {
        switch (kind)
        {
            case ObjectKind.nodeSet:
            {
                return "node-set";
            }
            case ObjectKind.boolean:
            {
                return "Boolean";
            }
            case ObjectKind.number:
            {
                return "number";
            }
            case ObjectKind.string:
            {
                return "string";
            }
        }
        return "<unknown object kind>";
    }
    
    public abstract class Object
    {
        public Object(ObjectKind kind_) : kind(kind_)
        {
        }
        public default virtual ~Object();
        public inline ObjectKind Kind() const
        {
            return kind;
        }
        public inline bool IsNodeSet() const
        {
            return kind == ObjectKind.nodeSet;
        }
        public inline bool IsBoolean() const
        {
            return kind == ObjectKind.boolean;
        }
        public inline bool IsNumber() const
        {
            return kind == ObjectKind.number;
        }
        public inline bool IsString() const
        {
            return kind == ObjectKind.string;
        }
        public abstract System.Xml.Element* ToXmlElement() const;
        private ObjectKind kind;
    }

    public class NodeSet : Object
    {
        public NodeSet() : base(ObjectKind.nodeSet)
        {
        }
        public inline const List<System.Xml.Node*>& Nodes() const
        {
            return nodes;
        }
        public inline int Count() const
        {
            return cast<int>(nodes.Count());
        }
        public void Add(System.Xml.Node* node)
        {
            if (Find(nodes.Begin(), nodes.End(), node) == nodes.End())
            {
                nodes.Add(node);
            }
        }
        public System.Xml.Node* GetNode(int index) const
        {
            #assert(index >= 0 && index < nodes.Count());
            return nodes[index];
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = System.Xml.MakeElement("node-set");
            element->SetAttribute("count", ToString(nodes.Count()));
            int n = cast<int>(nodes.Count());
            for (int i = 0; i < n; ++i)
            {
                System.Xml.Node* node = nodes[i];
                System.Xml.Element* nodeElement = System.Xml.MakeElement("node");
                nodeElement->SetAttribute("kind", System.Xml.NodeKindStr(node->Kind()));
                nodeElement->SetAttribute("name", node->Name());
                if (node->IsElementNode())
                {
                    System.Xml.Element* elementNode = cast<System.Xml.Element*>(node);
                    System.Xml.Element* attributesElement = System.Xml.MakeElement("attributes");
                    nodeElement->AppendChild(attributesElement);
                    for (const auto& attr : elementNode->Attributes())
                    {
                        System.Xml.AttributeNode* attributeNode = attr.second.Get();
                        System.Xml.Element* attributeElement = System.Xml.MakeElement("attribute");
                        attributeElement->SetAttribute("name", attributeNode->Name());
                        attributeElement->SetAttribute("value", attributeNode->Value());
                        attributesElement->AppendChild(attributeElement);
                    }
                }
                else if (node->IsAttributeNode())
                {
                    System.Xml.AttributeNode* attributeNode = cast<System.Xml.AttributeNode*>(node);
                    System.Xml.Element* attributeElement = System.Xml.MakeElement("attribute");
                    attributeElement->SetAttribute("name", attributeNode->Name());
                    attributeElement->SetAttribute("value", attributeNode->Value());
                    nodeElement->AppendChild(attributeElement);
                }
                else if (node->IsTextNode())
                {
                    System.Xml.Text* textNode = cast<System.Xml.Text*>(node);
                    System.Xml.Element* textElement = System.Xml.MakeElement("text");
                    textElement->SetAttribute("value", textNode->Data());
                }
                else if (node->IsProcessingInstructionNode())
                {
                    System.Xml.ProcessingInstruction* processingInstructionNode = cast<System.Xml.ProcessingInstruction*>(node);
                    System.Xml.Element* processingInstructionElement = System.Xml.MakeElement("processing-instruction");
                    processingInstructionElement->SetAttribute("target", processingInstructionNode->Target());
                    processingInstructionElement->SetAttribute("data", processingInstructionNode->Data());
                    nodeElement->AppendChild(processingInstructionElement);
                }
                else if (node->IsCommentNode())
                {
                    System.Xml.Comment* commentNode = cast<System.Xml.Comment*>(node);
                    System.Xml.Element* commentElement = System.Xml.MakeElement("comment");
                    commentElement->SetAttribute("data", commentNode->Data());
                    nodeElement->AppendChild(commentElement);
                }
                element->AppendChild(nodeElement);
            }
            return element;
        }
        private List<System.Xml.Node*> nodes;
    }

    public class Boolean : Object
    {
        public Boolean() : base(ObjectKind.boolean), value(false)
        {
        }
        public Boolean(bool value_) : base(ObjectKind.boolean), value(value_)
        {
        }
        public inline bool Value() const
        {
            return value;
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = System.Xml.MakeElement("boolean");
            element->SetAttribute("value", ToString(value));
            return element;
        }
        private bool value;
    }

    public class Number : Object
    {
        public Number() : base(ObjectKind.number), value(0)
        {
        }
        public Number(double value_) : base(ObjectKind.number), value(value_)
        {
        }
        public inline double Value() const
        {
            return value;
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = System.Xml.MakeElement("number");
            element->SetAttribute("value", ToString(value));
            return element;
        }
        private double value;
    }

    public class Str : Object
    {
        public Str() : base(ObjectKind.string), value()
        {
        }
        public Str(const string& value_) : base(ObjectKind.string), value(value_)
        {
        }
        public inline const string& Value() const
        {
            return value;
        }
        public override System.Xml.Element* ToXmlElement() const
        {
            System.Xml.Element* element = System.Xml.MakeElement("string");
            element->SetAttribute("value", value);
            return element;
        }
        private string value;
    }
}
