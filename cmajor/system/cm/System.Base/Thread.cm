// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

public extern cdecl int RtmGetHardwareConcurrency();
public extern cdecl int RtmStartThreadFunction(System.Threading.ThreadStartFunction function);
public extern cdecl int RtmStartThreadFunctionWithParam(System.Threading.ParameterizedThreadStartFunction function, void* param);
public extern cdecl int RtmStartThreadMethod(System.Threading.ThreadStartMethod method);
public extern cdecl int RtmStartThreadMethodWithParam(System.Threading.ParameterizedThreadStartMethod method, void* param);
public extern cdecl bool RtmJoinThread(int threadId);
public extern cdecl int RtmThisThreadId();

namespace System.Threading
{
    public delegate void ThreadStartFunction();
    public delegate void ParameterizedThreadStartFunction(void* param);
    public class delegate void ThreadStartMethod();        
    public class delegate void ParameterizedThreadStartMethod(void* param);
    
    public int HardwareConcurrency()
    {
        return RtmGetHardwareConcurrency();
    }
    
    public class Thread
    {
        public static Thread StartFunction(ThreadStartFunction function)
        {
            Thread thread(RtmStartThreadFunction(function));
            return thread;
        }
        public static Thread StartFunction(ParameterizedThreadStartFunction function, void* param)
        {
            Thread thread(RtmStartThreadFunctionWithParam(function, param));
            return thread;
        }
        public static Thread StartMethod(ThreadStartMethod method)
        {
            Thread thread(RtmStartThreadMethod(method));
            return thread;
        }
        public static Thread StartMethod(ParameterizedThreadStartMethod method, void* param)
        {
            Thread thread(RtmStartThreadMethodWithParam(method, param));
            return thread;
        }
        public Thread() : id(0)
        {
        }
        private Thread(int id_) : id(id_)
        {
        }
        public ~Thread()
        {
            if (id != 0)
            {
                Join();
            }
        }
        suppress Thread(const Thread&);
        suppress void operator=(const Thread&);
        public Thread(Thread&& that) : id(that.id)
        {
            that.id = 0;
        }
        public default void operator=(Thread&&);
        public inline int Id() const
        {
            return id;
        }
        public Result<bool> Join()
        {
            int jid = id;
            id = 0;
            if (!RtmJoinThread(jid))
            {
                string errorMessage = "thread " + ToString(id) + " not joinable";
                int errorId = AllocateError(errorMessage);
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        private int id;
    }
}
