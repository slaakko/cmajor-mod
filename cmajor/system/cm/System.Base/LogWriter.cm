// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public class LogWriter : IOBase
    {
        public LogWriter() : logFilePath(), writer(&Console.Out()), ownWriter(false)
        {
        }
        public LogWriter(const string& logFilePath_) :
            logFilePath(logFilePath_), writer(new StreamWriter(new FileStream(logFilePath, cast<OpenMode>(OpenMode.append)))), ownWriter(true)
        {
            writer->Own(writer->GetStream());
            if (writer->Error())
            {
                SetErrorId(writer->GetErrorId());
            }
            else if (writer->GetStream()->Error())
            {
                SetErrorId(writer->GetStream()->GetErrorId());
            }
        }
        public override ~LogWriter()
        {
            if (ownWriter)
            {
                delete writer;
            }
        }
        [nodiscard]
        public Result<bool> Write(const string& str)
        {
            if (Error())
            {
                return Result<bool>(ErrorId(GetErrorId()));
            }
            if (writer->Error())
            {
                SetErrorId(writer->GetErrorId());
                return Result<bool>(ErrorId(writer->GetErrorId()));
            }
            auto result = writer->Write(str);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> WriteLine(const string& str)
        {
            if (Error())
            {
                return Result<bool>(ErrorId(GetErrorId()));
            }
            if (writer->Error())
            {
                SetErrorId(writer->GetErrorId());
                return Result<bool>(ErrorId(writer->GetErrorId()));
            }
            auto result = writer->WriteLine(str);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return result;
            }
            result = writer->Flush();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return result;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> WriteLine()
        {
            if (Error())
            {
                return Result<bool>(ErrorId(GetErrorId()));
            }
            if (writer->Error())
            {
                SetErrorId(writer->GetErrorId());
                return Result<bool>(ErrorId(writer->GetErrorId()));
            }
            auto result = writer->WriteLine();
            if (result.Error())
            {
                return result;
            }
            result = writer->Flush();
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
                return result;
            }
            return Result<bool>(true);
        }
        public inline const string& LogFilePath() const
        {
            return logFilePath;
        }
        public inline StreamWriter& GetStreamWriter()
        {
            return *writer;
        }
        private string logFilePath;
        private StreamWriter* writer;
        private bool ownWriter;
    }

    public LogWriter& operator<<(LogWriter& writer, const string& str)
    {
        if (writer.Error()) return writer;
        auto result = writer.Write(str);
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, char c)
    {
        if (writer.Error()) return writer;
        auto result = writer.Write(ToString(c));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, bool b)
    {
        if (writer.Error()) return writer;
        auto result = writer.Write(ToString(b));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, int i)
    {
        if (writer.Error()) return writer;
        auto result = writer.Write(ToString(i));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, uint u)
    {
        if (writer.Error()) return writer;
        auto result = writer.Write(ToString(u));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, long l)
    {
        if (writer.Error()) return writer;
        auto result = writer.Write(ToString(l));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, ulong u)
    {
        if (writer.Error()) return writer;
        auto result = writer.Write(ToString(u));
        return writer;
    }

    public LogWriter& operator<<(LogWriter& writer, const System.Endl& endl)
    {
        if (writer.Error()) return writer;
        auto result = writer.WriteLine();
        return writer;
    }
}
