// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Lex
{
    public class Span
    {
        public Span() : pos(-1), len(-1)
        {
        }
        public Span(int pos_, int len_) : pos(pos_), len(len_)
        {
        }
        public inline bool IsValid() const
        {
            return pos != -1;
        }
        public inline bool Contains(int pos_) const
        {
            return pos_ >= pos && pos_ < pos + len;
        }
        public inline void Union(const Span& that)
        {
            int end = that.pos + that.len;
            len = end - pos;
        }
        public int pos;
        public int len;
    }

    public bool operator==(const Span& left, const Span& right)
    {
        return left.pos == right.pos && left.len == right.len;
    }

    public class LineColLen
    {
        public inline LineColLen() : line(0), col(0), len(0)
        {
        }
        public inline LineColLen(int line_, int col_) : line(line_), col(col_), len(0)
        {
        }
        public inline LineColLen(int line_, int col_, int len_) : line(line_), col(col_), len(len_)
        {
        }
        public inline bool IsValid() const
        {
            return line != 0;
        }
        public int line;
        public int col;
        public int len;
    }

    public LineColLen SpanToLineColLen(const Span& span, const List<int>& lineStarts)
    {
        if (!span.IsValid() || lineStarts.IsEmpty())
        {
            return LineColLen();
        }
        else
        {
            auto it = LowerBound(lineStarts.Begin(), lineStarts.End(), span.pos);
            int lineStart = 0;
            int line = 0;
            if (it != lineStarts.End())
            {
                if (it != lineStarts.Begin() && *it > span.pos)
                {
                    --it;
                }
                line = cast<int>(it - lineStarts.Begin());
                lineStart = lineStarts[line];
            }
            else
            {
                line = cast<int>(lineStarts.Count());
                lineStart = lineStarts[line - 1];
            }
            int col = span.pos - lineStart + 1;
            int len = span.len;
            if (line == 0)
            {
                ++line;
            }
            return LineColLen(line, col, len);
        }
    }

    public int LineColLenToPos(const LineColLen& lineColLen, const List<int>& lineStarts)
    {
        if (!lineColLen.IsValid() || lineStarts.IsEmpty() || lineColLen.line >= lineStarts.Count())
        {
            return -1;
        }
        int pos = lineStarts[lineColLen.line] + lineColLen.col - 1;
        return pos;
    }

    public class FullSpan
    {
        public FullSpan() : moduleId(), fileIndex(-1), span() {}
        public FullSpan(const Uuid& moduleId_, int fileIndex_, const Span& span_) : moduleId(moduleId_), fileIndex(fileIndex_), span(span_) {}
        public Uuid moduleId;
        public int fileIndex;
        public Span span;
    }

    public bool operator==(const FullSpan& left, const FullSpan& right)
    {
        return left.moduleId == right.moduleId && left.fileIndex == right.fileIndex && left.span == right.span;
    }

} // namespace System.Lex
