// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Lex
{
    public List<int> ComputeLineStartIndeces(const ustring& text)
    {
        List<int> indeces;
        indeces.Add(0);
        int state = 0;
        int n = cast<int>(text.Length());
        for (int i = 0; i < n; ++i)
        {
            uchar c = text[i];
            switch (state)
            {
                case 0:
                {
                    indeces.Add(i);
                    if (c != '\n')
                    {
                        state = 1;
                    }
                    break;
                }
                case 1:
                {
                    if (c == '\n')
                    {
                        state = 0;
                    }
                    break;
                }
            }
        }
        indeces.Add(n);
        return indeces;
    }

    public class SourceFile
    {
        public SourceFile(ustring&& content_, List<int>&& lineStartIndeces_) : content(content_), lineStartIndeces(lineStartIndeces_)
        {
        }
        public inline const ustring& Content() const
        {
            return content;
        }
        public inline uchar* Begin() const
        {
            return content.Chars();
        }
        public inline uchar* End() const
        {
            return content.Chars() + content.Length();
        }
        public inline const List<int>& LineStartIndeces() const
        {
            return lineStartIndeces;
        }
        [nodiscard]
        public Result<string> GetLine(int lineNumber) const
        {
            int start = lineStartIndeces[lineNumber];
            int len = -1;
            if (lineNumber < lineStartIndeces.Count() - 1)
            {
                len = lineStartIndeces[lineNumber + 1] - start;
            }
            ustring line;
            if (len != -1)
            {
                line = content.Substring(start, len);
            }
            else
            {
                line = content.Substring(start);
            }
            ustring trimmedLine = TrimEnd(line);
            auto result = ToUtf8(trimmedLine);
            if (result.Error())
            {
                return Result<string>(ErrorId(result.GetErrorId()));
            }
            return Result<string>(result.Value());
        }
        private ustring content;
        private List<int> lineStartIndeces;
    }

    public class FileMap
    {
        public FileMap()
        {
        }
        public int MapFileName(const string& fileName)
        {
            int fileIndex = cast<int>(fileNames.Count());
            fileNames.Add(fileName);
            return fileIndex;
        }
        public bool HasFileName(int fileIndex) const
        {
            return fileIndex >= 0 && fileIndex < fileNames.Count();
        }
        public const List<string>& FileNames() const
        {
            return fileNames;
        }
        public const string& GetFileName(int fileIndex) const
        {
            return fileNames[fileIndex];
        }
        public void AddSourceFile(int fileIndex, ustring&& content, List<int>&& lineStartIndeces)
        {
            sourceFileMap[fileIndex] = SourceFile(content, lineStartIndeces);
        }
        public SourceFile* GetSourceFile(int fileIndex) const
        {
            auto it = sourceFileMap.Find(fileIndex);
            if (it != sourceFileMap.End())
            {
                return &(it->second);
            }
            else
            {
                return null;
            }
        }
        public Result<SourceFile*> GetOrReadSourceFile(int fileIndex) const
        {
            SourceFile* sourceFile = GetSourceFile(fileIndex);
            if (sourceFile != null)
            {
                return Result<SourceFile*>(sourceFile);
            }
            else
            {
                auto readResult = System.IO.File.ReadAllText(fileNames[fileIndex]);
                if (readResult.Error()) return Result<SourceFile*>(ErrorId(readResult.GetErrorId()));
                const string& content = readResult.Value();
                auto utf32Result = ToUtf32(content);
                if (utf32Result.Error()) return Result<SourceFile*>(ErrorId(utf32Result.GetErrorId()));
                ustring text = Rvalue(utf32Result.Value());
                List<int> lineStartIndeces = ComputeLineStartIndeces(text);
                AddSourceFile(fileIndex, Rvalue(text), Rvalue(lineStartIndeces));
                return GetSourceFile(fileIndex);
            }
        }
        private List<string> fileNames;
        private Map<int, SourceFile> sourceFileMap;
    }

    [nodiscard]
    public Result<string> MakeMessage(const string& message, const Span& span, int fileIndex, FileMap& fileMap)
    {
        string msg = message;
        string fileName;
        if (fileMap.HasFileName(fileIndex))
        {
            fileName = fileMap.GetFileName(fileIndex);
        }
        SourceFile* sourceFile = fileMap.GetSourceFile(fileIndex);
        if (sourceFile != null)
        {
            LineColLen lineColLen = SpanToLineColLen(span, sourceFile->LineStartIndeces());
            System.IO.StringWriter writer;
            auto lineResult = sourceFile->GetLine(lineColLen.line);
            if (lineResult.Error())
            {
                return Result<string>(ErrorId(lineResult.GetErrorId()));
            }
            writer << message << ": " << fileName << ":" << lineColLen.line << ":\n" << lineResult.Value() << "\n" <<
                string(' ', lineColLen.col - 1) << string('^', lineColLen.len) << endl();
            msg = writer.GetString();
        }
        return Result<string>(msg);
    }
}

