// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.Xml
{
    public class Document : ParentNode
    {
        public Document() : this(System.Lex.Span(), -1)
        {
        }
        public Document(const System.Lex.Span& span_, int fileIndex_) : base(NodeKind.documentNode, span_, fileIndex_, "document")
        {
        }
        public Element* DocumentElement() const
        {
            return documentElement;
        }
        public bool XmlStandalone() const
        {
            return xmlStandalone;
        }
        public void SetXmlStandalone(bool xmlStandalone_)
        {
            xmlStandalone = xmlStandalone_;
        }
        public const string& XmlVersion() const
        {
            return xmlVersion;
        }
        public void SetXmlVersion(const string& xmlVersion_)
        {
            xmlVersion = xmlVersion_;
        }
        public const string& XmlEncoding() const
        {
            return xmlEncoding;
        }
        public void SetXmlEncoding(const string& xmlEncoding_)
        {
            xmlEncoding = xmlEncoding_;
        }
        public const Map<string, Element*>& Index() const
        {
            return index;
        }
        public Map<string, Element*>& Index()
        {
            return index;
        }
        public Element* GetElementById(const string& elementId) const
        {
            if (!indexValid)
            {
                index.Clear();
                BuildIndex(this);
                indexValid = true;
            }
            auto it = index.Find(elementId);
            if (it != index.End())
            {
                return it->second;
            }
            else
            {
                return null;
            }
        }
        public override void AppendChild(Node* child)
        {
            base->AppendChild(child);
            if (child->IsElementNode())
            {
                documentElement = cast<Element*>(child);
            }
        }
        public override void InsertBefore(Node* newChild, Node* refChild)
        {
            base->InsertBefore(newChild, refChild);
            if (newChild->IsElementNode())
            {
                documentElement = cast<Element*>(newChild);
            }
        }
        public override UniquePtr<Node> RemoveChild(Node* child)
        {
            UniquePtr<Node> removedChild = base->RemoveChild(child);
            if (removedChild.Get() == documentElement)
            {
                documentElement = null;
            }
            return removedChild;
        }
        public override UniquePtr<Node> ReplaceChild(Node* newChild, Node* oldChild)
        {
            if (newChild->IsElementNode())
            {
                UniquePtr<Node> removed = RemoveChild(oldChild);
                AppendChild(newChild);
                return removed;
            }
            else
            {
                return base->ReplaceChild(newChild, oldChild);
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            base->Accept(visitor);
            visitor.EndVisit(*this);
        }
        [nodiscard]
        public override Result<bool> Write(System.Text.CodeFormatter& formatter)
        {
            if (formatter.Error())
            {
                return Result<bool>(ErrorId(formatter.GetErrorId()));
            }
            if (!xmlVersion.IsEmpty() && !xmlEncoding.IsEmpty())
            {
                formatter << "<?xml version=\"" << xmlVersion << "\" encoding=\"" << xmlEncoding << "\"?>" << endl();
            }
            auto result = base->Write(formatter);
            if (result.Error())
            {
                return Result<bool>(ErrorId(result.GetErrorId()));
            }
            if (formatter.Error())
            {
                return Result<bool>(ErrorId(formatter.GetErrorId()));
            }
            return Result<bool>(true);
        }
        public override Node* Clone(bool deep) const
        {
            Document* clone = new Document(Span(), FileIndex());
            if (deep)
            {
                clone->AppendChild(documentElement->Clone(deep));
            }
            return clone;
        }
        public void InvalidateIndex()
        {
            indexValid = false;
        }
        private Element* documentElement;
        private bool indexValid;
        private bool xmlStandalone;
        private string xmlVersion;
        private string xmlEncoding;
        private Map<string, Element*> index;
    }

    public UniquePtr<Document> MakeDocument()
    {
        return UniquePtr<Document>(new Document());
    }
}

