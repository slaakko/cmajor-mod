// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Collections;

namespace System.IO
{
    public class MemoryStream : Stream
    {
        public MemoryStream() : content(), readPos(0)
        {
        }
        public MemoryStream(byte* data, long count) : content(), readPos(0)
        {
            auto result = this->Write(data, count);
            if (result.Error())
            {
                SetErrorId(result.GetErrorId());
            }
        }
        suppress MemoryStream(const MemoryStream&);
        suppress void operator=(const MemoryStream&);
        public default MemoryStream(MemoryStream&&);
        public default void operator=(MemoryStream&&);
        public inline const byte* Data() const
        {
            return content.CBegin().Ptr();
        }
        public inline long Count() const
        {
            return content.Count();
        }
        public inline long ReadPos() const
        {
            return readPos;
        }
        [nodiscard]
        public override Result<int> ReadByte()
        {
            if (readPos < content.Count())
            {
                byte r = content[readPos++];
                return Result<int>(r);
            }
            return Result<int>(-1);
        }
        [nodiscard]
        public override Result<long> Read(byte* buf, long count)
        {
            long bytesRead = 0;
            long n = content.Count();
            while (count > 0 && readPos < n)
            {
                *buf++ = content[readPos++];
                ++bytesRead;
                --count;
            }
            return Result<long>(bytesRead);
        }
        [nodiscard]
        public override Result<bool> Write(byte x)
        {
            content.Add(x);
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Write(byte* buf, long count)
        {
            while (count > 0)
            {
                content.Add(*buf++);
                --count;
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public override Result<bool> Seek(long pos, Origin origin)
        {
            switch (origin)
            {
                case Origin.seekSet: readPos = pos; break;
                case Origin.seekCur: readPos = readPos + pos; break;
                case Origin.seekEnd: readPos = content.Count() + pos; break;
            }
            return Result<bool>(true);
        }
        public override Result<long> Tell()
        {
            return Result<long>(readPos);
        }
        private List<byte> content;
        private long readPos;
    }
}
