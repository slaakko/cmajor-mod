// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Concepts;
using System.IO;

namespace System.Collections
{
    public class HashSet<T, H = Hasher<T>, C = EqualTo<T>>
        where T is Semiregular and HashFunction<H, T> and C is Relation and C.Domain is T
    {
        public typedef T ValueType;
        public typedef T KeyType;
        public typedef H HashFun;
        public typedef C Compare;
        public typedef TableType.ConstIterator ConstIterator;
        public typedef TableType.Iterator Iterator;
        private typedef HashSet<ValueType, HashFun, Compare> Self;
        private typedef Hashtable<KeyType, ValueType, Identity<ValueType>, HashFun, Compare> TableType;

        public inline Iterator Begin()
        {
            return table.Begin();
        }
        public inline ConstIterator Begin() const
        {
            return table.CBegin();
        }
        public inline ConstIterator CBegin() const
        {
            return table.CBegin();
        }
        public inline Iterator End()
        {
            return table.End();
        }
        public inline ConstIterator End() const
        {
            return table.CEnd();
        }
        public inline ConstIterator CEnd() const
        {
            return table.CEnd();
        }
        public inline long Count() const
        {
            return table.Count();
        }
        public inline bool IsEmpty() const
        {
            return table.IsEmpty();
        }
        public inline void Clear()
        {
            table.Clear();
        }
        public inline Iterator Find(const KeyType& key)
        {
            return table.Find(key);
        }
        public inline ConstIterator Find(const KeyType& key) const
        {
            return table.CFind(key);
        }
        public inline ConstIterator CFind(const KeyType& key) const
        {
            return table.CFind(key);
        }
        public inline Pair<Iterator, bool> Insert(const ValueType& value)
        {
            return table.Insert(value);
        }
        public inline void Remove(const KeyType& key)
        {
            table.Remove(key);
        }
        public inline void Remove(Iterator pos)
        {
            table.Remove(pos);
        }
        private TableType table;
    }

    public bool operator==<T, H, C>(const HashSet<T, H, C>& left, const HashSet<T, H, C>& right) where T is Semiregular and HashFunction<H, T> and C is Relation and C.Domain is T
    {
        if (left.Count() != right.Count()) return false;
        for (const T& value : left)
        {
            if (right.CFind(value) == right.CEnd()) return false;
        }
        return true;
    }

    [system_default]
    public TextWriter& operator<<<T, H, C>(TextWriter& writer, const HashSet<T, H, C>& hashSet)
    {
        if (writer.Error()) return writer;
        writer << "{";
        bool first = true;
        for (const T& element : hashSet)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                writer << ", ";
            }
            writer << element;
        }
        writer << "}";
        return writer;
    }        
    
}
