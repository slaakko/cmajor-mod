// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.IO;

namespace System
{
    public class UniquePtr<T>
    {
        private typedef UniquePtr<T> Self;

        public UniquePtr() : ptr(null)
        {
        }
        public explicit UniquePtr(T* ptr_) : ptr(ptr_)
        {
        }
        suppress UniquePtr(const Self&);
        public UniquePtr(Self&& that) : ptr(that.Release())
        {
        }
        public void operator=(T* ptr_)
        {
            if (ptr != null)
            {
                delete ptr;
            }
            ptr = ptr_;
        }
        suppress void operator=(const Self&);
        public void operator=(Self&& that)
        {
            if (ptr != null)
            {
                delete ptr;
            }
            ptr = that.Release();
        }
        public ~UniquePtr()
        {
            if (ptr != null)
            {
                delete ptr;
            }
        }
        public void Reset()
        {
            if (ptr != null)
            {
                delete ptr;
                ptr = null;
            }
        }
        public void Reset(T* ptr_)
        {
            if (ptr != null)
            {
                delete ptr;
            }
            ptr = ptr_;
        }
        public inline T* Release()
        {
            T* ptr_ = ptr;
            ptr = null;
            return ptr_;
        }
        public inline T* GetPtr()
        {
            return ptr;
        }
        public inline T* Get()
        {
            return ptr;
        }
        public inline bool IsNull() const
        {
            return ptr == null;
        }
        public T* operator->()
        {
            #assert(ptr != null);
            return ptr;
        }
        public inline const T* operator->() const
        {
            #assert(ptr != null);
            return ptr;
        }
        public inline T& operator*()
        {
            #assert(ptr != null);
            return *ptr;
        }
        public inline const T& operator*() const
        {
            #assert(ptr != null);
            return *ptr;
        }
        public void Swap(Self& that)
        {
            Swap(ptr, that.ptr);
        }
        private T* ptr;
    }

    public inline bool operator==<T>(const UniquePtr<T>& left, const UniquePtr<T>& right)
    {
        return left.Get() == right.Get();
    }

    public inline bool operator==<T>(const UniquePtr<T>& left, NullPtrType)
    {
        return left.Get() == null;
    }

    public inline bool operator<<T>(const UniquePtr<T>& left, const UniquePtr<T>& right)
    {
        return left.Get() < right.Get();
    }

    [system_default]
    public TextWriter& operator<<<T>(TextWriter& writer, const UniquePtr<T>& ptr)
    {
        if (writer.Error()) return writer;
        if (ptr.IsNull())
        {
            writer << "null";
        }
        else
        {
            const T& temp = *ptr;
            writer << temp;
        }
        return writer;
    }
}
