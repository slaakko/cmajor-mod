// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Collections;
using System.Threading;

namespace System
{
    public List<string> SplitMessageIntoLines(const string& text)
    {
        string line;
        List<string> lines;
        for (char c : text)
        {
            if (c == '\n')
            {
                lines.Add(line);
                line.Clear();
            }
            else if (c != '\r')
            {
                line.Append(c);
            }
        }
        if (!line.IsEmpty() || text.IsEmpty())
        {
            lines.Add(line);
        }
        return lines;
    }

    public enum LogMode
    {
        console, queue
    }

    public class Log
    {
        static Log() : instance(new Log())
        {
        }
        public static Log& Instance()
        {
            return *instance;
        }
        public inline void SetMode(LogMode mode_)
        {
            mode = mode_;
        }
        public inline LogMode Mode() const
        {
            return mode;
        }
        private Log() : mtx(), mode(LogMode.console)
        {
        }
        [nodiscard]
        public Result<bool> LogMessage(int logStreamId, const string& message)
        {
            if (mode == LogMode.queue)
            {
                return PutMessageToQueue(logStreamId, message);
            }
            else if (mode == LogMode.console)
            {
                LockGuard<Mutex> lock(mtx);
                if (logStreamId == -1)
                {
                    Console.Out() << message << endl();
                }
                else
                {
                    Console.Out() << Format(ToString(logStreamId), 2, FormatWidth.min, FormatJustify.right, '0') << ">" << message << endl();
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<string> GetMessageFromQueue()
        {
            return queue.Get();
        }
        public inline bool Exiting() const
        {
            return queue.Exiting();
        }
        [nodiscard]
        public Result<bool> Exit()
        {
            return queue.Exit();
        }
        [nodiscard]
        private Result<bool> PutMessageToQueue(int logStreamId, const string& message)
        {
            if (logStreamId == -1)
            {
                Result<bool> result = queue.Put(message);
                if (result.Error()) return result;
            }
            else
            {
                string s = Format(ToString(logStreamId), 2, FormatWidth.min, FormatJustify.right, '0');
                s.Append(">").Append(message);
                Result<bool> result = queue.Put(s);
                if (result.Error()) return result;
            }
            return Result<bool>(true);
        }
        private static UniquePtr<Log> instance;
        private Mutex mtx;
        private LogMode mode;
        private System.Threading.SynchronizedQueue<string> queue;
    }

    [nodiscard]
    public Result<bool> LogMessage(int logStreamId, const string& message)
    {
        List<string> lines = SplitMessageIntoLines(message);
        for (const string& line : lines)
        {
            Result<bool> result = Log.Instance().LogMessage(logStreamId, line);
            if (result.Error()) return result;
        }
        return Result<bool>(true);
    }
}

