// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Collections;
using System.Threading;

namespace System
{
    public List<string> SplitMessageIntoLines(const string& text)
    {
        string line;
        List<string> lines;
        for (char c : text)
        {
            if (c == '\n')
            {
                lines.Add(line);
                line.Clear();
            }
            else if (c != '\r')
            {
                line.Append(c);
            }
        }
        if (!line.IsEmpty() || text.IsEmpty())
        {
            lines.Add(line);
        }
        return lines;
    }
    
    public class Log
    {
        static Log() : instance(new Log())
        {
        }
        public static Log& Instance()
        {
            return *instance;
        }
        private Log() : mtx()
        {
        }
        public void LogMessage(int logStreamId, const string& message)
        {
            LockGuard<Mutex> lock(mtx);
            if (logStreamId == -1)
            {
                Console.Out() << message << endl();
            }
            else
            {
                Console.Out() << Format(ToString(logStreamId), 2, FormatWidth.min, FormatJustify.right, '0') << ">" << message << endl();
            }
        }
        private static UniquePtr<Log> instance;
        private Mutex mtx;
    }

    public void LogMessage(int logStreamId, const string& message)
    {
        List<string> lines = SplitMessageIntoLines(message);
        for (const string& line : lines)
        {
            Log.Instance().LogMessage(logStreamId, line);
        }
    }
}

