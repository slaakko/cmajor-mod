// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Concepts;
using System.IO;

namespace System.Collections
{
    public class Set<T, C = Less<T>>
        where T is Semiregular and C is Relation and C.Domain is T
    {
        public typedef T ValueType;
        public typedef T KeyType;
        public typedef C Compare;
        public typedef TreeType.ConstIterator ConstIterator;
        public typedef TreeType.Iterator Iterator;
        private typedef Set<ValueType, Compare> Self;
        private typedef RedBlackTree<KeyType, ValueType, Identity<ValueType>, Compare> TreeType;

        public inline Iterator Begin()
        {
            return tree.Begin();
        }
        public inline ConstIterator Begin() const
        {
            return tree.CBegin();
        }
        public inline ConstIterator CBegin() const
        {
            return tree.CBegin();
        }
        public inline Iterator End()
        {
            return tree.End();
        }
        public inline ConstIterator End() const
        {
            return tree.CEnd();
        }
        public inline ConstIterator CEnd() const
        {
            return tree.CEnd();
        }
        public inline long Count() const
        {
            return tree.Count();
        }
        public inline bool IsEmpty() const
        {
            return tree.IsEmpty();
        }
        public void Clear()
        {
            tree.Clear();
        }
        public inline Iterator Find(const KeyType& key)
        {
            return tree.Find(key);
        }
        public inline ConstIterator Find(const KeyType& key) const
        {
            return tree.CFind(key);
        }
        public inline ConstIterator CFind(const KeyType& key) const
        {
            return tree.CFind(key);
        }
        public inline Iterator LowerBound(const KeyType& key)
        {
            return tree.LowerBound(key);
        }
        public inline ConstIterator LowerBound(const KeyType& key) const
        {
            return tree.CLowerBound(key);
        }
        public inline ConstIterator CLowerBound(const KeyType& key) const
        {
            return tree.CLowerBound(key);
        }
        public inline Pair<Iterator, bool> Insert(const ValueType& value)
            where T is Copyable
        {
            return tree.Insert(value);
        }
        public inline bool Remove(const KeyType& key)
        {
            return tree.Remove(key);
        }
        public inline void Remove(Iterator pos)
        {
            tree.Remove(pos);
        }
        private TreeType tree;
    }

    public bool operator==<T, C>(const Set<T, C>& left, const Set<T, C>& right)
        where T is Regular and C is Relation and C.Domain is T
    {
        return left.Count() == right.Count() && Equal(left.CBegin(), left.CEnd(), right.CBegin(), right.CEnd(), EqualTo<T>());
    }

    public bool operator<<T, C>(const Set<T, C>& left, const Set<T, C>& right)
        where T is Semiregular and C is Relation and C.Domain is T
    {
        return LexicographicalCompare(left.CBegin(), left.CEnd(), right.CBegin(), right.CEnd(), C());
    }

    [system_default]
    public TextWriter& operator<<<T, C>(TextWriter& writer, const Set<T, C>& set)
    {
        if (writer.Error()) return writer;
        writer << "{";
        bool first = true;
        for (const T& element : set)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                writer << ", ";
            }
            writer << element;
        }
        writer << "}";
        return writer;
    }
}
