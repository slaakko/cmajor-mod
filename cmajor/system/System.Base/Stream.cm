// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public enum Origin : byte
    {
        seekSet, seekCur, seekEnd
    }

    public abstract class Stream : IOBase
    {
        public Stream() : base() {}
        suppress Stream(const Stream&);
        suppress void operator=(const Stream&);
        public default Stream(Stream&&);
        public default void operator=(Stream&&);
        [nodiscard]
        public abstract Result<int> ReadByte();
        [nodiscard]
        public abstract Result<long> Read(byte* buf, long count);
        [nodiscard]
        public abstract Result<bool> Write(byte x);
        [nodiscard]
        public abstract Result<bool> Write(byte* buf, long count);
        public virtual Result<bool> Flush()
        {
            return Result<bool>(true);
        }
        [nodiscard]
        public virtual Result<bool> Seek(long pos, Origin origin)
        {
            string streamClassName = typename(*this);
            string errorMessage = streamClassName + " stream does not support seek";
            int errorId = RtmAllocateError(errorMessage.Chars());
            SetErrorId(errorId);
            return Result<bool>(ErrorId(errorId));
        }
        [nodiscard]
        public virtual Result<long> Tell()
        {
            string streamClassName = typename(*this);
            string errorMessage = streamClassName + " stream does not support tell";
            int errorId = RtmAllocateError(errorMessage.Chars());
            SetErrorId(errorId);
            return Result<long>(ErrorId(errorId));
        }
        [nodiscard]
        public Result<bool> CopyTo(Stream& destination)
        {
            return this->CopyTo(destination, 16384);
        }
        [nodiscard]
        public Result<bool> CopyTo(Stream& destination, long bufferSize)
        {
            if (bufferSize <= 0)
            {
                int errorId = AllocateError("invalid buffer size");
                return Result<bool>(ErrorId(errorId));
            }
            IOBuffer buffer(bufferSize);
            auto readResult = Read(cast<byte*>(buffer.Mem()), bufferSize);
            if (readResult.Error())
            {
                return Result<bool>(ErrorId(readResult.GetErrorId()));
            }
            long bytesRead = readResult.Value();
            while (bytesRead > 0)
            {
                auto writeResult = destination.Write(cast<byte*>(buffer.Mem()), bytesRead);
                if (writeResult.Error())
                {
                    return Result<bool>(ErrorId(writeResult.GetErrorId()));
                }
                readResult = Read(cast<byte*>(buffer.Mem()), bufferSize);
                if (readResult.Error())
                {
                    return Result<bool>(ErrorId(readResult.GetErrorId()));
                }
                bytesRead = readResult.Value();
            }
            return Result<bool>(true);
        }
    }
}
