// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.Threading;

namespace System.Threading.Fibers
{
    public delegate void FiberFunction(void* param);

    internal class FiberData
    {
        public FiberData(const FiberFunction& function_, void* param_) : function(function_), param(param_)
        {
        }
        public inline FiberFunction Function() const
        {
            return function;
        }
        public inline void* Param() const
        {
            return param;
        }
        private FiberFunction function;
        private void* param;
    }

    public class Fiber
    {
        public Fiber() : handle(null), main(true)
        {
            handle = RtmConvertThreadToFiber(null);
        }
        public Fiber(const FiberFunction& function) : this(cast<ulong>(1024u) * 1024u, function, null)
        {
        }
        public Fiber(const FiberFunction& function, void* param) : this(cast<ulong>(1024u) * 1024u, function, param)
        {
        }
        public Fiber(ulong stackSize, const FiberFunction& function) : this(stackSize, function, null)
        {
        }
        public Fiber(ulong stackSize, const FiberFunction& function, void* param) : handle(null), main(false)
        {
            FiberRunFunction runFiber = RunFiber;
            void* startAddress = cast<void*>(runFiber);
            handle = RtmCreateFiber(stackSize, startAddress, new FiberData(function, param));
        }
        [nodiscard]
        public Result<bool> SwitchTo()
        {
            if (handle != null)
            {
                RtmSwitchToFiber(handle);
            }
            else
            {
                string errorMessage = "could not switch to this fiber: handle is null";
                int errorId = AllocateError(errorMessage);
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        public suppress Fiber(const Fiber&);
        public suppress void operator=(const Fiber&);
        public Fiber(Fiber&& that) : handle(that.handle), main(that.main)
        {
            that.handle = null;
            that.main = false;
        }
        public default void operator=(Fiber&& that);
        public ~Fiber()
        {
            if (handle != null)
            {
                if (!main)
                {
                    RtmDeleteFiber(handle);
                }
            }
        }
        public inline void* Handle() const
        {
            return handle;
        }
        public static Fiber FromCurrentThread()
        {
            return Fiber();
        }
        private void* handle;
        private bool main;
    }

    [nodiscard]
    public Result<bool> SwitchToFiber(const Fiber& fiber)
    {
        return fiber.SwitchTo();
    }

    internal delegate void FiberRunFunction();

    internal void RunFiber()
    {
        void* data = RtmGetFiberData();
        UniquePtr<FiberData> fiberData(cast<FiberData*>(data));
        FiberFunction function = fiberData->Function();
        void* param = fiberData->Param();
        function(param);
    }
}
