// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;

namespace System.Threading
{
    public enum ConditionVariableStatus : int
    {
        timeout = 0, no_timeout = 1
    }

    public delegate bool Predicate(void* arg);
    public class delegate bool PredicateMethod(void* arg);

    public class ConditionVariable
    {
        public ConditionVariable() : nativeHandle(RtmAllocateConditionVariable())
        {
        }
        public ~ConditionVariable()
        {
            if (nativeHandle != null)
            {
                RtmFreeConditionVariable(nativeHandle);
            }
        }
        suppress ConditionVariable(const ConditionVariable&);
        suppress void operator=(ConditionVariable&);
        public ConditionVariable(ConditionVariable&& that) : nativeHandle(that.nativeHandle)
        {
            that.nativeHandle = null;
        }
        public void operator=(ConditionVariable&& that)
        {
            Swap(nativeHandle, that.nativeHandle);
        }
        [nodiscard]
        public Result<bool> NotifyOne()
        {
            int errorId = 0;
            bool result = RtmNotifyOne(nativeHandle, errorId);
            if (errorId > 0)
            {
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> NotifyAll()
        {
            int errorId = 0;
            bool result = RtmNotifyAll(nativeHandle, errorId);
            if (errorId > 0)
            {
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> Wait(RecursiveMutex& mtx)
        {
            int errorId = 0;
            bool result = RtmWaitConditionVariable(nativeHandle, mtx.NativeHandle(), errorId);
            if (errorId > 0)
            {
                return Result<bool>(ErrorId(errorId));
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<ConditionVariableStatus> WaitFor(RecursiveMutex& mtx, const Duration& duration)
        {
            int errorId = 0;
            int result = RtmWaitConditionVariableDuration(nativeHandle, mtx.NativeHandle(), duration.Rep(), errorId);
            if (errorId > 0)
            {
                return Result<ConditionVariableStatus>(ErrorId(errorId));
            }
            return Result<ConditionVariableStatus>(cast<ConditionVariableStatus>(result));
        }
        [nodiscard]
        public Result<ConditionVariableStatus> WaitUntil(RecursiveMutex& mtx, const TimePoint& tp)
        {
            Duration duration = tp - Now();
            return WaitFor(mtx, duration);
        }
        [nodiscard]
        public Result<bool> Wait(RecursiveMutex& mtx, Predicate predicate, void* arg)
        {
            while (!predicate(arg))
            {
                auto result = Wait(mtx);
                if (result.Error())
                {
                    return result;
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> WaitFor(RecursiveMutex& mtx, Predicate predicate, void* arg, const Duration& duration)
        {
            while (!predicate(arg))
            {
                auto result = WaitFor(mtx, duration);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
                if (result.Value() == ConditionVariableStatus.timeout)
                {
                    return predicate(arg);
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> WaitUntil(RecursiveMutex& mtx, Predicate predicate, void* arg, const TimePoint& tp)
        {
            Duration duration = tp - Now();
            return WaitFor(mtx, predicate, arg, duration);
        }
        [nodiscard]
        public Result<bool> Wait(RecursiveMutex& mtx, PredicateMethod predicateMethod, void* arg)
        {
            while (!predicateMethod(arg))
            {
                auto result = Wait(mtx);
                if (result.Error())
                {
                    return result;
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> WaitFor(RecursiveMutex& mtx, PredicateMethod predicateMethod, void* arg, const Duration& duration)
        {
            while (!predicateMethod(arg))
            {
                auto result = WaitFor(mtx, duration);
                if (result.Error())
                {
                    return Result<bool>(ErrorId(result.GetErrorId()));
                }
                if (result.Value() == ConditionVariableStatus.timeout)
                {
                    return predicateMethod(arg);
                }
            }
            return Result<bool>(true);
        }
        [nodiscard]
        public Result<bool> WaitUntil(RecursiveMutex& mtx, PredicateMethod predicateMethod, void* arg, const TimePoint& tp)
        {
            Duration duration = tp - Now();
            return WaitFor(mtx, predicateMethod, arg, duration);
        }
        private void* nativeHandle;
    }
}
