// this file has been automatically generated from 'C:/work/cmajor-mod/cmajor/sbin/asm/asm.lexer' using soul lexer generator slg version 5.0.0

module cmajor.sbin.assembly.lexer;

using namespace cmajor::sbin::assembly::token;

namespace cmajor::sbin::assembly::lexer {

soul::ast::slg::TokenCollection* GetTokens()
{
    static soul::ast::slg::TokenCollection tokens("cmajor.sbin.assembly.lexer.tokens");
    if (!tokens.Initialized())
    {
        tokens.SetInitialized();
        tokens.AddToken(new soul::ast::slg::Token(NEWLINE, "NEWLINE", "newline"));
        tokens.AddToken(new soul::ast::slg::Token(END, "END", "end"));
        tokens.AddToken(new soul::ast::slg::Token(SYMBOL, "SYMBOL", "symbol"));
        tokens.AddToken(new soul::ast::slg::Token(PUBLIC, "PUBLIC", "public"));
        tokens.AddToken(new soul::ast::slg::Token(EXTRN, "EXTRN", "extrn"));
        tokens.AddToken(new soul::ast::slg::Token(BYTE, "BYTE", "byte"));
        tokens.AddToken(new soul::ast::slg::Token(WORD, "WORD", "word"));
        tokens.AddToken(new soul::ast::slg::Token(DWORD, "DWORD", "dword"));
        tokens.AddToken(new soul::ast::slg::Token(QWORD, "QWORD", "qword"));
        tokens.AddToken(new soul::ast::slg::Token(OWORD, "OWORD", "oword"));
        tokens.AddToken(new soul::ast::slg::Token(PTR, "PTR", "ptr"));
        tokens.AddToken(new soul::ast::slg::Token(PROC, "PROC", "proc"));
        tokens.AddToken(new soul::ast::slg::Token(ENDP, "ENDP", "endp"));
        tokens.AddToken(new soul::ast::slg::Token(DATA, "DATA", "data"));
        tokens.AddToken(new soul::ast::slg::Token(CODE, "CODE", "code"));
        tokens.AddToken(new soul::ast::slg::Token(DB, "DB", "db"));
        tokens.AddToken(new soul::ast::slg::Token(DW, "DW", "dw"));
        tokens.AddToken(new soul::ast::slg::Token(DD, "DD", "dd"));
        tokens.AddToken(new soul::ast::slg::Token(DQ, "DQ", "dq"));
        tokens.AddToken(new soul::ast::slg::Token(REAL4, "REAL4", "real4"));
        tokens.AddToken(new soul::ast::slg::Token(REAL8, "REAL8", "real8"));
        tokens.AddToken(new soul::ast::slg::Token(HEXNUMBER, "HEXNUMBER", "hexnumber"));
        tokens.AddToken(new soul::ast::slg::Token(REAL, "REAL", "real"));
        tokens.AddToken(new soul::ast::slg::Token(INTEGER, "INTEGER", "integer"));
        tokens.AddToken(new soul::ast::slg::Token(STRING, "STRING", "string"));
        tokens.AddToken(new soul::ast::slg::Token(COMMA, "COMMA", ","));
        tokens.AddToken(new soul::ast::slg::Token(COLON, "COLON", ":"));
        tokens.AddToken(new soul::ast::slg::Token(ASSIGN, "ASSIGN", "="));
        tokens.AddToken(new soul::ast::slg::Token(DOT, "DOT", "."));
        tokens.AddToken(new soul::ast::slg::Token(LBRACKET, "LBRACKET", "["));
        tokens.AddToken(new soul::ast::slg::Token(RBRACKET, "RBRACKET", "]"));
        tokens.AddToken(new soul::ast::slg::Token(PLUS, "PLUS", "+"));
        tokens.AddToken(new soul::ast::slg::Token(MINUS, "MINUS", "-"));
        tokens.AddToken(new soul::ast::slg::Token(TIMES, "TIMES", "*"));
        tokens.AddToken(new soul::ast::slg::Token(LPAREN, "LPAREN", "("));
        tokens.AddToken(new soul::ast::slg::Token(RPAREN, "RPAREN", ")"));
        tokens.AddToken(new soul::ast::slg::Token(ADD, "ADD", "add"));
        tokens.AddToken(new soul::ast::slg::Token(ADDSD, "ADDSD", "addsd"));
        tokens.AddToken(new soul::ast::slg::Token(ADDSS, "ADDSS", "addss"));
        tokens.AddToken(new soul::ast::slg::Token(AND, "AND", "and"));
        tokens.AddToken(new soul::ast::slg::Token(CALL, "CALL", "call"));
        tokens.AddToken(new soul::ast::slg::Token(CBW, "CBW", "cbw"));
        tokens.AddToken(new soul::ast::slg::Token(CDQ, "CDQ", "cdq"));
        tokens.AddToken(new soul::ast::slg::Token(CMP, "CMP", "cmp"));
        tokens.AddToken(new soul::ast::slg::Token(COMISD, "COMISD", "comisd"));
        tokens.AddToken(new soul::ast::slg::Token(COMISS, "COMISS", "comiss"));
        tokens.AddToken(new soul::ast::slg::Token(CQO, "CQO", "cqo"));
        tokens.AddToken(new soul::ast::slg::Token(CVTSD2SS, "CVTSD2SS", "cvtsd2ss"));
        tokens.AddToken(new soul::ast::slg::Token(CVTSI2SD, "CVTSI2SD", "cvtsi2sd"));
        tokens.AddToken(new soul::ast::slg::Token(CVTSI2SS, "CVTSI2SS", "cvtsi2ss"));
        tokens.AddToken(new soul::ast::slg::Token(CVTSS2SD, "CVTSS2SD", "cvtss2sd"));
        tokens.AddToken(new soul::ast::slg::Token(CVTTSD2SI, "CVTTSD2SI", "cvttsd2si"));
        tokens.AddToken(new soul::ast::slg::Token(CVTTSS2SI, "CVTTSS2SI", "cvttss2si"));
        tokens.AddToken(new soul::ast::slg::Token(CWD, "CWD", "cwd"));
        tokens.AddToken(new soul::ast::slg::Token(DIV, "DIV", "div"));
        tokens.AddToken(new soul::ast::slg::Token(DIVSD, "DIVSD", "divsd"));
        tokens.AddToken(new soul::ast::slg::Token(DIVSS, "DIVSS", "divss"));
        tokens.AddToken(new soul::ast::slg::Token(IDIV, "IDIV", "idiv"));
        tokens.AddToken(new soul::ast::slg::Token(IMUL, "IMUL", "imul"));
        tokens.AddToken(new soul::ast::slg::Token(JAE, "JAE", "jae"));
        tokens.AddToken(new soul::ast::slg::Token(JE, "JE", "je"));
        tokens.AddToken(new soul::ast::slg::Token(JMP, "JMP", "jmp"));
        tokens.AddToken(new soul::ast::slg::Token(JNZ, "JNZ", "jnz"));
        tokens.AddToken(new soul::ast::slg::Token(JZ, "JZ", "jz"));
        tokens.AddToken(new soul::ast::slg::Token(LEA, "LEA", "lea"));
        tokens.AddToken(new soul::ast::slg::Token(MOV, "MOV", "mov"));
        tokens.AddToken(new soul::ast::slg::Token(MOVSD, "MOVSD", "movsd"));
        tokens.AddToken(new soul::ast::slg::Token(MOVSS, "MOVSS", "movss"));
        tokens.AddToken(new soul::ast::slg::Token(MOVSX, "MOVSX", "movsx"));
        tokens.AddToken(new soul::ast::slg::Token(MOVSXD, "MOVSXD", "movsxd"));
        tokens.AddToken(new soul::ast::slg::Token(MOVZX, "MOVZX", "movzx"));
        tokens.AddToken(new soul::ast::slg::Token(MUL, "MUL", "mul"));
        tokens.AddToken(new soul::ast::slg::Token(MULSD, "MULSD", "mulsd"));
        tokens.AddToken(new soul::ast::slg::Token(MULSS, "MULSS", "mulss"));
        tokens.AddToken(new soul::ast::slg::Token(NEG, "NEG", "neg"));
        tokens.AddToken(new soul::ast::slg::Token(NOP, "NOP", "nop"));
        tokens.AddToken(new soul::ast::slg::Token(NOT, "NOT", "not"));
        tokens.AddToken(new soul::ast::slg::Token(OR, "OR", "or"));
        tokens.AddToken(new soul::ast::slg::Token(POP, "POP", "pop"));
        tokens.AddToken(new soul::ast::slg::Token(PUSH, "PUSH", "push"));
        tokens.AddToken(new soul::ast::slg::Token(RET, "RET", "ret"));
        tokens.AddToken(new soul::ast::slg::Token(SAR, "SAR", "sar"));
        tokens.AddToken(new soul::ast::slg::Token(SETC, "SETC", "setc"));
        tokens.AddToken(new soul::ast::slg::Token(SETE, "SETE", "sete"));
        tokens.AddToken(new soul::ast::slg::Token(SETL, "SETL", "setl"));
        tokens.AddToken(new soul::ast::slg::Token(SHL, "SHL", "shl"));
        tokens.AddToken(new soul::ast::slg::Token(SHR, "SHR", "shr"));
        tokens.AddToken(new soul::ast::slg::Token(SUB, "SUB", "sub"));
        tokens.AddToken(new soul::ast::slg::Token(SUBSD, "SUBSD", "subsd"));
        tokens.AddToken(new soul::ast::slg::Token(SUBSS, "SUBSS", "subss"));
        tokens.AddToken(new soul::ast::slg::Token(UCOMISD, "UCOMISD", "ucomisd"));
        tokens.AddToken(new soul::ast::slg::Token(UCOMISS, "UCOMISS", "ucomiss"));
        tokens.AddToken(new soul::ast::slg::Token(XOR, "XOR", "xor"));
        tokens.AddToken(new soul::ast::slg::Token(AL, "AL", "al"));
        tokens.AddToken(new soul::ast::slg::Token(BL, "BL", "bl"));
        tokens.AddToken(new soul::ast::slg::Token(CL, "CL", "cl"));
        tokens.AddToken(new soul::ast::slg::Token(DL, "DL", "dl"));
        tokens.AddToken(new soul::ast::slg::Token(SIL, "SIL", "sil"));
        tokens.AddToken(new soul::ast::slg::Token(DIL, "DIL", "dil"));
        tokens.AddToken(new soul::ast::slg::Token(BPL, "BPL", "bpl"));
        tokens.AddToken(new soul::ast::slg::Token(SPL, "SPL", "spl"));
        tokens.AddToken(new soul::ast::slg::Token(R8B, "R8B", "r8b"));
        tokens.AddToken(new soul::ast::slg::Token(R9B, "R9B", "r9b"));
        tokens.AddToken(new soul::ast::slg::Token(R10B, "R10B", "r10b"));
        tokens.AddToken(new soul::ast::slg::Token(R11B, "R11B", "r11b"));
        tokens.AddToken(new soul::ast::slg::Token(R12B, "R12B", "r12b"));
        tokens.AddToken(new soul::ast::slg::Token(R13B, "R13B", "r13b"));
        tokens.AddToken(new soul::ast::slg::Token(R14B, "R14B", "r14b"));
        tokens.AddToken(new soul::ast::slg::Token(R15B, "R15B", "r15b"));
        tokens.AddToken(new soul::ast::slg::Token(AH, "AH", "ah"));
        tokens.AddToken(new soul::ast::slg::Token(BH, "BH", "bh"));
        tokens.AddToken(new soul::ast::slg::Token(CH, "CH", "ch"));
        tokens.AddToken(new soul::ast::slg::Token(DH, "DH", "dh"));
        tokens.AddToken(new soul::ast::slg::Token(AX, "AX", "ax"));
        tokens.AddToken(new soul::ast::slg::Token(BX, "BX", "bx"));
        tokens.AddToken(new soul::ast::slg::Token(CX, "CX", "cx"));
        tokens.AddToken(new soul::ast::slg::Token(DX, "DX", "dx"));
        tokens.AddToken(new soul::ast::slg::Token(SI, "SI", "si"));
        tokens.AddToken(new soul::ast::slg::Token(DI, "DI", "di"));
        tokens.AddToken(new soul::ast::slg::Token(BP, "BP", "bp"));
        tokens.AddToken(new soul::ast::slg::Token(SP, "SP", "sp"));
        tokens.AddToken(new soul::ast::slg::Token(R8W, "R8W", "r8w"));
        tokens.AddToken(new soul::ast::slg::Token(R9W, "R9W", "r9w"));
        tokens.AddToken(new soul::ast::slg::Token(R10W, "R10W", "r10w"));
        tokens.AddToken(new soul::ast::slg::Token(R11W, "R11W", "r11w"));
        tokens.AddToken(new soul::ast::slg::Token(R12W, "R12W", "r12w"));
        tokens.AddToken(new soul::ast::slg::Token(R13W, "R13W", "r13w"));
        tokens.AddToken(new soul::ast::slg::Token(R14W, "R14W", "r14w"));
        tokens.AddToken(new soul::ast::slg::Token(R15W, "R15W", "r15w"));
        tokens.AddToken(new soul::ast::slg::Token(EAX, "EAX", "eax"));
        tokens.AddToken(new soul::ast::slg::Token(EBX, "EBX", "ebx"));
        tokens.AddToken(new soul::ast::slg::Token(ECX, "ECX", "ecx"));
        tokens.AddToken(new soul::ast::slg::Token(EDX, "EDX", "edx"));
        tokens.AddToken(new soul::ast::slg::Token(ESI, "ESI", "esi"));
        tokens.AddToken(new soul::ast::slg::Token(EDI, "EDI", "edi"));
        tokens.AddToken(new soul::ast::slg::Token(EBP, "EBP", "ebp"));
        tokens.AddToken(new soul::ast::slg::Token(ESP, "ESP", "esp"));
        tokens.AddToken(new soul::ast::slg::Token(R8D, "R8D", "r8d"));
        tokens.AddToken(new soul::ast::slg::Token(R9D, "R9D", "r9d"));
        tokens.AddToken(new soul::ast::slg::Token(R10D, "R10D", "r10d"));
        tokens.AddToken(new soul::ast::slg::Token(R11D, "R11D", "r11d"));
        tokens.AddToken(new soul::ast::slg::Token(R12D, "R12D", "r12d"));
        tokens.AddToken(new soul::ast::slg::Token(R13D, "R13D", "r13d"));
        tokens.AddToken(new soul::ast::slg::Token(R14D, "R14D", "r14d"));
        tokens.AddToken(new soul::ast::slg::Token(R15D, "R15D", "r15d"));
        tokens.AddToken(new soul::ast::slg::Token(RAX, "RAX", "rax"));
        tokens.AddToken(new soul::ast::slg::Token(RBX, "RBX", "rbx"));
        tokens.AddToken(new soul::ast::slg::Token(RCX, "RCX", "rcx"));
        tokens.AddToken(new soul::ast::slg::Token(RDX, "RDX", "rdx"));
        tokens.AddToken(new soul::ast::slg::Token(RSI, "RSI", "rsi"));
        tokens.AddToken(new soul::ast::slg::Token(RDI, "RDI", "rdi"));
        tokens.AddToken(new soul::ast::slg::Token(RBP, "RBP", "rbp"));
        tokens.AddToken(new soul::ast::slg::Token(RSP, "RSP", "rsp"));
        tokens.AddToken(new soul::ast::slg::Token(R8, "R8", "r8"));
        tokens.AddToken(new soul::ast::slg::Token(R9, "R9", "r9"));
        tokens.AddToken(new soul::ast::slg::Token(R10, "R10", "r10"));
        tokens.AddToken(new soul::ast::slg::Token(R11, "R11", "r11"));
        tokens.AddToken(new soul::ast::slg::Token(R12, "R12", "r12"));
        tokens.AddToken(new soul::ast::slg::Token(R13, "R13", "r13"));
        tokens.AddToken(new soul::ast::slg::Token(R14, "R14", "r14"));
        tokens.AddToken(new soul::ast::slg::Token(R15, "R15", "r15"));
        tokens.AddToken(new soul::ast::slg::Token(XMM0, "XMM0", "xmm0"));
        tokens.AddToken(new soul::ast::slg::Token(XMM1, "XMM1", "xmm1"));
        tokens.AddToken(new soul::ast::slg::Token(XMM2, "XMM2", "xmm2"));
        tokens.AddToken(new soul::ast::slg::Token(XMM3, "XMM3", "xmm3"));
        tokens.AddToken(new soul::ast::slg::Token(XMM4, "XMM4", "xmm4"));
        tokens.AddToken(new soul::ast::slg::Token(XMM5, "XMM5", "xmm5"));
        tokens.AddToken(new soul::ast::slg::Token(XMM6, "XMM6", "xmm6"));
        tokens.AddToken(new soul::ast::slg::Token(XMM7, "XMM7", "xmm7"));
        tokens.AddToken(new soul::ast::slg::Token(XMM8, "XMM8", "xmm8"));
        tokens.AddToken(new soul::ast::slg::Token(XMM9, "XMM9", "xmm9"));
        tokens.AddToken(new soul::ast::slg::Token(XMM10, "XMM10", "xmm10"));
        tokens.AddToken(new soul::ast::slg::Token(XMM11, "XMM11", "xmm11"));
        tokens.AddToken(new soul::ast::slg::Token(XMM12, "XMM12", "xmm12"));
        tokens.AddToken(new soul::ast::slg::Token(XMM13, "XMM13", "xmm13"));
        tokens.AddToken(new soul::ast::slg::Token(XMM14, "XMM14", "xmm14"));
        tokens.AddToken(new soul::ast::slg::Token(XMM15, "XMM15", "xmm15"));
    }
    return &tokens;
}

AssemblyLexer_Variables::AssemblyLexer_Variables()
{
}

std::mutex mtx;

std::mutex& MakeLexerMtx() { return mtx; }

template<>
soul::lexer::KeywordMap<char>* GetKeywords<char>()
{
    static const soul::lexer::Keyword<char> keywords[] = {
         { "public", PUBLIC },
         { "extrn", EXTRN },
         { "byte", BYTE },
         { "word", WORD },
         { "dword", DWORD },
         { "qword", QWORD },
         { "oword", OWORD },
         { "ptr", PTR },
         { "proc", PROC },
         { "endp", ENDP },
         { "end", END },
         { "data", DATA },
         { "code", CODE },
         { "db", DB },
         { "dw", DW },
         { "dd", DD },
         { "dq", DQ },
         { "real4", REAL4 },
         { "real8", REAL8 },
         { "add", ADD },
         { "addsd", ADDSD },
         { "addss", ADDSS },
         { "and", AND },
         { "call", CALL },
         { "cbw", CBW },
         { "cdq", CDQ },
         { "cmp", CMP },
         { "comisd", COMISD },
         { "comiss", COMISS },
         { "cqo", CQO },
         { "cvtsd2ss", CVTSD2SS },
         { "cvtsi2sd", CVTSI2SD },
         { "cvtsi2ss", CVTSI2SS },
         { "cvtss2sd", CVTSS2SD },
         { "cvttsd2si", CVTTSD2SI },
         { "cvttss2si", CVTTSS2SI },
         { "cwd", CWD },
         { "div", DIV },
         { "divsd", DIVSD },
         { "divss", DIVSS },
         { "idiv", IDIV },
         { "imul", IMUL },
         { "jae", JAE },
         { "je", JE },
         { "jmp", JMP },
         { "jnz", JNZ },
         { "jz", JZ },
         { "lea", LEA },
         { "mov", MOV },
         { "movsd", MOVSD },
         { "movss", MOVSS },
         { "movsx", MOVSX },
         { "movsxd", MOVSXD },
         { "movzx", MOVZX },
         { "mul", MUL },
         { "mulsd", MULSD },
         { "mulss", MULSS },
         { "neg", NEG },
         { "nop", NOP },
         { "not", NOT },
         { "or", OR },
         { "pop", POP },
         { "push", PUSH },
         { "ret", RET },
         { "sar", SAR },
         { "setc", SETC },
         { "sete", SETE },
         { "setl", SETL },
         { "shl", SHL },
         { "shr", SHR },
         { "sub", SUB },
         { "subsd", SUBSD },
         { "subss", SUBSS },
         { "ucomisd", UCOMISD },
         { "ucomiss", UCOMISS },
         { "xor", XOR },
         { "al", AL },
         { "bl", BL },
         { "cl", CL },
         { "dl", DL },
         { "sil", SIL },
         { "dil", DIL },
         { "bpl", BPL },
         { "spl", SPL },
         { "r8b", R8B },
         { "r9b", R9B },
         { "r10b", R10B },
         { "r11b", R11B },
         { "r12b", R12B },
         { "r13b", R13B },
         { "r14b", R14B },
         { "r15b", R15B },
         { "ah", AH },
         { "bh", BH },
         { "ch", CH },
         { "dh", DH },
         { "ax", AX },
         { "bx", BX },
         { "cx", CX },
         { "dx", DX },
         { "si", SI },
         { "di", DI },
         { "bp", BP },
         { "sp", SP },
         { "r8w", R8W },
         { "r9w", R9W },
         { "r10w", R10W },
         { "r11w", R11W },
         { "r12w", R12W },
         { "r13w", R13W },
         { "r14w", R14W },
         { "r15w", R15W },
         { "eax", EAX },
         { "ebx", EBX },
         { "ecx", ECX },
         { "edx", EDX },
         { "esi", ESI },
         { "edi", EDI },
         { "ebp", EBP },
         { "esp", ESP },
         { "r8d", R8D },
         { "r9d", R9D },
         { "r10d", R10D },
         { "r11d", R11D },
         { "r12d", R12D },
         { "r13d", R13D },
         { "r14d", R14D },
         { "r15d", R15D },
         { "rax", RAX },
         { "rbx", RBX },
         { "rcx", RCX },
         { "rdx", RDX },
         { "rsi", RSI },
         { "rdi", RDI },
         { "rbp", RBP },
         { "rsp", RSP },
         { "r8", R8 },
         { "r9", R9 },
         { "r10", R10 },
         { "r11", R11 },
         { "r12", R12 },
         { "r13", R13 },
         { "r14", R14 },
         { "r15", R15 },
         { "xmm0", XMM0 },
         { "xmm1", XMM1 },
         { "xmm2", XMM2 },
         { "xmm3", XMM3 },
         { "xmm4", XMM4 },
         { "xmm5", XMM5 },
         { "xmm6", XMM6 },
         { "xmm7", XMM7 },
         { "xmm8", XMM8 },
         { "xmm9", XMM9 },
         { "xmm10", XMM10 },
         { "xmm11", XMM11 },
         { "xmm12", XMM12 },
         { "xmm13", XMM13 },
         { "xmm14", XMM14 },
         { "xmm15", XMM15 },
         { nullptr, -1 }
    };
    static soul::lexer::KeywordMap<char> keywordMap(keywords);
    return &keywordMap;
}

template<>
soul::lexer::KeywordMap<char8_t>* GetKeywords<char8_t>()
{
    static const soul::lexer::Keyword<char8_t> keywords[] = {
         { u8"public", PUBLIC },
         { u8"extrn", EXTRN },
         { u8"byte", BYTE },
         { u8"word", WORD },
         { u8"dword", DWORD },
         { u8"qword", QWORD },
         { u8"oword", OWORD },
         { u8"ptr", PTR },
         { u8"proc", PROC },
         { u8"endp", ENDP },
         { u8"end", END },
         { u8"data", DATA },
         { u8"code", CODE },
         { u8"db", DB },
         { u8"dw", DW },
         { u8"dd", DD },
         { u8"dq", DQ },
         { u8"real4", REAL4 },
         { u8"real8", REAL8 },
         { u8"add", ADD },
         { u8"addsd", ADDSD },
         { u8"addss", ADDSS },
         { u8"and", AND },
         { u8"call", CALL },
         { u8"cbw", CBW },
         { u8"cdq", CDQ },
         { u8"cmp", CMP },
         { u8"comisd", COMISD },
         { u8"comiss", COMISS },
         { u8"cqo", CQO },
         { u8"cvtsd2ss", CVTSD2SS },
         { u8"cvtsi2sd", CVTSI2SD },
         { u8"cvtsi2ss", CVTSI2SS },
         { u8"cvtss2sd", CVTSS2SD },
         { u8"cvttsd2si", CVTTSD2SI },
         { u8"cvttss2si", CVTTSS2SI },
         { u8"cwd", CWD },
         { u8"div", DIV },
         { u8"divsd", DIVSD },
         { u8"divss", DIVSS },
         { u8"idiv", IDIV },
         { u8"imul", IMUL },
         { u8"jae", JAE },
         { u8"je", JE },
         { u8"jmp", JMP },
         { u8"jnz", JNZ },
         { u8"jz", JZ },
         { u8"lea", LEA },
         { u8"mov", MOV },
         { u8"movsd", MOVSD },
         { u8"movss", MOVSS },
         { u8"movsx", MOVSX },
         { u8"movsxd", MOVSXD },
         { u8"movzx", MOVZX },
         { u8"mul", MUL },
         { u8"mulsd", MULSD },
         { u8"mulss", MULSS },
         { u8"neg", NEG },
         { u8"nop", NOP },
         { u8"not", NOT },
         { u8"or", OR },
         { u8"pop", POP },
         { u8"push", PUSH },
         { u8"ret", RET },
         { u8"sar", SAR },
         { u8"setc", SETC },
         { u8"sete", SETE },
         { u8"setl", SETL },
         { u8"shl", SHL },
         { u8"shr", SHR },
         { u8"sub", SUB },
         { u8"subsd", SUBSD },
         { u8"subss", SUBSS },
         { u8"ucomisd", UCOMISD },
         { u8"ucomiss", UCOMISS },
         { u8"xor", XOR },
         { u8"al", AL },
         { u8"bl", BL },
         { u8"cl", CL },
         { u8"dl", DL },
         { u8"sil", SIL },
         { u8"dil", DIL },
         { u8"bpl", BPL },
         { u8"spl", SPL },
         { u8"r8b", R8B },
         { u8"r9b", R9B },
         { u8"r10b", R10B },
         { u8"r11b", R11B },
         { u8"r12b", R12B },
         { u8"r13b", R13B },
         { u8"r14b", R14B },
         { u8"r15b", R15B },
         { u8"ah", AH },
         { u8"bh", BH },
         { u8"ch", CH },
         { u8"dh", DH },
         { u8"ax", AX },
         { u8"bx", BX },
         { u8"cx", CX },
         { u8"dx", DX },
         { u8"si", SI },
         { u8"di", DI },
         { u8"bp", BP },
         { u8"sp", SP },
         { u8"r8w", R8W },
         { u8"r9w", R9W },
         { u8"r10w", R10W },
         { u8"r11w", R11W },
         { u8"r12w", R12W },
         { u8"r13w", R13W },
         { u8"r14w", R14W },
         { u8"r15w", R15W },
         { u8"eax", EAX },
         { u8"ebx", EBX },
         { u8"ecx", ECX },
         { u8"edx", EDX },
         { u8"esi", ESI },
         { u8"edi", EDI },
         { u8"ebp", EBP },
         { u8"esp", ESP },
         { u8"r8d", R8D },
         { u8"r9d", R9D },
         { u8"r10d", R10D },
         { u8"r11d", R11D },
         { u8"r12d", R12D },
         { u8"r13d", R13D },
         { u8"r14d", R14D },
         { u8"r15d", R15D },
         { u8"rax", RAX },
         { u8"rbx", RBX },
         { u8"rcx", RCX },
         { u8"rdx", RDX },
         { u8"rsi", RSI },
         { u8"rdi", RDI },
         { u8"rbp", RBP },
         { u8"rsp", RSP },
         { u8"r8", R8 },
         { u8"r9", R9 },
         { u8"r10", R10 },
         { u8"r11", R11 },
         { u8"r12", R12 },
         { u8"r13", R13 },
         { u8"r14", R14 },
         { u8"r15", R15 },
         { u8"xmm0", XMM0 },
         { u8"xmm1", XMM1 },
         { u8"xmm2", XMM2 },
         { u8"xmm3", XMM3 },
         { u8"xmm4", XMM4 },
         { u8"xmm5", XMM5 },
         { u8"xmm6", XMM6 },
         { u8"xmm7", XMM7 },
         { u8"xmm8", XMM8 },
         { u8"xmm9", XMM9 },
         { u8"xmm10", XMM10 },
         { u8"xmm11", XMM11 },
         { u8"xmm12", XMM12 },
         { u8"xmm13", XMM13 },
         { u8"xmm14", XMM14 },
         { u8"xmm15", XMM15 },
         { nullptr, -1 }
    };
    static soul::lexer::KeywordMap<char8_t> keywordMap(keywords);
    return &keywordMap;
}

template<>
soul::lexer::KeywordMap<char16_t>* GetKeywords<char16_t>()
{
    static const soul::lexer::Keyword<char16_t> keywords[] = {
         { u"public", PUBLIC },
         { u"extrn", EXTRN },
         { u"byte", BYTE },
         { u"word", WORD },
         { u"dword", DWORD },
         { u"qword", QWORD },
         { u"oword", OWORD },
         { u"ptr", PTR },
         { u"proc", PROC },
         { u"endp", ENDP },
         { u"end", END },
         { u"data", DATA },
         { u"code", CODE },
         { u"db", DB },
         { u"dw", DW },
         { u"dd", DD },
         { u"dq", DQ },
         { u"real4", REAL4 },
         { u"real8", REAL8 },
         { u"add", ADD },
         { u"addsd", ADDSD },
         { u"addss", ADDSS },
         { u"and", AND },
         { u"call", CALL },
         { u"cbw", CBW },
         { u"cdq", CDQ },
         { u"cmp", CMP },
         { u"comisd", COMISD },
         { u"comiss", COMISS },
         { u"cqo", CQO },
         { u"cvtsd2ss", CVTSD2SS },
         { u"cvtsi2sd", CVTSI2SD },
         { u"cvtsi2ss", CVTSI2SS },
         { u"cvtss2sd", CVTSS2SD },
         { u"cvttsd2si", CVTTSD2SI },
         { u"cvttss2si", CVTTSS2SI },
         { u"cwd", CWD },
         { u"div", DIV },
         { u"divsd", DIVSD },
         { u"divss", DIVSS },
         { u"idiv", IDIV },
         { u"imul", IMUL },
         { u"jae", JAE },
         { u"je", JE },
         { u"jmp", JMP },
         { u"jnz", JNZ },
         { u"jz", JZ },
         { u"lea", LEA },
         { u"mov", MOV },
         { u"movsd", MOVSD },
         { u"movss", MOVSS },
         { u"movsx", MOVSX },
         { u"movsxd", MOVSXD },
         { u"movzx", MOVZX },
         { u"mul", MUL },
         { u"mulsd", MULSD },
         { u"mulss", MULSS },
         { u"neg", NEG },
         { u"nop", NOP },
         { u"not", NOT },
         { u"or", OR },
         { u"pop", POP },
         { u"push", PUSH },
         { u"ret", RET },
         { u"sar", SAR },
         { u"setc", SETC },
         { u"sete", SETE },
         { u"setl", SETL },
         { u"shl", SHL },
         { u"shr", SHR },
         { u"sub", SUB },
         { u"subsd", SUBSD },
         { u"subss", SUBSS },
         { u"ucomisd", UCOMISD },
         { u"ucomiss", UCOMISS },
         { u"xor", XOR },
         { u"al", AL },
         { u"bl", BL },
         { u"cl", CL },
         { u"dl", DL },
         { u"sil", SIL },
         { u"dil", DIL },
         { u"bpl", BPL },
         { u"spl", SPL },
         { u"r8b", R8B },
         { u"r9b", R9B },
         { u"r10b", R10B },
         { u"r11b", R11B },
         { u"r12b", R12B },
         { u"r13b", R13B },
         { u"r14b", R14B },
         { u"r15b", R15B },
         { u"ah", AH },
         { u"bh", BH },
         { u"ch", CH },
         { u"dh", DH },
         { u"ax", AX },
         { u"bx", BX },
         { u"cx", CX },
         { u"dx", DX },
         { u"si", SI },
         { u"di", DI },
         { u"bp", BP },
         { u"sp", SP },
         { u"r8w", R8W },
         { u"r9w", R9W },
         { u"r10w", R10W },
         { u"r11w", R11W },
         { u"r12w", R12W },
         { u"r13w", R13W },
         { u"r14w", R14W },
         { u"r15w", R15W },
         { u"eax", EAX },
         { u"ebx", EBX },
         { u"ecx", ECX },
         { u"edx", EDX },
         { u"esi", ESI },
         { u"edi", EDI },
         { u"ebp", EBP },
         { u"esp", ESP },
         { u"r8d", R8D },
         { u"r9d", R9D },
         { u"r10d", R10D },
         { u"r11d", R11D },
         { u"r12d", R12D },
         { u"r13d", R13D },
         { u"r14d", R14D },
         { u"r15d", R15D },
         { u"rax", RAX },
         { u"rbx", RBX },
         { u"rcx", RCX },
         { u"rdx", RDX },
         { u"rsi", RSI },
         { u"rdi", RDI },
         { u"rbp", RBP },
         { u"rsp", RSP },
         { u"r8", R8 },
         { u"r9", R9 },
         { u"r10", R10 },
         { u"r11", R11 },
         { u"r12", R12 },
         { u"r13", R13 },
         { u"r14", R14 },
         { u"r15", R15 },
         { u"xmm0", XMM0 },
         { u"xmm1", XMM1 },
         { u"xmm2", XMM2 },
         { u"xmm3", XMM3 },
         { u"xmm4", XMM4 },
         { u"xmm5", XMM5 },
         { u"xmm6", XMM6 },
         { u"xmm7", XMM7 },
         { u"xmm8", XMM8 },
         { u"xmm9", XMM9 },
         { u"xmm10", XMM10 },
         { u"xmm11", XMM11 },
         { u"xmm12", XMM12 },
         { u"xmm13", XMM13 },
         { u"xmm14", XMM14 },
         { u"xmm15", XMM15 },
         { nullptr, -1 }
    };
    static soul::lexer::KeywordMap<char16_t> keywordMap(keywords);
    return &keywordMap;
}

template<>
soul::lexer::KeywordMap<char32_t>* GetKeywords<char32_t>()
{
    static const soul::lexer::Keyword<char32_t> keywords[] = {
         { U"public", PUBLIC },
         { U"extrn", EXTRN },
         { U"byte", BYTE },
         { U"word", WORD },
         { U"dword", DWORD },
         { U"qword", QWORD },
         { U"oword", OWORD },
         { U"ptr", PTR },
         { U"proc", PROC },
         { U"endp", ENDP },
         { U"end", END },
         { U"data", DATA },
         { U"code", CODE },
         { U"db", DB },
         { U"dw", DW },
         { U"dd", DD },
         { U"dq", DQ },
         { U"real4", REAL4 },
         { U"real8", REAL8 },
         { U"add", ADD },
         { U"addsd", ADDSD },
         { U"addss", ADDSS },
         { U"and", AND },
         { U"call", CALL },
         { U"cbw", CBW },
         { U"cdq", CDQ },
         { U"cmp", CMP },
         { U"comisd", COMISD },
         { U"comiss", COMISS },
         { U"cqo", CQO },
         { U"cvtsd2ss", CVTSD2SS },
         { U"cvtsi2sd", CVTSI2SD },
         { U"cvtsi2ss", CVTSI2SS },
         { U"cvtss2sd", CVTSS2SD },
         { U"cvttsd2si", CVTTSD2SI },
         { U"cvttss2si", CVTTSS2SI },
         { U"cwd", CWD },
         { U"div", DIV },
         { U"divsd", DIVSD },
         { U"divss", DIVSS },
         { U"idiv", IDIV },
         { U"imul", IMUL },
         { U"jae", JAE },
         { U"je", JE },
         { U"jmp", JMP },
         { U"jnz", JNZ },
         { U"jz", JZ },
         { U"lea", LEA },
         { U"mov", MOV },
         { U"movsd", MOVSD },
         { U"movss", MOVSS },
         { U"movsx", MOVSX },
         { U"movsxd", MOVSXD },
         { U"movzx", MOVZX },
         { U"mul", MUL },
         { U"mulsd", MULSD },
         { U"mulss", MULSS },
         { U"neg", NEG },
         { U"nop", NOP },
         { U"not", NOT },
         { U"or", OR },
         { U"pop", POP },
         { U"push", PUSH },
         { U"ret", RET },
         { U"sar", SAR },
         { U"setc", SETC },
         { U"sete", SETE },
         { U"setl", SETL },
         { U"shl", SHL },
         { U"shr", SHR },
         { U"sub", SUB },
         { U"subsd", SUBSD },
         { U"subss", SUBSS },
         { U"ucomisd", UCOMISD },
         { U"ucomiss", UCOMISS },
         { U"xor", XOR },
         { U"al", AL },
         { U"bl", BL },
         { U"cl", CL },
         { U"dl", DL },
         { U"sil", SIL },
         { U"dil", DIL },
         { U"bpl", BPL },
         { U"spl", SPL },
         { U"r8b", R8B },
         { U"r9b", R9B },
         { U"r10b", R10B },
         { U"r11b", R11B },
         { U"r12b", R12B },
         { U"r13b", R13B },
         { U"r14b", R14B },
         { U"r15b", R15B },
         { U"ah", AH },
         { U"bh", BH },
         { U"ch", CH },
         { U"dh", DH },
         { U"ax", AX },
         { U"bx", BX },
         { U"cx", CX },
         { U"dx", DX },
         { U"si", SI },
         { U"di", DI },
         { U"bp", BP },
         { U"sp", SP },
         { U"r8w", R8W },
         { U"r9w", R9W },
         { U"r10w", R10W },
         { U"r11w", R11W },
         { U"r12w", R12W },
         { U"r13w", R13W },
         { U"r14w", R14W },
         { U"r15w", R15W },
         { U"eax", EAX },
         { U"ebx", EBX },
         { U"ecx", ECX },
         { U"edx", EDX },
         { U"esi", ESI },
         { U"edi", EDI },
         { U"ebp", EBP },
         { U"esp", ESP },
         { U"r8d", R8D },
         { U"r9d", R9D },
         { U"r10d", R10D },
         { U"r11d", R11D },
         { U"r12d", R12D },
         { U"r13d", R13D },
         { U"r14d", R14D },
         { U"r15d", R15D },
         { U"rax", RAX },
         { U"rbx", RBX },
         { U"rcx", RCX },
         { U"rdx", RDX },
         { U"rsi", RSI },
         { U"rdi", RDI },
         { U"rbp", RBP },
         { U"rsp", RSP },
         { U"r8", R8 },
         { U"r9", R9 },
         { U"r10", R10 },
         { U"r11", R11 },
         { U"r12", R12 },
         { U"r13", R13 },
         { U"r14", R14 },
         { U"r15", R15 },
         { U"xmm0", XMM0 },
         { U"xmm1", XMM1 },
         { U"xmm2", XMM2 },
         { U"xmm3", XMM3 },
         { U"xmm4", XMM4 },
         { U"xmm5", XMM5 },
         { U"xmm6", XMM6 },
         { U"xmm7", XMM7 },
         { U"xmm8", XMM8 },
         { U"xmm9", XMM9 },
         { U"xmm10", XMM10 },
         { U"xmm11", XMM11 },
         { U"xmm12", XMM12 },
         { U"xmm13", XMM13 },
         { U"xmm14", XMM14 },
         { U"xmm15", XMM15 },
         { nullptr, -1 }
    };
    static soul::lexer::KeywordMap<char32_t> keywordMap(keywords);
    return &keywordMap;
}

} // namespace cmajor::sbin::assembly::lexer
