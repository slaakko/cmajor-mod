
// this file has been automatically generated from 'C:/work/cmajor-mod/cmajor/lexer/cmajor.token' using soul lexer generator version 5.0.0

export module cmajor.token;

import std.core;

export namespace cmajor::token {

constexpr int32_t tokenSetID = 1519629080;

constexpr int64_t AUTO = (static_cast<int64_t>(tokenSetID) << 32) | 1;
constexpr int64_t ASSERT = (static_cast<int64_t>(tokenSetID) << 32) | 2;
constexpr int64_t ELIF = (static_cast<int64_t>(tokenSetID) << 32) | 3;
constexpr int64_t ENDIF = (static_cast<int64_t>(tokenSetID) << 32) | 4;
constexpr int64_t BOOL = (static_cast<int64_t>(tokenSetID) << 32) | 5;
constexpr int64_t TRUE = (static_cast<int64_t>(tokenSetID) << 32) | 6;
constexpr int64_t FALSE = (static_cast<int64_t>(tokenSetID) << 32) | 7;
constexpr int64_t SBYTE = (static_cast<int64_t>(tokenSetID) << 32) | 8;
constexpr int64_t BYTE = (static_cast<int64_t>(tokenSetID) << 32) | 9;
constexpr int64_t SHORT = (static_cast<int64_t>(tokenSetID) << 32) | 10;
constexpr int64_t USHORT = (static_cast<int64_t>(tokenSetID) << 32) | 11;
constexpr int64_t INT = (static_cast<int64_t>(tokenSetID) << 32) | 12;
constexpr int64_t UINT = (static_cast<int64_t>(tokenSetID) << 32) | 13;
constexpr int64_t LONG = (static_cast<int64_t>(tokenSetID) << 32) | 14;
constexpr int64_t ULONG = (static_cast<int64_t>(tokenSetID) << 32) | 15;
constexpr int64_t FLOAT = (static_cast<int64_t>(tokenSetID) << 32) | 16;
constexpr int64_t DOUBLE = (static_cast<int64_t>(tokenSetID) << 32) | 17;
constexpr int64_t CHAR = (static_cast<int64_t>(tokenSetID) << 32) | 18;
constexpr int64_t WCHAR = (static_cast<int64_t>(tokenSetID) << 32) | 19;
constexpr int64_t UCHAR = (static_cast<int64_t>(tokenSetID) << 32) | 20;
constexpr int64_t VOID = (static_cast<int64_t>(tokenSetID) << 32) | 21;
constexpr int64_t ENUM = (static_cast<int64_t>(tokenSetID) << 32) | 22;
constexpr int64_t CAST = (static_cast<int64_t>(tokenSetID) << 32) | 23;
constexpr int64_t INTERFACE = (static_cast<int64_t>(tokenSetID) << 32) | 24;
constexpr int64_t NAMESPACE = (static_cast<int64_t>(tokenSetID) << 32) | 25;
constexpr int64_t USING = (static_cast<int64_t>(tokenSetID) << 32) | 26;
constexpr int64_t STATIC = (static_cast<int64_t>(tokenSetID) << 32) | 27;
constexpr int64_t EXTERN = (static_cast<int64_t>(tokenSetID) << 32) | 28;
constexpr int64_t AS = (static_cast<int64_t>(tokenSetID) << 32) | 29;
constexpr int64_t IS = (static_cast<int64_t>(tokenSetID) << 32) | 30;
constexpr int64_t EXPLICIT = (static_cast<int64_t>(tokenSetID) << 32) | 31;
constexpr int64_t DELEGATE = (static_cast<int64_t>(tokenSetID) << 32) | 32;
constexpr int64_t INLINE = (static_cast<int64_t>(tokenSetID) << 32) | 33;
constexpr int64_t CDECL = (static_cast<int64_t>(tokenSetID) << 32) | 34;
constexpr int64_t NOTHROW = (static_cast<int64_t>(tokenSetID) << 32) | 35;
constexpr int64_t PUBLIC = (static_cast<int64_t>(tokenSetID) << 32) | 36;
constexpr int64_t PROTECTED = (static_cast<int64_t>(tokenSetID) << 32) | 37;
constexpr int64_t PRIVATE = (static_cast<int64_t>(tokenSetID) << 32) | 38;
constexpr int64_t INTERNAL = (static_cast<int64_t>(tokenSetID) << 32) | 39;
constexpr int64_t VIRTUAL = (static_cast<int64_t>(tokenSetID) << 32) | 40;
constexpr int64_t ABSTRACT = (static_cast<int64_t>(tokenSetID) << 32) | 41;
constexpr int64_t OVERRIDE = (static_cast<int64_t>(tokenSetID) << 32) | 42;
constexpr int64_t SUPPRESS = (static_cast<int64_t>(tokenSetID) << 32) | 43;
constexpr int64_t WINAPI = (static_cast<int64_t>(tokenSetID) << 32) | 44;
constexpr int64_t OPERATOR = (static_cast<int64_t>(tokenSetID) << 32) | 45;
constexpr int64_t CLASS = (static_cast<int64_t>(tokenSetID) << 32) | 46;
constexpr int64_t RETURN = (static_cast<int64_t>(tokenSetID) << 32) | 47;
constexpr int64_t IF = (static_cast<int64_t>(tokenSetID) << 32) | 48;
constexpr int64_t ELSE = (static_cast<int64_t>(tokenSetID) << 32) | 49;
constexpr int64_t SWITCH = (static_cast<int64_t>(tokenSetID) << 32) | 50;
constexpr int64_t CASE = (static_cast<int64_t>(tokenSetID) << 32) | 51;
constexpr int64_t DEFAULT = (static_cast<int64_t>(tokenSetID) << 32) | 52;
constexpr int64_t WHILE = (static_cast<int64_t>(tokenSetID) << 32) | 53;
constexpr int64_t DO = (static_cast<int64_t>(tokenSetID) << 32) | 54;
constexpr int64_t FOR = (static_cast<int64_t>(tokenSetID) << 32) | 55;
constexpr int64_t BREAK = (static_cast<int64_t>(tokenSetID) << 32) | 56;
constexpr int64_t CONTINUE = (static_cast<int64_t>(tokenSetID) << 32) | 57;
constexpr int64_t GOTO = (static_cast<int64_t>(tokenSetID) << 32) | 58;
constexpr int64_t TYPEDEF = (static_cast<int64_t>(tokenSetID) << 32) | 59;
constexpr int64_t TYPENAME = (static_cast<int64_t>(tokenSetID) << 32) | 60;
constexpr int64_t TYPEID = (static_cast<int64_t>(tokenSetID) << 32) | 61;
constexpr int64_t CONST = (static_cast<int64_t>(tokenSetID) << 32) | 62;
constexpr int64_t CONSTEXPR = (static_cast<int64_t>(tokenSetID) << 32) | 63;
constexpr int64_t NULLLIT = (static_cast<int64_t>(tokenSetID) << 32) | 64;
constexpr int64_t THIS = (static_cast<int64_t>(tokenSetID) << 32) | 65;
constexpr int64_t BASE = (static_cast<int64_t>(tokenSetID) << 32) | 66;
constexpr int64_t CONSTRUCT = (static_cast<int64_t>(tokenSetID) << 32) | 67;
constexpr int64_t DESTROY = (static_cast<int64_t>(tokenSetID) << 32) | 68;
constexpr int64_t NEW = (static_cast<int64_t>(tokenSetID) << 32) | 69;
constexpr int64_t DELETE = (static_cast<int64_t>(tokenSetID) << 32) | 70;
constexpr int64_t SIZEOF = (static_cast<int64_t>(tokenSetID) << 32) | 71;
constexpr int64_t TRY = (static_cast<int64_t>(tokenSetID) << 32) | 72;
constexpr int64_t CATCH = (static_cast<int64_t>(tokenSetID) << 32) | 73;
constexpr int64_t THROW = (static_cast<int64_t>(tokenSetID) << 32) | 74;
constexpr int64_t CONCEPT = (static_cast<int64_t>(tokenSetID) << 32) | 75;
constexpr int64_t WHERE = (static_cast<int64_t>(tokenSetID) << 32) | 76;
constexpr int64_t AXIOM = (static_cast<int64_t>(tokenSetID) << 32) | 77;
constexpr int64_t AND = (static_cast<int64_t>(tokenSetID) << 32) | 78;
constexpr int64_t OR = (static_cast<int64_t>(tokenSetID) << 32) | 79;
constexpr int64_t EXCLAMATION = (static_cast<int64_t>(tokenSetID) << 32) | 80;
constexpr int64_t UNIT_TEST = (static_cast<int64_t>(tokenSetID) << 32) | 81;
constexpr int64_t ID = (static_cast<int64_t>(tokenSetID) << 32) | 82;
constexpr int64_t FLOATINGLIT = (static_cast<int64_t>(tokenSetID) << 32) | 83;
constexpr int64_t INTLIT = (static_cast<int64_t>(tokenSetID) << 32) | 84;
constexpr int64_t CHARLIT = (static_cast<int64_t>(tokenSetID) << 32) | 85;
constexpr int64_t STRINGLIT = (static_cast<int64_t>(tokenSetID) << 32) | 86;
constexpr int64_t EQUIVALENCE = (static_cast<int64_t>(tokenSetID) << 32) | 87;
constexpr int64_t IMPLICATION = (static_cast<int64_t>(tokenSetID) << 32) | 88;
constexpr int64_t DISJUNCTION = (static_cast<int64_t>(tokenSetID) << 32) | 89;
constexpr int64_t AMPAMP = (static_cast<int64_t>(tokenSetID) << 32) | 90;
constexpr int64_t BITOR = (static_cast<int64_t>(tokenSetID) << 32) | 91;
constexpr int64_t BITXOR = (static_cast<int64_t>(tokenSetID) << 32) | 92;
constexpr int64_t AMP = (static_cast<int64_t>(tokenSetID) << 32) | 93;
constexpr int64_t EQ = (static_cast<int64_t>(tokenSetID) << 32) | 94;
constexpr int64_t NEQ = (static_cast<int64_t>(tokenSetID) << 32) | 95;
constexpr int64_t LEQ = (static_cast<int64_t>(tokenSetID) << 32) | 96;
constexpr int64_t GEQ = (static_cast<int64_t>(tokenSetID) << 32) | 97;
constexpr int64_t SHIFTLEFT = (static_cast<int64_t>(tokenSetID) << 32) | 98;
constexpr int64_t SHIFTRIGHT = (static_cast<int64_t>(tokenSetID) << 32) | 99;
constexpr int64_t PLUS = (static_cast<int64_t>(tokenSetID) << 32) | 100;
constexpr int64_t MINUS = (static_cast<int64_t>(tokenSetID) << 32) | 101;
constexpr int64_t STAR = (static_cast<int64_t>(tokenSetID) << 32) | 102;
constexpr int64_t DIV = (static_cast<int64_t>(tokenSetID) << 32) | 103;
constexpr int64_t REM = (static_cast<int64_t>(tokenSetID) << 32) | 104;
constexpr int64_t PLUSPLUS = (static_cast<int64_t>(tokenSetID) << 32) | 105;
constexpr int64_t MINUSMINUS = (static_cast<int64_t>(tokenSetID) << 32) | 106;
constexpr int64_t CPL = (static_cast<int64_t>(tokenSetID) << 32) | 107;
constexpr int64_t DOT = (static_cast<int64_t>(tokenSetID) << 32) | 108;
constexpr int64_t ARROW = (static_cast<int64_t>(tokenSetID) << 32) | 109;
constexpr int64_t LBRACKET = (static_cast<int64_t>(tokenSetID) << 32) | 110;
constexpr int64_t RBRACKET = (static_cast<int64_t>(tokenSetID) << 32) | 111;
constexpr int64_t LPAREN = (static_cast<int64_t>(tokenSetID) << 32) | 112;
constexpr int64_t RPAREN = (static_cast<int64_t>(tokenSetID) << 32) | 113;
constexpr int64_t LANGLE = (static_cast<int64_t>(tokenSetID) << 32) | 114;
constexpr int64_t RANGLE = (static_cast<int64_t>(tokenSetID) << 32) | 115;
constexpr int64_t LBRACE = (static_cast<int64_t>(tokenSetID) << 32) | 116;
constexpr int64_t RBRACE = (static_cast<int64_t>(tokenSetID) << 32) | 117;
constexpr int64_t COMMA = (static_cast<int64_t>(tokenSetID) << 32) | 118;
constexpr int64_t ASSIGN = (static_cast<int64_t>(tokenSetID) << 32) | 119;
constexpr int64_t COLON = (static_cast<int64_t>(tokenSetID) << 32) | 120;
constexpr int64_t SEMICOLON = (static_cast<int64_t>(tokenSetID) << 32) | 121;
constexpr int64_t HASH = (static_cast<int64_t>(tokenSetID) << 32) | 122;
constexpr int64_t COMMENT = (static_cast<int64_t>(tokenSetID) << 32) | 123;
constexpr int64_t WS = (static_cast<int64_t>(tokenSetID) << 32) | 124;
constexpr int64_t KEYWORD = (static_cast<int64_t>(tokenSetID) << 32) | 125;
constexpr int64_t NUMBER = (static_cast<int64_t>(tokenSetID) << 32) | 126;
constexpr int64_t OTHER = (static_cast<int64_t>(tokenSetID) << 32) | 127;
constexpr int64_t LINECOMMENT = (static_cast<int64_t>(tokenSetID) << 32) | 128;
constexpr int64_t BLOCKCOMMENT = (static_cast<int64_t>(tokenSetID) << 32) | 129;
constexpr int64_t BLOCKCOMMENTLINE = (static_cast<int64_t>(tokenSetID) << 32) | 130;

} // cmajor::token
