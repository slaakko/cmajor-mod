// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cmajor.type.expr.parser;

[interface]import cmajor.parser.context;
[interface]import cmajor.ast;
[interface]import soul.ast.span;
[implementation]import cmajor.token;
[implementation]import soul.lexer;
[implementation]import cmajor.lexer;
[implementation]import cmajor.basic.type.parser;
[implementation]import cmajor.templates.parser;
[implementation]import cmajor.expression.parser;
[implementation]import soul.ast.source.pos;

parser TypeExprParser
{
    lexer cmajor::lexer::CmajorLexer<char32_t>;
    main;

    using BasicTypeParser.BasicType;
    using ExpressionParser.Expression;
    using TemplateParser.TemplateId;

    TypeExpr(cmajor::parser::context::Context* context) : cmajor::ast::Node*
        ::= PrefixTypeExpr(context):prefixTypeExpr{ return prefixTypeExpr; }
        ;

    PrefixTypeExpr(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::Node*
        ::= CONST{ s = lexer.GetSpan(pos); } PostfixTypeExpr(context):constTypeExpr{ return new cmajor::ast::ConstNode(s, constTypeExpr); }
        |   PostfixTypeExpr(context):postfixTypeExpr{ return postfixTypeExpr; }
        ;

    PostfixTypeExpr(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> typeExpr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   PrimaryTypeExpr(context):primaryTypeExpr{ s = lexer.GetSpan(pos); typeExpr.reset(primaryTypeExpr); }
            (   DOT ID{ typeExpr.reset(new cmajor::ast::DotNode(s, typeExpr.release(), 
                    new cmajor::ast::IdentifierNode(lexer.GetSpan(pos), lexer.GetToken(pos).ToString()))); }
            |   STAR{ typeExpr.reset(new cmajor::ast::PointerNode(s, typeExpr.release())); }
            |   AMPAMP{ typeExpr.reset(new cmajor::ast::RValueRefNode(s, typeExpr.release())); }
            |   AMP{ typeExpr.reset(new cmajor::ast::LValueRefNode(s, typeExpr.release())); }
            |   LBRACKET Expression(context):size? RBRACKET{ typeExpr.reset(new cmajor::ast::ArrayNode(s, typeExpr.release(), size)); }
            )*
        )
        {
            return typeExpr.release();
        }
        ;

    PrimaryTypeExpr(cmajor::parser::context::Context* context) : cmajor::ast::Node*
        ::= BasicType(context):basicType{ return basicType; }
        |   TemplateId(context):templateId{ return templateId; }
        |   ID{ return new cmajor::ast::IdentifierNode(lexer.GetSpan(pos), lexer.GetToken(pos).ToString()); }
        ;
}
