// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cmajor.expression.parser;

[interface]import cmajor.parser.context;
[interface]import cmajor.ast;
[interface]import soul.ast.span;
[implementation]import cmajor.token;
[implementation]import soul.lexer;
[implementation]import cmajor.lexer;
[implementation]import soul.ast.source.pos;
[implementation]import cmajor.parser.operators;
[implementation]import cmajor.type.expr.parser;
[implementation]import cmajor.identifier.parser;
[implementation]import cmajor.literal.parser;
[implementation]import cmajor.basic.type.parser;
[implementation]import cmajor.templates.parser;

parser ExpressionParser
{
    lexer cmajor::lexer::CmajorLexer<char32_t>;

    using TypeExprParser.TypeExpr;
    using IdentifierParser.Identifier;
    using LiteralParser.Literal;
    using BasicTypeParser.BasicType;
    using TemplateParser.TemplateId;

    Expression(cmajor::parser::context::Context* context) : cmajor::ast::Node*
        ::= Equivalence(context):equivalence{ return equivalence; }
        ;

    Equivalence(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            Implication(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   EQUIVALENCE{ if (!context->ParsingConcept() || context->ParsingTemplateId()) pass = false; }
                Implication(context):right{ expr.reset(new cmajor::ast::EquivalenceNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    Implication(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   Disjunction(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (
                IMPLICATION{ if (!context->ParsingConcept() || context->ParsingTemplateId()) pass = false; }
                Implication(context):right{ expr.reset(new cmajor::ast::ImplicationNode(s, expr.release(), right)); }
            )?
        )
        {
            return expr.release();
        }
        ;

    Disjunction(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   Conjunction(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   DISJUNCTION{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                Conjunction(context):right{ expr.reset(new cmajor::ast::DisjunctionNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    Conjunction(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   BitOr(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   AMPAMP{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                BitOr(context):right{ expr.reset(new cmajor::ast::ConjunctionNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    BitOr(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   BitXor(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   BITOR{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                BitXor(context):right{ expr.reset(new cmajor::ast::BitOrNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    BitXor(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   BitAnd(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   BITXOR{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                BitAnd(context):right{ expr.reset(new cmajor::ast::BitXorNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    BitAnd(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   Equality(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   AMP{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                Equality(context):right{ expr.reset(new cmajor::ast::BitAndNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    Equality(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   Relational(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   EqOp:op{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                Relational(context):right
                {
                    switch (op)
                    {
                        case Operator::eq: expr.reset(new cmajor::ast::EqualNode(s, expr.release(), right)); break;
                        case Operator::neq: expr.reset(new cmajor::ast::NotEqualNode(s, expr.release(), right)); break;
                    }
                }
            )*
        )
        {
            return expr.release();
        }
        ;

    EqOp : cmajor::parser::operators::Operator
        ::= EQ{ return Operator::eq; }
        |   NEQ{ return Operator::neq; }
        ;

    Relational(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s, var cmajor::parser::operators::Operator op) : 
        cmajor::ast::Node*
        ::= 
        (   Shift(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   
                (
                    RelOp:relOp
                    { 
                        op = relOp;
                        if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) 
                        {
                            pass = false; 
                        }
                        else 
                        {
                            context->PushParsingIsOrAs(false);
                        }
                    }
                |   IS
                    {
                        if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) 
                        {
                            pass = false; 
                        }
                        else 
                        {
                            op = Operator::is;
                            context->PushParsingIsOrAs(true);
                        }
                    }
                    TypeExpr(context):isType
                |   AS
                    {
                        if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) 
                        {
                            pass = false; 
                        }
                        else 
                        {
                            op = Operator::as;
                            context->PushParsingIsOrAs(true);
                        }
                    }
                    TypeExpr(context):asType
                )
                (   Shift(context):right | empty{ if (!context->ParsingIsOrAs()) pass = false; }    )
                {
                    context->PopParsingIsOrAs();
                    switch (op)
                    {
                        case Operator::lessOrEq: expr.reset(new cmajor::ast::LessOrEqualNode(s, expr.release(), right)); break;
                        case Operator::greaterOrEq: expr.reset(new cmajor::ast::GreaterOrEqualNode(s, expr.release(), right)); break;
                        case Operator::less: expr.reset(new cmajor::ast::LessNode(s, expr.release(), right)); break;
                        case Operator::greater: expr.reset(new cmajor::ast::GreaterNode(s, expr.release(), right)); break;
                        case Operator::is: expr.reset(new cmajor::ast::IsNode(s, expr.release(), isType)); break;
                        case Operator::as: expr.reset(new cmajor::ast::AsNode(s, expr.release(), asType)); break;
                    }
                }
            )*
        )
        {
            return expr.release();
        }
        ;

    RelOp : cmajor::parser::operators::Operator
        ::= LEQ{ return Operator::lessOrEq; }
        |   GEQ{ return Operator::greaterOrEq; }
        |   LANGLE{ return Operator::less; }
        |   RANGLE{ return Operator::greater; }
        ;

    Shift(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   Additive(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   ShiftOp:op{ if (context->ParsingLvalue()) pass = false; }
                empty{ context->BeginParsingArguments(); } 
                Additive(context):right
                {
                    switch (op)
                    {
                        case Operator::shiftLeft: expr.reset(new cmajor::ast::ShiftLeftNode(s, expr.release(), right)); break;
                        case Operator::shiftRight: expr.reset(new cmajor::ast::ShiftRightNode(s, expr.release(), right)); break;
                    }
                    context->EndParsingArguments();
                }
                /
                {
                    context->EndParsingArguments();
                }
            )*
        )
        {
            return expr.release();
        }
        ;

    ShiftOp : cmajor::parser::operators::Operator
        ::= SHIFTLEFT{ return Operator::shiftLeft; }
        |   SHIFTRIGHT{ return Operator::shiftRight; }
        ;

    Additive(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   Multiplicative(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   AddOp:op{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                Multiplicative(context):right
                {
                    switch (op)
                    {
                        case Operator::plus: expr.reset(new cmajor::ast::AddNode(s, expr.release(), right)); break;
                        case Operator::minus: expr.reset(new cmajor::ast::SubNode(s, expr.release(), right)); break;
                    }
                }
            )*
        )
        {
            return expr.release();
        }
        ;

    AddOp : cmajor::parser::operators::Operator
        ::= PLUS{ return Operator::plus; }
        |   MINUS{ return Operator::minus; }
        ;

    Multiplicative(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   Prefix(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (   MulOp:op{ if (context->ParsingLvalue() || context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; }
                Prefix(context):right
                {
                    switch (op)
                    {
                        case Operator::mul: expr.reset(new cmajor::ast::MulNode(s, expr.release(), right)); break;
                        case Operator::div: expr.reset(new cmajor::ast::DivNode(s, expr.release(), right)); break;
                        case Operator::rem: expr.reset(new cmajor::ast::RemNode(s, expr.release(), right)); break;
                    }
                }
            )*
        )
        {
            return expr.release();
        }
        ;

    MulOp : cmajor::parser::operators::Operator
        ::= STAR{ return Operator::mul; }
        |   DIV{ return Operator::div; }
        |   REM{ return Operator::rem; }
        ;

    Prefix(cmajor::parser::context::Context* context, var Operator op, var std::unique_ptr<cmajor::ast::Node> prefix, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   PrefixOp:prefixOp
            { 
                op = prefixOp;
                s = lexer.GetSpan(pos); 
                if (op != Operator::plusplus && op != Operator::minusminus && context->ParsingExpressionStatement() && !context->ParsingArguments()) pass = false; 
            }
            Prefix(context):p
            {
                prefix.reset(p);
                switch (op)
                {
                    case Operator::plusplus: { return new cmajor::ast::PrefixIncrementNode(s, prefix.release()); }
                    case Operator::minusminus: { return new cmajor::ast::PrefixDecrementNode(s, prefix.release()); }
                    case Operator::plus: { return new cmajor::ast::UnaryPlusNode(s, prefix.release()); }
                    case Operator::minus: { return new cmajor::ast::UnaryMinusNode(s, prefix.release()); }
                    case Operator::not_: { return new cmajor::ast::NotNode(s, prefix.release()); }
                    case Operator::complement: { return new cmajor::ast::ComplementNode(s, prefix.release()); }
                    case Operator::deref: { return new cmajor::ast::DerefNode(s, prefix.release()); }
                    case Operator::addrOf: { return new cmajor::ast::AddrOfNode(s, prefix.release()); }
                }
            }
        )
        |   Postfix(context):postfix{ return postfix; }
        ;

    PrefixOp : cmajor::parser::operators::Operator
        ::= PLUSPLUS{ return Operator::plusplus; }
        |   MINUSMINUS{ return Operator::minusminus; }
        |   PLUS{ return Operator::plus; }
        |   MINUS{ return Operator::minus; }
        |   EXCLAMATION{ return Operator::not_; }
        |   CPL{ return Operator::complement; }
        |   STAR{ return Operator::deref; }
        |   AMP{ return Operator::addrOf; }
        ;

    Postfix(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            Primary(context):primary{ s = lexer.GetSpan(pos); expr.reset(primary); }
            (   PLUSPLUS{ expr.reset(new cmajor::ast::PostfixIncrementNode(s, expr.release())); }
            |   MINUSMINUS{ expr.reset(new cmajor::ast::PostfixDecrementNode(s, expr.release())); }
            |   DOT Identifier(context):dotMember{ expr.reset(new cmajor::ast::DotNode(s, expr.release(), dotMember)); }
            |   ARROW Identifier(context):arrowMember{ expr.reset(new cmajor::ast::ArrowNode(s, expr.release(), arrowMember)); }
            |   LBRACKET{ context->PushParsingLvalue(false); context->PushParsingExpressionStatement(false); }
                Expression(context):index{ context->PopParsingExpressionStatement(); context->PopParsingLvalue(); }
                RBRACKET{ expr.reset(new cmajor::ast::IndexingNode(s, expr.release(), index)); }
            |   LPAREN{ expr.reset(new cmajor::ast::InvokeNode(s, expr.release())); } ArgumentList(context, expr.get()):args RPAREN
            )*
        )
        {
            return expr.release();
        }
        ;

    Primary(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::Node*
        ::= LPAREN{ s = lexer.GetSpan(pos); } Expression(context):expr RPAREN{ return new cmajor::ast::ParenthesizedExpressionNode(s, expr); }
        |   Literal(context):literal{ return literal; }
        |   BasicType(context):basicType{ return basicType; }
        |   TemplateId(context):templateId{ return templateId; }
        |   Identifier(context):id{ return id; }
        |   THIS{ return new cmajor::ast::ThisNode(lexer.GetSpan(pos)); }
        |   BASE{ return new cmajor::ast::BaseNode(lexer.GetSpan(pos)); }
        |   SizeOfExpr(context):sizeOf{ return sizeOf; }
        |   TypeNameExpr(context):typeName{ return typeName; }
        |   TypeIdExpr(context):typeId{ return typeId; }
        |   CastExpr(context):cast{ return cast; }
        |   ConstructExpr(context):constructExpr{ return constructExpr; }
        |   NewExpr(context):newExpr{ return newExpr; }
        ;

    ArgumentList(cmajor::parser::context::Context* context, cmajor::ast::Node* node)
        ::= ExpressionList(context, node):exprList?
        ;

    ExpressionList(cmajor::parser::context::Context* context, cmajor::ast::Node* node)
        ::= empty{ context->BeginParsingArguments(); }
        (   
            Expression(context):arg{ node->AddArgument(arg); } % COMMA
        )
        { 
            context->EndParsingArguments(); 
        }
        / 
        { 
            context->EndParsingArguments(); 
        }
        ;

    SizeOfExpr(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            SIZEOF{ s = lexer.GetSpan(pos); } LPAREN Expression(context):expr RPAREN
        )
        {
            return new cmajor::ast::SizeOfNode(s, expr);
        }
        ;

    TypeNameExpr(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            TYPENAME{ s = lexer.GetSpan(pos); } LPAREN Expression(context):expr RPAREN
        )
        {
            return new cmajor::ast::TypeNameNode(s, expr);
        }
        ;

    TypeIdExpr(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            TYPEID{ s = lexer.GetSpan(pos); } LPAREN Expression(context):expr RPAREN
        )
        {
            return new cmajor::ast::TypeIdNode(s, expr);
        }
        ;

    CastExpr(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            CAST{ s = lexer.GetSpan(pos); }
            LANGLE TypeExpr(context):typeExpr RANGLE LPAREN Expression(context):expr RPAREN
        )
        {
            return new cmajor::ast::CastNode(s, typeExpr, expr);
        }
        ;

    ConstructExpr(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            CONSTRUCT{ s = lexer.GetSpan(pos); }
            (
                LANGLE TypeExpr(context):typeExpr RANGLE
            )
            {
                expr.reset(new cmajor::ast::ConstructNode(s, typeExpr));
            }
            LPAREN ExpressionList(context, expr.get()):exprList RPAREN
        )
        {
            return expr.release();
        }
        ;

    NewExpr(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (
            NEW{ s = lexer.GetSpan(pos); }
            TypeExpr(context):typeExpr{ expr.reset(new cmajor::ast::NewNode(s, typeExpr)); }
            (LPAREN ArgumentList(context, expr.get()):args RPAREN)?
        )
        {
            return expr.release();
        }
        ;

    InvokeExpr(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::Node> expr, var soul::ast::Span s) : cmajor::ast::Node*
        ::= 
        (   TemplateId(context):templateId{ s = lexer.GetSpan(pos); expr.reset(templateId); }
        |   Identifier(context):id{ s = lexer.GetSpan(pos); expr.reset(id); }
        )
        (
            DOT Identifier(context):dotMemberId{ expr.reset(new cmajor::ast::DotNode(s, expr.release(), dotMemberId)); }
        )*
        (
            LPAREN{ expr.reset(new cmajor::ast::InvokeNode(s, expr.release())); }
            ArgumentList(context, expr.get()):args
            RPAREN
        )
        {
            return expr.release();
        }
        ;
}
