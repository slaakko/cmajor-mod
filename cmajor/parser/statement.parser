// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cmajor.statement.parser;

[interface]import cmajor.parser.context;
[interface]import cmajor.ast;
[interface]import soul.ast.span;
[implementation]import cmajor.token;
[implementation]import soul.lexer;
[implementation]import cmajor.lexer;
[implementation]import soul.ast.source.pos;
[implementation]import cmajor.expression.parser;
[implementation]import cmajor.type.expr.parser;
[implementation]import cmajor.identifier.parser;

parser StatementParser
{
    lexer cmajor::lexer::CmajorLexer<char32_t>;

    using ExpressionParser.Expression;
    using ExpressionParser.ArgumentList;
    using TypeExprParser.TypeExpr;
    using IdentifierParser.Identifier;

    Statement(cmajor::parser::context::Context* context) : cmajor::ast::StatementNode*
        ::= 
        (   LabeledStatement(context):labeledStatement{ return labeledStatement; }
        |   ControlStatement(context):controlStatement{ return controlStatement; }
        |   ExpressionStatement(context):expressionStatement{ return expressionStatement; }
        |   AssignmentStatement(context):assignmentStatement{ return assignmentStatement; }
        |   ConstructionStatement(context):constructionStatement{ return constructionStatement; }
        |   DeleteStatement(context):deleteStatement{ return deleteStatement; }
        |   DestroyStatement(context):destroyStatement{ return destroyStatement; }
        |   EmptyStatement(context):emptyStatement{ return emptyStatement; }
        |   ThrowStatement(context):throwStatement{ return throwStatement; }
        |   TryStatement(context):tryStatement{ return tryStatement; }
        |   AssertStatement(context):assertStatement{ return assertStatement; }
        |   ConditionalCompilationStatement(context):condCompStatement{ return condCompStatement; }
        )
        ;

    Label(cmajor::parser::context::Context* context, var soul::ast::Span s, var std::u32string label) : cmajor::ast::LabelNode*
        ::= 
        (
            ID{ s = lexer.GetSpan(pos); label = lexer.GetToken(pos).ToString(); }
            COLON
        )
        {
            return new cmajor::ast::LabelNode(s, label);
        }
        ;

    LabeledStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, var std::unique_ptr<cmajor::ast::LabeledStatementNode> statementNode) : 
        cmajor::ast::StatementNode*
        ::= 
        (
            Label(context):lbl{ s = lexer.GetSpan(pos); }
            Statement(context):stmt
        )
        {
            statementNode.reset(new cmajor::ast::LabeledStatementNode(s, stmt));
            statementNode->SetLabelNode(lbl);
            return statementNode.release();
        }
        ;

    ControlStatement(cmajor::parser::context::Context* context) : cmajor::ast::StatementNode*
        ::= 
        (   CompoundStatement(context):compoundStatement{ return compoundStatement; }
        |   ReturnStatement(context):returnStatement{ return returnStatement; }
        |   IfStatement(context):ifStatement{ return ifStatement; }
        |   WhileStatement(context):whileStatement{ return whileStatement; }
        |   DoStatement(context):doStatement{ return doStatement; }
        |   RangeForStatement(context):rangeForStatement{ return rangeForStatement; }
        |   ForStatement(context):forStatement{ return forStatement; }
        |   BreakStatement(context):breakStatement{ return breakStatement; }
        |   ContinueStatement(context):continueStatement{ return continueStatement; }
        |   GotoStatement(context):gotoStatement{ return gotoStatement; }
        |   SwitchStatement(context):switchStatement{ return switchStatement; }
        |   GotoCaseStatement(context):gotoCaseStatement{ return gotoCaseStatement; }
        |   GotoDefaultStatement(context):gotoDefaultStatement{ return gotoDefaultStatement; }
        )
        ;

    CompoundStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, var std::unique_ptr<cmajor::ast::CompoundStatementNode> compoundStatementNode) : 
        cmajor::ast::CompoundStatementNode*
        ::= 
        (  
            LBRACE
            { 
                s = lexer.GetSpan(pos); 
                compoundStatementNode.reset(new cmajor::ast::CompoundStatementNode(s)); 
            }
            (
                Statement(context):stmt{ compoundStatementNode->AddStatement(stmt); }
            )*
            RBRACE
            {
                compoundStatementNode->SetEndSpan(lexer.GetSpan(pos));
            }
        )
        {
            return compoundStatementNode.release();
        }
        ;

    ReturnStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            RETURN{ s = lexer.GetSpan(pos); }
            Expression(context):expr?
            SEMICOLON
        )
        {
            return new cmajor::ast::ReturnStatementNode(s, expr);
        }
        ;

    IfStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            IF{ s = lexer.GetSpan(pos); }
            LPAREN
            Expression(context):cond
            RPAREN
            Statement(context):thenS
            (   ELSE
                Statement(context):elseS
            )?
        )
        {
            return new cmajor::ast::IfStatementNode(s, cond, thenS, elseS);
        }
        ;

    WhileStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            WHILE{ s = lexer.GetSpan(pos); }
            LPAREN
            Expression(context):cond
            RPAREN
            Statement(context):stmt
        )
        {
            return new cmajor::ast::WhileStatementNode(s, cond, stmt);
        }
        ;

    DoStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            DO{ s = lexer.GetSpan(pos); }
            Statement(context):stmt
            WHILE
            LPAREN
            Expression(context):cond
            RPAREN
            SEMICOLON
        )
        {
            return new cmajor::ast::DoStatementNode(s, stmt, cond);
        }
        ;

    RangeForStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            FOR{ s = lexer.GetSpan(pos); }
            LPAREN
            TypeExpr(context):type
            Identifier(context):id
            COLON
            Expression(context):container
            RPAREN
            Statement(context):stmt
        )
        {
            return new cmajor::ast::RangeForStatementNode(s, type, id, container, stmt);
        }
        ;

    ForStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            FOR{ s = lexer.GetSpan(pos); }
            LPAREN
            ForInitStatement(context):init
            Expression(context):cond?
            SEMICOLON
            ForLoopStatementExpr(context):loop
            RPAREN
            Statement(context):stmt
        )
        {
            return new cmajor::ast::ForStatementNode(s, init, cond, loop, stmt);
        }
        ;

    ForInitStatement(cmajor::parser::context::Context* context) : cmajor::ast::StatementNode*
        ::= 
        (   AssignmentStatement(context):assignmentStatement{ return assignmentStatement; }
        |   ConstructionStatement(context):constructionStatement{ return constructionStatement; }
        |   EmptyStatement(context):emptyStatement{ return emptyStatement; }
        )
        ;

    ForLoopStatementExpr(cmajor::parser::context::Context* context) : cmajor::ast::StatementNode*
        ::= 
        (   AssignmentStatementExpr(context):assignmentStatementExpr{ return assignmentStatementExpr; }
        |   Expression(context):expr{ return new cmajor::ast::ExpressionStatementNode(lexer.GetSpan(pos), expr); }
        |   empty{ return new cmajor::ast::EmptyStatementNode(lexer.GetSpan(pos)); }
        )
        ;

    BreakStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            BREAK{ s = lexer.GetSpan(pos); }
            SEMICOLON
        )
        {
            return new cmajor::ast::BreakStatementNode(s);
        }
        ;

    ContinueStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   
            CONTINUE{ s = lexer.GetSpan(pos); }
            SEMICOLON
        )
        {
            return new cmajor::ast::ContinueStatementNode(s);
        }
        ;

    GotoStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, var std::u32string target) : cmajor::ast::StatementNode*
        ::= 
        (   
            GOTO{ s = lexer.GetSpan(pos); }
            ID{ target = lexer.GetToken(pos).ToString(); }
            SEMICOLON
        )
        {
            return new cmajor::ast::GotoStatementNode(s, target);
        }
        ;

    SwitchStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, var std::unique_ptr<cmajor::ast::SwitchStatementNode> switchStatementNode) : 
        cmajor::ast::StatementNode*
        ::= 
        (   
            SWITCH{ s = lexer.GetSpan(pos); }
            LPAREN
            Expression(context):cond
            RPAREN
            {
                switchStatementNode.reset(new cmajor::ast::SwitchStatementNode(s, cond));
            }
            LBRACE
            (   CaseStatement(context):caseStatement{ switchStatementNode->AddCase(caseStatement); }
            |   DefaultStatement(context):defaultStatement{ switchStatementNode->SetDefault(defaultStatement); }
            )*
            RBRACE
        )
        {
            return switchStatementNode.release();
        }
        ;

    CaseStatement(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::CaseStatementNode> caseStatementNode) : cmajor::ast::CaseStatementNode*
        ::= 
        (   
            empty{ caseStatementNode.reset(new cmajor::ast::CaseStatementNode(lexer.GetSpan(pos))); }
            (   CASE
                Expression(context):caseExpr{ caseStatementNode->AddCaseExpr(caseExpr); }
                COLON
            )+
            (   
                Statement(context):stmt{ caseStatementNode->AddStatement(stmt); }
            )*
        )
        {
            return caseStatementNode.release();
        }
        ;

    DefaultStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, var std::unique_ptr<cmajor::ast::DefaultStatementNode> defaultStatementNode) : 
        cmajor::ast::DefaultStatementNode* 
        ::= 
        (   
            DEFAULT{ s = lexer.GetSpan(pos); }
            COLON{ defaultStatementNode.reset(new cmajor::ast::DefaultStatementNode(s)); }
            (   
                Statement(context):stmt{ defaultStatementNode->AddStatement(stmt); }
            )*

        )
        {
            return defaultStatementNode.release();
        }
        ;

    GotoCaseStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            GOTO{ s = lexer.GetSpan(pos); }
            CASE 
            Expression(context):caseExpr
            SEMICOLON
        )
        {
            return new cmajor::ast::GotoCaseStatementNode(s, caseExpr);
        }
        ;

    GotoDefaultStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            GOTO{ s = lexer.GetSpan(pos); }
            DEFAULT
            SEMICOLON
        )
        {
            return new cmajor::ast::GotoDefaultStatementNode(s); 
        }
        ;

    ExpressionStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            empty{ context->PushParsingExpressionStatement(true); }
            Expression(context):expr{ s = lexer.GetSpan(pos); }
            SEMICOLON
        )
        {
            context->PopParsingExpressionStatement();
            return new cmajor::ast::ExpressionStatementNode(s, expr);
        }
        /
        {
            context->PopParsingExpressionStatement();
        }
        ;

    AssignmentStatement(cmajor::parser::context::Context* context) : cmajor::ast::StatementNode*
        ::= 
        (   AssignmentStatementExpr(context):stmt 
            SEMICOLON
        )
        {
            return stmt;
        }
        ;

    AssignmentStatementExpr(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (   empty{ context->PushParsingLvalue(true); }
            Expression(context):target{ s = lexer.GetSpan(pos); context->PopParsingLvalue(); } / { context->PopParsingLvalue(); }
            ASSIGN
            Expression(context):source
        )
        {
            return new cmajor::ast::AssignmentStatementNode(s, target, source);
        }
        ;

    ConstructionStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, 
        var std::unique_ptr<cmajor::ast::ConstructionStatementNode> constructionStatementNode) : cmajor::ast::StatementNode*
        ::= 
        (
            TypeExpr(context):type{ s = lexer.GetSpan(pos); }
            Identifier(context):id
            {
                constructionStatementNode.reset(new cmajor::ast::ConstructionStatementNode(s, type, id));
            }
            (   ASSIGN Expression(context):value{ constructionStatementNode->AddArgument(value); constructionStatementNode->SetAssignment(); }
            |   LPAREN ArgumentList(context, constructionStatementNode.get()):args RPAREN
            |   empty{ constructionStatementNode->SetEmpty(); }
            )
            SEMICOLON
        )
        {
            return constructionStatementNode.release();
        }
        ;

    DeleteStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            DELETE{ s = lexer.GetSpan(pos); }
            Expression(context):ptr
            SEMICOLON
        )
        {
            return new cmajor::ast::DeleteStatementNode(s, ptr);
        }
        ;

    DestroyStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            DESTROY{ s = lexer.GetSpan(pos); }
            Expression(context):ptr
            SEMICOLON
        )
        {
            return new cmajor::ast::DestroyStatementNode(s, ptr);
        }
        ;

    EmptyStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            SEMICOLON{ s = lexer.GetSpan(pos); }
        )
        {
            return new cmajor::ast::EmptyStatementNode(s);
        }
        ;

    ThrowStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            THROW{ s = lexer.GetSpan(pos); }
            Expression(context):exception?
            SEMICOLON
        )
        {
            return new cmajor::ast::ThrowStatementNode(s, exception);
        }
        ;

    TryStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, var std::unique_ptr<cmajor::ast::TryStatementNode> tryStatementNode) : cmajor::ast::StatementNode*
        ::= 
        (
            TRY{ s = lexer.GetSpan(pos); }
            CompoundStatement(context):tryBlock{ tryStatementNode.reset(new cmajor::ast::TryStatementNode(s, tryBlock)); }
            (
                Catch(context):handler{ tryStatementNode->AddCatch(handler); }
            )+
        )
        {
            return tryStatementNode.release();
        }
        ;

    Catch(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::CatchNode*
        ::= 
        (
            CATCH{ s = lexer.GetSpan(pos); }
            LPAREN
            TypeExpr(context):catchType
            Identifier(context):catchId?
            RPAREN
            CompoundStatement(context):catchBlock
        )
        {
            return new cmajor::ast::CatchNode(s, catchType, catchId, catchBlock);
        }
        ;

    AssertStatement(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::StatementNode*
        ::= 
        (
            HASH{ s = lexer.GetSpan(pos); } 
            ASSERT
            Expression(context):expr
            SEMICOLON
        )
        {
            return new cmajor::ast::AssertStatementNode(s, expr);
        }
        ;

    ConditionalCompilationStatement(cmajor::parser::context::Context* context, var soul::ast::Span s, var soul::ast::Span elifSpan, var soul::ast::Span elseSpan,
        var std::unique_ptr<cmajor::ast::ConditionalCompilationStatementNode> condCompStmt) : cmajor::ast::StatementNode*
        ::= 
        (   
            HASH{ s = lexer.GetSpan(pos); }
            IF
            LPAREN
            ConditionalCompilationExpression(context):ifExpr{ condCompStmt.reset(new cmajor::ast::ConditionalCompilationStatementNode(s, ifExpr)); }
            RPAREN
            (
                Statement(context):ifs{ condCompStmt->AddIfStatement(ifs); }
            )*
            (
                HASH{ elifSpan = lexer.GetSpan(pos); } 
                ELIF
                LPAREN
                ConditionalCompilationExpression(context):elifExpr{ condCompStmt->AddElifExpr(elifSpan, elifExpr); }
                RPAREN
                (
                    Statement(context):elifs{ condCompStmt->AddElifStatement(elifs); }
                )*
            )*
            (
                HASH{ elseSpan = lexer.GetSpan(pos); }
                ELSE
                (
                    Statement(context):elses{ condCompStmt->AddElseStatement(elseSpan, elses); }
                )*
            )?
            (
                HASH 
                ENDIF
            )
        )
        {
            return condCompStmt.release();
        }
        ;

    ConditionalCompilationExpression(cmajor::parser::context::Context* context) : cmajor::ast::ConditionalCompilationExpressionNode*
        ::= 
        (
            ConditionalCompilationDisjunction(context):disjunction
        )
        {
            return disjunction;
        }
        ;

    ConditionalCompilationDisjunction(cmajor::parser::context::Context* context, var soul::ast::Span s,
        var std::unique_ptr<cmajor::ast::ConditionalCompilationExpressionNode> expr) : cmajor::ast::ConditionalCompilationExpressionNode*
        ::=
        (
            ConditionalCompilationConjunction(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (
                DISJUNCTION 
                ConditionalCompilationConjunction(context):right{ expr.reset(new cmajor::ast::ConditionalCompilationDisjunctionNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    ConditionalCompilationConjunction(cmajor::parser::context::Context* context, var soul::ast::Span s,
        var std::unique_ptr<cmajor::ast::ConditionalCompilationExpressionNode> expr) : cmajor::ast::ConditionalCompilationExpressionNode*
        ::=
        (
            ConditionalCompilationPrefix(context):left{ s = lexer.GetSpan(pos); expr.reset(left); }
            (
                AMPAMP
                ConditionalCompilationPrefix(context):right{ expr.reset(new cmajor::ast::ConditionalCompilationConjunctionNode(s, expr.release(), right)); }
            )*
        )
        {
            return expr.release();
        }
        ;

    ConditionalCompilationPrefix(cmajor::parser::context::Context* context, var soul::ast::Span s,
        var std::unique_ptr<cmajor::ast::ConditionalCompilationExpressionNode> expr) : cmajor::ast::ConditionalCompilationExpressionNode*
        ::=
        (
            (   EXCLAMATION{ s = lexer.GetSpan(pos); } 
                ConditionalCompilationPrefix(context):prefix{ expr.reset(new cmajor::ast::ConditionalCompilationNotNode(s, prefix)); }
            |   ConditionalCompilationPrimary(context):primary{ expr.reset(primary); }
            )
        )
        {
            return expr.release();
        }
        ;

    ConditionalCompilationPrimary(cmajor::parser::context::Context* context, var soul::ast::Span s) : cmajor::ast::ConditionalCompilationExpressionNode*
        ::= 
        (   ID{ return new cmajor::ast::ConditionalCompilationPrimaryNode(lexer.GetSpan(pos), lexer.GetToken(pos).ToString()); }
        |   LPAREN{ s = lexer.GetSpan(pos); }
            ConditionalCompilationExpression(context):expr
            RPAREN{ return new cmajor::ast::ParenthesizedConditionalCompilationExpressionNode(s, expr); }
        )
        ;
}
