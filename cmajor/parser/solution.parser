// =================================
// Copyright (c) 2024 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cmajor.solutions.parser;

[interface]import cmajor.ast;
[interface]import soul.ast.span;
[implementation]import cmajor.container.file.token;
[implementation]import soul.lexer;
[implementation]import cmajor.container.file.lexer;
[implementation]import cmajor.token.value.parser;
[implementation]import soul.ast.source.pos;
[implementation]import util;

parser SolutionParser
{
    lexer cmajor::container::file::lexer::CmajorContainerFileLexer<char32_t>;
    main;

    Solution(var std::unique_ptr<cmajor::ast::Solution> solutionFile) : cmajor::ast::Solution*
        ::= 
        (
            SOLUTION 
            QualifiedId:name
            {
                solutionFile.reset(new cmajor::ast::Solution(name, lexer.FileName()));
            }
            SEMICOLON
            (
                Declaration:declaration{ solutionFile->AddDeclaration(declaration); }
            )*
        )
        {
            return solutionFile.release();
        }
        ;

    QualifiedId(var std::u32string qualifiedId) : std::u32string
        ::= 
        (
            ID{ qualifiedId = lexer.GetToken(pos).ToString(); }
            (
                DOT ID{ qualifiedId.append(1, '.').append(lexer.GetToken(pos).ToString()); }
            )*
        )
        {
            return qualifiedId;
        }
        ;

    BackEnd(var std::u32string id) : std::u32string
        ::= 
        (
            ID{ id = lexer.GetToken(pos).ToString(); }
        )
        {
            return id;
        }
        ;

    Config(var std::u32string config) : std::u32string
        ::=
        (
            ID{ config = lexer.GetToken(pos).ToString(); }
        )
        {
            return config;
        }
        ;

    Declaration : cmajor::ast::SolutionDeclaration*
        ::= SolutionProjectDeclaration:solutionProjectDeclaration{ return solutionProjectDeclaration; }
        |   ActiveProjectDeclaration:activeProjectDeclaration{ return activeProjectDeclaration; }
        |   ActiveBackEndDeclaration:activeBackEndDeclaration{ return activeBackEndDeclaration; } 
        |   ActiveConfigDeclaration:activeConfigDeclaration{ return activeConfigDeclaration; }
        |   ActiveOptLevelDeclaration:activeOptLevelDeclaration{ return activeOptLevelDeclaration; }
        ;

    SolutionProjectDeclaration(var std::string filePath) : cmajor::ast::SolutionDeclaration*
        ::= 
        (
            PROJECT
            FILEPATH{ filePath = ParseFilePath(lexer.FileName(), lexer.GetToken(pos)); }
            SEMICOLON
        )
        {
            return new cmajor::ast::SolutionProjectDeclaration(filePath);
        }
        ;

    ActiveProjectDeclaration : cmajor::ast::SolutionDeclaration*
        ::= 
        (
            ACTIVEPROJECT 
            QualifiedId:activeProjectName 
            SEMICOLON
        )
        {
            return new cmajor::ast::SolutionActiveProjectDeclaration(activeProjectName);
        }
        ;

    ActiveBackEndDeclaration : cmajor::ast::SolutionDeclaration*
        ::= 
        (
            ACTIVEBACKEND
            ASSIGN
            BackEnd:backend
            SEMICOLON
        )
        {
            return new cmajor::ast::SolutionActiveBackEndDeclaration(backend);
        }
        ;

    ActiveConfigDeclaration : cmajor::ast::SolutionDeclaration*
        ::= 
        (
            ACTIVECONFIG
            ASSIGN
            Config:config
            SEMICOLON
        )
        {
            return new cmajor::ast::SolutionActiveConfigurationDeclaration(config);
        }
        ;

    OptLevel : int
        ::= 
        (
            INTEGER{ return lexer.GetToken(pos).ToInt(); }
        )
        ;

    ActiveOptLevelDeclaration : cmajor::ast::SolutionDeclaration*
        ::=
        (
            ACTIVEOPTLEVEL
            ASSIGN
            OptLevel:level
            SEMICOLON
        )
        {
            return new cmajor::ast::SolutionActiveOptLevelDeclaration(level);
        }
        ;
}