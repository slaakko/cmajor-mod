// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cmajor.enumeration.parser;

[interface]import cmajor.parser.context;
[interface]import cmajor.ast;
[interface]import soul.ast.span;
[implementation]import cmajor.token;
[implementation]import soul.lexer;
[implementation]import cmajor.lexer;
[implementation]import soul.ast.source.pos;
[implementation]import cmajor.specifier.parser;
[implementation]import cmajor.identifier.parser;
[implementation]import cmajor.type.expr.parser;
[implementation]import cmajor.expression.parser;

parser EnumerationParser
{
    lexer cmajor::lexer::CmajorLexer<char32_t>;

    using SpecifierParser.Specifiers;
    using IdentifierParser.Identifier;
    using TypeExprParser.TypeExpr;
    using ExpressionParser.Expression;

    EnumType(cmajor::parser::context::Context* context, var std::unique_ptr<cmajor::ast::EnumTypeNode> enumTypeNode, var soul::ast::Span s) : cmajor::ast::EnumTypeNode*
        ::= 
        (   
            Specifiers:specifiers{ s = lexer.GetSpan(pos); }
            ENUM 
            Identifier(context):enumTypeId{ enumTypeNode.reset(new cmajor::ast::EnumTypeNode(s, specifiers, enumTypeId)); }
            (
                UnderlyingType(context):underlyingType{ enumTypeNode->SetUnderlyingType(underlyingType); }
            )?
            LBRACE{ enumTypeNode->SetBeginBraceSpan(lexer.GetSpan(pos)); }
            EnumConstants(context, enumTypeNode.get()):enumConstants
            RBRACE{ enumTypeNode->SetEndBraceSpan(lexer.GetSpan(pos)); }
        )
        {
            return enumTypeNode.release();
        }
        ;

    UnderlyingType(cmajor::parser::context::Context* context) : cmajor::ast::Node*
        ::= 
        (
            COLON 
            TypeExpr(context):type
        )
        {
            return type;
        }
        ;

    EnumConstants(cmajor::parser::context::Context* context, cmajor::ast::EnumTypeNode* enumType) 
        ::= 
        (
            EnumConstant(context, enumType):enumConstant{ enumType->AddConstant(enumConstant); } % COMMA
        )
        ;

    EnumConstant(cmajor::parser::context::Context* context, cmajor::ast::EnumTypeNode* enumType, var soul::ast::Span s) : cmajor::ast::EnumConstantNode*
        ::= 
        (   Identifier(context):constantId{ s = lexer.GetSpan(pos); }
            (
                ASSIGN Expression(context):constantValue
                { 
                    cmajor::ast::EnumConstantNode* enumConstant = new cmajor::ast::EnumConstantNode(s, constantId, constantValue);
                    enumConstant->SetHasValue();
                    enumConstant->SetStrValue(enumConstant->GetValue()->ToString());
                    return enumConstant;
                }
            |   empty
                {
                    cmajor::ast::EnumConstantNode* enumConstant = new cmajor::ast::EnumConstantNode(s, constantId, cmajor::ast::MakeNextEnumConstantValue(s, enumType));
                    return enumConstant;
                }
            )
        )
        ;
}
