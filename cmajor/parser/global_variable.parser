// =================================
// Copyright (c) 2023 Seppo Laakko
// Distributed under the MIT license
// =================================

export module cmajor.global.variable.parser;

[interface]import cmajor.parser.context;
[interface]import cmajor.ast;
[implementation]import cmajor.token;
[implementation]import soul.lexer;
[implementation]import cmajor.lexer;
[implementation]import soul.ast.source.pos;
[implementation]import cmajor.specifier.parser;
[implementation]import cmajor.type.expr.parser;
[implementation]import cmajor.identifier.parser;
[implementation]import cmajor.expression.parser;

parser GlobalVariableParser
{
    lexer cmajor::lexer::CmajorLexer<char32_t>;

    using SpecifierParser.Specifiers;
    using TypeExprParser.TypeExpr;
    using IdentifierParser.Identifier;
    using ExpressionParser.Expression;

    GlobalVariable(cmajor::parser::context::Context* context, var soul::ast::SourcePos s) : cmajor::ast::GlobalVariableNode*
        ::= 
        (
            Specifiers:specifiers{ s = lexer.GetSourcePos(pos); }
            TypeExpr(context):type
            Identifier(context):id
            (
                ASSIGN
                Expression(context):initializer
            )?
            SEMICOLON
        )
        {
            return new cmajor::ast::GlobalVariableNode(s, context->ModuleId(), specifiers, type, id, initializer, context->CompileUnitNode());
        }
        ;
}
