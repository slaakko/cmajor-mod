using System;
using System.Os;

int Fib(int n)
{
    if (n < 1) throw Exception("invalid argument");
    if (n == 1) return 0;
    if (n == 2) return 1;
    return Fib(n - 2) + Fib(n - 1);
}

int main(int argc, const char** argv)
{
    try
    {
        int nprocs = 0;
        int n = 0;
        if (argc != 3)
        {
            Console.Out() << "usage: fib NPROCS N" << endl();
            return 1;
        }
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (i == 1)
            {
                nprocs = ParseInt(arg);
            }
            else if (i == 2)
            {
                n = ParseInt(arg);
            }
        }
        for (int i = 0; i < nprocs; ++i)
        {
            int result = Fork();
            if (result == 0)
            {
                int fib = Fib(n);
                ConsoleLock lock;
                Console.Out() << "fibonacci(" << n << ")=" << fib << " computed by " << GetPid() << endl();
                return 0;
            }
        }
        byte exitCode = 0u;
        int result = Wait(&exitCode);
        while (result != -1)
        {
            if (exitCode != 0u)
            {
                throw Exception("child returned exit code " + ToString(exitCode));
            }
            result = Wait(&exitCode);
        }
        Console.Out() << "EXIT" << endl();
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}