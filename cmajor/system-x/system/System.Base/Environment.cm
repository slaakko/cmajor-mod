// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Collections;

namespace System
{
    private char** environment = null;

    public class Environment
    {
        static Environment() : instance(new Environment())
        {
        }
        public Environment() : variables()
        {
            if (environment != null)
            {
                const char** envp = environment;
                while (*envp != null)
                {
                    string envVar = *envp;
                    long eqPos = envVar.Find('=');
                    if (eqPos != -1)
                    {
                        Set(envVar.Substring(0, eqPos), envVar.Substring(eqPos + 1));
                    }
                    ++envp;
                }
            }
        }
        public static Environment& Instance()
        {
            return *instance;
        }
        public bool Has(const string& envVarName) const
        {
            return variables.CFind(envVarName) != variables.CEnd();
        }
        public string Get(const string& envVarName) const
        {
            Map<string, string>.ConstIterator it = variables.CFind(envVarName);
            if (it != variables.CEnd())
            {
                return it->second;
            }
            else
            {
                return string();
            }
        }
        public void Set(const string& envVarName, const string& envVarValue)
        {
            if (envVarName.Find('=') != -1)
            {
                throw SystemError(EPARAM, "environment variable name cannot contain '=' character");
            }
            variables[envVarName] = envVarValue;
        }
        public void Remove(const string& envVarName)
        {
            variables.Remove(envVarName);
        }
        public void Clear()
        {
            variables.Clear();
        }
        public void CopyTo(Environment& that)
        {
            for (const Pair<string, string>& v : variables)
            {
                that.Set(v.first, v.second);
            }
        }
        public long Size() const
        {
            long size = 0;
            for (const Pair<string, string>& v : variables)
            {
                size = size + v.first.Length() + 1 + v.second.Length() + 1 + 16;
            }
            return size;
        }
        public nothrow const Map<string, string>& Variables() const
        {
            return variables;
        }
        private static UniquePtr<Environment> instance;
        private Map<string, string> variables;
    }

    public bool HasEnv(const string& envVarName)
    {
        return Environment.Instance().Has(envVarName);
    }
    
    public string GetEnv(const string& envVarName)
    {
        return Environment.Instance().Get(envVarName);
    }
    
    public void SetEnv(const string& envVarName, const string& envVarValue)
    {
        Environment.Instance().Set(envVarName, envVarValue);
    }
    
    public void RemoveEnv(const string& envVarName)
    {
        Environment.Instance().Remove(envVarName);
    }
    
    public void ClearEnvironment()
    {
        Environment.Instance().Clear();
    }

    public nothrow cdecl void StartupSetupEnvironment(const char** envp)
    {
        environment = envp;
    }
}
