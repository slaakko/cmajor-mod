// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public class MemoryReader
    {
        public nothrow MemoryReader(byte* ptr_, long count_) : ptr(ptr_), pos(ptr), count(count_)
        {
        }
        public bool ReadBool()
        {
            return cast<bool>(ReadByte());
        }
        public byte ReadByte()
        {
            if (pos - ptr >= count)
            {
                throw Exception("memory reader: unexpected end of data");
            }
            return *pos++;
        }
        public sbyte ReadSByte()
        {
            return cast<sbyte>(ReadByte());
        }
        public ushort ReadUShort()
        {
            byte b0 = ReadByte();
            byte b1 = ReadByte();
            return (cast<ushort>(b0) << 8u) | cast<ushort>(b1);
        }
        public short ReadShort()
        {
            return cast<short>(ReadUShort());
        }
        public uint ReadUInt()
        {
            byte b0 = ReadByte();
            byte b1 = ReadByte();
            byte b2 = ReadByte();
            byte b3 = ReadByte();
            return (cast<uint>(b0) << 24u) | (cast<uint>(b1) << 16u) | (cast<uint>(b2) << 8u) | cast<uint>(b3);
        }
        public int ReadInt()
        {
            return cast<int>(ReadUInt());
        }
        public ulong ReadULong()
        {
            byte b0 = ReadByte();
            byte b1 = ReadByte();
            byte b2 = ReadByte();
            byte b3 = ReadByte();
            byte b4 = ReadByte();
            byte b5 = ReadByte();
            byte b6 = ReadByte();
            byte b7 = ReadByte();
            return (cast<ulong>(b0) << 56u) | (cast<ulong>(b1) << 48u) | (cast<ulong>(b2) << 40u) | (cast<ulong>(b3) << 32u) |
                (cast<ulong>(b4) << 24u) | (cast<ulong>(b5) << 16u) | (cast<ulong>(b6) << 8u) | cast<ulong>(b7);
        }
        public long ReadLong()
        {
            return cast<long>(ReadULong());
        }
        public float ReadFloat()
        {
            uint x = ReadUInt();
            return *cast<float*>(cast<void*>(&x));
        }
        public double ReadDouble()
        {
            ulong x = ReadULong();
            return *cast<double*>(cast<void*>(&x));
        }
        public char ReadChar()
        {
            return cast<char>(ReadByte());
        }
        public wchar ReadWChar()
        {
            return cast<wchar>(ReadUShort());
        }
        public uchar ReadUChar()
        {
            return cast<uchar>(ReadUInt());
        }
        public Date ReadDate()
        {
            short year = ReadShort();
            Month month = cast<Month>(ReadSByte());
            sbyte day = ReadSByte();
            Date date(year, month, day);
            return date;
        }
        public DateTime ReadDateTime()
        {
            Date date = ReadDate();
            int secs = ReadInt();
            DateTime dt(date, secs);
            return dt;
        }
        public string ReadString()
        {
            string result;
            byte b = ReadByte();
            while (b != 0u)
            {
                result.Append(cast<char>(b));
                b = ReadByte();
            }
            return result;
        }
        public Uuid ReadUuid()
        {
            Uuid x;
            for (byte& b : x)
            {
                b = ReadByte();
            }
            return x;
        }
        public uint ReadULEB128UInt()
        {
            uint result = 0u;
            uint shift = 0u;
            while (true)
            {
                byte b = ReadByte();
                result = result | ((b & 0x7Fu) << shift);
                if ((b & 0x80u) == 0u) break;
                shift = shift + 7u;
            }
            return result;
        }
        private byte* ptr;
        private byte* pos;
        private long count;
    }
}
