// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using System.Concepts;

namespace System.Collections
{
    public class Map<Key, Value, KeyCompare = Less<Key>> 
        where Key is Semiregular and Value is Semiregular and KeyCompare is Relation and KeyCompare.Domain is Key
    {
        public typedef Key KeyType;
        public typedef Value MappedType;
        public typedef KeyCompare Compare;
        public typedef Pair<KeyType, MappedType> ValueType;
        public typedef TreeType.ConstIterator ConstIterator;
        public typedef TreeType.Iterator Iterator;
        private typedef Map<KeyType, MappedType, KeyCompare> Self;
        private typedef RedBlackTree<KeyType, ValueType, SelectFirst<KeyType, MappedType>, KeyCompare> TreeType;

        public Map() : tree()
        {
        }
        public inline Iterator Begin()
        {
            return tree.Begin();
        }
        public inline ConstIterator Begin() const
        {
            return tree.CBegin();
        }
        public inline ConstIterator CBegin() const
        {
            return tree.CBegin();
        }
        public inline Iterator End()
        {
            return tree.End();
        }
        public inline ConstIterator End() const
        {
            return tree.CEnd();
        }
        public inline ConstIterator CEnd() const
        {
            return tree.CEnd();
        }
        public inline nothrow long Count() const
        {
            return tree.Count();
        }
        public inline nothrow bool IsEmpty() const
        {
            return tree.IsEmpty();
        }
        public inline void Clear()
        {
            tree.Clear();
        }
        public inline Iterator Find(const KeyType& key)
        {
            return tree.Find(key);
        }
        public inline ConstIterator Find(const KeyType& key) const
        {
            return tree.CFind(key);
        }
        public inline ConstIterator CFind(const KeyType& key) const
        {
            return tree.CFind(key);
        }
        public MappedType& operator[](const KeyType& key)
        {
            KeyType keyType(key);
            ValueType valueType(Rvalue(keyType), Rvalue(MappedType()));
            Pair<Iterator, bool> ib = Insert(Rvalue(valueType));
            Iterator i = ib.first;
            return i->second;
        }
        public MappedType& operator[](KeyType&& key)
        {
            ValueType valueType(Rvalue(key), Rvalue(MappedType()));
            Pair<Iterator, bool> ib = Insert(Rvalue(valueType));
            Iterator i = ib.first;
            return i->second;
        }
        public inline Pair<Iterator, bool> Insert(const ValueType& value)
            where ValueType is Copyable and MappedType is Copyable
        {
            return tree.Insert(value);
        }
        public inline Pair<Iterator, bool> Insert(ValueType&& value)
            where ValueType is Movable and MappedType is Movable
        {
            return tree.Insert(Rvalue(value));
        }
        public inline bool Remove(const KeyType& key)
        {
            return tree.Remove(key);
        }
        public inline void Remove(Iterator pos)
        {
            tree.Remove(pos);
        }
        private TreeType tree;
    }

    public inline nothrow bool operator==<Key, Value, KeyCompare>(const Map<Key, Value, KeyCompare>& left, const Map<Key, Value, KeyCompare>& right) 
        where Key is Regular and Value is Regular and KeyCompare is Relation and KeyCompare.Domain is Key
    {
        return left.Count() == right.Count() && Equal(left.CBegin(), left.CEnd(), right.CBegin(), right.CEnd(), EqualTo<Pair<Key, Value>>());
    }

    public inline nothrow bool operator<<Key, Value, KeyCompare>(const Map<Key, Value, KeyCompare>& left, const Map<Key, Value, KeyCompare>& right) 
        where Key is TotallyOrdered and Value is TotallyOrdered and KeyCompare is Relation and KeyCompare.Domain is Key
    {
        return LexicographicalCompare(left.CBegin(), left.CEnd(), right.CBegin(), right.CEnd(), Less<Pair<Key, Value>>());
    }

    [system_default]
    public TextWriter& operator<<<Key, Value, KeyCompare>(TextWriter& writer, const Map<Key, Value, KeyCompare>& map)
    {
        writer << "{";
        bool first = true;
        for (const Pair<Key, Value>& element : map)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                writer << ", ";
            }
            writer << element;
        }
        writer << "}";
        return writer;
    }
}
