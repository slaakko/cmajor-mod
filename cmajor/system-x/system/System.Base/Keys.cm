// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System.Os;
using System.Unicode;

namespace System
{
    public const uchar keyBackspace = '\b';
    public const uchar keyTab = '\t';
    public const uchar keyNewline = '\n';
    public const uchar keyControlA = cast<uchar>(0x001u);
    public const uchar keyControlB = cast<uchar>(0x002u);
    public const uchar keyControlC = cast<uchar>(0x003u);
    public const uchar keyControlD = cast<uchar>(0x004u);
    public const uchar keyControlE = cast<uchar>(0x005u);
    public const uchar keyControlF = cast<uchar>(0x006u);
    public const uchar keyControlG = cast<uchar>(0x007u);
    public const uchar keyControlH = cast<uchar>(0x008u);
    public const uchar keyControlI = cast<uchar>(0x009u);
    public const uchar keyControlJ = cast<uchar>(0x00Au);
    public const uchar keyControlK = cast<uchar>(0x00Bu);
    public const uchar keyControlL = cast<uchar>(0x00Cu);
    public const uchar keyControlM = cast<uchar>(0x00Du);
    public const uchar keyControlN = cast<uchar>(0x00Eu);
    public const uchar keyControlO = cast<uchar>(0x00Fu);
    public const uchar keyControlP = cast<uchar>(0x010u);
    public const uchar keyControlQ = cast<uchar>(0x011u);
    public const uchar keyControlR = cast<uchar>(0x012u);
    public const uchar keyControlS = cast<uchar>(0x013u);
    public const uchar keyControlT = cast<uchar>(0x014u);
    public const uchar keyControlU = cast<uchar>(0x015u);
    public const uchar keyControlV = cast<uchar>(0x016u);
    public const uchar keyControlW = cast<uchar>(0x017u);
    public const uchar keyControlX = cast<uchar>(0x018u);
    public const uchar keyControlY = cast<uchar>(0x019u);
    public const uchar keyControlZ = cast<uchar>(0x01Au);
    public const uchar keyEscape = cast<uchar>(0x01Bu);
    public const uchar keyFS = cast<uchar>(0x01Cu);
    public const uchar keyGS = cast<uchar>(0x01Du);
    public const uchar keyRS = cast<uchar>(0x01Eu);
    public const uchar keyUS = cast<uchar>(0x01Fu);
    
//     special keys are mapped to Unicode Private Use Area

    public const uchar specialKeyStart = cast<uchar>(0xE000u);

    public const uchar keyDown = cast<uchar>(0xE000u);
    public const uchar keyUp = cast<uchar>(0xE001u);
    public const uchar keyLeft = cast<uchar>(0xE002u);
    public const uchar keyRight = cast<uchar>(0xE003u);
    public const uchar keyHome = cast<uchar>(0xE004u);
    public const uchar keyMsg = cast<uchar>(0xE005u);
    public const uchar keyF1 = cast<uchar>(0xE006u);
    public const uchar keyF2 = cast<uchar>(0xE007u);
    public const uchar keyF3 = cast<uchar>(0xE008u);
    public const uchar keyF4 = cast<uchar>(0xE009u);
    public const uchar keyF5 = cast<uchar>(0xE00Au);
    public const uchar keyF6 = cast<uchar>(0xE00Bu);
    public const uchar keyF7 = cast<uchar>(0xE00Cu);
    public const uchar keyF8 = cast<uchar>(0xE00Du);
    public const uchar keyF9 = cast<uchar>(0xE00Eu);
    public const uchar keyF10 = cast<uchar>(0xE00Fu);
    public const uchar keyF11 = cast<uchar>(0xE010u);
    public const uchar keyF12 = cast<uchar>(0xE011u);
    public const uchar keyDel = cast<uchar>(0xE012u);
    public const uchar keyIns = cast<uchar>(0xE013u);
    public const uchar keyPgDown = cast<uchar>(0xE014u);
    public const uchar keyPgUp = cast<uchar>(0xE015u);
    public const uchar keyPrint = cast<uchar>(0xE016u);
    public const uchar keyEnd = cast<uchar>(0xE017u);
    public const uchar keyShiftDel = cast<uchar>(0xE018u);
    public const uchar keyShiftEnd = cast<uchar>(0xE019u);
    public const uchar keyShiftHome = cast<uchar>(0xE01Au);
    public const uchar keyShiftLeft = cast<uchar>(0xE01Bu);
    public const uchar keyShiftRight = cast<uchar>(0xE01Cu);
    public const uchar keyResize = cast<uchar>(0xE01Du);
    public const uchar keyShiftUp = cast<uchar>(0xE01Eu);
    public const uchar keyShiftDown = cast<uchar>(0xE01Fu);
    public const uchar keyControlUp = cast<uchar>(0xE020u);
    public const uchar keyControlDown = cast<uchar>(0xE021u);
    public const uchar keyControlLeft = cast<uchar>(0xE022u);
    public const uchar keyControlRight = cast<uchar>(0xE023u);
    public const uchar keyControlPgUp = cast<uchar>(0xE024u);
    public const uchar keyControlPgDown = cast<uchar>(0xE025u);
    public const uchar keyControlHome = cast<uchar>(0xE026u);
    public const uchar keyControlEnd = cast<uchar>(0xE027u);
    
    public const uchar keyControlDel = cast<uchar>(0xE028u);
    public const uchar keyControlF1 = cast<uchar>(0xE029u);
    public const uchar keyControlF2 = cast<uchar>(0xE02Au);
    public const uchar keyControlF3 = cast<uchar>(0xE02Bu);
    public const uchar keyControlF4 = cast<uchar>(0xE02Cu);
    public const uchar keyControlF5 = cast<uchar>(0xE02Du);
    public const uchar keyControlF6 = cast<uchar>(0xE02Eu);
    public const uchar keyControlF7 = cast<uchar>(0xE02Fu);
    public const uchar keyControlF8 = cast<uchar>(0xE030u);
    public const uchar keyControlF9 = cast<uchar>(0xE031u);
    public const uchar keyControlF10 = cast<uchar>(0xE032u);
    public const uchar keyControlF11 = cast<uchar>(0xE033u);
    public const uchar keyControlF12 = cast<uchar>(0xE034u);
    public const uchar keyShiftPgUp = cast<uchar>(0xE035u);
    public const uchar keyShiftPgDown = cast<uchar>(0xE036u);
    public const uchar keyShiftF1 = cast<uchar>(0xE037u);
    public const uchar keyShiftF2 = cast<uchar>(0xE038u);
    public const uchar keyShiftF3 = cast<uchar>(0xE039u);
    public const uchar keyShiftF4 = cast<uchar>(0xE03Au);
    public const uchar keyShiftF5 = cast<uchar>(0xE03Bu);
    public const uchar keyShiftF6 = cast<uchar>(0xE03Cu);
    public const uchar keyShiftF7 = cast<uchar>(0xE03Du);
    public const uchar keyShiftF8 = cast<uchar>(0xE03Eu);
    public const uchar keyShiftF9 = cast<uchar>(0xE03Fu);
    public const uchar keyShiftF10 = cast<uchar>(0xE040u);
    public const uchar keyShiftF11 = cast<uchar>(0xE041u);
    public const uchar keyShiftF12 = cast<uchar>(0xE042u);

    public const uchar keyAltA = cast<uchar>(0xE043u);
    public const uchar keyAltB = cast<uchar>(0xE044u);
    public const uchar keyAltC = cast<uchar>(0xE045u);
    public const uchar keyAltD = cast<uchar>(0xE046u);
    public const uchar keyAltE = cast<uchar>(0xE047u);
    public const uchar keyAltF = cast<uchar>(0xE048u);
    public const uchar keyAltG = cast<uchar>(0xE049u);
    public const uchar keyAltH = cast<uchar>(0xE04Au);
    public const uchar keyAltI = cast<uchar>(0xE04Bu);
    public const uchar keyAltJ = cast<uchar>(0xE04Cu);
    public const uchar keyAltK = cast<uchar>(0xE04Du);
    public const uchar keyAltL = cast<uchar>(0xE04Eu);
    public const uchar keyAltM = cast<uchar>(0xE04Fu);
    public const uchar keyAltN = cast<uchar>(0xE050u);
    public const uchar keyAltO = cast<uchar>(0xE051u);
    public const uchar keyAltP = cast<uchar>(0xE052u);
    public const uchar keyAltQ = cast<uchar>(0xE053u);
    public const uchar keyAltR = cast<uchar>(0xE054u);
    public const uchar keyAltS = cast<uchar>(0xE055u);
    public const uchar keyAltT = cast<uchar>(0xE056u);
    public const uchar keyAltU = cast<uchar>(0xE057u);
    public const uchar keyAltV = cast<uchar>(0xE058u);
    public const uchar keyAltW = cast<uchar>(0xE059u);
    public const uchar keyAltX = cast<uchar>(0xE05Au);
    public const uchar keyAltY = cast<uchar>(0xE05Bu);
    public const uchar keyAltZ = cast<uchar>(0xE05Cu);

    public const uchar keyAltF1 = cast<uchar>(0xE05Du);
    public const uchar keyAltF2 = cast<uchar>(0xE05Eu);
    public const uchar keyAltF3 = cast<uchar>(0xE05Fu);
    public const uchar keyAltF4 = cast<uchar>(0xE060u);
    public const uchar keyAltF5 = cast<uchar>(0xE061u);
    public const uchar keyAltF6 = cast<uchar>(0xE062u);
    public const uchar keyAltF7 = cast<uchar>(0xE063u);
    public const uchar keyAltF8 = cast<uchar>(0xE064u);
    public const uchar keyAltF9 = cast<uchar>(0xE065u);
    public const uchar keyAltF10 = cast<uchar>(0xE066u);
    public const uchar keyAltF11 = cast<uchar>(0xE067u);
    public const uchar keyAltF12 = cast<uchar>(0xE068u);
    
    public const uchar keyControlShiftLeft = cast<uchar>(0xE069u);
    public const uchar keyControlShiftRight = cast<uchar>(0xE06Au);
    public const uchar keyControlShiftHome = cast<uchar>(0xE06Bu);
    public const uchar keyControlShiftEnd = cast<uchar>(0xE06Cu);
    public const uchar keyControlTab = cast<uchar>(0xE06Du);
    public const uchar keyShiftTab = cast<uchar>(0xE06Eu);
    public const uchar keyControlIns = cast<uchar>(0xE06Fu);
    public const uchar keyShiftIns = cast<uchar>(0xE070u);
    
    public const uchar specialKeyEnd = cast<uchar>(0xE070u);
    
    public class KeyBuffer
    {
        static KeyBuffer() : instance(new KeyBuffer())
        {
        }
        public static KeyBuffer& Instance() 
        {
            return *instance;
        }
        public void Put(byte ch)
        {
            engine.Put(ch);
        }
        public nothrow bool KeyReady() const
        {
            return engine.ResultReady();
        }
        public nothrow uchar GetKey() const
        {
            return engine.Get();
        }
        private static UniquePtr<KeyBuffer> instance;
        private UnicodeEngine engine;
    }
    
    public uchar ReadKey(int fd)
    {
        KeyBuffer& keyBuffer = KeyBuffer.Instance();
        byte ch = 0u;
        long count = Read(fd, &ch, 1);
        while (count > 0)
        {
            keyBuffer.Put(ch);
            if (keyBuffer.KeyReady())
            {
                return keyBuffer.GetKey();
            }
            count = Read(fd, &ch, 1);
        }
        return cast<uchar>(0u);
    }    
    
    public string KeyName(uchar c)
    {
        switch (c)
        {
            case keyBackspace:
            {
                return "Backspace";
            }
            case keyTab:
            {
                return "Tab";
            }
            case keyNewline:
            {
                return "Newline";
            }
            case keyControlA:
            {
                return "Ctrl+A";
            }
            case keyControlB:
            {
                return "Ctrl+B";
            }
            case keyControlC:
            {
                return "Ctrl+C";
            }
            case keyControlD:
            {
                return "Ctrl+D";
            }
            case keyControlE:
            {
                return "Ctrl+E";
            }
            case keyControlF:
            {
                return "Ctrl+F";
            }
            case keyControlG:
            {
                return "Ctrl+G";
            }
            case keyControlK:
            {
                return "Ctrl+K";
            }
            case keyControlL:
            {
                return "Ctrl+L";
            }
            case keyControlM:
            {
                return "Ctrl+M";
            }
            case keyControlN:
            {
                return "Ctrl+N";
            }
            case keyControlO:
            {
                return "Ctrl+O";
            }
            case keyControlP:
            {
                return "Ctrl+P";
            }
            case keyControlQ:
            {
                return "Ctrl+Q";
            }
            case keyControlR:
            {
                return "Ctrl+R";
            }
            case keyControlS:
            {
                return "Ctrl+S";
            }
            case keyControlT:
            {
                return "Ctrl+T";
            }
            case keyControlU:
            {
                return "Ctrl+U";
            }
            case keyControlV:
            {
                return "Ctrl+V";
            }
            case keyControlW:
            {
                return "Ctrl+W";
            }
            case keyControlX:
            {
                return "Ctrl+X";
            }
            case keyControlY:
            {
                return "Ctrl+Y";
            }
            case keyControlZ:
            {
                return "Ctrl+Z";
            }
            case keyEscape:
            {
                return "Escape";
            }
            case keyFS:
            {
                return "FS";
            }
            case keyGS:
            {
                return "GS";
            }
            case keyRS:
            {
                return "RS";
            }
            case keyUS:
            {
                return "US";
            }
            case keyDown:
            {
                return "Down Arrow";
            }
            case keyUp:
            {
                return "Up Arrow";
            }
            case keyLeft:
            {
                return "Left Arrow";
            }
            case keyRight:
            {
                return "Right Arrow";
            }
            case keyHome:
            {
                return "Home";
            }
            case keyMsg:
            {
                return "MSG";
            }
            case keyF1:
            {
                return "F1";
            }
            case keyF2:
            {
                return "F2";
            }
            case keyF3:
            {
                return "F3";
            }
            case keyF4:
            {
                return "F4";
            }
            case keyF5:
            {
                return "F5";
            }
            case keyF6:
            {
                return "F6";
            }
            case keyF7:
            {
                return "F7";
            }
            case keyF8:
            {
                return "F8";
            }
            case keyF9:
            {
                return "F9";
            }
            case keyF10:
            {
                return "F10";
            }
            case keyF11:
            {
                return "F11";
            }
            case keyF12:
            {
                return "F12";
            }
            case keyDel:
            {
                return "Delete";
            }
            case keyIns:
            {
                return "Insert";
            }
            case keyPgDown:
            {
                return "Page Down";
            }
            case keyPgUp:
            {
                return "Page Up";
            }
            case keyPrint:
            {
                return "Print Screen";
            }
            case keyEnd:
            {
                return "End";
            }
            case keyShiftDel:
            {
                return "Shift+Delete";
            }
            case keyShiftEnd:
            {
                return "Shift+End";
            }
            case keyShiftHome:
            {
                return "Shift+Home";
            }
            case keyShiftLeft:
            {
                return "Shift+Left Arrow";
            }
            case keyShiftRight:
            {
                return "Shift+Right Arrow";
            }
            case keyResize:
            {
                return "Resize";
            }
            case keyShiftUp:
            {
                return "Shift+Up Arrow";
            }
            case keyShiftDown:
            {
                return "Shift+Down Arrow";
            }
            case keyControlUp:
            {
                return "Ctrl+Up Arrow";
            }
            case keyControlDown:
            {
                return "Ctrl+Down Arrow";
            }
            case keyControlLeft:
            {
                return "Ctrl+Left Arrow";
            }
            case keyControlRight:
            {
                return "Ctrl+Right Arrow";
            }
            case keyControlPgUp:
            {
                return "Ctrl+Page Up";
            }
            case keyControlPgDown:
            {
                return "Ctrl+Page Down";
            }
            case keyControlHome:
            {
                return "Ctrl+Home";
            }
            case keyControlEnd:
            {
                return "Ctrl+End";
            }
            case keyControlDel:
            {
                return "Ctrl+Delete";
            }
            case keyControlF1:
            {
                return "Ctrl+F1";
            }
            case keyControlF2:
            {
                return "Ctrl+F2";
            }
            case keyControlF3:
            {
                return "Ctrl+F3";
            }
            case keyControlF4:
            {
                return "Ctrl+F4";
            }
            case keyControlF5:
            {
                return "Ctrl+F5";
            }
            case keyControlF6:
            {
                return "Ctrl+F6";
            }
            case keyControlF7:
            {
                return "Ctrl+F7";
            }
            case keyControlF8:
            {
                return "Ctrl+F8";
            }
            case keyControlF9:
            {
                return "Ctrl+F9";
            }
            case keyControlF10:
            {
                return "Ctrl+F10";
            }
            case keyControlF11:
            {
                return "Ctrl+F11";
            }
            case keyControlF12:
            {
                return "Ctrl+F12";
            }
            case keyShiftPgUp:
            {
                return "Shift+Page Up";
            }
            case keyShiftPgDown:
            {
                return "Shift+Page Down";
            }
            case keyShiftF1:
            {
                return "Shift+F1";
            }
            case keyShiftF2:
            {
                return "Shift+F2";
            }
            case keyShiftF3:
            {
                return "Shift+F3";
            }
            case keyShiftF4:
            {
                return "Shift+F4";
            }
            case keyShiftF5:
            {
                return "Shift+F5";
            }
            case keyShiftF6:
            {
                return "Shift+F6";
            }
            case keyShiftF7:
            {
                return "Shift+F7";
            }
            case keyShiftF8:
            {
                return "Shift+F8";
            }
            case keyShiftF9:
            {
                return "Shift+F9";
            }
            case keyShiftF10:
            {
                return "Shift+F10";
            }
            case keyShiftF11:
            {
                return "Shift+F11";
            }
            case keyShiftF12:
            {
                return "Shift+F12";
            }
            case keyAltA:
            {
                return "Alt+A";
            }
            case keyAltB:
            {
                return "Alt+B";
            }
            case keyAltC:
            {
                return "Alt+C";
            }
            case keyAltD:
            {
                return "Alt+D";
            }
            case keyAltE:
            {
                return "Alt+E";
            }
            case keyAltF:
            {
                return "Alt+F";
            }
            case keyAltG:
            {
                return "Alt+G";
            }
            case keyAltH:
            {
                return "Alt+H";
            }
            case keyAltI:
            {
                return "Alt+I";
            }
            case keyAltJ:
            {
                return "Alt+J";
            }
            case keyAltK:
            {
                return "Alt+K";
            }
            case keyAltL:
            {
                return "Alt+L";
            }
            case keyAltM:
            {
                return "Alt+M";
            }
            case keyAltN:
            {
                return "Alt+N";
            }
            case keyAltO:
            {
                return "Alt+O";
            }
            case keyAltP:
            {
                return "Alt+P";
            }
            case keyAltQ:
            {
                return "Alt+Q";
            }
            case keyAltR:
            {
                return "Alt+R";
            }
            case keyAltS:
            {
                return "Alt+S";
            }
            case keyAltT:
            {
                return "Alt+T";
            }
            case keyAltU:
            {
                return "Alt+U";
            }
            case keyAltV:
            {
                return "Alt+V";
            }
            case keyAltW:
            {
                return "Alt+W";
            }
            case keyAltX:
            {
                return "Alt+X";
            }
            case keyAltY:
            {
                return "Alt+Y";
            }
            case keyAltZ:
            {
                return "Alt+Z";
            }
            case keyAltF1:
            {
                return "Alt+F1";
            }
            case keyAltF2:
            {
                return "Alt+F2";
            }
            case keyAltF3:
            {
                return "Alt+F3";
            }
            case keyAltF4:
            {
                return "Alt+F4";
            }
            case keyAltF5:
            {
                return "Alt+F5";
            }
            case keyAltF6:
            {
                return "Alt+F6";
            }
            case keyAltF7:
            {
                return "Alt+F7";
            }
            case keyAltF8:
            {
                return "Alt+F8";
            }
            case keyAltF9:
            {
                return "Alt+F9";
            }
            case keyAltF10:
            {
                return "Alt+F10";
            }
            case keyAltF11:
            {
                return "Alt+F11";
            }
            case keyAltF12:
            {
                return "Alt+F12";
            }
            case keyControlShiftLeft:
            {
                return "Ctrl+Shift+Left Arrow";
            }
            case keyControlShiftRight:
            {
                return "Ctrl+Shift+Right Arrow";
            }
            case keyControlShiftHome:
            {
                return "Ctrl+Shift+Home";
            }
            case keyControlShiftEnd:
            {
                return "Ctrl+Shift+End";
            }
            case keyControlTab:
            {
                return "Ctrl+Tab";
            }
            case keyShiftTab:
            {
                return "Shift+Tab";
            }
            case keyControlIns:
            {
                return "Ctrl+Insert";
            }
            case keyShiftIns:
            {
                return "Shift+Insert";
            }
            default:
            {
                if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')
                {
                    ustring k(c);
                    return ToUtf8(ToUpper(k));
                }
                break;
            }
        }
        return "<unknown key>";
    }
}
