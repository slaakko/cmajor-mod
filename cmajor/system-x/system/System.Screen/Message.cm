// =================================
// Copyright (c) 2025 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;
using System.IO;
using System.Collections;

namespace System.Screen
{
    public const int systemScreenQuitMessageId = 0;
    public const int systemScreenKeyPressedMessageId = 1;
    public const int systemScreenWriteScreenMessageId = 2;
    public const int systemScreenTimerMessageId = 3;

    public abstract class Message
    {
        public nothrow Message() : targetWindowHandle(-1)
        {
        }
        public default virtual ~Message();
        public abstract nothrow int Id() const;
        public virtual nothrow int Size() const
        {
            return cast<int>(sizeof(int) + sizeof(int));
        }
        public abstract string Name() const;
        public nothrow virtual bool IsDefaultWriteScreenMessage() const
        {
            return false;
        }
        public nothrow inline int TargetWindowHandle() const
        {
            return targetWindowHandle;
        }
        public nothrow inline void SetTargetWindowHandle(int targetWindowHandle_)
        {
            targetWindowHandle = targetWindowHandle_;
        }
        public virtual void Write(MemoryWriter& writer)
        {
            writer.Write(Id());
            writer.Write(targetWindowHandle);
        }
        public virtual void Read(MemoryReader& reader)
        {
            targetWindowHandle = reader.ReadInt();
        }
        public virtual bool Dispatch(Control* control)
        {
            return false;
        }
        private int targetWindowHandle;
    }
    
    public Message* CreateMessage(int messageId)
    {
        switch (messageId)
        {
            case systemScreenQuitMessageId: return new QuitMessage();
            case systemScreenKeyPressedMessageId: return new KeyPressedMessage();
            case systemScreenWriteScreenMessageId: return new WriteScreenMessage();
            case systemScreenTimerMessageId: return new TimerMessage();
        }
        throw Exception("no case for message id " + ToString(messageId));
    }
    
    public Message* ReadMessage(byte* messageData, int messageSize)
    {
        MemoryReader reader(messageData, messageSize);
        int messageId = reader.ReadInt();
        Message* message = CreateMessage(messageId);
        message->Read(reader);
        return message;
    }
}
