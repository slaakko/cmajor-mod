// =================================
// Copyright (c) 2023 Seppo Laakko
// Distributed under the MIT license
// =================================

#ifndef LLVM_INC_EMITTER_INCLUDED
#define LLVM_INC_EMITTER_INCLUDED

import cmajor.ir;
import soul.ast.source.pos;
import util.uuid;

namespace llvm_inc {

struct LLvmEmitterImpl;

class LLvmEmitter 
{
public:
    LLvmEmitter(cmajor::ir::EmittingContext* emittingContext_);
    ~LLvmEmitter();
    cmajor::ir::EmittingContext* EmittingContext() const ;
    void SetEmittingDelegate(cmajor::ir::EmittingDelegate* emittingDelegate_) ;
    void* GetIrTypeForBool() ;
    void* GetIrTypeForSByte() ;
    void* GetIrTypeForByte() ;
    void* GetIrTypeForShort() ;
    void* GetIrTypeForUShort() ;
    void* GetIrTypeForInt() ;
    void* GetIrTypeForUInt() ;
    void* GetIrTypeForLong() ;
    void* GetIrTypeForULong() ;
    void* GetIrTypeForFloat() ;
    void* GetIrTypeForDouble() ;
    void* GetIrTypeForChar() ;
    void* GetIrTypeForWChar() ;
    void* GetIrTypeForUChar() ;
    void* GetIrTypeForVoid() ;
    void* GetIrTypeForFunction(void* retType, const std::vector<void*>& paramTypes) ;
    void* GetIrTypeForVariableParamFunction(void* retType) ;
    void* GetIrTypeForArrayType(void* elementType, int64_t size) ;
    void* GetIrTypeForClassType(const std::vector<void*>& elementTypes) ;
    void* GetIrTypeForDelegateType(void* retType, const std::vector<void*>& paramTypes) ;
    void* GetIrTypeForVoidPtrType() ;
    void* GetIrTypeForStructType(const std::vector<void*>& elementTypes) ;
    void* CreateDefaultIrValueForBool() ;
    void* CreateDefaultIrValueForSByte() ;
    void* CreateDefaultIrValueForByte() ;
    void* CreateDefaultIrValueForShort() ;
    void* CreateDefaultIrValueForUShort() ;
    void* CreateDefaultIrValueForInt() ;
    void* CreateDefaultIrValueForUInt() ;
    void* CreateDefaultIrValueForLong() ;
    void* CreateDefaultIrValueForULong() ;
    void* CreateDefaultIrValueForFloat() ;
    void* CreateDefaultIrValueForDouble() ;
    void* CreateDefaultIrValueForChar() ;
    void* CreateDefaultIrValueForWChar() ;
    void* CreateDefaultIrValueForUChar() ;
    void* CreateDefaultIrValueForArrayType(void* arrayIrType, const std::vector<void*>& arrayOfDefaults) ;
    void* CreateDefaultIrValueForStruct(void* irType, const std::vector<void*>& defaultMembers) ;
    void* CreateDefaultIrValueForDelegateType(void* irType) ;
    void* CreateDefaultIrValueForVoidPtrType() ;
    void* CreateDefaultIrValueForDerivedType(void* irType) ;
    void* CreateDefaultIrValueForPtrType(void* irType) ;
    void* CreateIrValueForBool(bool value) ;
    void* CreateIrValueForSByte(int8_t value) ;
    void* CreateIrValueForByte(uint8_t value) ;
    void* CreateIrValueForShort(int16_t value) ;
    void* CreateIrValueForUShort(uint16_t value) ;
    void* CreateIrValueForInt(int32_t value) ;
    void* CreateIrValueForUInt(uint32_t value) ;
    void* CreateIrValueForLong(int64_t value) ;
    void* CreateIrValueForULong(uint64_t value) ;
    void* CreateIrValueForFloat(float value) ;
    void* CreateIrValueForDouble(double value) ;
    void* CreateIrValueForChar(uint8_t value) ;
    void* CreateIrValueForWChar(uint16_t value) ;
    void* CreateIrValueForUChar(uint32_t value) ;
    void* CreateIrValueForWString(void* wstringConstant) ;
    void* CreateIrValueForUString(void* ustringConstant) ;
    void* CreateIrValueForConstantArray(void* arrayIrType, const std::vector<void*>& elements, const std::string& prefix) ;
    void* CreateIrValueForConstantStruct(void* structIrType, const std::vector<void*>& elementConstants) ;
    void* CreateIrValueForUuid(void* uuidConstant) ;
    void* GetConversionValue(void* type, void* from) ;
    void* CreateFwdIrTypeForClassType() ;
    void SetFwdIrTypeBody(void* forwardDeclaredType, const std::vector<void*>& elementTypes) ;
    void* GetIrTypeByTypeId(const util::uuid& typeId) ;
    void SetIrTypeByTypeId(const util::uuid& typeId, void* irType) ;
    void* GetIrTypeForPtrType(void* baseIrType) ;
    std::string GetIrTypeName(void* irType) ;
    std::string MakeVmtVariableName(const std::string& vmtObjectName) ;
    void* CreateDITypeForBool() ;
    void* CreateDITypeForSByte() ;
    void* CreateDITypeForByte() ;
    void* CreateDITypeForShort() ;
    void* CreateDITypeForUShort() ;
    void* CreateDITypeForInt() ;
    void* CreateDITypeForUInt() ;
    void* CreateDITypeForLong() ;
    void* CreateDITypeForULong() ;
    void* CreateDITypeForFloat() ;
    void* CreateDITypeForDouble() ;
    void* CreateDITypeForChar() ;
    void* CreateDITypeForWChar() ;
    void* CreateDITypeForUChar() ;
    void* CreateDITypeForVoid() ;
    void* CreateDITypeForArray(void* elementDIType, const std::vector<void*>& elements) ;
    void* CreateIrDIForwardDeclaration(void* irType, const std::string& name, const std::string& mangledName, const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId) ;
    uint64_t GetOffsetInBits(void* classIrType, int layoutIndex) ;
    void* CreateDITypeForClassType(void* irType, const std::vector<void*>& memberVariableElements, const soul::ast::SourcePos& classSourcePos, const util::uuid& moduleId, const std::string& name, void* vtableHolderClass,
        const std::string& mangledName, void* baseClassDIType) ;
    void* CreateDITypeForEnumConstant(const std::string& name, int64_t value) ;
    void* CreateDITypeForEnumType(const std::string& name, const std::string& mangledName, const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId, const std::vector<void*>& enumConstantElements,
        uint64_t sizeInBits, uint32_t alignInBits, void* underlyingDIType) ;
    void MapFwdDeclaration(void* fwdDeclaration, const util::uuid& typeId) ;
    void* GetDITypeByTypeId(const util::uuid& typeId) const ;
    void SetDITypeByTypeId(const util::uuid& typeId, void* diType, const std::string& typeName) ;
    void* GetDIMemberType(const std::pair<util::uuid, int32_t>& memberVariableId) ;
    void SetDIMemberType(const std::pair<util::uuid, int32_t>& memberVariableId, void* diType) ;
    void* CreateDIMemberType(void* scope, const std::string& name, const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId, uint64_t sizeInBits, uint64_t alignInBits, uint64_t offsetInBits, void* diType) ;
    void* CreateConstDIType(void* diType) ;
    void* CreateLValueRefDIType(void* diType) ;
    void* CreateRValueRefDIType(void* diType) ;
    void* CreatePointerDIType(void* diType) ;
    void* CreateUnspecifiedDIType(const std::string& name) ;
    void MapClassPtr(const util::uuid& typeId, void* classPtr, const std::string& className) ;
    uint64_t GetSizeInBits(void* irType) ;
    uint64_t GetAlignmentInBits(void* irType) ;
    void SetCurrentDebugLocation(const soul::ast::SourcePos& sourcePos) ;
    void* GetArrayBeginAddress(void* arrayPtr) ;
    void* GetArrayEndAddress(void* arrayPtr, uint64_t size) ;
    void* CreateBasicBlock(const std::string& name) ;
    void* CreateIncludeBasicBlockInstruction(void* basicBlock) ;
    void PushParentBlock() ;
    void PopParentBlock() ;
    void SetHandlerBlock(void* tryBlock, void* catchBlock) ;
    void SetCleanupBlock(void* cleanupBlock) ;
    int GetBasicBlockId(void* basicBlock) ;
    void CreateBr(void* targetBasicBlock) ;
    void CreateCondBr(void* cond, void* trueBasicBlock, void* falseBasicBlock) ;
    void* CreateArrayIndexAddress(void* arrayPtr, void* index) ;
    void CreateStore(void* value, void* ptr) ;
    void* CreateLoad(void* ptr) ;
    void* CreateAdd(void* left, void* right) ;
    void* CreateFAdd(void* left, void* right) ;
    void* CreateSub(void* left, void* right) ;
    void* CreateFSub(void* left, void* right) ;
    void* CreateMul(void* left, void* right) ;
    void* CreateFMul(void* left, void* right) ;
    void* CreateUDiv(void* left, void* right) ;
    void* CreateSDiv(void* left, void* right) ;
    void* CreateFDiv(void* left, void* right) ;
    void* CreateURem(void* left, void* right) ;
    void* CreateSRem(void* left, void* right) ;
    void* CreateAnd(void* left, void* right) ;
    void* CreateOr(void* left, void* right) ;
    void* CreateXor(void* left, void* right) ;
    void* CreateShl(void* left, void* right) ;
    void* CreateAShr(void* left, void* right) ;
    void* CreateLShr(void* left, void* right) ;
    void* CreateICmpEQ(void* left, void* right) ;
    void* CreateFCmpOEQ(void* left, void* right) ;
    void* CreateICmpULT(void* leftValue, void* rightValue) ;
    void* CreateICmpSLT(void* leftValue, void* rightValue) ;
    void* CreateFCmpOLT(void* leftValue, void* rightValue) ;
    void* CreateSExt(void* operand, void* destinationType) ;
    void* CreateZExt(void* operand, void* destinationType) ;
    void* CreateFPExt(void* operand, void* destinationType) ;
    void* CreateTrunc(void* operand, void* destinationType) ;
    void* CreateFPTrunc(void* operand, void* destinationType) ;
    void* CreateBitCast(void* operand, void* destinationType) ;
    void* CreateUIToFP(void* operand, void* destinationType) ;
    void* CreateSIToFP(void* operand, void* destinationType) ;
    void* CreateFPToUI(void* operand, void* destinationType) ;
    void* CreateFPToSI(void* operand, void* destinationType) ;
    void* CreateIntToPtr(void* intValue, void* destinationType) ;
    void* CreatePtrToInt(void* ptrValue, void* destinationType) ;
    void* CreateNot(void* value) ;
    void* CreateNeg(void* value) ;
    void* CreateFNeg(void* value) ;
    void* CreateNop() ;
    void* CreateSave() ;
    void* CreateBeginTry() ;
    void* CreateEndTry(void* nextDest) ;
    void* CreateBeginCatch() ;
    void* CreateEndCatch(void* nextDest) ;
    void* GetOrInsertGlobal(const std::string& name, void* type) ;
    void* GetOrInsertAnyComdat(const std::string& name, void* global) ;
    void* GetOrInsertAnyFunctionComdat(const std::string& name, void* function) ;
    void SetInitializer(void* global, void* initializer) ;
    void SetPrivateLinkage(void* global) ;
    void* GetOrInsertFunction(const std::string& name, void* type, bool nothrow) ;
    void* CreateGlobalStringPtr(const std::string& name) ;
    void* CreateGlobalWStringPtr(const std::u16string& name) ;
    void* CreateGlobalUStringPtr(const std::u32string& name) ;
    void* CreateCall(void* callee, const std::vector<void*>& args) ;
    void* CreateCallInst(void* callee, const std::vector<void*>& args, const std::vector<void*>& bundles, const soul::ast::SourcePos& sourcePos) ;
    void* CreateCallInstToBasicBlock(void* callee, const std::vector<void*>& args, const std::vector<void*>& bundles, void* basicBlock, const soul::ast::SourcePos& sourcePos) ;
    void* CreateInvoke(void* callee, void* normalBlock, void* unwindBlock, const std::vector<void*>& args) ;
    void* CreateInvokeInst(void* callee, void* normalBlock, void* unwindBlock, const std::vector<void*>& args, const std::vector<void*>& bundles, const soul::ast::SourcePos& sourcePos) ;
    void* GetObjectFromClassDelegate(void* classDelegatePtr) ;
    void* GetDelegateFromClassDelegate(void* classDelegatePtr) ;
    void* GetObjectFromInterface(void* interfaceTypePtr) ;
    void* GetObjectPtrFromInterface(void* interfaceTypePtr) ;
    void* GetImtPtrPtrFromInterface(void* interfaceTypePtr) ;
    void* GetImtPtrFromInterface(void* interfaceTypePtr) ;
    void* GetInterfaceMethod(void* imtPtr, int32_t methodIndex, void* interfaceMethodType) ;
    void* GetVmtPtr(void* thisPtr, int32_t vmtPtrIndex, void* vmtPtrType) ;
    void* GetMethodPtr(void* vmtPtr, int32_t vmtIndex) ;
    void* GetImtArray(void* vmtObjectPtr, int32_t imtsVmtIndexOffset) ;
    void* GetImt(void* imtArray, int32_t interfaceIndex) ;
    void* GetMemberVariablePtr(void* classPtr, int32_t memberVariableLayoutIndex) ;
    void* SizeOf(void* ptrType) ;
    void* GetClassIdPtr(void* vmtPtr, int32_t classIdVmtIndexOffset) ;
    void* GetClassName(void* vmtPtr, int32_t classNameVmtIndexOffset) ;
    void* ComputeAddress(void* ptr, void* index) ;
    void* CreatePtrDiff(void* left, void* right) ;
    uint32_t GetPrivateFlag() ;
    uint32_t GetProtectedFlag() ;
    uint32_t GetPublicFlag() ;
    uint32_t GetNoFlags() ;
    void* DIBuilder() ;
    void SetCurrentDIBuilder(void* diBuilder_) ;
    void* CreateModule(const std::string& moduleName) ;
    void DestroyModule(void* module) ;
    void SetModule(void* module_) ;
    void SetTargetTriple(const std::string& targetTriple) ;
    void SetDataLayout(void* dataLayout_) ;
    void SetSourceFileName(const std::string& sourceFileName) ;
    void SetDICompileUnit(void* diCompileUnit_) ;
    void SetDIFile(void* diFile_) ;
    void SaveObjectPointer(void* objectPointer_) ;
    void SetObjectPointer(void* objectPointer_) ;
    void* GetObjectPointer() ;
    void SetFunction(void* function_, int32_t fileIndex, const util::uuid& sourceModuleId, const util::uuid& functionId) ;
    void SetFunctionName(const std::string& functionName) ;
    void BeginScope() ;
    void EndScope() ;
    int16_t GetCurrentScopeId() const ;
    void SetCurrentScopeId(int16_t scopeId) ;
    int32_t AddControlFlowGraphNode() ;
    void SetCurrentControlFlowGraphNodeId(int32_t controlFlowGraphNodeId) ;
    void AddControlFlowGraphEdge(int32_t startNodeId, int32_t endNodeId) ;
    void AddLocalVariable(const std::string& localVariableName, const util::uuid& typeId, void* irObject) ;
    void BeginInstructionFlag(int16_t flag) ;
    void EndInstructionFlag(int16_t flag) ;
    void* CurrentBasicBlock() const ;
    void SetCurrentBasicBlock(void* currentBasicBlock_) ;
    void SetInPrologue(bool inPrologue_) ;
    void PushScope(void* scope) ;
    void PopScope() ;
    void* CurrentScope() ;
    void StartDebugInfo(const std::string& sourceFilePath, const std::string& compilerVersion, bool optimized) ;
    void FinalizeDebugInfo() ;
    void EndDebugInfo() ;
    void* CreateDebugInfoForNamespace(void* scope, const std::string& name) ;
    void EmitIrText(const std::string& filePath) ;
    void Compile(const std::string& objectFilePath) ;
    void VerifyModule() ;
    void ResetCurrentDebugLocation() ;
    void* GetDebugInfoForFile(const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId) ;
    void ReplaceForwardDeclarations();
    void* GetIrObject(void* symbol) const ;
    void SetIrObject(void* symbol, void* irObject) ;
    void* GetFunctionIrType(void* symbol) const ;
    void SetFunctionIrType(void* symbol, void* irType) ;
    bool IsVmtObjectCreated(void* symbol) const ;
    void SetVmtObjectCreated(void* symbol) ;
    bool IsStaticObjectCreated(void* symbol) const ;
    void SetStaticObjectCreated(void* symbol) ;
    void* GetStaticObjectType(void* symbol) const ;
    void SetStaticObjectType(void* symbol, void* type) ;
    void* GetVmtObjectType(void* symbol) const ;
    void SetVmtObjectType(void* symbol, void* vmtObjectType) ;
    std::string GetStaticObjectName(void* symbol) const ;
    void SetStaticObjectName(void* symbol, const std::string& staticObjectName) ;
    std::string GetVmtObjectName(void* symbol) const ;
    void SetVmtObjectName(void* symbol, const std::string& vmtObjectName) ;
    std::string GetImtArrayObjectName(void* symbol) const ;
    void SetImtArrayObjectName(void* symbol, const std::string& imtArrayObjectName) ;
    uint64_t GetClassTypeSizeInBits(void* classIrType) ;
    uint64_t GetClassTypeAlignmentInBits(void* classIrType) ;
    void AddInlineFunctionAttribute(void* function) ;
    void SetFunctionLinkage(void* function, bool setInline) ;
    void SetFunctionLinkageToLinkOnceODRLinkage(void* function) ;
    void SetFunctionCallConventionToStdCall(void* function) ;
    void* CreateSubroutineType(const std::vector<void*>& elementTypes) ;
    unsigned GetPureVirtualVirtuality() ;
    unsigned GetVirtualVirtuality() ;
    unsigned GetFunctionFlags(bool isStatic, unsigned accessFlags, bool isExplicit) ;
    void* CreateDIMethod(const std::string& name, const std::string& mangledName, const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId,
        void* subroutineType, unsigned virtuality, unsigned vtableIndex, void* vtableHolder, unsigned flags) ;
    void* CreateDIFunction(const std::string& name, const std::string& mangledName, const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId,
        void* subroutineType, unsigned flags) ;
    void SetDISubprogram(void* function, void* subprogram) ;
    void* CreateAlloca(void* irType) ;
    void* CreateDIParameterVariable(const std::string& name, int index, const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId, void* irType, void* allocaInst) ;
    void* CreateDIAutoVariable(const std::string& name, const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId, void* irType, void* allocaInst) ;
    void* GetFunctionArgument(void* function, int argumentIndex) ;
    void SetDebugLoc(void* callInst) ;
    void* CreateRet(void* value) ;
    void* CreateRetVoid() ;
    void SetPersonalityFunction(void* function, void* personalityFunction) ;
    void AddNoUnwindAttribute(void* function) ;
    void AddUWTableAttribute(void* function) ;
    void* CreateLexicalBlock(const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId) ;
    void* CreateSwitch(void* condition, void* defaultDest, unsigned numCases) ;
    void AddCase(void* switchInst, void* caseValue, void* caseDest) ;
    void* CreateCleanupPadWithParent(void* parentPad, const std::vector<void*>& args) ;
    void* CreateCleanupPad(const std::vector<void*>& args) ;
    void* CreateCleanupRet(void* cleanupPad, void* unwindTarget) ;
    void* CreateCatchRet(void* catchPad, void* returnTarget) ;
    void* CreateCatchSwitch(void* unwindBlock) ;
    void* CreateCatchSwitchWithParent(void* parentPad, void* unwindBlock) ;
    void AddHandlerToCatchSwitch(void* catchSwitch, void* target) ;
    void* CreateCatchPad(void* parentPad, const std::vector<void*>& args) ;
    void SetLineNumber(int32_t lineNumber) ;
    void* HandlerBlock() ;
    void* CleanupBlock() ;
    bool NewCleanupNeeded() ;
    void CreateCleanup() ;
    std::string GetSourceFilePath(const soul::ast::SourcePos& sourcePos, const util::uuid& moduleId);
    cmajor::ir::Pad* CurrentPad() ;
    void* CreateClassDIType(void* classPtr) ;
    void* GetGlobalStringPtr(int stringId) ;
    void* GetGlobalWStringConstant(int stringId) ;
    void* GetGlobalUStringConstant(int stringId) ;
    void* GetGlobalUuidConstant(int uuidId) ;
    void* GenerateTrap(const std::vector<void*>& args) ;
    void SetCompileUnitId(const std::string& compileUnitId_) ;
    void* GetClsIdValue(const std::string& typeId) ;
    void* CreateMDBool(bool value) ;
    void* CreateMDLong(int64_t value) ;
    void* CreateMDString(const std::string& value) ;
    void* CreateMDStructRef(int id) ;
    void* CreateMDStruct() ;
    void* CreateMDBasicBlockRef(void* bb) ;
    int GetMDStructId(void* mdStruct) ;
    void SetCurrentSourcePos(int32_t lineNumber, int16_t scol, int16_t ecol) ;
    void AddMDItem(void* mdStruct, const std::string& fieldName, void* mdItem) ;
    void SetFunctionMdId(void* function, int mdId) ;
    void* GetMDStructRefForSourceFile(const std::string& sourceFileName) ;
    void SetMetadataRef(void* inst, void* mdStructRef) ;
    void FinalizeFunction(void* function, bool hasCleanup) ;
    int Install(const std::string& str) ;
    int Install(const std::u16string& str) ;
    int Install(const std::u32string& str) ;
    void* CreateLandingPad(void* lpType) ;
    void SetLandindPadAsCleanup(void* landingPad) ;
    void MoveAllocaIntoBasicBlock(void* allocaInst, void* lastAlloca, void* basicBlock) ;
    void AddClauseToLangdingPad(void* landingPad, void* exceptionTypeId) ;
    void* CreateExtractValue(void* aggregate, const std::vector<unsigned int>& indeces) ;
    void* CreateInsertValue(void* aggregate, void* value, const std::vector<unsigned int>& indeces) ;
    void* CreateUndefValue(void* type) ;
    void CreateResume(void* exception) ;
    void DebugPrintDebugInfo(const std::string& filePath) ;
    void BeginSubstituteLineNumber(int32_t lineNumber) ;
    void EndSubstituteLineNumber() ;
    void SetBoundCompileUnit(void* boundCompileUnit_) ;
    void* GetBoundCompileUnit() const ;
private:
    LLvmEmitterImpl* impl;
    cmajor::ir::EmittingDelegate* emittingDelegate;
};

} // llvm_inc

#endif

